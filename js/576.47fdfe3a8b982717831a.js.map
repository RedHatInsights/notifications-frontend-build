{"version":3,"sources":["webpack://notifications-frontend/./src/app/App.scss","webpack://notifications-frontend/./src/components/Notifications/Table.scss","webpack://notifications-frontend/./src/app/App.scss?955f","webpack://notifications-frontend/./src/components/Notifications/Table.scss?bdaa","webpack://notifications-frontend/./src/config/Config.ts","webpack://notifications-frontend/./src/properties/DefinedMessages.ts","webpack://notifications-frontend/./src/types/Integration.ts","webpack://notifications-frontend/./src/properties/Messages.ts","webpack://notifications-frontend/./src/pages/Error/Page.tsx","webpack://notifications-frontend/./src/app/AppContext.tsx","webpack://notifications-frontend/./src/utils/getOuiaProps.ts","webpack://notifications-frontend/./src/components/Integrations/Table/ConnectionAttempt.tsx","webpack://notifications-frontend/./src/components/Integrations/Table/ConnectionAlert.tsx","webpack://notifications-frontend/./src/components/Integrations/Table/ConnectionDegraded.tsx","webpack://notifications-frontend/./src/components/Integrations/Table/ConnectionFailed.tsx","webpack://notifications-frontend/./src/components/Integrations/Table/ExpandedContent.tsx","webpack://notifications-frontend/./src/components/Integrations/Table.tsx","webpack://notifications-frontend/./src/hooks/useTableExportConfig.ts","webpack://notifications-frontend/./src/types/Environments.ts","webpack://notifications-frontend/./src/components/Integrations/Filters.ts","webpack://notifications-frontend/./src/components/Integrations/Toolbar.tsx","webpack://notifications-frontend/./src/components/Icons/EnabledIntegrationIcon.tsx","webpack://notifications-frontend/./src/components/Icons/DisabledIntegrationIcon.tsx","webpack://notifications-frontend/./src/generated/OpenapiIntegrations.ts","webpack://notifications-frontend/./src/types/adapters/IntegrationAdapter.ts","webpack://notifications-frontend/./src/services/useListIntegrations.ts","webpack://notifications-frontend/./src/utils/exporters/Integration/Csv.ts","webpack://notifications-frontend/./src/utils/exporters/Integration/Json.ts","webpack://notifications-frontend/./src/components/Integrations/AddNotificationBody.tsx","webpack://notifications-frontend/./src/schemas/Integrations/Integration.ts","webpack://notifications-frontend/./src/components/Integrations/Form/IntegrationTypeHttpForm.tsx","webpack://notifications-frontend/./src/components/Integrations/Form/IntegrationTypeForm.tsx","webpack://notifications-frontend/./src/components/Integrations/Form.tsx","webpack://notifications-frontend/./src/components/Integrations/SaveModal.tsx","webpack://notifications-frontend/./src/services/useSaveIntegration.ts","webpack://notifications-frontend/./src/services/useSwitchIntegrationEnabledStatus.ts","webpack://notifications-frontend/./src/store/selectors/SavedNotificationScopeSelector.ts","webpack://notifications-frontend/./src/pages/Integrations/Create/CreatePage.tsx","webpack://notifications-frontend/./src/components/Integrations/DeleteModal.tsx","webpack://notifications-frontend/./src/generated/OpenapiNotifications.ts","webpack://notifications-frontend/./src/types/Notification.ts","webpack://notifications-frontend/./src/types/adapters/NotificationAdapter.ts","webpack://notifications-frontend/./src/services/Notifications/GetAffectedNotificationsByEndpoint.ts","webpack://notifications-frontend/./src/services/useDeleteIntegration.ts","webpack://notifications-frontend/./src/pages/Integrations/Delete/DeleteModal.tsx","webpack://notifications-frontend/./src/pages/Integrations/List/useDeleteModalReducer.ts","webpack://notifications-frontend/./src/pages/Integrations/List/useFormModalReducer.ts","webpack://notifications-frontend/./src/pages/Integrations/List/useIntegrationFilter.ts","webpack://notifications-frontend/./src/services/useListIntegrationHistory.ts","webpack://notifications-frontend/./src/pages/Integrations/List/useIntegrationRows.ts","webpack://notifications-frontend/./src/pages/Integrations/List/Page.tsx","webpack://notifications-frontend/./src/components/Icons/WebhookIcon.svg","webpack://notifications-frontend/./src/components/Icons/WebhookIcon.tsx","webpack://notifications-frontend/./src/components/Notifications/ActionComponent.tsx","webpack://notifications-frontend/./src/components/Notifications/Recipient.tsx","webpack://notifications-frontend/./src/components/Notifications/DefaultBehavior.tsx","webpack://notifications-frontend/./src/components/Notifications/Types.ts","webpack://notifications-frontend/./src/components/Notifications/Table.tsx","webpack://notifications-frontend/./src/components/Notifications/Filter.ts","webpack://notifications-frontend/./src/components/Notifications/Table/GroupBy.tsx","webpack://notifications-frontend/./src/components/Notifications/Toolbar.tsx","webpack://notifications-frontend/./src/services/useDefaultNotificationBehavior.ts","webpack://notifications-frontend/./src/services/useListNotifications.ts","webpack://notifications-frontend/./src/schemas/Integrations/Notifications.ts","webpack://notifications-frontend/./src/components/Notifications/Form/ActionOption.ts","webpack://notifications-frontend/./src/components/Notifications/Form/ActionTypeahead.tsx","webpack://notifications-frontend/./src/components/Notifications/Form/RecipientOption.ts","webpack://notifications-frontend/./src/components/Notifications/Form/useRecipientOptionMemo.tsx","webpack://notifications-frontend/./src/components/Notifications/Form/useTypeaheadReducer.ts","webpack://notifications-frontend/./src/components/Notifications/Form/IntegrationRecipientTypeahead.tsx","webpack://notifications-frontend/./src/components/Notifications/Form/RecipientTypeahead.tsx","webpack://notifications-frontend/./src/components/Notifications/Form/EditableActionTable.tsx","webpack://notifications-frontend/./src/components/Notifications/Form.tsx","webpack://notifications-frontend/./src/components/Notifications/SaveModal.tsx","webpack://notifications-frontend/./src/services/Notifications/GetDefaultActionId.ts","webpack://notifications-frontend/./src/services/useGetNotificationActions.ts","webpack://notifications-frontend/./src/pages/Notifications/Form/EditNotificationPage.tsx","webpack://notifications-frontend/./src/services/useRemoveActionFromNotification.ts","webpack://notifications-frontend/./src/services/useAddActionToNotification.ts","webpack://notifications-frontend/./src/services/useRemoveActionFromDN.ts","webpack://notifications-frontend/./src/services/useAddActionToDN.ts","webpack://notifications-frontend/./src/pages/Notifications/List/useFormModalReducer.ts","webpack://notifications-frontend/./src/pages/Notifications/List/useNotificationRows.ts","webpack://notifications-frontend/./src/pages/Notifications/List/Page.tsx","webpack://notifications-frontend/./src/Routes.tsx","webpack://notifications-frontend/./src/hooks/usePage.ts","webpack://notifications-frontend/./src/utils/exporters/Integration/Factory.ts","webpack://notifications-frontend/./src/pages/Integrations/List/useActionResolver.ts","webpack://notifications-frontend/./src/pages/Notifications/List/useNotificationFilter.ts","webpack://notifications-frontend/./src/pages/Notifications/List/useNotificationPage.ts","webpack://notifications-frontend/./src/services/Notifications/GetApplications.ts","webpack://notifications-frontend/./src/app/App.tsx","webpack://notifications-frontend/./src/app/useApp.ts","webpack://notifications-frontend/./src/store/reducers/SavedNotificationScopeReducer.ts","webpack://notifications-frontend/./src/store/Store.ts","webpack://notifications-frontend/./src/store/actions/SavedNotificationScopeAction.ts","webpack://notifications-frontend/./src/store/types/SavedNotificationScopeTypes.ts","webpack://notifications-frontend/./src/utils/Basename.ts"],"names":["___CSS_LOADER_EXPORT___","i","push","module","id","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose","subAppId","title","notifications","description","defaultMessage","integrations","integrationsEmptyStateTitle","integrationsTableEmptyStateBody","IntegrationType","UserIntegrationType","cache","locale","navigator","language","slice","intl","onError","console","log","intlSettings","Messages","appName","formatMessage","appNameIntegrations","pages","list","add","edit","viewHistory","error","emptyState","content","showDetails","actions","goToIndex","components","toolbar","addIntegration","editIntegration","table","columns","name","type","lastConnectionAttempt","enabled","enableError","disableError","integrationType","WEBHOOK","types","EMAIL_SUBSCRIPTION","DRAWER","INTEGRATION","event","action","recipient","common","choose","ErrorPage","props","goToListPage","history","goBack","ErrorBoundaryPage","actionLabel","pageHeader","children","AppContext","rbac","canReadIntegrationsEndpoints","canReadNotifications","canWriteIntegrationsEndpoints","canWriteNotifications","applications","getOuiaProps","getOuiaPropsFactory","ConnectionAttemptType","dateClassName","style","marginLeft","global_spacer_xs","ConnectionAttempt","formattedDate","format","toUtc","date","SUCCESS","color","global_success_color_100","FAILED","global_danger_color_100","getIcon","className","connectionAttemptClassName","global_spacer_sm","marginTopClassName","marginTop","ConnectionAlert","Alert","variant","alertVariant","isInline","attempts","map","attempt","index","key","isSuccess","ConnectionDegraded","failures","filter","length","AlertVariant","ConnectionFailed","titleClass","fontWeight","ExpandedContent","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","integration","url","sslVerificationEnabled","undefined","secretToken","LastConnectionAttemptStatus","connectionAlertClassName","paddingBottom","global_spacer_md","expandedContentClassName","paddingLeft","isEnabledLoadingClassName","smallMarginLeft","degradedClassName","global_warning_color_200","fontSize","getLastConnectionAttemptStatus","UNKNOWN","ERROR","WARNING","getConnectionAlert","status","LastConnectionAttemptSuccess","LastConnectionAttemptError","getConnectionAttemptCell","isLoading","Spinner","size","Text","cellFormatters","expandable","transforms","rowExpandedContentClassName","rowWrapperClassName","tableClassName","noneStyle","important","borderStyle","noBorderBottom","borderBottom","borderTop","buildClassNames","RowWrapper","trRef","rowProps","row","rest","ref","isExpanded","hidden","IntegrationsTable","useIntl","onCollapseHandler","_event","_index","isOpen","data","onCollapse","findIndex","rows","onEnable","reduce","idx","selected","isSelected","cells","lastConnectionAttempts","isConnectionAttemptLoading","isEnabledLoading","Switch","isChecked","isEnabled","onChange","isDisabled","ouiaId","fullWidth","parent","colSpan","actionsResolverCallback","rowData","actionResolver","integrationIndex","integrationRow","ouiaSafe","SkeletonTable","rowSize","loadingCount","paddingColumnSize","sortBy","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","EmptyStateBody","Table","rowWrapper","TableHeader","TableBody","useTableExportConfig","onExport","extraItems","onSelect","exporterTypeFromString","stagingBetaAndProdBetaEnvironment","IntegrationFilterColumn","enabledTextClassName","filterMetadata","NAME","label","placeholder","ENABLED","options","exclusive","items","value","IntegrationsToolbar","primaryToolbarFilterConfig","usePrimaryToolbarFilterConfig","filters","setFilters","clearFilters","actionsConfig","onClick","onAddIntegration","kebabToggleProps","exportConfig","filterConfig","useInsightsEnvironmentFlag","getInsights","useCallback","activeFiltersConfig","pageChanged","page","inner","perPageChanged","perPage","topPaginationProps","itemCount","count","isCompact","PaginationVariant","onSetPage","onFirstClick","onPreviousClick","onNextClick","onLastClick","onPageInput","onPerPageSelect","bottomPaginationProps","PrimaryToolbar","pagination","Schemas","Operations","zodSchemaAction","accountId","optional","nullable","account_id","application","eventType","event_type","payload","zodSchemaMap","schema","zodSchemaSchema","specificData","zodSchemaSpecificData","timestamp","nonstrict","zodSchemaApplication","bundle_id","zodSchemaUUID","created","display_name","eventTypes","zodSchemaSetEventType","updated","zodSchemaBasicAuthentication","password","username","zodSchemaConcurrentMapStringJsonNode","zodSchemaJsonNode","zodSchemaConversionObject","convertedType","logicalTypeName","recommendedSchema","zodSchemaEmailSubscriptionAttributes","zodSchemaEndpoint","properties","zodSchemaWebhookAttributes","zodSchemaEndpointType","zodSchemaEntityTag","weak","zodSchemaEventType","endpoints","zodSchemaSetEndpoint","zodSchemaFamily","zodSchemaFastReaderBuilder","classPropEnabled","zodSchemaGenericData","keyClassEnabled","readerCache","zodSchemaMapSchemaMapSchemaRecordReader","zodSchemaField","aliases","zodSchemaSetString","defaultValue","doc","objectProps","zodSchemaMapStringObject","order","zodSchemaOrder","position","int","reserved","classLoader","conversions","zodSchemaMapStringConversionObject","conversionsByClass","zodSchemaMapClassObjectMapStringConversionObject","defaultValueCache","zodSchemaMapFieldObject","fastReaderBuilder","fastReaderEnabled","zodSchemaHttpType","array","bigDecimal","bigInteger","binary","boolean","containerNode","double","empty","float","floatingPointNumber","integralNumber","long","missingNode","nodeType","zodSchemaJsonNodeType","null","number","object","pojo","short","textual","valueNode","zodSchemaJsonObject","zodSchemaLink","params","zodSchemaMapStringString","rel","rels","zodSchemaListString","uri","uriBuilder","zodSchemaUriBuilder","zodSchemaListEndpoint","zodSchemaListField","zodSchemaListSchema","zodSchemaLocale","country","displayCountry","displayLanguage","displayName","displayScript","displayVariant","extensionKeys","zodSchemaSetCharacter","iSO3Country","iSO3Language","script","unicodeLocaleAttributes","unicodeLocaleKeys","zodSchemaLogicalType","zodSchemaMapSchemaRecordReader","zodSchemaMapStringClass","zodSchemaMapStringNewCookie","zodSchemaNewCookie","zodSchemaMapTypeSchema","zodSchemaMediaType","parameters","subtype","wildcardSubtype","wildcardType","zodSchemaMeta","zodSchemaMultivaluedMapStringObject","zodSchemaMultivaluedMapStringString","comment","domain","expiry","httpOnly","maxAge","path","secure","version","elementType","enumDefault","enumSymbols","fields","fixedSize","fullName","hashCode","logicalType","namespace","zodSchemaType","union","valueType","zodSchemaSetApplication","zodSchemaSetClass","zodSchemaSetLink","classCache","customCoders","schemaClassCache","schemaTypeCache","stringableClasses","useCustomCoderFlag","zodSchemaStatusType","family","reasonPhrase","statusCode","basic_authentication","disable_ssl_verification","method","secret_token","Action","Application","ApplicationFacet","Attributes","BasicAuthentication","Bundle","ConcurrentMapStringJsonNode","ConversionObject","EmailSubscriptionAttributes","Endpoint","EndpointPage","links","meta","EndpointType","EntityTag","EventType","Family","FastReaderBuilder","Field","GenericData","HttpType","JsonNode","JsonNodeType","JsonObject","Link","ListEndpoint","ListField","ListSchema","ListString","Locale","LogicalType","Map","MapClassObjectMapStringConversionObject","MapFieldObject","MapSchemaMapSchemaRecordReader","MapSchemaRecordReader","MapStringClass","MapStringConversionObject","MapStringNewCookie","MapStringObject","MapStringString","MapTypeSchema","MediaType","Meta","MultivaluedMapStringObject","MultivaluedMapStringString","NewCookie","Notification","endpoint","tenant","NotificationHistory","details","endpointId","eventId","invocationResult","invocationTime","Order","Response","allowedMethods","cookies","entity","entityTag","headers","lastModified","location","mediaType","metadata","statusInfo","stringHeaders","Schema","SetApplication","SetCharacter","SetClass","SetEndpoint","SetEventType","SetLink","SetString","SetUUID","SpecificData","StatusType","Type","UUID","UriBuilder","WebhookAttributes","EndpointServiceGetEndpoints","EndpointServiceCreateEndpoint","EndpointServiceSubscribeDailyEmail","EndpointServiceUnsubscribeDailyEmail","EndpointServiceSubscribeInstantEmail","EndpointServiceUnsubscribeInstantEmail","EndpointServiceGetEndpoint","EndpointServiceUpdateEndpoint","EndpointServiceDeleteEndpoint","EndpointServiceEnableEndpoint","EndpointServiceDisableEndpoint","EndpointServiceGetEndpointHistory","EndpointServiceGetDetailedEndpointHistory","actionCreator","query","active","limit","offset","pageNumber","sort_by","actionBuilder","queryParams","config","rules","ValidateRule","build","body","Response200","replace","toString","Response204","historyId","pageSize","getIntegrationType","Enum","webhook","email_subscription","default","Error","getEndpointType","toIntegration","serverIntegration","integrationBase","GET","toIntegrations","serverIntegrations","filterOutDefaultAction","toIntegrationProperties","integrationHttp","toServerIntegrationRequest","serverNotifications","e","enum","listIntegrationsActionCreator","pager","Page","toQuery","filterType","filterActive","listIntegrationIntegrationDecoder","validationResponseTransformer","validatedResponse","Object","values","includes","errors","IntegrationExporterCsv","ExporterCsv","IntegrationExporterJson","ExporterJson","buttonClassname","AddNotificationBody","text","buttonText","Button","ButtonVariant","switchEnabled","IntegrationSchemaBase","required","max","trim","oneOf","IntegrationHttpSchema","concat","shape","notRequired","POST","IntegrationSchema","IntegrationTypeHttpForm","FormTextInput","isRequired","ouiaIdConcat","Checkbox","IntegrationTypeForm","FormSelectOption","IntegrationsForm","useFormikContext","Form","maxLength","FormSelect","InternalIntegrationSaveModal","pageTitle","isEdit","handleSubmit","isValid","isSubmitting","onSaveClicked","SaveModal","isSaving","onSave","onClose","actionButtonDisabled","IntegrationSaveModal","initialIntegration","cast","onSubmit","transformedIntegration","Formik","initialValues","validationSchema","validateOnMount","createIntegrationActionCreator","saveIntegrationActionCreator","decoder","response","switchIntegrationEnabledStatusActionCreator","useSwitchIntegrationEnabledStatus","useMutation","savedNotificationScopeSelector","state","savedNotificationScope","savedNotificationScopeEqualFn","left","right","AddNotificationBodyContainer","useSelector","dispatch","useDispatch","switchIntegrationEnabledStatus","mutate","SavedNotificationScopeAction","then","CreatePage","saveIntegrationMutation","useTransformQueryResponse","hasError","setError","onSaveIntegration","addSuccessNotification","loading","IntegrationDeleteModal","onDeleteInternal","onDelete","Skeleton","eventText","ExpandableSection","toggleText","List","notification","ListItem","applicationDisplayName","eventTypeDisplayName","DeleteModal","isDeleting","titleIconVariant","NotificationType","NotificationServiceGetEndpointsForDefaults","NotificationServiceAddEndpointToDefaults","NotificationServiceDeleteEndpointFromDefaults","NotificationServiceGetEventTypes","NotificationServiceGetEventTypesAffectedByEndpointId","NotificationServiceGetLinkedEndpoints","NotificationServiceLinkEndpointToEventType","NotificationServiceUnlinkEndpointFromEventType","NotificationServiceGetApplicationsFacets","NotificationServiceGetNotificationUpdates","NotificationServiceMarkRead","applicationIds","eventTypeId","bundleName","_toAction","serverAction","userIntegration","toUserIntegration","integrationId","usesDefault","toNotification","serverNotification","JSON","stringify","toActions","useDefault","toAction","toNotifications","serverActions","notificationsForEndpointActionCreator","defaultNotificationsDecoder","deleteIntegrationActionCreator","IntegrationDeleteModalPage","deleteIntegrationMutation","getNotificationsQuery","useParameterizedQuery","deleteIntegration","UseDeleteModalReducerActionType","noneState","reducer","DELETE","NONE","useDeleteModalReducer","useReducer","UseFormModalReducerActionType","makeNoneAction","makeDeleteAction","template","isCopy","CREATE","EDIT","useUrlStateName","useUrlStateString","useUrlStateEnabled","_defaultValue","useUrlStateMultipleOptions","useStateFactory","column","notificationAppStateSelector","notificationAppStateEqualFn","integrationFilterBuilder","Filter","toLocaleLowerCase","and","Operator","verticalAlign","width","height","src","marginLeftClassName","grayFontClassName","ActionTypeToIcon","actionType","ActionComponentWrapper","ActionComponent","isDefault","disabledLabelClassName","Recipient","Tooltip","Label","hasOutline","cssRaw","c_skeleton_BackgroundColor","global_palette_black_300","contentClassName","backgroundColor","paddingTop","paddingRight","display","$nest","global_FontSize_sm","titleClassName","DefaultBehavior","onEdit","defaultBehavior","GroupByEnum","pfBorderBottomClassName","cellPaddingBottom","actionCellStyle","cellPaddingBottomStyle","cellPaddingTop","cellPaddingTopStyle","noExpandableBorderClassName","borderLeft","applicationGroupClassName","EventCell","rowClassName","toTableRowsGroupedByNone","rowSpan","Math","firstAction","joinClasses","loadingActionStatus","classNames","cssStyle","NotificationsTable","grouped","applicationGroups","applicationGroup","None","n","NotificationFilterColumn","GroupBy","DropdownItem","setOpen","groupBy","target","dataset","onToggle","shouldBeOpen","pascalCase","Dropdown","toggle","DropdownToggle","toggleIndicator","dropdownItems","NotificationsToolbar","useMemo","appFilterItems","appFilterOptions","APPLICATION","ACTION","clearFilter","exportConfigInternal","dedicatedAction","onGroupBySelected","defaultNotificationBehaviorCreator","ActionIntegration","min","ActionNotify","WithActions","obj","hasOwnProperty","ActionOption","kind","this","notificationType","selectOption","actionName","ActionTypeahead","prev","actionSelected","onSelected","selectedOption","hideNonWebhooks","insights","getInsightsEnvironment","Select","SelectVariant","typeAheadAriaLabel","selections","menuAppendTo","document","o","SelectOption","RecipientOption","recipientOrIntegration","postfix","mapper","r","useRecipientOptionMemo","show","loadingDefault","isNoResultsOption","defaultValues","loadingFilter","filterValues","ReducerActionType","reducerFunction","SET_FILTER_VALUE","search","lastSearch","LOAD_FILTER_VALUE","USE_DEFAULTS","SET_DEFAULTS","useTypeaheadReducer","setFilterValue","loadFilterValue","setDefaults","useDefaults","IntegrationRecipientTypeahead","dispatchers","getIntegrations","onFilter","selection","sel","integrationSelected","placeholderText","RecipientTypeahead","getRecipients","recipients","s","EditableActionRow","setFieldValue","recipientFieldProps","_","recipientFieldHelpers","useField","recipientSelected","indexOf","setValue","recipientOnClear","onClear","onRemove","EditableActionTable","handleRemove","alignLeftClassName","textAlign","ActionArray","form","addAction","NotificationForm","showActions","FormText","FieldArray","helpers","InternalNotificationSaveModal","ModalVariant","NotificationSaveModal","saved","getDefaultActionIdDecoder","getNotificationActionsByIdAction","hasDefaultNotificationDecoder","getNotificationByIdActionDecoder","toLowerCase","EditNotificationPage","useContext","ClientContext","_search","idMapper","oldActions","oldUseDefault","actionsPromise","newUseDefault","defaultActionId","addDangerNotification","originalIds","newIds","nonUserIntegrationsPromises","Promise","all","catch","every","toDelete","toAdd","arr","val","promises","notificationId","actionId","actionRemoveActionFromNotification","actionAddActionToNotification","EDIT_DEFAULTS","EDIT_NOTIFICATION","toRowsGroupByNone","toRowGroupByApplication","groups","displayInlineClassName","tableTitleClassName","noPaddingTopClassName","emptyArray","pathRoutes","integrationFilter","debounce","useFilters","useIntegrationFilter","pageData","defaultPerPage","filterBuilder","sort","currentPage","setCurrentPage","useState","itemsPerPage","setItemsPerPage","useEffect","changePage","changeItemsPerPage","usePage","integrationsQuery","useQuery","initFetch","exportIntegrationsQuery","integrationRows","setIntegrationRows","prevIntegrationsInput","usePrevious","reduxDispatch","switchStatus","setIntegrationRowByIndex","partialIntegration","prevIntegrations","newIntegrations","setIntegrationRowById","find","clearQueue","forEach","listIntegrationHistoryActionCreator","last5","reverse","Date","_integration","message","useIntegrationRows","modalIsOpenState","dispatchModalIsOpen","deleteModalState","dispatchDeleteModal","onAddIntegrationClicked","exporter","ExporterType","integrationExporterFactory","exportedIntegrations","nextPage","export","now","canWrite","closeFormModal","closeDeleteModal","deleted","PageHeader","PageHeaderTitle","Main","Section","pageCount","defaultNotificationBehavior","notificationsFilter","initialAppOptions","useUrlStateApplication","useUrlStateAction","useNotificationFilter","setGroupBy","groupBySelected","notificationPage","appFilter","appIds","arrayValue","filterOption","useNotificationPage","debouncedFilters","useNotifications","filterApplicationId","listNotificationsActionCreator","notificationRows","setNotificationRows","prevNotificationInput","prevGroupBy","setNotificationRowById","partialNotificationRow","appIndex","notificationIndex","j","findNotificationPath","newApps","newNotifications","_prev","prevRows","useNotificationRows","updateDefaultNotifications","updateNotifications","pageHeaderTitleProps","onEditDefaultAction","onEditNotification","InsightsEnvDetector","onEnvironment","RenderIfFalse","InsightsRoute","Routes","pathRoute","exact","setRbac","getApplications","getApplicationsAction","waitForInsights","chrome","init","appId","getApp","identifyApp","auth","getUser","fetchRBAC","hasPermission","useApp","serviceName","pathname","hasReadPermissions","Provider","NotificationsPortal","NotAuthorized","AppSkeleton","SavedNotificationScopeReducer","getType","createStore","middleware","initStore","resetStore","restoreStore","SavedNotificationScopeKeys","SavedNotificationScopeActions","setIntegration","createAction","SET_INTEGRATION","start","START","finish","FINISH","unset","UNSET","Status","getBaseName","release","pathName","split","shift","getSubApp"],"mappings":"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","file":"js/576.47fdfe3a8b982717831a.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components/index.css\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_1___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_1___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".notifications{}.notifications :root{--ins-color--orange: #ec7a08}.notifications button:focus{outline:none}.notifications .pf-c-wizard__main-body{max-height:100%}.notifications .page__notifications#root{--pf-c-page__main-section--BackgroundColor: var(--pf-global--Color--light-100)}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/App.scss\"],\"names\":[],\"mappings\":\"AAAA,eAAc,CAAd,qBAC0J,4BAAoB,CAD9K,4BACoM,YAAY,CADhN,uCACyO,eAAe,CADxP,yCACmR,8EAA2C\",\"sourcesContent\":[\".notifications{\\n@import url(~@redhat-cloud-services/frontend-components/index.css);@import url(~@redhat-cloud-services/frontend-components-notifications/index.css);:root{--ins-color--orange: #ec7a08}button:focus{outline:none}.pf-c-wizard__main-body{max-height:100%}.page__notifications#root{--pf-c-page__main-section--BackgroundColor: var(--pf-global--Color--light-100)}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".notifications .notification-table .pf-c-table tbody>tr>:first-child::after{--pf-c-table__expandable-row--after--BorderLeftWidth: 0\\n}.notifications .pf-m-grid-md.pf-c-table tbody::after{--pf-c-table--tbody--after--BorderLeftWidth: 0\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Notifications/Table.scss\"],\"names\":[],\"mappings\":\"AAAA,4EAC6D;AAAqD,CADlH,qDAEuC;AAA4C\",\"sourcesContent\":[\".notifications{\\n.notification-table .pf-c-table tbody>tr>:first-child::after{--pf-c-table__expandable-row--after--BorderLeftWidth: 0\\n}.pf-m-grid-md.pf-c-table tbody::after{--pf-c-table--tbody--after--BorderLeftWidth: 0\\n}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../node_modules/sass-loader/dist/cjs.js!./App.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./Table.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./Table.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import { DeepReadonly } from 'ts-essentials';\n\nconst apiVersion = 'v1.0';\nconst apiBaseUrl = `/api/notifications/${apiVersion}`;\n\nexport const withBaseUrl = (path: string) => `${apiBaseUrl}${path}`;\n\nconst Config = {\n    integrations: {\n        subAppId: 'integrations',\n        title: 'Integrations | Settings'\n    },\n    notifications: {\n        subAppId: 'notifications',\n        title: 'Notifications | Settings'\n    },\n    pages: {\n    }\n};\n\nconst ReadonlyConfig: DeepReadonly<typeof Config> = Config;\nexport default ReadonlyConfig;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    notifications: {\n        id: 'notifications',\n        description: 'Application name',\n        defaultMessage: 'Notifications'\n    },\n    integrations: {\n        id: 'integrations',\n        description: 'Application name',\n        defaultMessage: 'Integrations'\n    },\n    integrationsEmptyStateTitle: {\n        id: 'integrationsEmptyStateTitle',\n        description: 'Integrations Empty State title',\n        defaultMessage: 'No integrations'\n    },\n    integrationsTableEmptyStateBody: {\n        id: 'integrationsTableEmptyStateBody',\n        description: 'Integrations Empty State body',\n        defaultMessage: 'Connect to webhooks and external applications.'\n    }\n});\n","import { Schemas } from '../generated/OpenapiIntegrations';\n\nexport enum IntegrationType {\n    WEBHOOK = 'webhook',\n    EMAIL_SUBSCRIPTION = 'email_subscription'\n}\n\n// Integrations that the user can create in the Integrations page\nexport enum UserIntegrationType {\n    WEBHOOK = 'webhook'\n}\n\nexport interface IntegrationBase {\n    id: string;\n    name: string;\n    type: IntegrationType;\n    isEnabled: boolean;\n}\n\nexport interface IntegrationHttp extends IntegrationBase {\n    type: IntegrationType.WEBHOOK;\n    url: string;\n    sslVerificationEnabled: boolean;\n    secretToken?: string;\n    method: Schemas.HttpType;\n}\n\nexport interface IntegrationEmailSubscription extends IntegrationBase {\n    type: IntegrationType.EMAIL_SUBSCRIPTION\n}\n\nexport type Integration = IntegrationHttp | IntegrationEmailSubscription;\n\ntype ToUserIntegration<T extends IntegrationBase, TYPE extends UserIntegrationType[keyof UserIntegrationType]> = Omit<T, 'type'> & {\n    type: TYPE\n};\n\nexport type UserIntegration = ToUserIntegration<IntegrationHttp, UserIntegrationType.WEBHOOK>;\n\ntype NewIntegrationKeys = 'id';\n\nexport type NewIntegrationTemplate<T extends IntegrationBase | UserIntegration> = Omit<T, NewIntegrationKeys> & Partial<Pick<T, NewIntegrationKeys>>;\n\nexport type NewIntegrationBase = NewIntegrationTemplate<IntegrationBase>;\nexport type NewIntegration = NewIntegrationTemplate<Integration>;\nexport type NewUserIntegration = NewIntegrationTemplate<UserIntegration>;\n\nexport type ServerIntegrationRequest = Schemas.Endpoint;\nexport type ServerIntegrationResponse = Schemas.Endpoint;\n\nexport interface IntegrationConnectionAttempt {\n    date: Date;\n    isSuccess: boolean;\n}\n","import { intlHelper } from '@redhat-cloud-services/frontend-components-translations';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport { DeepReadonly } from 'ts-essentials';\n\nimport { IntegrationType } from '../types/Integration';\nimport messages from './DefinedMessages';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\nconst intlSettings = { locale };\n\nconst MutableMessages = {\n    appName: intlHelper(intl.formatMessage(messages.notifications), intlSettings),\n    appNameIntegrations: intlHelper(intl.formatMessage(messages.integrations), intlSettings),\n    pages: {\n        integrations: {\n            list: {\n                title: 'Integrations'\n            },\n            add: {\n                title: 'Add integration'\n            },\n            edit: {\n                title: 'Edit integration'\n            }\n        },\n        notifications: {\n            list: {\n                title: 'Notifications',\n                viewHistory: 'View notification history'\n            }\n        },\n        error: {\n            title: 'Notifications',\n            emptyState: {\n                title: 'Unhandled error',\n                content: 'There was a problem trying to process your request.',\n                showDetails: 'Show details',\n                actions: {\n                    goToIndex: 'Go back'\n                }\n            }\n        }\n    },\n    components: {\n        integrations: {\n            toolbar: {\n                actions: {\n                    addIntegration: 'Add integration',\n                    editIntegration: 'Edit integration'\n                }\n            },\n            table: {\n                title: 'Integrations',\n                columns: {\n                    name: 'Name',\n                    type: 'Type',\n                    lastConnectionAttempt: 'Last connection attempt',\n                    enabled: 'Enabled'\n                }\n            },\n            enableError: {\n                title: 'Unable to enable the Integration',\n                description: 'There was a problem trying to enable the integration: \"{0}\".\\nPlease try again.'\n            },\n            disableError: {\n                title: 'Unable to disable the Integration',\n                description: 'There was a problem trying to disable the integration: \"{0}\".\\nPlease try again.'\n            },\n            integrationType: {\n                [IntegrationType.WEBHOOK]: 'Webhook'\n            }\n        },\n        notifications: {\n            types: {\n                EMAIL_SUBSCRIPTION: 'Send an email',\n                DRAWER: 'Send to notification drawer',\n                INTEGRATION: 'Integration'\n            },\n            toolbar: {\n                actions: {\n\n                }\n            },\n            table: {\n                title: 'Notifications',\n                columns: {\n                    event: 'Event type',\n                    action: 'Action',\n                    recipient: 'Recipient'\n                }\n            }\n        }\n    },\n    common: {\n        choose: 'Please choose'\n    }\n};\n\nexport const Messages: DeepReadonly<typeof MutableMessages> = MutableMessages;\n","import { ErrorBoundaryPage } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { Messages } from '../../properties/Messages';\n\ntype ErrorPageProps = RouteComponentProps<any>;\n\nexport const ErrorPageInternal: React.FunctionComponent<ErrorPageProps> = (props) => {\n    const goToListPage = React.useCallback(() => {\n        props.history.goBack();\n    }, [ props.history ]);\n\n    return (\n        <ErrorBoundaryPage\n            action={ goToListPage }\n            actionLabel={ Messages.pages.error.emptyState.actions.goToIndex }\n            pageHeader={ Messages.pages.error.title }\n            title={ Messages.pages.error.emptyState.title }\n            description={ Messages.pages.error.emptyState.content }\n        >\n            { props.children }\n        </ErrorBoundaryPage>\n    );\n};\n\nexport const ErrorPage = withRouter(ErrorPageInternal);\n","import * as React from 'react';\nimport { useContext } from 'react';\n\nimport { Schemas } from '../generated/OpenapiIntegrations';\n\nexport interface AppContext {\n    rbac: {\n        canWriteIntegrationsEndpoints: boolean;\n        canReadIntegrationsEndpoints: boolean;\n        canWriteNotifications: boolean;\n        canReadNotifications: boolean;\n    };\n    applications: Array<Schemas.ApplicationFacet>\n}\n\nexport const AppContext = React.createContext<AppContext>({\n    rbac: {\n        canReadIntegrationsEndpoints: false,\n        canReadNotifications: false,\n        canWriteIntegrationsEndpoints: false,\n        canWriteNotifications: false\n    },\n    applications: []\n});\n\nexport const useAppContext = () => useContext(AppContext);\n","import { getOuiaPropsFactory } from '@redhat-cloud-services/insights-common-typescript';\n\nexport const getOuiaProps = getOuiaPropsFactory('Notifications');\n","import { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { global_danger_color_100, global_spacer_xs, global_success_color_100 } from '@patternfly/react-tokens';\nimport { toUtc } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nexport interface ConnectionAttemptProps {\n    type: ConnectionAttemptType;\n    date: Date;\n}\n\nexport enum ConnectionAttemptType {\n    SUCCESS,\n    FAILED\n}\n\nconst dateClassName = style({\n    marginLeft: global_spacer_xs.var\n});\n\nconst dateFormatString = 'MMM d, HH:mm:ss';\n\nconst getIcon = (type: ConnectionAttemptType) => {\n    switch (type) {\n        case ConnectionAttemptType.SUCCESS:\n            return <CheckCircleIcon color={ global_success_color_100.value } />;\n        case ConnectionAttemptType.FAILED:\n            return <ExclamationCircleIcon color={ global_danger_color_100.value } />;\n        default:\n            assertNever(type);\n    }\n};\n\nexport const ConnectionAttempt: React.FunctionComponent<ConnectionAttemptProps> = (props) => {\n    const formattedDate = format(toUtc(props.date), dateFormatString);\n    return (\n        <>\n            { getIcon(props.type) } <span className={ dateClassName }> { formattedDate } UTC </span>\n        </>\n    );\n};\n","import { Alert, AlertVariant } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ConnectionAttempt, ConnectionAttemptType } from './ConnectionAttempt';\n\ninterface ConnectionAlertProps extends OuiaComponentProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n    alertVariant: AlertVariant;\n    description: string;\n    title: string;\n}\n\nconst connectionAttemptClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst marginTopClassName = style({\n    marginTop: global_spacer_sm.var\n});\n\nexport const ConnectionAlert: React.FunctionComponent<ConnectionAlertProps> = (props) => {\n    return (\n        <div { ...getOuiaProps('ConnectionAlert', props) }>\n            <Alert title={ props.title } variant={ props.alertVariant } isInline>\n                <p className={ marginTopClassName }>\n                    { props.description }\n                </p>\n                <p className={ marginTopClassName }>\n                    Last attempts: { props.attempts.map(\n                        (attempt, index) =>\n                            <span key={ index } className={ connectionAttemptClassName }>\n                                <ConnectionAttempt\n                                    type={ attempt.isSuccess ? ConnectionAttemptType.SUCCESS : ConnectionAttemptType.FAILED }\n                                    date={ attempt.date }\n                                />\n                            </span>\n                    ) }\n                </p>\n            </Alert>\n        </div>\n    );\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { ConnectionAlert } from './ConnectionAlert';\n\ninterface ConnectionDegradedProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n}\n\nexport const ConnectionDegraded: React.FunctionComponent<ConnectionDegradedProps> = (props) => {\n    const description = React.useMemo(() => {\n        const failures = props.attempts.filter(a => !a.isSuccess).length;\n        const attempts = props.attempts.length;\n\n        if (failures === 1) {\n            return `This connection has had 1 failure in the last ${ attempts } connection attempts.`;\n        }\n\n        return `This connection has had ${ failures } failures in the last ${ attempts } connection attempts.`;\n    }, [ props.attempts ]);\n\n    return <ConnectionAlert\n        attempts={ props.attempts }\n        alertVariant={ AlertVariant.warning }\n        description={ description }\n        title=\"Connection is degraded\"\n    />;\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { ConnectionAlert } from './ConnectionAlert';\n\ninterface ConnectionFailedProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n}\n\nexport const ConnectionFailed: React.FunctionComponent<ConnectionFailedProps> = (props) => {\n    return <ConnectionAlert\n        attempts={ props.attempts }\n        alertVariant={ AlertVariant.danger }\n        description=\"This connection has failed the most recent connection attempts.\"\n        title=\"Failed connection\"\n    />;\n};\n","import { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { UserIntegration } from '../../../types/Integration';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\n\nconst titleClass = style({\n    fontWeight: 400\n});\n\ninterface ExpandedContentProps extends OuiaComponentProps {\n    integration: UserIntegration;\n}\n\nexport const ExpandedContent: React.FunctionComponent<ExpandedContentProps> = (props) => {\n    return (\n        <TextContent { ...getOuiaProps('Integrations/Table/ExpandedContent', props) }>\n            <TextList component={ TextListVariants.dl }>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    Endpoint URL\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.url }\n                </TextListItem>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    SSL verification\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.sslVerificationEnabled ? 'Enabled' : 'Disabled' }\n                </TextListItem>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    Authentication type\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.secretToken !== undefined ? 'Secret token' : 'None' }\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n","import {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Spinner,\n    Switch,\n    Text,\n    Title\n} from '@patternfly/react-core';\nimport { CheckCircleIcon, CubesIcon, ExclamationCircleIcon, OffIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport {\n    expandable,\n    IActions,\n    IActionsResolver,\n    ICell,\n    IRow,\n    IRowData,\n    RowWrapperProps,\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table';\nimport {\n    global_danger_color_100,\n    global_spacer_md,\n    global_spacer_sm,\n    global_success_color_100,\n    global_warning_color_200\n} from '@patternfly/react-tokens';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { important } from 'csx';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { style } from 'typestyle';\n\nimport messages from '../../properties/DefinedMessages';\nimport { Messages } from '../../properties/Messages';\nimport { IntegrationConnectionAttempt, UserIntegration } from '../../types/Integration';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ConnectionDegraded } from './Table/ConnectionDegraded';\nimport { ConnectionFailed } from './Table/ConnectionFailed';\nimport { ExpandedContent } from './Table/ExpandedContent';\n\nexport type OnEnable = (integration: IntegrationRow, index: number, isChecked: boolean) => void;\n\ninterface IntegrationsTableProps extends OuiaComponentProps {\n    isLoading: boolean;\n    loadingCount?: number;\n    integrations: Array<IntegrationRow>;\n    onCollapse?: (integration: IntegrationRow, index: number, isOpen: boolean) => void;\n    onEnable?: OnEnable;\n    actionResolver: (row: IntegrationRow, index: number) => IActions;\n}\n\nexport type IntegrationRow = UserIntegration & {\n    isOpen: boolean;\n    isSelected: boolean;\n    isEnabledLoading: boolean;\n    isConnectionAttemptLoading: boolean;\n    lastConnectionAttempts?: Array<IntegrationConnectionAttempt>;\n}\n\nenum LastConnectionAttemptStatus {\n    UNKNOWN,\n    SUCCESS,\n    WARNING,\n    ERROR\n}\n\nconst connectionAlertClassName = style({\n    paddingBottom: global_spacer_md.var\n});\n\nconst expandedContentClassName = style({\n    paddingLeft: 0,\n    paddingBottom: 0\n});\n\nconst isEnabledLoadingClassName = style({\n    marginLeft: 10\n});\n\nconst smallMarginLeft = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst degradedClassName = style({\n    fontWeight: 600,\n    color: global_warning_color_200.var,\n    fontSize: 'var(--pf-global--FontSize--sm)'\n});\n\nconst getLastConnectionAttemptStatus = (attempts: Array<IntegrationConnectionAttempt>): LastConnectionAttemptStatus => {\n    if (attempts.length === 0) {\n        return LastConnectionAttemptStatus.UNKNOWN;\n    }\n\n    const failures = attempts.filter(a => !a.isSuccess).length;\n\n    if (failures === attempts.length) {\n        return LastConnectionAttemptStatus.ERROR;\n    } else if (failures > 0) {\n        return LastConnectionAttemptStatus.WARNING;\n    }\n\n    return LastConnectionAttemptStatus.SUCCESS;\n};\n\nconst getConnectionAlert = (attempts: Array<IntegrationConnectionAttempt>) => {\n    const status = getLastConnectionAttemptStatus(attempts);\n    switch (status) {\n        case LastConnectionAttemptStatus.UNKNOWN:\n        case LastConnectionAttemptStatus.SUCCESS:\n            return null;\n        case LastConnectionAttemptStatus.ERROR:\n            return (\n                <div className={ connectionAlertClassName }>\n                    <ConnectionFailed attempts={ attempts } />\n                </div>\n            );\n        case LastConnectionAttemptStatus.WARNING:\n            return (\n                <div className={ connectionAlertClassName }>\n                    <ConnectionDegraded attempts={ attempts } />\n                </div>\n            );\n        default:\n            assertNever(status);\n    }\n};\n\nconst LastConnectionAttemptSuccess: React.FunctionComponent = () => (\n    <>\n        <CheckCircleIcon color={ global_success_color_100.value } data-testid=\"success-icon\" />\n        <span className={ smallMarginLeft }>Success</span>\n    </>\n);\n\nconst LastConnectionAttemptError: React.FunctionComponent = () => (\n    <>\n        <ExclamationCircleIcon color={ global_danger_color_100.value } data-testid=\"fail-icon\" />\n        <span className={ smallMarginLeft }>Failure</span>\n    </>\n);\n\nconst getConnectionAttemptCell = (attempts: Array<IntegrationConnectionAttempt> | undefined, isLoading: boolean) => {\n    if (attempts === undefined) {\n        return 'Error fetching connection attempts';\n    }\n\n    if (isLoading) {\n        return <Spinner size=\"md\" />;\n    }\n\n    const status = getLastConnectionAttemptStatus(attempts);\n    switch (status) {\n        case LastConnectionAttemptStatus.UNKNOWN:\n            return <>\n                <OffIcon data-testid=\"off-icon\" />\n                <span className={ smallMarginLeft }>Unknown</span>\n            </>;\n        case LastConnectionAttemptStatus.SUCCESS:\n            return <><LastConnectionAttemptSuccess /></>;\n        case LastConnectionAttemptStatus.ERROR:\n            return <><LastConnectionAttemptError /></>;\n        case LastConnectionAttemptStatus.WARNING:\n            return <>\n                { attempts[0].isSuccess ? <LastConnectionAttemptSuccess /> : <LastConnectionAttemptError />}\n                <br />\n                <Text className={ degradedClassName }>Degraded connection</Text>\n            </>;\n        default:\n            assertNever(status);\n    }\n};\n\nconst toTableRows = (integrations: Array<IntegrationRow>, onEnable?: OnEnable): Array<IRow> => {\n    return integrations.reduce((rows, integration, idx) => {\n        rows.push({\n            id: integration.id,\n            key: integration.id,\n            isOpen: integration.isOpen,\n            selected: integration.isSelected,\n            cells: [\n                {\n                    title: integration.name\n                },\n                {\n                    title: Messages.components.integrations.integrationType[integration.type]\n                },\n                {\n                    title: getConnectionAttemptCell(integration.lastConnectionAttempts, integration.isConnectionAttemptLoading)\n                },\n                {\n                    title: <>\n                        { integration.isEnabledLoading ? (\n                            <Spinner className={ isEnabledLoadingClassName } size=\"md\" />\n                        ) : (\n                            <Switch\n                                id={ `table-row-switch-id-${integration.id}` }\n                                aria-label=\"Enabled\"\n                                isChecked={ integration.isEnabled }\n                                onChange={ isChecked => onEnable && onEnable(integration, idx, isChecked) }\n                                isDisabled={ !onEnable }\n                                ouiaId={ `enabled-${integration.id}` }\n                            />\n                        )}\n                    </>\n                }\n            ]\n        });\n        rows.push({\n            fullWidth: true,\n            parent: idx * 2,\n            cells: [\n                {\n                    title: <>\n                        {integration.lastConnectionAttempts !== undefined && getConnectionAlert(integration.lastConnectionAttempts)}\n                        <div className={ expandedContentClassName }>\n                            <ExpandedContent integration={ integration } ouiaId={ integration.id } />\n                        </div>\n                    </>,\n                    props: {\n                        colSpan: 6\n                    }\n                }\n            ]\n        });\n        return rows;\n    }, [] as Array<IRow>);\n};\n\nconst columns: Array<ICell> = [\n    {\n        title: Messages.components.integrations.table.columns.name,\n        cellFormatters: [ expandable ],\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.type,\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.lastConnectionAttempt,\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.enabled,\n        transforms: []\n    }\n];\n\nconst buildClassNames = () => {\n    const noneStyle = important('none');\n    const borderStyle = important('var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)');\n\n    const noBorderBottom = {\n        borderBottom: noneStyle\n    };\n\n    const rowExpandedContentClassName = style(noBorderBottom);\n    const rowWrapperClassName = style(noBorderBottom, {\n        borderTop: borderStyle\n    });\n    const tableClassName = style({\n        borderBottom: borderStyle\n    });\n\n    return {\n        rowExpandedContentClassName,\n        rowWrapperClassName,\n        tableClassName\n    };\n};\n\nconst {\n    rowExpandedContentClassName,\n    rowWrapperClassName,\n    tableClassName\n} = buildClassNames();\n\nconst RowWrapper: React.FunctionComponent<RowWrapperProps> = (props) => {\n    const { trRef, className, rowProps, row, ...rest } = props;\n    if (!row) {\n        return <></>;\n    }\n\n    return (\n        <tr\n            { ...rest }\n            ref={ trRef as any }\n            className={ css(\n                className,\n                row.isExpanded === true ? rowExpandedContentClassName : rowWrapperClassName,\n                row.isExpanded !== undefined && styles.tableExpandableRow,\n                row.isExpanded && styles.modifiers.expanded\n            ) }\n            hidden={ row?.isExpanded !== undefined && !row.isExpanded }\n        >\n            { props.children}\n        </tr>\n    );\n};\n\nexport const IntegrationsTable: React.FunctionComponent<IntegrationsTableProps> = (props) => {\n    const intl = useIntl();\n    const onCollapseHandler = React.useCallback((_event, _index: number, isOpen: boolean, data: IRowData) => {\n        const integrations = props.integrations;\n        const onCollapse = props.onCollapse;\n        const index = integrations.findIndex(integration => integration.id === data.id);\n        if (onCollapse && index !== -1) {\n            const integration = integrations[index];\n            onCollapse(integration, index, isOpen);\n        }\n    }, [ props.integrations, props.onCollapse ]);\n\n    const rows = React.useMemo(() => {\n        return toTableRows(props.integrations, props.onEnable);\n    }, [ props.integrations, props.onEnable ]);\n\n    const actionsResolverCallback: IActionsResolver = React.useCallback(rowData => {\n        const actionResolver = props.actionResolver;\n        if (rowData.parent === undefined && rowData && props.integrations) {\n            const integrationIndex = props.integrations.findIndex(i => i.id === rowData.id);\n            const integrationRow = props.integrations[integrationIndex];\n            if (integrationRow) {\n                return actionResolver(integrationRow, integrationIndex);\n            }\n        }\n\n        return [];\n    }, [ props.actionResolver, props.integrations ]);\n\n    if (props.isLoading) {\n        return (\n            <div { ...getOuiaProps('Integrations/Table',  { ...props, ouiaSafe: false }) }>\n                <SkeletonTable\n                    rowSize={ (props.loadingCount && props.loadingCount > 0) ? props.loadingCount : 10 }\n                    columns={ columns }\n                    paddingColumnSize={ 0 }\n                    sortBy={ undefined }\n                />\n            </div>\n        );\n    }\n\n    return (\n        <div { ...getOuiaProps('Integrations/Table', props) }>\n            {rows.length === 0 ?  (<EmptyState variant={ EmptyStateVariant.full }>\n                <EmptyStateIcon icon={ CubesIcon } />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {intl.formatMessage(messages.integrationsEmptyStateTitle)}\n                </Title>\n                <EmptyStateBody>\n                    {intl.formatMessage(messages.integrationsTableEmptyStateBody)}\n                </EmptyStateBody>\n            </EmptyState>) :\n                (<Table\n                    className={ tableClassName }\n                    aria-label={ Messages.components.integrations.table.title }\n                    rows={ rows }\n                    cells={ columns }\n                    onCollapse={ onCollapseHandler }\n                    rowWrapper={ RowWrapper as (props: RowWrapperProps) => React.ReactElement }\n                    actionResolver={ actionsResolverCallback }\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>)}\n        </div>\n    );\n};\n","import { ExporterType, exporterTypeFromString } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\ntype OnExport = (type: ExporterType) => void;\n\nexport const useTableExportConfig = (onExport: OnExport) => {\n    return React.useMemo(() => {\n        if (onExport) {\n            return {\n                extraItems: [],\n                onSelect: (_event, type: string) => {\n                    onExport(exporterTypeFromString(type));\n                }\n            };\n        }\n\n        return undefined;\n    }, [ onExport ]);\n};\n","import { Environment, getInsightsEnvironment, InsightsType } from '@redhat-cloud-services/insights-common-typescript';\n\nexport const stagingBetaAndProdBetaEnvironment: Array<Environment> = [\n    'stage-beta',\n    'prod-beta'\n];\n\nexport const isStagingBetaOrProdBeta = (insights: InsightsType) => {\n    return stagingBetaAndProdBetaEnvironment.includes(getInsightsEnvironment(insights));\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum IntegrationFilterColumn {\n    NAME = 'name',\n    ENABLED = 'enabled'\n}\n\nexport type IntegrationFilters = Filters<typeof IntegrationFilterColumn>;\nexport type SetIntegrationFilters = SetFilters<typeof IntegrationFilterColumn>;\nexport type ClearIntegrationFilters = ClearFilters<typeof IntegrationFilterColumn>;\n","import { PaginationProps, PaginationVariant } from '@patternfly/react-core';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ColumnsMetada,\n    ExporterType,\n    getInsights,\n    OuiaComponentProps,\n    useInsightsEnvironmentFlag,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { style } from 'typestyle';\n\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { Messages } from '../../properties/Messages';\nimport { stagingBetaAndProdBetaEnvironment } from '../../types/Environments';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { DisabledIntegrationIcon, EnabledIntegrationIcon } from '../Icons';\nimport { ClearIntegrationFilters, IntegrationFilterColumn, IntegrationFilters, SetIntegrationFilters } from './Filters';\n\ninterface IntegrationsToolbarProps extends OuiaComponentProps {\n    onAddIntegration?: () => void;\n    onExport: (type: ExporterType) => void;\n    filters: IntegrationFilters;\n    setFilters: SetIntegrationFilters;\n    clearFilters: ClearIntegrationFilters;\n    pageCount: number;\n    count: number;\n    page: number;\n    perPage: number;\n    pageChanged: (page: number) => void;\n    perPageChanged: (page: number) => void;\n}\n\nconst enabledTextClassName = style({\n    marginLeft: 4\n});\n\nconst filterMetadata: ColumnsMetada<typeof IntegrationFilterColumn> = {\n    [IntegrationFilterColumn.NAME]: {\n        label: 'Name',\n        placeholder: 'Filter by name'\n    },\n    [IntegrationFilterColumn.ENABLED]: {\n        label: 'Enabled',\n        placeholder: 'Filter by enabled',\n        options: {\n            exclusive: false,\n            items: [\n                {\n                    value: 'Enabled',\n                    label: <><EnabledIntegrationIcon /> <span className={ enabledTextClassName }>Enabled</span></>\n                },\n                {\n                    value: 'Disabled',\n                    label: <><DisabledIntegrationIcon /> <span className={ enabledTextClassName }>Disabled</span></>\n                }\n            ]\n        }\n    }\n};\n\nexport const IntegrationsToolbar: React.FunctionComponent<IntegrationsToolbarProps> = (props) => {\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        IntegrationFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilters,\n        filterMetadata\n    );\n\n    const actionsConfig = React.useMemo(() => {\n        const actions = [\n            {\n                key: 'add-integration',\n                label: Messages.components.integrations.toolbar.actions.addIntegration,\n                onClick: props.onAddIntegration,\n                props: {\n                    isDisabled: !props.onAddIntegration\n                }\n            }\n        ];\n\n        return {\n            actions,\n            kebabToggleProps: {\n                isDisabled: false\n            }\n        };\n    }, [ props.onAddIntegration ]);\n\n    const exportConfig = useTableExportConfig(props.onExport);\n\n    const filterConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.filterConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const activeFiltersConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.activeFiltersConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const pageChanged = React.useCallback((_event: unknown, page: number) => {\n        const inner = props.pageChanged;\n        inner(page);\n    }, [ props.pageChanged ]);\n\n    const perPageChanged = React.useCallback((_event: unknown, perPage: number) => {\n        const inner = props.perPageChanged;\n        inner(perPage);\n    }, [ props.perPageChanged ]);\n\n    const topPaginationProps = React.useMemo<PaginationProps>(() => ({\n        itemCount: props.count,\n        page: props.page,\n        perPage: props.perPage,\n        isCompact: true,\n        variant: PaginationVariant.top,\n        onSetPage: pageChanged,\n        onFirstClick: pageChanged,\n        onPreviousClick: pageChanged,\n        onNextClick: pageChanged,\n        onLastClick: pageChanged,\n        onPageInput: pageChanged,\n        onPerPageSelect: perPageChanged\n    }), [ props.count, props.page, props.perPage, pageChanged, perPageChanged ]);\n\n    const bottomPaginationProps = React.useMemo<PaginationProps>(() => ({\n        ...topPaginationProps,\n        isCompact: false,\n        variant: PaginationVariant.bottom\n    }), [ topPaginationProps ]);\n\n    return (\n        <div { ...getOuiaProps('Integrations/DualToolbar', props) }>\n            <PrimaryToolbar\n                actionsConfig={ actionsConfig }\n                exportConfig={ exportConfig }\n                filterConfig={ filterConfig }\n                activeFiltersConfig={ activeFiltersConfig }\n                pagination={ topPaginationProps }\n                id=\"integrations-top-toolbar\"\n            />\n            { props.children }\n            <PrimaryToolbar id=\"integrations-bottom-toolbar\" pagination={ bottomPaginationProps } />\n        </div>\n    );\n};\n","import { CheckCircleIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport const EnabledIntegrationIcon: React.FunctionComponent = () => {\n    return <CheckCircleIcon color=\"green\" />;\n};\n","import { OffIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport const DisabledIntegrationIcon: React.FunctionComponent = () => {\n    return <OffIcon />;\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Action = zodSchemaAction();\n  export type Action = {\n    accountId?: string | undefined | null;\n    account_id?: string | undefined | null;\n    application?: string | undefined | null;\n    eventType?: string | undefined | null;\n    event_type?: string | undefined | null;\n    payload?: Map | undefined | null;\n    schema?: Schema | undefined | null;\n    specificData?: SpecificData | undefined | null;\n    timestamp?: string | undefined | null;\n  };\n\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    eventTypes?: SetEventType | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const ApplicationFacet = zodSchemaApplicationFacet();\n  export type ApplicationFacet = {\n    label: string;\n    value: string;\n  };\n\n  export const Attributes = zodSchemaAttributes();\n  export type Attributes = unknown;\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    applications?: SetApplication | undefined | null;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const ConcurrentMapStringJsonNode = zodSchemaConcurrentMapStringJsonNode();\n  export type ConcurrentMapStringJsonNode = {\n    [x: string]: JsonNode;\n  };\n\n  export const ConversionObject = zodSchemaConversionObject();\n  export type ConversionObject = {\n    convertedType?: unknown | undefined | null;\n    logicalTypeName?: string | undefined | null;\n    recommendedSchema?: Schema | undefined | null;\n  };\n\n  export const EmailSubscriptionAttributes = zodSchemaEmailSubscriptionAttributes();\n  export type EmailSubscriptionAttributes = unknown;\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookAttributes | EmailSubscriptionAttributes)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: ListEndpoint;\n    links: MapStringString;\n    meta: Meta;\n  };\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType = 'webhook' | 'email_subscription' | 'default';\n\n  export const EntityTag = zodSchemaEntityTag();\n  export type EntityTag = {\n    value?: string | undefined | null;\n    weak?: boolean | undefined | null;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    description?: string | undefined | null;\n    display_name: string;\n    endpoints?: SetEndpoint | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Family = zodSchemaFamily();\n  export type Family =\n    | 'CLIENT_ERROR'\n    | 'INFORMATIONAL'\n    | 'OTHER'\n    | 'REDIRECTION'\n    | 'SERVER_ERROR'\n    | 'SUCCESSFUL';\n\n  export const FastReaderBuilder = zodSchemaFastReaderBuilder();\n  export type FastReaderBuilder = {\n    classPropEnabled?: boolean | undefined | null;\n    data?: GenericData | undefined | null;\n    keyClassEnabled?: boolean | undefined | null;\n    readerCache?: MapSchemaMapSchemaRecordReader | undefined | null;\n  };\n\n  export const Field = zodSchemaField();\n  export type Field = {\n    aliases?: SetString | undefined | null;\n    defaultValue?: JsonNode | undefined | null;\n    doc?: string | undefined | null;\n    name?: string | undefined | null;\n    objectProps?: MapStringObject | undefined | null;\n    order?: Order | undefined | null;\n    position?: number | undefined | null;\n    props?: ConcurrentMapStringJsonNode | undefined | null;\n    reserved?: SetString | undefined | null;\n    schema?: Schema | undefined | null;\n  };\n\n  export const GenericData = zodSchemaGenericData();\n  export type GenericData = {\n    classLoader?: unknown | undefined | null;\n    conversions?: MapStringConversionObject | undefined | null;\n    conversionsByClass?:\n      | MapClassObjectMapStringConversionObject\n      | undefined\n      | null;\n    defaultValueCache?: MapFieldObject | undefined | null;\n    fastReaderBuilder?: FastReaderBuilder | undefined | null;\n    fastReaderEnabled?: boolean | undefined | null;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const JsonNode = zodSchemaJsonNode();\n  export type JsonNode = {\n    array?: boolean | undefined | null;\n    bigDecimal?: boolean | undefined | null;\n    bigInteger?: boolean | undefined | null;\n    binary?: boolean | undefined | null;\n    boolean?: boolean | undefined | null;\n    containerNode?: boolean | undefined | null;\n    double?: boolean | undefined | null;\n    empty?: boolean | undefined | null;\n    float?: boolean | undefined | null;\n    floatingPointNumber?: boolean | undefined | null;\n    int?: boolean | undefined | null;\n    integralNumber?: boolean | undefined | null;\n    long?: boolean | undefined | null;\n    missingNode?: boolean | undefined | null;\n    nodeType?: JsonNodeType | undefined | null;\n    null?: boolean | undefined | null;\n    number?: boolean | undefined | null;\n    object?: boolean | undefined | null;\n    pojo?: boolean | undefined | null;\n    short?: boolean | undefined | null;\n    textual?: boolean | undefined | null;\n    valueNode?: boolean | undefined | null;\n  };\n\n  export const JsonNodeType = zodSchemaJsonNodeType();\n  export type JsonNodeType =\n    | 'ARRAY'\n    | 'BINARY'\n    | 'BOOLEAN'\n    | 'MISSING'\n    | 'NULL'\n    | 'NUMBER'\n    | 'OBJECT'\n    | 'POJO'\n    | 'STRING';\n\n  export const JsonObject = zodSchemaJsonObject();\n  export type JsonObject = Array<unknown>;\n\n  export const Link = zodSchemaLink();\n  export type Link = {\n    params?: MapStringString | undefined | null;\n    rel?: string | undefined | null;\n    rels?: ListString | undefined | null;\n    title?: string | undefined | null;\n    type?: string | undefined | null;\n    uri?: string | undefined | null;\n    uriBuilder?: UriBuilder | undefined | null;\n  };\n\n  export const ListEndpoint = zodSchemaListEndpoint();\n  export type ListEndpoint = Array<Endpoint>;\n\n  export const ListField = zodSchemaListField();\n  export type ListField = Array<Field>;\n\n  export const ListSchema = zodSchemaListSchema();\n  export type ListSchema = Array<Schema>;\n\n  export const ListString = zodSchemaListString();\n  export type ListString = Array<string>;\n\n  export const Locale = zodSchemaLocale();\n  export type Locale = {\n    country?: string | undefined | null;\n    displayCountry?: string | undefined | null;\n    displayLanguage?: string | undefined | null;\n    displayName?: string | undefined | null;\n    displayScript?: string | undefined | null;\n    displayVariant?: string | undefined | null;\n    extensionKeys?: SetCharacter | undefined | null;\n    iSO3Country?: string | undefined | null;\n    iSO3Language?: string | undefined | null;\n    language?: string | undefined | null;\n    script?: string | undefined | null;\n    unicodeLocaleAttributes?: SetString | undefined | null;\n    unicodeLocaleKeys?: SetString | undefined | null;\n    variant?: string | undefined | null;\n  };\n\n  export const LogicalType = zodSchemaLogicalType();\n  export type LogicalType = {\n    name?: string | undefined | null;\n  };\n\n  export const Map = zodSchemaMap();\n  export type Map = unknown;\n\n  export const MapClassObjectMapStringConversionObject = zodSchemaMapClassObjectMapStringConversionObject();\n  export type MapClassObjectMapStringConversionObject = {\n    [x: string]: MapStringConversionObject;\n  };\n\n  export const MapFieldObject = zodSchemaMapFieldObject();\n  export type MapFieldObject = {\n    [x: string]: unknown;\n  };\n\n  export const MapSchemaMapSchemaRecordReader = zodSchemaMapSchemaMapSchemaRecordReader();\n  export type MapSchemaMapSchemaRecordReader = {\n    [x: string]: MapSchemaRecordReader;\n  };\n\n  export const MapSchemaRecordReader = zodSchemaMapSchemaRecordReader();\n  export type MapSchemaRecordReader = {\n    empty?: boolean | undefined | null;\n  };\n\n  export const MapStringClass = zodSchemaMapStringClass();\n  export type MapStringClass = {\n    [x: string]: unknown;\n  };\n\n  export const MapStringConversionObject = zodSchemaMapStringConversionObject();\n  export type MapStringConversionObject = {\n    [x: string]: ConversionObject;\n  };\n\n  export const MapStringNewCookie = zodSchemaMapStringNewCookie();\n  export type MapStringNewCookie = {\n    [x: string]: NewCookie;\n  };\n\n  export const MapStringObject = zodSchemaMapStringObject();\n  export type MapStringObject = {\n    [x: string]: unknown;\n  };\n\n  export const MapStringString = zodSchemaMapStringString();\n  export type MapStringString = {\n    [x: string]: string;\n  };\n\n  export const MapTypeSchema = zodSchemaMapTypeSchema();\n  export type MapTypeSchema = {\n    [x: string]: Schema;\n  };\n\n  export const MediaType = zodSchemaMediaType();\n  export type MediaType = {\n    parameters?: MapStringString | undefined | null;\n    subtype?: string | undefined | null;\n    type?: string | undefined | null;\n    wildcardSubtype?: boolean | undefined | null;\n    wildcardType?: boolean | undefined | null;\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();\n  export type MultivaluedMapStringObject = {\n    [x: string]: unknown;\n  };\n\n  export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();\n  export type MultivaluedMapStringString = {\n    [x: string]: string;\n  };\n\n  export const NewCookie = zodSchemaNewCookie();\n  export type NewCookie = {\n    comment?: string | undefined | null;\n    domain?: string | undefined | null;\n    expiry?: string | undefined | null;\n    httpOnly?: boolean | undefined | null;\n    maxAge?: number | undefined | null;\n    name?: string | undefined | null;\n    path?: string | undefined | null;\n    secure?: boolean | undefined | null;\n    value?: string | undefined | null;\n    version?: number | undefined | null;\n  };\n\n  export const Notification = zodSchemaNotification();\n  export type Notification = {\n    action?: Action | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    tenant?: string | undefined | null;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?: JsonObject | undefined | null;\n    endpointId?: UUID | undefined | null;\n    eventId?: string | undefined | null;\n    id?: number | undefined | null;\n    invocationResult?: boolean | undefined | null;\n    invocationTime?: number | undefined | null;\n  };\n\n  export const Order = zodSchemaOrder();\n  export type Order = 'ASCENDING' | 'DESCENDING' | 'IGNORE';\n\n  export const Response = zodSchemaResponse();\n  export type Response = {\n    allowedMethods?: SetString | undefined | null;\n    cookies?: MapStringNewCookie | undefined | null;\n    date?: string | undefined | null;\n    entity?: unknown | undefined | null;\n    entityTag?: EntityTag | undefined | null;\n    headers?: MultivaluedMapStringObject | undefined | null;\n    language?: Locale | undefined | null;\n    lastModified?: string | undefined | null;\n    length?: number | undefined | null;\n    links?: SetLink | undefined | null;\n    location?: string | undefined | null;\n    mediaType?: MediaType | undefined | null;\n    metadata?: MultivaluedMapStringObject | undefined | null;\n    status?: number | undefined | null;\n    statusInfo?: StatusType | undefined | null;\n    stringHeaders?: MultivaluedMapStringString | undefined | null;\n  };\n\n  export const Schema = zodSchemaSchema();\n  export type Schema = {\n    aliases?: SetString | undefined | null;\n    doc?: string | undefined | null;\n    elementType?: Schema | undefined | null;\n    enumDefault?: string | undefined | null;\n    enumSymbols?: ListString | undefined | null;\n    error?: boolean | undefined | null;\n    fields?: ListField | undefined | null;\n    fixedSize?: number | undefined | null;\n    fullName?: string | undefined | null;\n    hashCode?: number | undefined | null;\n    logicalType?: LogicalType | undefined | null;\n    name?: string | undefined | null;\n    namespace?: string | undefined | null;\n    nullable?: boolean | undefined | null;\n    objectProps?: MapStringObject | undefined | null;\n    props?: ConcurrentMapStringJsonNode | undefined | null;\n    reserved?: SetString | undefined | null;\n    type?: Type | undefined | null;\n    types?: ListSchema | undefined | null;\n    union?: boolean | undefined | null;\n    valueType?: Schema | undefined | null;\n  };\n\n  export const SetApplication = zodSchemaSetApplication();\n  export type SetApplication = Array<Application>;\n\n  export const SetCharacter = zodSchemaSetCharacter();\n  export type SetCharacter = Array<string>;\n\n  export const SetClass = zodSchemaSetClass();\n  export type SetClass = Array<unknown>;\n\n  export const SetEndpoint = zodSchemaSetEndpoint();\n  export type SetEndpoint = Array<Endpoint>;\n\n  export const SetEventType = zodSchemaSetEventType();\n  export type SetEventType = Array<EventType>;\n\n  export const SetLink = zodSchemaSetLink();\n  export type SetLink = Array<Link>;\n\n  export const SetString = zodSchemaSetString();\n  export type SetString = Array<string>;\n\n  export const SetUUID = zodSchemaSetUUID();\n  export type SetUUID = Array<string>;\n\n  export const SpecificData = zodSchemaSpecificData();\n  export type SpecificData = {\n    classCache?: MapStringClass | undefined | null;\n    classLoader?: unknown | undefined | null;\n    conversions?: MapStringConversionObject | undefined | null;\n    conversionsByClass?:\n      | MapClassObjectMapStringConversionObject\n      | undefined\n      | null;\n    customCoders?: boolean | undefined | null;\n    defaultValueCache?: MapFieldObject | undefined | null;\n    fastReaderBuilder?: FastReaderBuilder | undefined | null;\n    fastReaderEnabled?: boolean | undefined | null;\n    schemaClassCache?: unknown | undefined | null;\n    schemaTypeCache?: MapTypeSchema | undefined | null;\n    stringableClasses?: SetClass | undefined | null;\n    useCustomCoderFlag?: boolean | undefined | null;\n  };\n\n  export const StatusType = zodSchemaStatusType();\n  export type StatusType = {\n    family?: Family | undefined | null;\n    reasonPhrase?: string | undefined | null;\n    statusCode?: number | undefined | null;\n  };\n\n  export const Type = zodSchemaType();\n  export type Type =\n    | 'ARRAY'\n    | 'BOOLEAN'\n    | 'BYTES'\n    | 'DOUBLE'\n    | 'ENUM'\n    | 'FIXED'\n    | 'FLOAT'\n    | 'INT'\n    | 'LONG'\n    | 'MAP'\n    | 'NULL'\n    | 'RECORD'\n    | 'STRING'\n    | 'UNION';\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UriBuilder = zodSchemaUriBuilder();\n  export type UriBuilder = unknown;\n\n  export const WebhookAttributes = zodSchemaWebhookAttributes();\n  export type WebhookAttributes = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification?: boolean | undefined | null;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  function zodSchemaAction() {\n      return z\n      .object({\n          accountId: z.string().optional().nullable(),\n          account_id: z.string().optional().nullable(),\n          application: z.string().optional().nullable(),\n          eventType: z.string().optional().nullable(),\n          event_type: z.string().optional().nullable(),\n          payload: zodSchemaMap().optional().nullable(),\n          schema: zodSchemaSchema().optional().nullable(),\n          specificData: zodSchemaSpecificData().optional().nullable(),\n          timestamp: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          eventTypes: zodSchemaSetEventType().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplicationFacet() {\n      return z\n      .object({\n          label: z.string(),\n          value: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAttributes() {\n      return z.unknown();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          applications: zodSchemaSetApplication().optional().nullable(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaConcurrentMapStringJsonNode() {\n      return z.record(zodSchemaJsonNode());\n  }\n\n  function zodSchemaConversionObject() {\n      return z\n      .object({\n          convertedType: z.unknown().optional().nullable(),\n          logicalTypeName: z.string().optional().nullable(),\n          recommendedSchema: zodSchemaSchema().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionAttributes() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookAttributes(),\n              zodSchemaEmailSubscriptionAttributes()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: zodSchemaListEndpoint(),\n          links: zodSchemaMapStringString(),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default' ]);\n  }\n\n  function zodSchemaEntityTag() {\n      return z\n      .object({\n          value: z.string().optional().nullable(),\n          weak: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: z\n          .lazy(() => zodSchemaApplication())\n          .optional()\n          .nullable(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          endpoints: zodSchemaSetEndpoint().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFamily() {\n      return z.enum([\n          'CLIENT_ERROR',\n          'INFORMATIONAL',\n          'OTHER',\n          'REDIRECTION',\n          'SERVER_ERROR',\n          'SUCCESSFUL'\n      ]);\n  }\n\n  function zodSchemaFastReaderBuilder() {\n      return z\n      .object({\n          classPropEnabled: z.boolean().optional().nullable(),\n          data: zodSchemaGenericData().optional().nullable(),\n          keyClassEnabled: z.boolean().optional().nullable(),\n          readerCache: zodSchemaMapSchemaMapSchemaRecordReader()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaField() {\n      return z\n      .object({\n          aliases: zodSchemaSetString().optional().nullable(),\n          defaultValue: zodSchemaJsonNode().optional().nullable(),\n          doc: z.string().optional().nullable(),\n          name: z.string().optional().nullable(),\n          objectProps: zodSchemaMapStringObject().optional().nullable(),\n          order: zodSchemaOrder().optional().nullable(),\n          position: z.number().int().optional().nullable(),\n          props: zodSchemaConcurrentMapStringJsonNode().optional().nullable(),\n          reserved: zodSchemaSetString().optional().nullable(),\n          schema: z\n          .lazy(() => zodSchemaSchema())\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaGenericData() {\n      return z\n      .object({\n          classLoader: z.unknown().optional().nullable(),\n          conversions: zodSchemaMapStringConversionObject().optional().nullable(),\n          conversionsByClass: zodSchemaMapClassObjectMapStringConversionObject()\n          .optional()\n          .nullable(),\n          defaultValueCache: zodSchemaMapFieldObject().optional().nullable(),\n          fastReaderBuilder: z\n          .lazy(() => zodSchemaFastReaderBuilder())\n          .optional()\n          .nullable(),\n          fastReaderEnabled: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaJsonNode() {\n      return z\n      .object({\n          array: z.boolean().optional().nullable(),\n          bigDecimal: z.boolean().optional().nullable(),\n          bigInteger: z.boolean().optional().nullable(),\n          binary: z.boolean().optional().nullable(),\n          boolean: z.boolean().optional().nullable(),\n          containerNode: z.boolean().optional().nullable(),\n          double: z.boolean().optional().nullable(),\n          empty: z.boolean().optional().nullable(),\n          float: z.boolean().optional().nullable(),\n          floatingPointNumber: z.boolean().optional().nullable(),\n          int: z.boolean().optional().nullable(),\n          integralNumber: z.boolean().optional().nullable(),\n          long: z.boolean().optional().nullable(),\n          missingNode: z.boolean().optional().nullable(),\n          nodeType: zodSchemaJsonNodeType().optional().nullable(),\n          null: z.boolean().optional().nullable(),\n          number: z.boolean().optional().nullable(),\n          object: z.boolean().optional().nullable(),\n          pojo: z.boolean().optional().nullable(),\n          short: z.boolean().optional().nullable(),\n          textual: z.boolean().optional().nullable(),\n          valueNode: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaJsonNodeType() {\n      return z.enum([\n          'ARRAY',\n          'BINARY',\n          'BOOLEAN',\n          'MISSING',\n          'NULL',\n          'NUMBER',\n          'OBJECT',\n          'POJO',\n          'STRING'\n      ]);\n  }\n\n  function zodSchemaJsonObject() {\n      return z.array(z.unknown());\n  }\n\n  function zodSchemaLink() {\n      return z\n      .object({\n          params: zodSchemaMapStringString().optional().nullable(),\n          rel: z.string().optional().nullable(),\n          rels: zodSchemaListString().optional().nullable(),\n          title: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          uri: z.string().optional().nullable(),\n          uriBuilder: zodSchemaUriBuilder().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaListEndpoint() {\n      return z.array(zodSchemaEndpoint());\n  }\n\n  function zodSchemaListField() {\n      return z.array(zodSchemaField());\n  }\n\n  function zodSchemaListSchema() {\n      return z.array(z.lazy(() => zodSchemaSchema()));\n  }\n\n  function zodSchemaListString() {\n      return z.array(z.string());\n  }\n\n  function zodSchemaLocale() {\n      return z\n      .object({\n          country: z.string().optional().nullable(),\n          displayCountry: z.string().optional().nullable(),\n          displayLanguage: z.string().optional().nullable(),\n          displayName: z.string().optional().nullable(),\n          displayScript: z.string().optional().nullable(),\n          displayVariant: z.string().optional().nullable(),\n          extensionKeys: zodSchemaSetCharacter().optional().nullable(),\n          iSO3Country: z.string().optional().nullable(),\n          iSO3Language: z.string().optional().nullable(),\n          language: z.string().optional().nullable(),\n          script: z.string().optional().nullable(),\n          unicodeLocaleAttributes: zodSchemaSetString().optional().nullable(),\n          unicodeLocaleKeys: zodSchemaSetString().optional().nullable(),\n          variant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLogicalType() {\n      return z\n      .object({\n          name: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMap() {\n      return z.unknown();\n  }\n\n  function zodSchemaMapClassObjectMapStringConversionObject() {\n      return z.record(zodSchemaMapStringConversionObject());\n  }\n\n  function zodSchemaMapFieldObject() {\n      return z.record(z.unknown());\n  }\n\n  function zodSchemaMapSchemaMapSchemaRecordReader() {\n      return z.record(zodSchemaMapSchemaRecordReader());\n  }\n\n  function zodSchemaMapSchemaRecordReader() {\n      return z\n      .object({\n          empty: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMapStringClass() {\n      return z.record(z.unknown());\n  }\n\n  function zodSchemaMapStringConversionObject() {\n      return z.record(zodSchemaConversionObject());\n  }\n\n  function zodSchemaMapStringNewCookie() {\n      return z.record(zodSchemaNewCookie());\n  }\n\n  function zodSchemaMapStringObject() {\n      return z.record(z.unknown());\n  }\n\n  function zodSchemaMapStringString() {\n      return z.record(z.string());\n  }\n\n  function zodSchemaMapTypeSchema() {\n      return z.record(zodSchemaSchema());\n  }\n\n  function zodSchemaMediaType() {\n      return z\n      .object({\n          parameters: zodSchemaMapStringString().optional().nullable(),\n          subtype: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          wildcardSubtype: z.boolean().optional().nullable(),\n          wildcardType: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMultivaluedMapStringObject() {\n      return z.record(z.unknown());\n  }\n\n  function zodSchemaMultivaluedMapStringString() {\n      return z.record(z.string());\n  }\n\n  function zodSchemaNewCookie() {\n      return z\n      .object({\n          comment: z.string().optional().nullable(),\n          domain: z.string().optional().nullable(),\n          expiry: z.string().optional().nullable(),\n          httpOnly: z.boolean().optional().nullable(),\n          maxAge: z.number().int().optional().nullable(),\n          name: z.string().optional().nullable(),\n          path: z.string().optional().nullable(),\n          secure: z.boolean().optional().nullable(),\n          value: z.string().optional().nullable(),\n          version: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotification() {\n      return z\n      .object({\n          action: zodSchemaAction().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          tenant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: zodSchemaJsonObject().optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          eventId: z.string().optional().nullable(),\n          id: z.number().int().optional().nullable(),\n          invocationResult: z.boolean().optional().nullable(),\n          invocationTime: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaOrder() {\n      return z.enum([ 'ASCENDING', 'DESCENDING', 'IGNORE' ]);\n  }\n\n  function zodSchemaResponse() {\n      return z\n      .object({\n          allowedMethods: zodSchemaSetString().optional().nullable(),\n          cookies: zodSchemaMapStringNewCookie().optional().nullable(),\n          date: z.string().optional().nullable(),\n          entity: z.unknown().optional().nullable(),\n          entityTag: zodSchemaEntityTag().optional().nullable(),\n          headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          language: zodSchemaLocale().optional().nullable(),\n          lastModified: z.string().optional().nullable(),\n          length: z.number().int().optional().nullable(),\n          links: zodSchemaSetLink().optional().nullable(),\n          location: z.string().optional().nullable(),\n          mediaType: zodSchemaMediaType().optional().nullable(),\n          metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          status: z.number().int().optional().nullable(),\n          statusInfo: zodSchemaStatusType().optional().nullable(),\n          stringHeaders: zodSchemaMultivaluedMapStringString()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaSchema() {\n      return z\n      .object({\n          aliases: zodSchemaSetString().optional().nullable(),\n          doc: z.string().optional().nullable(),\n          elementType: z\n          .lazy(() => zodSchemaSchema())\n          .optional()\n          .nullable(),\n          enumDefault: z.string().optional().nullable(),\n          enumSymbols: zodSchemaListString().optional().nullable(),\n          error: z.boolean().optional().nullable(),\n          fields: zodSchemaListField().optional().nullable(),\n          fixedSize: z.number().int().optional().nullable(),\n          fullName: z.string().optional().nullable(),\n          hashCode: z.number().int().optional().nullable(),\n          logicalType: zodSchemaLogicalType().optional().nullable(),\n          name: z.string().optional().nullable(),\n          namespace: z.string().optional().nullable(),\n          nullable: z.boolean().optional().nullable(),\n          objectProps: zodSchemaMapStringObject().optional().nullable(),\n          props: zodSchemaConcurrentMapStringJsonNode().optional().nullable(),\n          reserved: zodSchemaSetString().optional().nullable(),\n          type: zodSchemaType().optional().nullable(),\n          types: zodSchemaListSchema().optional().nullable(),\n          union: z.boolean().optional().nullable(),\n          valueType: z\n          .lazy(() => zodSchemaSchema())\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaSetApplication() {\n      return z.array(zodSchemaApplication());\n  }\n\n  function zodSchemaSetCharacter() {\n      return z.array(z.string());\n  }\n\n  function zodSchemaSetClass() {\n      return z.array(z.unknown());\n  }\n\n  function zodSchemaSetEndpoint() {\n      return z.array(zodSchemaEndpoint());\n  }\n\n  function zodSchemaSetEventType() {\n      return z.array(zodSchemaEventType());\n  }\n\n  function zodSchemaSetLink() {\n      return z.array(zodSchemaLink());\n  }\n\n  function zodSchemaSetString() {\n      return z.array(z.string());\n  }\n\n  function zodSchemaSetUUID() {\n      return z.array(z.string());\n  }\n\n  function zodSchemaSpecificData() {\n      return z\n      .object({\n          classCache: zodSchemaMapStringClass().optional().nullable(),\n          classLoader: z.unknown().optional().nullable(),\n          conversions: zodSchemaMapStringConversionObject().optional().nullable(),\n          conversionsByClass: zodSchemaMapClassObjectMapStringConversionObject()\n          .optional()\n          .nullable(),\n          customCoders: z.boolean().optional().nullable(),\n          defaultValueCache: zodSchemaMapFieldObject().optional().nullable(),\n          fastReaderBuilder: zodSchemaFastReaderBuilder().optional().nullable(),\n          fastReaderEnabled: z.boolean().optional().nullable(),\n          schemaClassCache: z.unknown().optional().nullable(),\n          schemaTypeCache: zodSchemaMapTypeSchema().optional().nullable(),\n          stringableClasses: zodSchemaSetClass().optional().nullable(),\n          useCustomCoderFlag: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatusType() {\n      return z\n      .object({\n          family: zodSchemaFamily().optional().nullable(),\n          reasonPhrase: z.string().optional().nullable(),\n          statusCode: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaType() {\n      return z.enum([\n          'ARRAY',\n          'BOOLEAN',\n          'BYTES',\n          'DOUBLE',\n          'ENUM',\n          'FIXED',\n          'FLOAT',\n          'INT',\n          'LONG',\n          'MAP',\n          'NULL',\n          'RECORD',\n          'STRING',\n          'UNION'\n      ]);\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUriBuilder() {\n      return z.unknown();\n  }\n\n  function zodSchemaWebhookAttributes() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean().optional().nullable(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n}\n\nexport namespace Operations {\n  // GET /endpoints\n  export namespace EndpointServiceGetEndpoints {\n    const Active = z.boolean();\n    type Active = boolean;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Type = z.string();\n    type Type = string;\n    export interface Params {\n      active?: Active;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n      type?: Type;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EndpointPage', 200, Schemas.EndpointPage>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints';\n        const query = {} as Record<string, any>;\n        if (params.active !== undefined) {\n            query.active = params.active;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        if (params.type !== undefined) {\n            query.type = params.type;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.EndpointPage, 'EndpointPage', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /endpoints\n  export namespace EndpointServiceCreateEndpoint {\n    export interface Params {\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.Endpoint, 'Endpoint', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/email/subscription/daily\n  export namespace EndpointServiceSubscribeDailyEmail {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/email/subscription/daily';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/email/subscription/daily\n  export namespace EndpointServiceUnsubscribeDailyEmail {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/email/subscription/daily';\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/email/subscription/instant\n  export namespace EndpointServiceSubscribeInstantEmail {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path =\n        '/api/integrations/v1.0/endpoints/email/subscription/instant';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/email/subscription/instant\n  export namespace EndpointServiceUnsubscribeInstantEmail {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path =\n        '/api/integrations/v1.0/endpoints/email/subscription/instant';\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}\n  export namespace EndpointServiceGetEndpoint {\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.Endpoint, 'Endpoint', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/{id}\n  export namespace EndpointServiceUpdateEndpoint {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/{id}\n  export namespace EndpointServiceDeleteEndpoint {\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/{id}/enable\n  export namespace EndpointServiceEnableEndpoint {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/{id}/enable\n  export namespace EndpointServiceDisableEndpoint {\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}/history\n  export namespace EndpointServiceGetEndpointHistory {\n    const Response200 = z.array(Schemas.NotificationHistory);\n    type Response200 = Array<Schemas.NotificationHistory>;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/history'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}/history/{history_id}/details\n  export namespace EndpointServiceGetDetailedEndpointHistory {\n    const HistoryId = z.number().int();\n    type HistoryId = number;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const PageSize = z.number().int();\n    type PageSize = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      historyId: HistoryId;\n      id: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      pageSize?: PageSize;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/history/{history_id}/details'\n        .replace('{history_id}', params.historyId.toString())\n        .replace('{id}', params.id.toString());\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.pageSize !== undefined) {\n            query.pageSize = params.pageSize;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n}\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    Integration,\n    IntegrationBase,\n    IntegrationHttp,\n    IntegrationType,\n    NewIntegration,\n    NewUserIntegration,\n    ServerIntegrationRequest,\n    ServerIntegrationResponse,\n    UserIntegration,\n    UserIntegrationType\n} from '../Integration';\n\nconst getIntegrationType = (type: Schemas.EndpointType | undefined): IntegrationType => {\n    switch (type) {\n        case Schemas.EndpointType.Enum.webhook:\n            return IntegrationType.WEBHOOK;\n        case Schemas.EndpointType.Enum.email_subscription:\n            return IntegrationType.EMAIL_SUBSCRIPTION;\n        case Schemas.EndpointType.Enum.default:\n        case undefined:\n            throw new Error(`Unexpected type: ${type}`);\n        default:\n            assertNever(type);\n    }\n};\n\nexport const getEndpointType = (type: IntegrationType | UserIntegrationType): Schemas.EndpointType => {\n    switch (type) {\n        case IntegrationType.WEBHOOK:\n        case UserIntegrationType.WEBHOOK:\n            return Schemas.EndpointType.Enum.webhook;\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return Schemas.EndpointType.Enum.email_subscription;\n        default:\n            assertNever(type);\n    }\n};\n\nexport const toIntegration = (serverIntegration: ServerIntegrationResponse): Integration => {\n\n    const integrationBase: IntegrationBase = {\n        id: serverIntegration.id || '',\n        name: serverIntegration.name || '',\n        isEnabled: !!serverIntegration.enabled,\n        type: getIntegrationType(serverIntegration.type)\n    };\n\n    switch (integrationBase.type) {\n        case IntegrationType.WEBHOOK:\n            const properties = serverIntegration.properties as Schemas.WebhookAttributes;\n            return {\n                ...integrationBase,\n                url: properties.url || '',\n                sslVerificationEnabled: !properties.disable_ssl_verification,\n                secretToken: properties.secret_token === null ? undefined : properties.secret_token,\n                method: properties.method ?? Schemas.HttpType.Enum.GET\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return {\n                ...integrationBase,\n                type: IntegrationType.EMAIL_SUBSCRIPTION\n            };\n        default:\n            assertNever(integrationBase.type);\n    }\n};\n\nexport const toUserIntegration = (serverIntegration: ServerIntegrationResponse): UserIntegration => {\n    const integration = toIntegration(serverIntegration);\n    if (!Object.values(UserIntegrationType).includes(integration.type as unknown as UserIntegrationType)) {\n        throw new Error(`Unknown UserIntegrationType ${integration.type}`);\n    }\n\n    return integration as unknown as UserIntegration;\n};\n\nexport const toUserIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<UserIntegration> => {\n    return toIntegrations(serverIntegrations)\n    .filter(\n        integration => Object.values(UserIntegrationType)\n        .includes(integration.type as unknown as UserIntegrationType)) as unknown as Array<UserIntegration>;\n};\n\nexport const toIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<Integration> => {\n    return filterOutDefaultAction(serverIntegrations).map(toIntegration);\n};\n\nexport const toIntegrationProperties = (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration) => {\n    switch (integration.type) {\n        case IntegrationType.WEBHOOK:\n        case UserIntegrationType.WEBHOOK:\n            const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n            return {\n                url: integrationHttp.url,\n                method: integrationHttp.method,\n                disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n                secret_token: integrationHttp.secretToken\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return {};\n        default:\n            assertNever(integration);\n    }\n};\n\nexport const toServerIntegrationRequest =\n    (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration): ServerIntegrationRequest => {\n        return {\n            id: integration.id,\n            name: integration.name,\n            enabled: integration.isEnabled,\n            type: getEndpointType(integration.type),\n            description: '',\n            properties: toIntegrationProperties(integration)\n        };\n    };\n\nexport const filterOutDefaultAction = (serverNotifications: Array<ServerIntegrationResponse>) =>\n    serverNotifications.filter(e => e.type !== Schemas.EndpointType.enum.default);\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useParameterizedQuery, useQuery } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiIntegrations';\nimport { getEndpointType, toUserIntegrations } from '../types/adapters/IntegrationAdapter';\nimport { IntegrationType } from '../types/Integration';\n\nexport const listIntegrationsActionCreator = (pager?: Page) => {\n    const query = (pager ?? Page.defaultPage()).toQuery();\n    return Operations.EndpointServiceGetEndpoints.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        type: query.filterType ? getEndpointType(query.filterType as IntegrationType) : undefined,\n        active: query.filterActive ? query.filterActive === 'true' : undefined\n    });\n};\n\nexport const listIntegrationIntegrationDecoder = validationResponseTransformer((payload: Operations.EndpointServiceGetEndpoints.Payload) => {\n    if (payload?.status === 200) {\n        return validatedResponse(\n            'IntegrationPage',\n            200,\n            {\n                data: toUserIntegrations(payload.value.data),\n                count: payload.value.meta.count\n            },\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useListIntegrationsQuery = (pager?: Page, initFetch?: boolean) => useTransformQueryResponse(\n    useQuery(listIntegrationsActionCreator(pager), initFetch),\n    listIntegrationIntegrationDecoder\n);\n\nexport const useListIntegrationPQuery = () => useTransformQueryResponse(\n    useParameterizedQuery(listIntegrationsActionCreator),\n    listIntegrationIntegrationDecoder\n);\n","import { ExporterCsv, ExporterHeaders } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nexport class IntegrationExporterCsv extends ExporterCsv<UserIntegration> {\n\n    public serialize(integration: UserIntegration) {\n        return {\n            ...integration\n        };\n    }\n\n    public headers(): ExporterHeaders<IntegrationExporterCsv, UserIntegration> {\n        return [\n            [ 'id', 'id' ],\n            [ 'name', 'name' ],\n            [ 'isEnabled', 'isEnabled' ],\n            [ 'type', 'type' ],\n            // This works now, but what will happen when there are multiple types (slack, webhook, etc)\n            [ 'url', 'url' ]\n        ];\n    }\n}\n","import { ExporterJson } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nexport class IntegrationExporterJson extends ExporterJson<UserIntegration> {\n\n}\n","import { Button, ButtonVariant, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { IntegrationRef } from '../../types/Notification';\n\ninterface AddNotificationBodyProps {\n    integration: IntegrationRef;\n    isLoading: boolean;\n    switchEnabled: () => void;\n}\n\nconst buttonClassname = style({\n    paddingLeft: 0\n});\n\nexport const AddNotificationBody: React.FunctionComponent<AddNotificationBodyProps> = (props) => {\n\n    const text = props.integration.isEnabled ? 'This integration is enabled and ready to use.' : 'This integration is disabled.';\n    const buttonText = props.integration.isEnabled ? 'Disable integration' : 'Enable integration';\n\n    return (\n        <>\n            <div>{ text }</div>\n            <Button\n                className={ buttonClassname }\n                isDisabled={ props.isLoading }\n                variant={ ButtonVariant.link }\n                onClick={ props.switchEnabled }\n            >\n                {buttonText}\n            </Button>\n            { props.isLoading && (\n                <Spinner size=\"sm\" />\n            ) }\n        </>\n    );\n};\n","import * as Yup from 'yup';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    IntegrationHttp,\n    IntegrationType, NewIntegration,\n    NewIntegrationBase, NewIntegrationTemplate\n} from '../../types/Integration';\n\nexport const maxIntegrationNameLength = 150;\n\nexport const IntegrationSchemaBase = Yup.object<NewIntegrationBase>({\n    name: Yup.string().required('Write a name for this Integration.').max(maxIntegrationNameLength).trim(),\n    type: Yup.mixed<IntegrationType>().oneOf([ IntegrationType.WEBHOOK ]).default(IntegrationType.WEBHOOK),\n    isEnabled: Yup.boolean().default(true).required()\n});\n\nexport const IntegrationHttpSchema = IntegrationSchemaBase.concat(Yup.object<NewIntegrationTemplate<IntegrationHttp>>().shape({\n    type: Yup.mixed<IntegrationType.WEBHOOK>().oneOf([ IntegrationType.WEBHOOK ]).required(),\n    url: Yup.string().url().required('Write a valid url for this Integration.'),\n    sslVerificationEnabled: Yup.boolean().default(true),\n    secretToken: Yup.string().notRequired(),\n    method: Yup.mixed<Schemas.HttpType>().oneOf(Object.values(Schemas.HttpType.Enum)).default(Schemas.HttpType.Enum.POST)\n}));\n\nexport const IntegrationSchema = Yup.lazy<NewIntegration | NewIntegrationBase | undefined>(value => {\n    if (value) {\n        if (value.type === IntegrationType.WEBHOOK) {\n            return IntegrationHttpSchema;\n        }\n    }\n\n    return IntegrationSchemaBase;\n});\n","import { Checkbox, FormTextInput, ouiaIdConcat } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './IntegrationTypeForm';\n\nexport const IntegrationTypeHttpForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    return (\n        <div className=\"pf-c-form\" { ...getOuiaProps('Integrations/HttpForm', props) } >\n            <FormTextInput\n                isRequired={ true }\n                label=\"Endpoint URL\"\n                type=\"url\"\n                name=\"url\"\n                id=\"integration-type-http-url\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'endpoint-url') }\n            />\n            <Checkbox\n                id=\"integration-type-http-ssl-verification-enabled\"\n                label=\"Enable SSL verification\"\n                name=\"sslVerificationEnabled\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'is-ssl-verification-enabled') }\n            />\n            <FormTextInput\n                isRequired={ false }\n                label=\"Secret token\"\n                id=\"integration-type-http-secret-token\"\n                name=\"secretToken\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'secret-token') }\n            />\n        </div>\n    );\n};\n","import { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationTypeHttpForm } from './IntegrationTypeHttpForm';\n\nexport interface IntegrationTypeForm extends OuiaComponentProps {\n    type: UserIntegrationType;\n}\n\nexport const IntegrationTypeForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    switch (props.type) {\n        case UserIntegrationType.WEBHOOK:\n            return <IntegrationTypeHttpForm { ...props } />;\n        default:\n            assertNever(props.type);\n    }\n};\n","import { FormSelectOption } from '@patternfly/react-core';\nimport {\n    Form,\n    FormSelect,\n    FormTextInput,\n    OuiaComponentProps,\n    ouiaIdConcat\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { Messages } from '../../properties/Messages';\nimport { maxIntegrationNameLength } from '../../schemas/Integrations/Integration';\nimport { IntegrationType, NewUserIntegration } from '../../types/Integration';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './Form/IntegrationTypeForm';\n\nconst options = [ IntegrationType.WEBHOOK ]\n.map(type => Messages.components.integrations.integrationType[type])\n.map(label => (<FormSelectOption key={ label } label={ label } />));\n\nexport const IntegrationsForm: React.FunctionComponent<OuiaComponentProps> = (props) => {\n\n    const { values } = useFormikContext<NewUserIntegration>();\n\n    return (\n        <Form { ...getOuiaProps('Integrations/Form', props) }>\n            <FormTextInput\n                maxLength={ maxIntegrationNameLength }\n                isRequired={ true }\n                label=\"Integration name\"\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'name') }\n            />\n            <FormSelect\n                isRequired={ true }\n                label=\"Type\"\n                name=\"type\"\n                id=\"integration-type\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'type') }\n            >\n                { options }\n            </FormSelect>\n            <IntegrationTypeForm\n                type={ values.type }\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'type-form') }\n            />\n        </Form>\n    );\n};\n","import { ActionModalError, SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { Messages } from '../../properties/Messages';\nimport { IntegrationSchema } from '../../schemas/Integrations/Integration';\nimport { NewUserIntegration, UserIntegration } from '../../types/Integration';\nimport { IntegrationsForm } from './Form';\n\ntype PartialIntegration = Partial<UserIntegration>;\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\n\nexport interface IntegrationSaveModalProps extends Omit<SaveModalProps, UsedProps>{\n    initialIntegration?: PartialIntegration;\n    onSave: (integration: UserIntegration | NewUserIntegration) => boolean | Promise<boolean>;\n    isEdit: boolean;\n}\n\ninterface InternalIntegrationSaveModalProps {\n    isEdit: boolean;\n    onClose: (saved: boolean) => void;\n    error?: ActionModalError;\n}\n\nconst InternalIntegrationSaveModal: React.FunctionComponent<InternalIntegrationSaveModalProps> = (props) => {\n\n    const pageMessages = props.isEdit ? Messages.pages.integrations.edit : Messages.pages.integrations.add;\n    const pageTitle =  pageMessages.title;\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<NewUserIntegration>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            isOpen={ true }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            title={ pageTitle }\n            content={ <IntegrationsForm /> }\n            onClose={ props.onClose }\n            error={ props.error }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const IntegrationSaveModal: React.FunctionComponent<IntegrationSaveModalProps> = (props) => {\n\n    const [ initialIntegration ] = React.useState<PartialIntegration>(() => {\n        return {\n            // The call is twice, because we use lazy evaluation for the integration base type.\n            // To ensure we get the defaults on the second level (webhook, slack, etc) we need to call it again\n            ...IntegrationSchema.cast(IntegrationSchema.cast()),\n            ...props.initialIntegration\n        };\n    });\n\n    const onSubmit = React.useCallback(async (integration: PartialIntegration) => {\n        const onSave = props.onSave;\n        const onClose = props.onClose;\n        const transformedIntegration = IntegrationSchema.cast(integration) as NewUserIntegration;\n        const saved = await onSave(transformedIntegration);\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onSave, props.onClose ]);\n\n    return (\n        <Formik<PartialIntegration>\n            initialValues={ initialIntegration }\n            validationSchema={ IntegrationSchema }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalIntegrationSaveModal\n                isEdit={ props.isEdit }\n                onClose={ props.onClose }\n                error={ props.error }\n            />\n        </Formik>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiIntegrations';\nimport { toIntegration, toServerIntegrationRequest } from '../types/adapters/IntegrationAdapter';\nimport { Integration, NewIntegration, NewUserIntegration, UserIntegration } from '../types/Integration';\n\nexport const createIntegrationActionCreator = (integration: NewIntegration | NewUserIntegration) => {\n    return Operations.EndpointServiceCreateEndpoint.actionCreator({\n        body: toServerIntegrationRequest(integration)\n    });\n};\n\nexport const saveIntegrationActionCreator = (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration) => {\n    if (integration.id) {\n        return Operations.EndpointServiceUpdateEndpoint.actionCreator({\n            body: toServerIntegrationRequest(integration),\n            id: integration.id\n        });\n    }\n\n    return createIntegrationActionCreator(integration);\n};\n\nconst decoder = (response: Operations.EndpointServiceCreateEndpoint.Payload | Operations.EndpointServiceUpdateEndpoint.Payload) => {\n    if (response.type === 'Endpoint') {\n        return {\n            ...response,\n            type: 'Integration',\n            value: toIntegration(response.value)\n        };\n    }\n\n    return response;\n};\n\nexport const useSaveIntegrationMutation = () => useTransformQueryResponse(\n    useMutation(saveIntegrationActionCreator),\n    decoder\n);\n","import { useMutation } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiIntegrations';\nimport { Integration, ServerIntegrationResponse } from '../types/Integration';\n\nexport const switchIntegrationEnabledStatusActionCreator = (integration: Integration) => {\n    if (integration.isEnabled) {\n        return Operations.EndpointServiceDisableEndpoint.actionCreator({\n            id: integration.id\n        });\n    } else {\n        return Operations.EndpointServiceEnableEndpoint.actionCreator({\n            id: integration.id\n        });\n    }\n};\n\nexport const useSwitchIntegrationEnabledStatus =\n    () => useMutation<ServerIntegrationResponse>(switchIntegrationEnabledStatusActionCreator);\n","import { NotificationAppState } from '../types/NotificationAppState';\nimport { SavedNotificationScopeState } from '../types/SavedNotificationScopeTypes';\n\nexport const savedNotificationScopeSelector = (state: NotificationAppState): SavedNotificationScopeState => state.savedNotificationScope;\n\nexport const savedNotificationScopeEqualFn = (left: SavedNotificationScopeState, right: SavedNotificationScopeState): boolean => {\n    return left?.integration === right?.integration && left?.status === right?.status;\n};\n","import { ActionModalError, addSuccessNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { AddNotificationBody } from '../../../components/Integrations/AddNotificationBody';\nimport { IntegrationSaveModal } from '../../../components/Integrations/SaveModal';\nimport { useSaveIntegrationMutation } from '../../../services/useSaveIntegration';\nimport { useSwitchIntegrationEnabledStatus } from '../../../services/useSwitchIntegrationEnabledStatus';\nimport { SavedNotificationScopeActions } from '../../../store/actions/SavedNotificationScopeAction';\nimport {\n    savedNotificationScopeEqualFn,\n    savedNotificationScopeSelector\n} from '../../../store/selectors/SavedNotificationScopeSelector';\nimport { Status } from '../../../store/types/SavedNotificationScopeTypes';\nimport { NewUserIntegration, UserIntegration } from '../../../types/Integration';\nimport { IntegrationRef } from '../../../types/Notification';\n\ninterface CreatePageProps {\n    isEdit: boolean;\n    initialIntegration: Partial<UserIntegration>;\n    onClose: (saved: boolean) => void;\n}\n\ninterface AddNotificationBodyContainer {\n    integration: IntegrationRef;\n}\n\nconst AddNotificationBodyContainer: React.FunctionComponent<AddNotificationBodyContainer> = (props) => {\n\n    const savedNotificationScope = useSelector(savedNotificationScopeSelector, savedNotificationScopeEqualFn);\n    const dispatch = useDispatch();\n    const switchIntegrationEnabledStatus = useSwitchIntegrationEnabledStatus();\n\n    const onClick = React.useCallback((): void => {\n        const mutate = switchIntegrationEnabledStatus.mutate;\n        if (savedNotificationScope) {\n            dispatch(SavedNotificationScopeActions.start());\n            const integration = savedNotificationScope.integration;\n            mutate(integration).then(response => {\n                if (!response.error) {\n                    dispatch(SavedNotificationScopeActions.finish(!integration.isEnabled));\n                } else {\n                    dispatch(SavedNotificationScopeActions.finish(integration.isEnabled));\n                }\n            });\n        }\n    }, [ switchIntegrationEnabledStatus.mutate, dispatch, savedNotificationScope ]);\n\n    React.useEffect(() => {\n        dispatch(SavedNotificationScopeActions.setIntegration(props.integration));\n        return () => {\n            dispatch(SavedNotificationScopeActions.unset());\n        };\n    }, [ dispatch, props.integration ]);\n\n    if (!savedNotificationScope) {\n        return <React.Fragment />;\n    }\n\n    return <AddNotificationBody\n        integration={ savedNotificationScope.integration }\n        isLoading={ savedNotificationScope.status === Status.LOADING }\n        switchEnabled={ onClick }\n    />;\n};\n\nexport const CreatePage: React.FunctionComponent<CreatePageProps> = props => {\n\n    const saveIntegrationMutation = useSaveIntegrationMutation();\n    const [ hasError, setError ] = React.useState(false);\n\n    const onSaveIntegration = React.useCallback((integration: NewUserIntegration) => {\n        if (!integration.id) {\n            integration.isEnabled = true;\n        }\n\n        setError(false);\n\n        return saveIntegrationMutation.mutate(integration).then(response => {\n            if (!response.error) {\n                const title = props.isEdit ? `${integration.name} saved successfully` : `${integration.name} added successfully`;\n\n                addSuccessNotification(\n                    title,\n                    <AddNotificationBodyContainer integration={ integration as UserIntegration } />,\n                    true\n                );\n\n                return true;\n            } else {\n                setError(true);\n                return false;\n            }\n        });\n    }, [ saveIntegrationMutation, props.isEdit ]);\n\n    const error = React.useMemo<ActionModalError | undefined>(() => {\n        if (hasError) {\n            if (props.isEdit) {\n                return {\n                    title: 'Integration failed to update',\n                    description: <p>There was an error trying to update the Integration. Please try again.</p>\n                };\n            } else {\n                return {\n                    title: 'Failed to create Integration',\n                    description: <p>There was an error trying to create the Integration. Please try again.</p>\n                };\n            }\n        }\n\n        return undefined;\n    }, [ hasError, props.isEdit ]);\n\n    return (\n        <IntegrationSaveModal\n            initialIntegration={ props.initialIntegration }\n            onSave={ onSaveIntegration }\n            isEdit={ props.isEdit }\n            isSaving={ saveIntegrationMutation.loading }\n            onClose={ props.onClose }\n            error={ error }\n        />\n    );\n};\n","import { ExpandableSection, List, ListItem, Skeleton } from '@patternfly/react-core';\nimport { DeleteModal, DeleteModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { UserIntegration } from '../../types/Integration';\nimport { Notification } from '../../types/Notification';\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onDelete';\n\ninterface IntegrationDeleteModalProps extends Omit<DeleteModalProps, UsedProps> {\n    integration?: UserIntegration;\n    onDelete: (integration: UserIntegration) => boolean | Promise<boolean>;\n    notifications?: Array<Notification>;\n}\n\nexport const IntegrationDeleteModal: React.FunctionComponent<IntegrationDeleteModalProps> = (props) => {\n\n    const onDeleteInternal = React.useCallback(() => {\n        const integration = props.integration;\n        const onDelete = props.onDelete;\n        if (integration) {\n            return onDelete(integration);\n        }\n\n        return false;\n    }, [ props.onDelete, props.integration ]);\n\n    const content = React.useMemo(() => {\n        if (props.notifications === undefined) {\n            return (\n                <span data-testid=\"loading\">\n                    <Skeleton />\n                </span>\n            );\n        } else if (props.notifications.length === 0) {\n            return <span\n                data-testid=\"removing-integration-without-notifications\"\n            >\n                Removing integration <strong>{ props.integration?.name }</strong> does not affect any notification events.\n            </span>;\n        } else {\n            const eventText = props.notifications.length !== 1 ? 'events' : 'event';\n            return (\n                <span data-testid={ `removing-integration-with-notifications-${props.notifications.length}` }>\n                    Removing integration <strong>{ props.integration?.name }</strong> affects {props.notifications.length} notification {eventText}.\n                    { props.notifications.length > 0 && <ExpandableSection toggleText={ `View ${props.notifications.length} ${eventText}.` }>\n                        <List>\n                            { props.notifications.map(notification => (\n                                <ListItem\n                                    key={ notification.id }\n                                >\n                                    { notification.applicationDisplayName }: { notification.eventTypeDisplayName }\n                                </ListItem>\n                            )) }\n                        </List>\n                    </ExpandableSection> }\n                </span>\n            );\n        }\n    }, [ props.notifications, props.integration ]);\n\n    if (!props.integration) {\n        return null;\n    }\n\n    return (\n        <DeleteModal\n            isOpen={ true }\n            isDeleting={ props.isDeleting }\n            title={ 'Remove integration' }\n            content={ content }\n            onClose={ props.onClose }\n            onDelete={ onDeleteInternal }\n            error={ props.error }\n            titleIconVariant=\"warning\"\n        />\n    );\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Action = zodSchemaAction();\n  export type Action = {\n    accountId?: string | undefined | null;\n    account_id?: string | undefined | null;\n    application?: string | undefined | null;\n    eventType?: string | undefined | null;\n    event_type?: string | undefined | null;\n    payload?: Map | undefined | null;\n    schema?: Schema | undefined | null;\n    specificData?: SpecificData | undefined | null;\n    timestamp?: string | undefined | null;\n  };\n\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    eventTypes?: SetEventType | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const ApplicationFacet = zodSchemaApplicationFacet();\n  export type ApplicationFacet = {\n    label: string;\n    value: string;\n  };\n\n  export const Attributes = zodSchemaAttributes();\n  export type Attributes = unknown;\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    applications?: SetApplication | undefined | null;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const ConcurrentMapStringJsonNode = zodSchemaConcurrentMapStringJsonNode();\n  export type ConcurrentMapStringJsonNode = {\n    [x: string]: JsonNode;\n  };\n\n  export const ConversionObject = zodSchemaConversionObject();\n  export type ConversionObject = {\n    convertedType?: unknown | undefined | null;\n    logicalTypeName?: string | undefined | null;\n    recommendedSchema?: Schema | undefined | null;\n  };\n\n  export const EmailSubscriptionAttributes = zodSchemaEmailSubscriptionAttributes();\n  export type EmailSubscriptionAttributes = unknown;\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookAttributes | EmailSubscriptionAttributes)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: ListEndpoint;\n    links: MapStringString;\n    meta: Meta;\n  };\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType = 'webhook' | 'email_subscription' | 'default';\n\n  export const EntityTag = zodSchemaEntityTag();\n  export type EntityTag = {\n    value?: string | undefined | null;\n    weak?: boolean | undefined | null;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    description?: string | undefined | null;\n    display_name: string;\n    endpoints?: SetEndpoint | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Family = zodSchemaFamily();\n  export type Family =\n    | 'CLIENT_ERROR'\n    | 'INFORMATIONAL'\n    | 'OTHER'\n    | 'REDIRECTION'\n    | 'SERVER_ERROR'\n    | 'SUCCESSFUL';\n\n  export const FastReaderBuilder = zodSchemaFastReaderBuilder();\n  export type FastReaderBuilder = {\n    classPropEnabled?: boolean | undefined | null;\n    data?: GenericData | undefined | null;\n    keyClassEnabled?: boolean | undefined | null;\n    readerCache?: MapSchemaMapSchemaRecordReader | undefined | null;\n  };\n\n  export const Field = zodSchemaField();\n  export type Field = {\n    aliases?: SetString | undefined | null;\n    defaultValue?: JsonNode | undefined | null;\n    doc?: string | undefined | null;\n    name?: string | undefined | null;\n    objectProps?: MapStringObject | undefined | null;\n    order?: Order | undefined | null;\n    position?: number | undefined | null;\n    props?: ConcurrentMapStringJsonNode | undefined | null;\n    reserved?: SetString | undefined | null;\n    schema?: Schema | undefined | null;\n  };\n\n  export const GenericData = zodSchemaGenericData();\n  export type GenericData = {\n    classLoader?: unknown | undefined | null;\n    conversions?: MapStringConversionObject | undefined | null;\n    conversionsByClass?:\n      | MapClassObjectMapStringConversionObject\n      | undefined\n      | null;\n    defaultValueCache?: MapFieldObject | undefined | null;\n    fastReaderBuilder?: FastReaderBuilder | undefined | null;\n    fastReaderEnabled?: boolean | undefined | null;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const JsonNode = zodSchemaJsonNode();\n  export type JsonNode = {\n    array?: boolean | undefined | null;\n    bigDecimal?: boolean | undefined | null;\n    bigInteger?: boolean | undefined | null;\n    binary?: boolean | undefined | null;\n    boolean?: boolean | undefined | null;\n    containerNode?: boolean | undefined | null;\n    double?: boolean | undefined | null;\n    empty?: boolean | undefined | null;\n    float?: boolean | undefined | null;\n    floatingPointNumber?: boolean | undefined | null;\n    int?: boolean | undefined | null;\n    integralNumber?: boolean | undefined | null;\n    long?: boolean | undefined | null;\n    missingNode?: boolean | undefined | null;\n    nodeType?: JsonNodeType | undefined | null;\n    null?: boolean | undefined | null;\n    number?: boolean | undefined | null;\n    object?: boolean | undefined | null;\n    pojo?: boolean | undefined | null;\n    short?: boolean | undefined | null;\n    textual?: boolean | undefined | null;\n    valueNode?: boolean | undefined | null;\n  };\n\n  export const JsonNodeType = zodSchemaJsonNodeType();\n  export type JsonNodeType =\n    | 'ARRAY'\n    | 'BINARY'\n    | 'BOOLEAN'\n    | 'MISSING'\n    | 'NULL'\n    | 'NUMBER'\n    | 'OBJECT'\n    | 'POJO'\n    | 'STRING';\n\n  export const JsonObject = zodSchemaJsonObject();\n  export type JsonObject = Array<unknown>;\n\n  export const Link = zodSchemaLink();\n  export type Link = {\n    params?: MapStringString | undefined | null;\n    rel?: string | undefined | null;\n    rels?: ListString | undefined | null;\n    title?: string | undefined | null;\n    type?: string | undefined | null;\n    uri?: string | undefined | null;\n    uriBuilder?: UriBuilder | undefined | null;\n  };\n\n  export const ListEndpoint = zodSchemaListEndpoint();\n  export type ListEndpoint = Array<Endpoint>;\n\n  export const ListField = zodSchemaListField();\n  export type ListField = Array<Field>;\n\n  export const ListSchema = zodSchemaListSchema();\n  export type ListSchema = Array<Schema>;\n\n  export const ListString = zodSchemaListString();\n  export type ListString = Array<string>;\n\n  export const Locale = zodSchemaLocale();\n  export type Locale = {\n    country?: string | undefined | null;\n    displayCountry?: string | undefined | null;\n    displayLanguage?: string | undefined | null;\n    displayName?: string | undefined | null;\n    displayScript?: string | undefined | null;\n    displayVariant?: string | undefined | null;\n    extensionKeys?: SetCharacter | undefined | null;\n    iSO3Country?: string | undefined | null;\n    iSO3Language?: string | undefined | null;\n    language?: string | undefined | null;\n    script?: string | undefined | null;\n    unicodeLocaleAttributes?: SetString | undefined | null;\n    unicodeLocaleKeys?: SetString | undefined | null;\n    variant?: string | undefined | null;\n  };\n\n  export const LogicalType = zodSchemaLogicalType();\n  export type LogicalType = {\n    name?: string | undefined | null;\n  };\n\n  export const Map = zodSchemaMap();\n  export type Map = unknown;\n\n  export const MapClassObjectMapStringConversionObject = zodSchemaMapClassObjectMapStringConversionObject();\n  export type MapClassObjectMapStringConversionObject = {\n    [x: string]: MapStringConversionObject;\n  };\n\n  export const MapFieldObject = zodSchemaMapFieldObject();\n  export type MapFieldObject = {\n    [x: string]: unknown;\n  };\n\n  export const MapSchemaMapSchemaRecordReader = zodSchemaMapSchemaMapSchemaRecordReader();\n  export type MapSchemaMapSchemaRecordReader = {\n    [x: string]: MapSchemaRecordReader;\n  };\n\n  export const MapSchemaRecordReader = zodSchemaMapSchemaRecordReader();\n  export type MapSchemaRecordReader = {\n    empty?: boolean | undefined | null;\n  };\n\n  export const MapStringClass = zodSchemaMapStringClass();\n  export type MapStringClass = {\n    [x: string]: unknown;\n  };\n\n  export const MapStringConversionObject = zodSchemaMapStringConversionObject();\n  export type MapStringConversionObject = {\n    [x: string]: ConversionObject;\n  };\n\n  export const MapStringNewCookie = zodSchemaMapStringNewCookie();\n  export type MapStringNewCookie = {\n    [x: string]: NewCookie;\n  };\n\n  export const MapStringObject = zodSchemaMapStringObject();\n  export type MapStringObject = {\n    [x: string]: unknown;\n  };\n\n  export const MapStringString = zodSchemaMapStringString();\n  export type MapStringString = {\n    [x: string]: string;\n  };\n\n  export const MapTypeSchema = zodSchemaMapTypeSchema();\n  export type MapTypeSchema = {\n    [x: string]: Schema;\n  };\n\n  export const MediaType = zodSchemaMediaType();\n  export type MediaType = {\n    parameters?: MapStringString | undefined | null;\n    subtype?: string | undefined | null;\n    type?: string | undefined | null;\n    wildcardSubtype?: boolean | undefined | null;\n    wildcardType?: boolean | undefined | null;\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();\n  export type MultivaluedMapStringObject = {\n    [x: string]: unknown;\n  };\n\n  export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();\n  export type MultivaluedMapStringString = {\n    [x: string]: string;\n  };\n\n  export const NewCookie = zodSchemaNewCookie();\n  export type NewCookie = {\n    comment?: string | undefined | null;\n    domain?: string | undefined | null;\n    expiry?: string | undefined | null;\n    httpOnly?: boolean | undefined | null;\n    maxAge?: number | undefined | null;\n    name?: string | undefined | null;\n    path?: string | undefined | null;\n    secure?: boolean | undefined | null;\n    value?: string | undefined | null;\n    version?: number | undefined | null;\n  };\n\n  export const Notification = zodSchemaNotification();\n  export type Notification = {\n    action?: Action | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    tenant?: string | undefined | null;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?: JsonObject | undefined | null;\n    endpointId?: UUID | undefined | null;\n    eventId?: string | undefined | null;\n    id?: number | undefined | null;\n    invocationResult?: boolean | undefined | null;\n    invocationTime?: number | undefined | null;\n  };\n\n  export const Order = zodSchemaOrder();\n  export type Order = 'ASCENDING' | 'DESCENDING' | 'IGNORE';\n\n  export const Response = zodSchemaResponse();\n  export type Response = {\n    allowedMethods?: SetString | undefined | null;\n    cookies?: MapStringNewCookie | undefined | null;\n    date?: string | undefined | null;\n    entity?: unknown | undefined | null;\n    entityTag?: EntityTag | undefined | null;\n    headers?: MultivaluedMapStringObject | undefined | null;\n    language?: Locale | undefined | null;\n    lastModified?: string | undefined | null;\n    length?: number | undefined | null;\n    links?: SetLink | undefined | null;\n    location?: string | undefined | null;\n    mediaType?: MediaType | undefined | null;\n    metadata?: MultivaluedMapStringObject | undefined | null;\n    status?: number | undefined | null;\n    statusInfo?: StatusType | undefined | null;\n    stringHeaders?: MultivaluedMapStringString | undefined | null;\n  };\n\n  export const Schema = zodSchemaSchema();\n  export type Schema = {\n    aliases?: SetString | undefined | null;\n    doc?: string | undefined | null;\n    elementType?: Schema | undefined | null;\n    enumDefault?: string | undefined | null;\n    enumSymbols?: ListString | undefined | null;\n    error?: boolean | undefined | null;\n    fields?: ListField | undefined | null;\n    fixedSize?: number | undefined | null;\n    fullName?: string | undefined | null;\n    hashCode?: number | undefined | null;\n    logicalType?: LogicalType | undefined | null;\n    name?: string | undefined | null;\n    namespace?: string | undefined | null;\n    nullable?: boolean | undefined | null;\n    objectProps?: MapStringObject | undefined | null;\n    props?: ConcurrentMapStringJsonNode | undefined | null;\n    reserved?: SetString | undefined | null;\n    type?: Type | undefined | null;\n    types?: ListSchema | undefined | null;\n    union?: boolean | undefined | null;\n    valueType?: Schema | undefined | null;\n  };\n\n  export const SetApplication = zodSchemaSetApplication();\n  export type SetApplication = Array<Application>;\n\n  export const SetCharacter = zodSchemaSetCharacter();\n  export type SetCharacter = Array<string>;\n\n  export const SetClass = zodSchemaSetClass();\n  export type SetClass = Array<unknown>;\n\n  export const SetEndpoint = zodSchemaSetEndpoint();\n  export type SetEndpoint = Array<Endpoint>;\n\n  export const SetEventType = zodSchemaSetEventType();\n  export type SetEventType = Array<EventType>;\n\n  export const SetLink = zodSchemaSetLink();\n  export type SetLink = Array<Link>;\n\n  export const SetString = zodSchemaSetString();\n  export type SetString = Array<string>;\n\n  export const SetUUID = zodSchemaSetUUID();\n  export type SetUUID = Array<string>;\n\n  export const SpecificData = zodSchemaSpecificData();\n  export type SpecificData = {\n    classCache?: MapStringClass | undefined | null;\n    classLoader?: unknown | undefined | null;\n    conversions?: MapStringConversionObject | undefined | null;\n    conversionsByClass?:\n      | MapClassObjectMapStringConversionObject\n      | undefined\n      | null;\n    customCoders?: boolean | undefined | null;\n    defaultValueCache?: MapFieldObject | undefined | null;\n    fastReaderBuilder?: FastReaderBuilder | undefined | null;\n    fastReaderEnabled?: boolean | undefined | null;\n    schemaClassCache?: unknown | undefined | null;\n    schemaTypeCache?: MapTypeSchema | undefined | null;\n    stringableClasses?: SetClass | undefined | null;\n    useCustomCoderFlag?: boolean | undefined | null;\n  };\n\n  export const StatusType = zodSchemaStatusType();\n  export type StatusType = {\n    family?: Family | undefined | null;\n    reasonPhrase?: string | undefined | null;\n    statusCode?: number | undefined | null;\n  };\n\n  export const Type = zodSchemaType();\n  export type Type =\n    | 'ARRAY'\n    | 'BOOLEAN'\n    | 'BYTES'\n    | 'DOUBLE'\n    | 'ENUM'\n    | 'FIXED'\n    | 'FLOAT'\n    | 'INT'\n    | 'LONG'\n    | 'MAP'\n    | 'NULL'\n    | 'RECORD'\n    | 'STRING'\n    | 'UNION';\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UriBuilder = zodSchemaUriBuilder();\n  export type UriBuilder = unknown;\n\n  export const WebhookAttributes = zodSchemaWebhookAttributes();\n  export type WebhookAttributes = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification?: boolean | undefined | null;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  function zodSchemaAction() {\n      return z\n      .object({\n          accountId: z.string().optional().nullable(),\n          account_id: z.string().optional().nullable(),\n          application: z.string().optional().nullable(),\n          eventType: z.string().optional().nullable(),\n          event_type: z.string().optional().nullable(),\n          payload: zodSchemaMap().optional().nullable(),\n          schema: zodSchemaSchema().optional().nullable(),\n          specificData: zodSchemaSpecificData().optional().nullable(),\n          timestamp: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          eventTypes: zodSchemaSetEventType().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplicationFacet() {\n      return z\n      .object({\n          label: z.string(),\n          value: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAttributes() {\n      return z.unknown();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          applications: zodSchemaSetApplication().optional().nullable(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaConcurrentMapStringJsonNode() {\n      return z.record(zodSchemaJsonNode());\n  }\n\n  function zodSchemaConversionObject() {\n      return z\n      .object({\n          convertedType: z.unknown().optional().nullable(),\n          logicalTypeName: z.string().optional().nullable(),\n          recommendedSchema: zodSchemaSchema().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionAttributes() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookAttributes(),\n              zodSchemaEmailSubscriptionAttributes()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: zodSchemaListEndpoint(),\n          links: zodSchemaMapStringString(),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default' ]);\n  }\n\n  function zodSchemaEntityTag() {\n      return z\n      .object({\n          value: z.string().optional().nullable(),\n          weak: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: z\n          .lazy(() => zodSchemaApplication())\n          .optional()\n          .nullable(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          endpoints: zodSchemaSetEndpoint().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFamily() {\n      return z.enum([\n          'CLIENT_ERROR',\n          'INFORMATIONAL',\n          'OTHER',\n          'REDIRECTION',\n          'SERVER_ERROR',\n          'SUCCESSFUL'\n      ]);\n  }\n\n  function zodSchemaFastReaderBuilder() {\n      return z\n      .object({\n          classPropEnabled: z.boolean().optional().nullable(),\n          data: zodSchemaGenericData().optional().nullable(),\n          keyClassEnabled: z.boolean().optional().nullable(),\n          readerCache: zodSchemaMapSchemaMapSchemaRecordReader()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaField() {\n      return z\n      .object({\n          aliases: zodSchemaSetString().optional().nullable(),\n          defaultValue: zodSchemaJsonNode().optional().nullable(),\n          doc: z.string().optional().nullable(),\n          name: z.string().optional().nullable(),\n          objectProps: zodSchemaMapStringObject().optional().nullable(),\n          order: zodSchemaOrder().optional().nullable(),\n          position: z.number().int().optional().nullable(),\n          props: zodSchemaConcurrentMapStringJsonNode().optional().nullable(),\n          reserved: zodSchemaSetString().optional().nullable(),\n          schema: z\n          .lazy(() => zodSchemaSchema())\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaGenericData() {\n      return z\n      .object({\n          classLoader: z.unknown().optional().nullable(),\n          conversions: zodSchemaMapStringConversionObject().optional().nullable(),\n          conversionsByClass: zodSchemaMapClassObjectMapStringConversionObject()\n          .optional()\n          .nullable(),\n          defaultValueCache: zodSchemaMapFieldObject().optional().nullable(),\n          fastReaderBuilder: z\n          .lazy(() => zodSchemaFastReaderBuilder())\n          .optional()\n          .nullable(),\n          fastReaderEnabled: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaJsonNode() {\n      return z\n      .object({\n          array: z.boolean().optional().nullable(),\n          bigDecimal: z.boolean().optional().nullable(),\n          bigInteger: z.boolean().optional().nullable(),\n          binary: z.boolean().optional().nullable(),\n          boolean: z.boolean().optional().nullable(),\n          containerNode: z.boolean().optional().nullable(),\n          double: z.boolean().optional().nullable(),\n          empty: z.boolean().optional().nullable(),\n          float: z.boolean().optional().nullable(),\n          floatingPointNumber: z.boolean().optional().nullable(),\n          int: z.boolean().optional().nullable(),\n          integralNumber: z.boolean().optional().nullable(),\n          long: z.boolean().optional().nullable(),\n          missingNode: z.boolean().optional().nullable(),\n          nodeType: zodSchemaJsonNodeType().optional().nullable(),\n          null: z.boolean().optional().nullable(),\n          number: z.boolean().optional().nullable(),\n          object: z.boolean().optional().nullable(),\n          pojo: z.boolean().optional().nullable(),\n          short: z.boolean().optional().nullable(),\n          textual: z.boolean().optional().nullable(),\n          valueNode: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaJsonNodeType() {\n      return z.enum([\n          'ARRAY',\n          'BINARY',\n          'BOOLEAN',\n          'MISSING',\n          'NULL',\n          'NUMBER',\n          'OBJECT',\n          'POJO',\n          'STRING'\n      ]);\n  }\n\n  function zodSchemaJsonObject() {\n      return z.array(z.unknown());\n  }\n\n  function zodSchemaLink() {\n      return z\n      .object({\n          params: zodSchemaMapStringString().optional().nullable(),\n          rel: z.string().optional().nullable(),\n          rels: zodSchemaListString().optional().nullable(),\n          title: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          uri: z.string().optional().nullable(),\n          uriBuilder: zodSchemaUriBuilder().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaListEndpoint() {\n      return z.array(zodSchemaEndpoint());\n  }\n\n  function zodSchemaListField() {\n      return z.array(zodSchemaField());\n  }\n\n  function zodSchemaListSchema() {\n      return z.array(z.lazy(() => zodSchemaSchema()));\n  }\n\n  function zodSchemaListString() {\n      return z.array(z.string());\n  }\n\n  function zodSchemaLocale() {\n      return z\n      .object({\n          country: z.string().optional().nullable(),\n          displayCountry: z.string().optional().nullable(),\n          displayLanguage: z.string().optional().nullable(),\n          displayName: z.string().optional().nullable(),\n          displayScript: z.string().optional().nullable(),\n          displayVariant: z.string().optional().nullable(),\n          extensionKeys: zodSchemaSetCharacter().optional().nullable(),\n          iSO3Country: z.string().optional().nullable(),\n          iSO3Language: z.string().optional().nullable(),\n          language: z.string().optional().nullable(),\n          script: z.string().optional().nullable(),\n          unicodeLocaleAttributes: zodSchemaSetString().optional().nullable(),\n          unicodeLocaleKeys: zodSchemaSetString().optional().nullable(),\n          variant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLogicalType() {\n      return z\n      .object({\n          name: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMap() {\n      return z.unknown();\n  }\n\n  function zodSchemaMapClassObjectMapStringConversionObject() {\n      return z.record(zodSchemaMapStringConversionObject());\n  }\n\n  function zodSchemaMapFieldObject() {\n      return z.record(z.unknown());\n  }\n\n  function zodSchemaMapSchemaMapSchemaRecordReader() {\n      return z.record(zodSchemaMapSchemaRecordReader());\n  }\n\n  function zodSchemaMapSchemaRecordReader() {\n      return z\n      .object({\n          empty: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMapStringClass() {\n      return z.record(z.unknown());\n  }\n\n  function zodSchemaMapStringConversionObject() {\n      return z.record(zodSchemaConversionObject());\n  }\n\n  function zodSchemaMapStringNewCookie() {\n      return z.record(zodSchemaNewCookie());\n  }\n\n  function zodSchemaMapStringObject() {\n      return z.record(z.unknown());\n  }\n\n  function zodSchemaMapStringString() {\n      return z.record(z.string());\n  }\n\n  function zodSchemaMapTypeSchema() {\n      return z.record(zodSchemaSchema());\n  }\n\n  function zodSchemaMediaType() {\n      return z\n      .object({\n          parameters: zodSchemaMapStringString().optional().nullable(),\n          subtype: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          wildcardSubtype: z.boolean().optional().nullable(),\n          wildcardType: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMultivaluedMapStringObject() {\n      return z.record(z.unknown());\n  }\n\n  function zodSchemaMultivaluedMapStringString() {\n      return z.record(z.string());\n  }\n\n  function zodSchemaNewCookie() {\n      return z\n      .object({\n          comment: z.string().optional().nullable(),\n          domain: z.string().optional().nullable(),\n          expiry: z.string().optional().nullable(),\n          httpOnly: z.boolean().optional().nullable(),\n          maxAge: z.number().int().optional().nullable(),\n          name: z.string().optional().nullable(),\n          path: z.string().optional().nullable(),\n          secure: z.boolean().optional().nullable(),\n          value: z.string().optional().nullable(),\n          version: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotification() {\n      return z\n      .object({\n          action: zodSchemaAction().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          tenant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: zodSchemaJsonObject().optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          eventId: z.string().optional().nullable(),\n          id: z.number().int().optional().nullable(),\n          invocationResult: z.boolean().optional().nullable(),\n          invocationTime: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaOrder() {\n      return z.enum([ 'ASCENDING', 'DESCENDING', 'IGNORE' ]);\n  }\n\n  function zodSchemaResponse() {\n      return z\n      .object({\n          allowedMethods: zodSchemaSetString().optional().nullable(),\n          cookies: zodSchemaMapStringNewCookie().optional().nullable(),\n          date: z.string().optional().nullable(),\n          entity: z.unknown().optional().nullable(),\n          entityTag: zodSchemaEntityTag().optional().nullable(),\n          headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          language: zodSchemaLocale().optional().nullable(),\n          lastModified: z.string().optional().nullable(),\n          length: z.number().int().optional().nullable(),\n          links: zodSchemaSetLink().optional().nullable(),\n          location: z.string().optional().nullable(),\n          mediaType: zodSchemaMediaType().optional().nullable(),\n          metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          status: z.number().int().optional().nullable(),\n          statusInfo: zodSchemaStatusType().optional().nullable(),\n          stringHeaders: zodSchemaMultivaluedMapStringString()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaSchema() {\n      return z\n      .object({\n          aliases: zodSchemaSetString().optional().nullable(),\n          doc: z.string().optional().nullable(),\n          elementType: z\n          .lazy(() => zodSchemaSchema())\n          .optional()\n          .nullable(),\n          enumDefault: z.string().optional().nullable(),\n          enumSymbols: zodSchemaListString().optional().nullable(),\n          error: z.boolean().optional().nullable(),\n          fields: zodSchemaListField().optional().nullable(),\n          fixedSize: z.number().int().optional().nullable(),\n          fullName: z.string().optional().nullable(),\n          hashCode: z.number().int().optional().nullable(),\n          logicalType: zodSchemaLogicalType().optional().nullable(),\n          name: z.string().optional().nullable(),\n          namespace: z.string().optional().nullable(),\n          nullable: z.boolean().optional().nullable(),\n          objectProps: zodSchemaMapStringObject().optional().nullable(),\n          props: zodSchemaConcurrentMapStringJsonNode().optional().nullable(),\n          reserved: zodSchemaSetString().optional().nullable(),\n          type: zodSchemaType().optional().nullable(),\n          types: zodSchemaListSchema().optional().nullable(),\n          union: z.boolean().optional().nullable(),\n          valueType: z\n          .lazy(() => zodSchemaSchema())\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaSetApplication() {\n      return z.array(zodSchemaApplication());\n  }\n\n  function zodSchemaSetCharacter() {\n      return z.array(z.string());\n  }\n\n  function zodSchemaSetClass() {\n      return z.array(z.unknown());\n  }\n\n  function zodSchemaSetEndpoint() {\n      return z.array(zodSchemaEndpoint());\n  }\n\n  function zodSchemaSetEventType() {\n      return z.array(zodSchemaEventType());\n  }\n\n  function zodSchemaSetLink() {\n      return z.array(zodSchemaLink());\n  }\n\n  function zodSchemaSetString() {\n      return z.array(z.string());\n  }\n\n  function zodSchemaSetUUID() {\n      return z.array(z.string());\n  }\n\n  function zodSchemaSpecificData() {\n      return z\n      .object({\n          classCache: zodSchemaMapStringClass().optional().nullable(),\n          classLoader: z.unknown().optional().nullable(),\n          conversions: zodSchemaMapStringConversionObject().optional().nullable(),\n          conversionsByClass: zodSchemaMapClassObjectMapStringConversionObject()\n          .optional()\n          .nullable(),\n          customCoders: z.boolean().optional().nullable(),\n          defaultValueCache: zodSchemaMapFieldObject().optional().nullable(),\n          fastReaderBuilder: zodSchemaFastReaderBuilder().optional().nullable(),\n          fastReaderEnabled: z.boolean().optional().nullable(),\n          schemaClassCache: z.unknown().optional().nullable(),\n          schemaTypeCache: zodSchemaMapTypeSchema().optional().nullable(),\n          stringableClasses: zodSchemaSetClass().optional().nullable(),\n          useCustomCoderFlag: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatusType() {\n      return z\n      .object({\n          family: zodSchemaFamily().optional().nullable(),\n          reasonPhrase: z.string().optional().nullable(),\n          statusCode: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaType() {\n      return z.enum([\n          'ARRAY',\n          'BOOLEAN',\n          'BYTES',\n          'DOUBLE',\n          'ENUM',\n          'FIXED',\n          'FLOAT',\n          'INT',\n          'LONG',\n          'MAP',\n          'NULL',\n          'RECORD',\n          'STRING',\n          'UNION'\n      ]);\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUriBuilder() {\n      return z.unknown();\n  }\n\n  function zodSchemaWebhookAttributes() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean().optional().nullable(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n}\n\nexport namespace Operations {\n  // GET /notifications/defaults\n  // Retrieve all integrations of the configured default actions.\n  export namespace NotificationServiceGetEndpointsForDefaults {\n    const Response200 = z.array(Schemas.Endpoint);\n    type Response200 = Array<Schemas.Endpoint>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/defaults/{endpointId}\n  // Add an integration to the list of configured default actions.\n  export namespace NotificationServiceAddEndpointToDefaults {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/defaults/{endpointId}\n  // Remove an integration from the list of configured default actions.\n  export namespace NotificationServiceDeleteEndpointFromDefaults {\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes\n  export namespace NotificationServiceGetEventTypes {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      applicationIds?: Schemas.SetUUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes';\n        const query = {} as Record<string, any>;\n        if (params.applicationIds !== undefined) {\n            query.applicationIds = params.applicationIds;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/affectedByRemovalOfEndpoint/{endpointId}\n  export namespace NotificationServiceGetEventTypesAffectedByEndpointId {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/affectedByRemovalOfEndpoint/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/{eventTypeId}\n  export namespace NotificationServiceGetLinkedEndpoints {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.Endpoint);\n    type Response200 = Array<Schemas.Endpoint>;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/eventTypes/{eventTypeId}/{endpointId}\n  export namespace NotificationServiceLinkEndpointToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'\n        .replace('{endpointId}', params.endpointId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/eventTypes/{eventTypeId}/{endpointId}\n  export namespace NotificationServiceUnlinkEndpointFromEventType {\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'\n        .replace('{endpointId}', params.endpointId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/applications\n  // Return a thin list of configured applications. This can be used to configure a filter in the UI\n  export namespace NotificationServiceGetApplicationsFacets {\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.array(Schemas.ApplicationFacet);\n    type Response200 = Array<Schemas.ApplicationFacet>;\n    export interface Params {\n      bundleName?: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/applications';\n        const query = {} as Record<string, any>;\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/updates\n  export namespace NotificationServiceGetNotificationUpdates {\n    const Response200 = z.array(Schemas.Notification);\n    type Response200 = Array<Schemas.Notification>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/updates';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/{id}\n  export namespace NotificationServiceMarkRead {\n    const Body = z.number().int();\n    type Body = number;\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/{id}';\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n}\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\n\nexport type UUID = Schemas.UUID;\n\nexport interface Notification {\n    id: UUID;\n    applicationDisplayName: string;\n    eventTypeDisplayName: string;\n    actions: Array<Action>;\n    useDefault?: boolean;\n}\n\nexport type IntegrationRef = Pick<UserIntegration, 'id' | 'name' | 'type' | 'isEnabled'>\n\nexport interface DefaultNotificationBehavior {\n    actions: Array<Action>;\n}\n\nexport interface ActionBase {\n    type: NotificationType;\n    integrationId: UUID;\n}\n\nexport interface ActionIntegration extends ActionBase {\n    type: NotificationType.INTEGRATION;\n    integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n    type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n    recipient: Array<string>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport enum NotificationType {\n    EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n    DRAWER = 'DRAWER',\n    INTEGRATION = 'INTEGRATION'\n}\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { ServerIntegrationResponse } from '../Integration';\nimport { Action, Notification, NotificationType, ServerNotificationResponse } from '../Notification';\nimport { filterOutDefaultAction, toIntegration, toUserIntegration } from './IntegrationAdapter';\n\nconst _toAction = (type: NotificationType, serverAction: ServerIntegrationResponse): Action => {\n    if (type === NotificationType.INTEGRATION) {\n        const userIntegration = toUserIntegration(serverAction);\n        return {\n            type,\n            integrationId: userIntegration.id,\n            integration: userIntegration\n        };\n    }\n\n    const integration = toIntegration(serverAction);\n\n    return {\n        type,\n        integrationId: integration.id,\n        recipient: []\n    };\n};\n\nexport const usesDefault = (endpoints: Array<Schemas.Endpoint>): boolean =>\n    endpoints.findIndex(e => e.type === Schemas.EndpointType.enum.default) !== -1;\n\nexport const toNotification = (serverNotification: ServerNotificationResponse): Notification => {\n    if (!serverNotification.id || !serverNotification.application) {\n        throw new Error(`Unexpected notification from server ${JSON.stringify(serverNotification)}`);\n    }\n\n    return {\n        id: serverNotification.id,\n        applicationDisplayName: serverNotification.application.display_name,\n        eventTypeDisplayName: serverNotification.display_name,\n        actions: toActions(filterOutDefaultAction(serverNotification.endpoints ?? [])),\n        useDefault: usesDefault(serverNotification.endpoints ?? [])\n    };\n};\n\nexport const toAction = (serverAction: ServerIntegrationResponse): Action => {\n    switch (serverAction.type) {\n        case Schemas.EndpointType.enum.webhook:\n            return _toAction(NotificationType.INTEGRATION, serverAction);\n        case Schemas.EndpointType.enum.email_subscription:\n            return _toAction(NotificationType.EMAIL_SUBSCRIPTION, serverAction);\n        case Schemas.EndpointType.enum.default:\n            throw new Error('EndpointType.default should not reach this point');\n        default:\n            assertNever(serverAction.type);\n    }\n};\n\nexport const toNotifications = (serverNotifications: Array<ServerNotificationResponse>) => serverNotifications.map(toNotification);\nexport const toActions = (serverActions: Array<ServerIntegrationResponse>): Array<Action> => filterOutDefaultAction(serverActions).map(toAction);\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toNotifications } from '../../types/adapters/NotificationAdapter';\n\nconst notificationsForEndpointActionCreator = (integrationId: string) => {\n    return Operations.NotificationServiceGetEventTypesAffectedByEndpointId.actionCreator({\n        endpointId: integrationId\n    });\n};\n\nconst defaultNotificationsDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceGetEventTypesAffectedByEndpointId.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'Notifications',\n                200,\n                toNotifications(payload.value),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetAffectedNotificationsByEndpoint = () =>\n    useTransformQueryResponse(useParameterizedQuery(notificationsForEndpointActionCreator), defaultNotificationsDecoder);\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiIntegrations';\n\nconst deleteIntegrationActionCreator = (integrationId: string) => {\n    return Operations.EndpointServiceDeleteEndpoint.actionCreator({\n        id: integrationId\n    });\n};\n\nexport const useDeleteIntegration = () => useMutation<boolean>(deleteIntegrationActionCreator);\n","import {\n    ActionModalError,\n    addSuccessNotification,\n    OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { IntegrationDeleteModal } from '../../../components/Integrations/DeleteModal';\nimport { useGetAffectedNotificationsByEndpoint } from '../../../services/Notifications/GetAffectedNotificationsByEndpoint';\nimport { useDeleteIntegration } from '../../../services/useDeleteIntegration';\nimport { UserIntegration } from '../../../types/Integration';\n\ninterface IntegrationDeleteModalPageProps extends OuiaComponentProps {\n    onClose: (deleted: boolean) => void;\n    integration: UserIntegration;\n}\n\nexport const IntegrationDeleteModalPage: React.FunctionComponent<IntegrationDeleteModalPageProps> = (props) => {\n\n    const deleteIntegrationMutation = useDeleteIntegration();\n    const getNotificationsQuery = useGetAffectedNotificationsByEndpoint();\n    const [ hasError, setError ] = React.useState(false);\n\n    const onDelete = React.useCallback((integration: UserIntegration) => {\n        const deleteIntegration = deleteIntegrationMutation.mutate;\n        setError(false);\n        return deleteIntegration(integration.id).then((response) => {\n            if (!response.error) {\n                addSuccessNotification('Integration removed', 'The integration was removed.');\n                return true;\n            } else {\n                setError(true);\n                return false;\n            }\n        });\n    }, [ deleteIntegrationMutation.mutate, setError ]);\n\n    const error = React.useMemo<ActionModalError | undefined>(() => {\n        if (hasError) {\n            return {\n                title: 'Failed to remove Integration',\n                description: <p>There was an error trying to remove the Integration. Please try again.</p>\n            };\n        }\n\n        return undefined;\n    }, [ hasError ]);\n\n    React.useEffect(() => {\n        const query = getNotificationsQuery.query;\n        query(props.integration.id);\n    }, [ props.integration, getNotificationsQuery.query ]);\n\n    const notifications = React.useMemo(() => {\n        const payload = getNotificationsQuery.payload;\n        if (payload && payload.type === 'Notifications') {\n            return payload.value;\n        }\n\n        return undefined;\n    }, [ getNotificationsQuery.payload ]);\n\n    return (\n        <IntegrationDeleteModal\n            integration={ props.integration }\n            notifications={ notifications }\n            isDeleting={ deleteIntegrationMutation.loading }\n            onClose={ props.onClose }\n            onDelete={ onDelete }\n            error={ error }\n        />\n    );\n};\n","import { assertNever } from 'assert-never';\nimport { useReducer } from 'react';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nenum UseDeleteModalReducerActionType {\n    DELETE = 'delete',\n    NONE = 'none'\n}\n\ninterface UseDeleteModalActionDelete {\n    type: UseDeleteModalReducerActionType.DELETE;\n    integration: UserIntegration;\n}\n\ninterface UseDeleteModalActionNone {\n    type: UseDeleteModalReducerActionType.NONE;\n}\n\ntype UseDeleteModalReducerAction = UseDeleteModalActionDelete | UseDeleteModalActionNone;\n\ninterface UseDeleteModalReducerState {\n    integration: UserIntegration | undefined;\n}\n\nconst noneState: UseDeleteModalReducerState = {\n    integration: undefined\n};\n\nconst reducer = (state: UseDeleteModalReducerState, action: UseDeleteModalReducerAction): UseDeleteModalReducerState => {\n    switch (action.type) {\n        case UseDeleteModalReducerActionType.DELETE:\n            return {\n                integration: action.integration\n            };\n        case UseDeleteModalReducerActionType.NONE:\n            return noneState;\n        default:\n            assertNever(action);\n\n    }\n};\n\nexport const useDeleteModalReducer = () => {\n    return useReducer(reducer, noneState);\n};\n\nuseDeleteModalReducer.makeNoneAction = (): UseDeleteModalActionNone => ({\n    type: UseDeleteModalReducerActionType.NONE\n});\n\nuseDeleteModalReducer.makeDeleteAction = (integration: UserIntegration): UseDeleteModalActionDelete => ({\n    type: UseDeleteModalReducerActionType.DELETE,\n    integration\n});\n","import { assertNever } from 'assert-never';\nimport { useReducer } from 'react';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nenum UseFormModalReducerActionType {\n    EDIT = 'edit',\n    CREATE = 'create',\n    NONE = 'none'\n}\n\ninterface UseFormModalReducerActionCreate {\n    type: UseFormModalReducerActionType.CREATE;\n    template?: Partial<UserIntegration>;\n}\n\ninterface UseFormModalReducerActionEdit {\n    type: UseFormModalReducerActionType.EDIT;\n    template: UserIntegration;\n}\n\ninterface UseFormModalReducerActionNone {\n    type: UseFormModalReducerActionType.NONE;\n}\n\ntype UseFormModalReducerAction = UseFormModalReducerActionCreate | UseFormModalReducerActionEdit | UseFormModalReducerActionNone;\n\ninterface UseFormModalReducerState {\n    isOpen: boolean;\n    isEdit: boolean;\n    template: UserIntegration | Partial<UserIntegration> | undefined;\n    isCopy: boolean;\n}\n\nconst noneState = {\n    isOpen: false,\n    isEdit: false,\n    template: undefined,\n    isCopy: false\n};\n\nconst reducer = (state: UseFormModalReducerState, action: UseFormModalReducerAction): UseFormModalReducerState => {\n    switch (action.type) {\n        case UseFormModalReducerActionType.CREATE:\n            return {\n                isOpen: true,\n                isEdit: false,\n                template: action.template ? {\n                    ...action.template,\n                    name: `Copy of ${action.template.name}`\n                } : undefined,\n                isCopy: !!action.template\n            };\n        case UseFormModalReducerActionType.EDIT:\n            return {\n                isOpen: true,\n                isEdit: true,\n                template: action.template,\n                isCopy: false\n            };\n        case UseFormModalReducerActionType.NONE:\n            return noneState;\n        default:\n            assertNever(action);\n    }\n};\n\nexport const makeCreateAction = (template?: Partial<UserIntegration>): UseFormModalReducerActionCreate => ({\n    type: UseFormModalReducerActionType.CREATE,\n    template\n});\n\nexport const makeEditAction = (template: UserIntegration): UseFormModalReducerActionEdit => ({\n    type: UseFormModalReducerActionType.EDIT,\n    template\n});\n\nexport const makeNoneAction = (): UseFormModalReducerActionNone => ({\n    type: UseFormModalReducerActionType.NONE\n});\n\nexport const useFormModalReducer = () => {\n    return useReducer(reducer, noneState);\n};\n","import {\n    useFilters,\n    useUrlStateMultipleOptions,\n    useUrlStateString\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\n\nimport { IntegrationFilterColumn } from '../../../components/Integrations/Filters';\n\nconst DEBOUNCE_MS = 250;\n\nconst useUrlStateName = (defaultValue?: string) => useUrlStateString('name', defaultValue);\nconst useUrlStateEnabled = (_defaultValue?: string) => useUrlStateMultipleOptions('enabled', [ 'Enabled', 'Disabled' ]);\n\nconst useStateFactory = (column: IntegrationFilterColumn) => {\n    switch (column) {\n        case IntegrationFilterColumn.NAME:\n            return useUrlStateName;\n        case IntegrationFilterColumn.ENABLED:\n            return useUrlStateEnabled;\n        default:\n            assertNever(column);\n    }\n};\n\nexport const useIntegrationFilter = (debounce = DEBOUNCE_MS) => {\n    return useFilters(IntegrationFilterColumn, debounce, useStateFactory);\n};\n","import { Operations } from '../generated/OpenapiIntegrations';\n\nexport const listIntegrationHistoryActionCreator = (integrationId: string) => {\n    return Operations.EndpointServiceGetEndpointHistory.actionCreator({\n        id: integrationId\n    });\n};\n","import { addDangerNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport pLimit from 'p-limit';\nimport { useCallback, useContext, useEffect, useState } from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { format } from 'react-string-format';\nimport { usePrevious } from 'react-use';\n\nimport { IntegrationRow } from '../../../components/Integrations/Table';\nimport { Messages } from '../../../properties/Messages';\nimport { listIntegrationHistoryActionCreator } from '../../../services/useListIntegrationHistory';\nimport { useSwitchIntegrationEnabledStatus } from '../../../services/useSwitchIntegrationEnabledStatus';\nimport { SavedNotificationScopeActions } from '../../../store/actions/SavedNotificationScopeAction';\nimport { NotificationAppState } from '../../../store/types/NotificationAppState';\nimport { SavedNotificationScopeState, Status } from '../../../store/types/SavedNotificationScopeTypes';\nimport { UserIntegration } from '../../../types/Integration';\n\nconst notificationAppStateSelector = (state: NotificationAppState): SavedNotificationScopeState => state.savedNotificationScope;\n\nconst notificationAppStateEqualFn = (left: SavedNotificationScopeState, right: SavedNotificationScopeState): boolean => {\n    return left?.integration === right?.integration && left?.status === right?.status;\n};\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport const useIntegrationRows = (integrations: Array<UserIntegration>) => {\n    const [ integrationRows, setIntegrationRows ] = useState<Array<IntegrationRow>>([]);\n    const prevIntegrationsInput = usePrevious(integrations);\n\n    const reduxDispatch = useDispatch();\n    const savedNotificationScope = useSelector<NotificationAppState, SavedNotificationScopeState>(\n        notificationAppStateSelector, notificationAppStateEqualFn\n    );\n\n    const switchStatus = useSwitchIntegrationEnabledStatus();\n    const { query } = useContext(ClientContext);\n    const [ limit ] = useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const setIntegrationRowByIndex = useCallback((index: number, partialIntegration: Partial<IntegrationRow>) => {\n        setIntegrationRows(prevIntegrations => {\n            const newIntegrations = [ ...prevIntegrations ];\n            newIntegrations[index] = { ...newIntegrations[index], ...partialIntegration };\n            return newIntegrations;\n        });\n    }, [ setIntegrationRows ]);\n\n    const setIntegrationRowById = useCallback((id: string, partialIntegration: Partial<IntegrationRow>) => {\n        setIntegrationRows(prevIntegrations => {\n            const index = prevIntegrations.findIndex(integration => integration.id === id);\n            if (index === -1) {\n                return prevIntegrations;\n            }\n\n            const newIntegrations = [ ...prevIntegrations ];\n            newIntegrations[index] = { ...newIntegrations[index], ...partialIntegration };\n            return newIntegrations;\n        });\n    }, [ setIntegrationRows ]);\n\n    useEffect(() => {\n        if (integrations !== prevIntegrationsInput) {\n            setIntegrationRows(prev => {\n                return integrations.map(integration => ({\n                    isOpen: false,\n                    isSelected: false,\n                    isEnabledLoading: false,\n                    lastConnectionAttempts: [],\n                    isConnectionAttemptLoading: true,\n                    ...prev.find(i => i.id === integration.id),\n                    ...integration\n                }));\n            });\n\n            if (integrations) {\n                limit.clearQueue();\n\n                integrations.map(integration => integration.id).forEach(integrationId => {\n                    limit(() => query(listIntegrationHistoryActionCreator(integrationId))).then(response => {\n\n                        if (response.payload && response.payload.status === 200) {\n                            const last5 = (response.payload.value.reverse().slice(0, 5)).map(p => ({\n                                isSuccess: !!p.invocationResult,\n                                date: new Date(p.created as string)\n                            }));\n                            setIntegrationRowById(integrationId, {\n                                isConnectionAttemptLoading: false,\n                                lastConnectionAttempts: last5\n                            });\n                        } else {\n                            setIntegrationRowById(integrationId, {\n                                isConnectionAttemptLoading: false,\n                                lastConnectionAttempts: undefined\n                            });\n                        }\n                    });\n                });\n            }\n        }\n    }, [ prevIntegrationsInput, integrations, setIntegrationRowById, limit, query ]);\n\n    const onCollapse = useCallback((_integration: IntegrationRow, index: number, isOpen: boolean) => {\n        setIntegrationRowByIndex(index, {\n            isOpen\n        });\n    }, [ setIntegrationRowByIndex ]);\n\n    const onEnable = useCallback((_integration: UserIntegration, index: number, isEnabled: boolean) => {\n        setIntegrationRowByIndex(index, {\n            isEnabledLoading: true\n        });\n\n        if (savedNotificationScope) {\n            if (_integration.id === savedNotificationScope.integration.id) {\n                reduxDispatch(SavedNotificationScopeActions.start());\n            }\n        }\n\n        switchStatus.mutate(_integration).then((response) => {\n            if (!response.error) {\n                setIntegrationRowByIndex(index, {\n                    isEnabled,\n                    isEnabledLoading: false\n                });\n                if (savedNotificationScope) {\n                    if (_integration.id === savedNotificationScope.integration.id) {\n                        reduxDispatch(SavedNotificationScopeActions.finish(isEnabled));\n                    }\n                }\n            } else {\n                const message = isEnabled ? Messages.components.integrations.enableError : Messages.components.integrations.disableError;\n\n                if (savedNotificationScope) {\n                    if (_integration.id === savedNotificationScope.integration.id) {\n                        reduxDispatch(SavedNotificationScopeActions.finish(_integration.isEnabled));\n                    }\n                }\n\n                addDangerNotification(\n                    message.title,\n                    format(message.description, _integration.name),\n                    true);\n                setIntegrationRowByIndex(index, {\n                    isEnabled: _integration.isEnabled,\n                    isEnabledLoading: false\n                });\n            }\n        });\n\n    }, [ setIntegrationRowByIndex, switchStatus, reduxDispatch, savedNotificationScope ]);\n\n    useEffect(() => {\n        if (savedNotificationScope) {\n            if (savedNotificationScope.status === Status.LOADING) {\n                setIntegrationRowById(\n                    savedNotificationScope.integration.id,\n                    { isEnabledLoading: true }\n                );\n            } else {\n                setIntegrationRowById(\n                    savedNotificationScope.integration.id,\n                    { isEnabledLoading: false, isEnabled: savedNotificationScope.integration.isEnabled }\n                );\n            }\n        }\n    }, [ savedNotificationScope, setIntegrationRowById ]);\n\n    return {\n        rows: integrationRows,\n        onCollapse,\n        onEnable\n    };\n};\n","import { Main, PageHeader, PageHeaderTitle, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    addDangerNotification,\n    ExporterType,\n    Filter,\n    Operator,\n    Page\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { format } from 'date-fns';\nimport inBrowserDownload from 'in-browser-download';\nimport * as React from 'react';\nimport { useContext } from 'react';\n\nimport { AppContext } from '../../../app/AppContext';\nimport { IntegrationFilters } from '../../../components/Integrations/Filters';\nimport { IntegrationsTable } from '../../../components/Integrations/Table';\nimport { IntegrationsToolbar } from '../../../components/Integrations/Toolbar';\nimport { usePage } from '../../../hooks/usePage';\nimport { Messages } from '../../../properties/Messages';\nimport { useListIntegrationPQuery, useListIntegrationsQuery } from '../../../services/useListIntegrations';\nimport { IntegrationType, UserIntegration } from '../../../types/Integration';\nimport { integrationExporterFactory } from '../../../utils/exporters/Integration/Factory';\nimport { CreatePage } from '../Create/CreatePage';\nimport { IntegrationDeleteModalPage } from '../Delete/DeleteModal';\nimport { useActionResolver } from './useActionResolver';\nimport { useDeleteModalReducer } from './useDeleteModalReducer';\nimport { makeCreateAction, makeEditAction, makeNoneAction, useFormModalReducer } from './useFormModalReducer';\nimport { useIntegrationFilter } from './useIntegrationFilter';\nimport { useIntegrationRows } from './useIntegrationRows';\n\nconst integrationFilterBuilder = (filters?: IntegrationFilters) => {\n    const filter = new Filter();\n    if (filters?.enabled?.length === 1) {\n        const isEnabled = filters.enabled[0].toLocaleLowerCase() === 'enabled';\n        filter.and('active', Operator.EQUAL, isEnabled.toString());\n    }\n\n    return filter.and('type', Operator.EQUAL, IntegrationType.WEBHOOK);\n};\n\nexport const IntegrationsListPage: React.FunctionComponent = () => {\n\n    const { rbac: { canWriteIntegrationsEndpoints }} = useContext(AppContext);\n    const integrationFilter = useIntegrationFilter();\n    const pageData = usePage<IntegrationFilters>(10, integrationFilterBuilder, integrationFilter.filters);\n    const integrationsQuery = useListIntegrationsQuery(pageData.page);\n    const exportIntegrationsQuery = useListIntegrationPQuery();\n\n    const integrations = React.useMemo(() => {\n        const payload = integrationsQuery.payload;\n        if (payload?.type === 'IntegrationPage') {\n            return payload.value;\n        }\n\n        return {\n            data: [],\n            count: 0\n        };\n    }, [ integrationsQuery.payload ]);\n\n    const integrationRows = useIntegrationRows(integrations.data);\n\n    const [ modalIsOpenState, dispatchModalIsOpen ] = useFormModalReducer();\n    const [ deleteModalState, dispatchDeleteModal ] = useDeleteModalReducer();\n\n    const onAddIntegrationClicked = React.useCallback(() => {\n        dispatchModalIsOpen(makeCreateAction());\n    }, [ dispatchModalIsOpen ]);\n\n    const onEdit = React.useCallback((integration: UserIntegration) => {\n        dispatchModalIsOpen(makeEditAction(integration));\n    }, [ dispatchModalIsOpen ]);\n\n    const onDelete = React.useCallback((integration: UserIntegration) => {\n        dispatchDeleteModal(useDeleteModalReducer.makeDeleteAction(integration));\n    }, [ dispatchDeleteModal ]);\n\n    const onExport = React.useCallback(async (type: ExporterType) => {\n        const query = exportIntegrationsQuery.query;\n        const exporter = integrationExporterFactory(type);\n        const exportedIntegrations: Array<UserIntegration> = [];\n        let page = Page.of(1, 100, new Filter().and('type', Operator.EQUAL, 'webhook'));\n        while (true) {\n            const data = await query(page);\n            if (data?.payload?.status !== 200) {\n                if (exportedIntegrations.length === 0) {\n                    addDangerNotification(\n                        'Unable to download integrations',\n                        'We were unable to download the integrations for exporting. Please try again.'\n                    );\n                    return;\n                } else {\n                    addDangerNotification(\n                        'Unable to download all integrations',\n                        `We were unable to download all the integrations for exporting. Downloading: ${exportedIntegrations.length}.`\n                    );\n                    break;\n                }\n            }\n\n            if (data.payload.value.data.length === 0) {\n                break;\n            }\n\n            page = page.nextPage();\n            exportedIntegrations.push(...data.payload.value.data);\n        }\n\n        if (exportedIntegrations) {\n            inBrowserDownload(\n                exporter.export(exportedIntegrations),\n                `integrations-${format(new Date(Date.now()), 'y-dd-MM')}.${exporter.type}`\n            );\n        }\n    }, [ exportIntegrationsQuery ]);\n\n    const actionResolver = useActionResolver({\n        canWrite: canWriteIntegrationsEndpoints,\n        onEdit,\n        onDelete,\n        onEnable: integrationRows.onEnable\n    });\n\n    const closeFormModal = React.useCallback((saved: boolean) => {\n        const query = integrationsQuery.query;\n        dispatchModalIsOpen(makeNoneAction());\n        if (saved) {\n            query();\n        }\n    }, [ dispatchModalIsOpen, integrationsQuery.query ]);\n\n    const closeDeleteModal = React.useCallback((deleted: boolean) => {\n        const query = integrationsQuery.query;\n        if (deleted) {\n            query();\n        }\n\n        dispatchDeleteModal(useDeleteModalReducer.makeNoneAction());\n    }, [ dispatchDeleteModal, integrationsQuery.query ]);\n\n    // This is an estimate of how many rows are in the next page (Won't be always correct because a new row could be added while we are browsing)\n    // Is used for the skeleton loading\n    const loadingCount = Math.min(pageData.page.size, integrations.count - (pageData.page.index - 1) * pageData.page.size)  || 10;\n\n    return (\n        <>\n            <PageHeader>\n                <PageHeaderTitle title={ Messages.pages.integrations.list.title } />\n            </PageHeader>\n            <Main>\n                <Section className='pf-c-page__main-section pf-m-light'>\n                    <IntegrationsToolbar\n                        onAddIntegration={ canWriteIntegrationsEndpoints ? onAddIntegrationClicked : undefined }\n                        onExport={ onExport }\n                        filters={ integrationFilter.filters }\n                        setFilters={ integrationFilter.setFilters }\n                        clearFilters={ integrationFilter.clearFilter }\n                        count={ integrations.count || 0 }\n                        pageCount={ integrations.data.length }\n                        page={ pageData.page.index }\n                        perPage={ pageData.page.size }\n                        pageChanged={ pageData.changePage }\n                        perPageChanged={ pageData.changeItemsPerPage }\n                    >\n                        <IntegrationsTable\n                            isLoading={ integrationsQuery.loading }\n                            loadingCount={ loadingCount }\n                            integrations={ integrationRows.rows }\n                            onCollapse={ integrationRows.onCollapse }\n                            onEnable={ canWriteIntegrationsEndpoints ? integrationRows.onEnable : undefined }\n                            actionResolver={ actionResolver }\n                        />\n                    </IntegrationsToolbar>\n                    { modalIsOpenState.isOpen && (\n                        <CreatePage\n                            isEdit={ modalIsOpenState.isEdit }\n                            initialIntegration={ modalIsOpenState.template || {} }\n                            onClose={ closeFormModal }\n                        />\n                    ) }\n                    { deleteModalState.integration && (\n                        <IntegrationDeleteModalPage\n                            onClose={ closeDeleteModal }\n                            integration={ deleteModalState.integration }\n                        />\n                    )}\n                </Section>\n            </Main>\n        </>\n    );\n};\n","export default __webpack_public_path__ + \"fonts/WebhookIcon.svg\";","import { SVGIconProps } from '@patternfly/react-icons/dist/js/createIcon';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport icon from './WebhookIcon.svg';\nconst className = style({\n    verticalAlign: '-0.125em',\n    width: '1em',\n    height: '1em'\n});\n\nexport const WebhookIcon: React.FunctionComponent<SVGIconProps> = () => {\n    return (\n        <img className={ className } src={ icon } />\n    );\n};\n","import { Spinner } from '@patternfly/react-core';\nimport { EnvelopeIcon } from '@patternfly/react-icons';\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { Messages } from '../../properties/Messages';\nimport { Action, NotificationType } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { WebhookIcon } from '../Icons/WebhookIcon';\n\nexport interface ActionComponentText extends OuiaComponentProps{\n    isDefault: boolean;\n    action: Action | undefined;\n    loading?: boolean;\n    hasError?: boolean;\n}\n\ninterface ActionTypeToIconProps {\n    actionType: NotificationType;\n}\n\nconst marginLeftClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst grayFontClassName = style({\n    color: '#888'\n});\n\nconst ActionTypeToIcon: React.FunctionComponent<ActionTypeToIconProps> = (props) => {\n    switch (props.actionType) {\n        case NotificationType.DRAWER:\n            return <BellIcon />;\n        case NotificationType.EMAIL_SUBSCRIPTION:\n            return <EnvelopeIcon />;\n        case NotificationType.INTEGRATION:\n            return <WebhookIcon />;\n        default:\n            assertNever(props.actionType);\n    }\n};\n\nconst ActionComponentWrapper: React.FunctionComponent<ActionComponentText> = (props) => (\n    <div { ...getOuiaProps('Notifications/ActionComponent', props) }>\n        { props.children }\n    </div>\n);\n\nexport const ActionComponent: React.FunctionComponent<ActionComponentText> = (props) => {\n\n    if (props.loading) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <Spinner size=\"md\" />\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (props.hasError) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span>Error loading actions</span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (props.isDefault) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span>Default behavior</span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (!props.action) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span className={ grayFontClassName }>\n                    <div>No actions.</div>\n                    <div>Users will not be notified.</div>\n                </span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    return (\n        <ActionComponentWrapper { ...props }>\n            <ActionTypeToIcon actionType={ props.action.type } />\n            <span className={ marginLeftClassName }>{ Messages.components.notifications.types[props.action.type] }</span>\n            { props.action.type === NotificationType.INTEGRATION && (\n                <span>: { Messages.components.integrations.integrationType[props.action.integration.type] }</span>\n            ) }\n        </ActionComponentWrapper>\n    );\n};\n","import { Label, Tooltip } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { Action, NotificationType } from '../../types/Notification';\n\ninterface RecipientProps {\n    action: Action;\n    hasOutline?: boolean;\n}\n\nconst disabledLabelClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nexport const Recipient: React.FunctionComponent<RecipientProps> = (props) => {\n    if (props.action.type === NotificationType.INTEGRATION) {\n        return (\n            <>\n                <span>{ props.action.integration.name }</span>\n                { !props.action.integration.isEnabled && (\n                    <>\n                        <Tooltip content=\"This integration has been disabled. This action wil not fire until it is enabled.\" position=\"bottom\">\n                            <Label variant={ props.hasOutline ? 'outline' : 'filled' } className={ disabledLabelClassName }>Disabled</Label>\n                        </Tooltip>\n                    </>\n                )}\n            </>\n        );\n    }\n\n    return <span>All registered users</span>;\n};\n","import { Button, ButtonVariant, Skeleton } from '@patternfly/react-core';\nimport {\n    c_skeleton_BackgroundColor, global_FontSize_sm, global_palette_black_300, global_spacer_md, global_spacer_xs\n} from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { cssRaw, style } from 'typestyle';\n\nimport { DefaultNotificationBehavior } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ActionComponent } from './ActionComponent';\nimport { Recipient } from './Recipient';\n\nexport interface DefaultBehaviorProps extends OuiaComponentProps {\n    defaultBehavior?: DefaultNotificationBehavior;\n    onEdit?: () => void;\n    loading: boolean;\n}\n\ncssRaw(`\n    table.withDark300Skeleton .pf-c-skeleton {\n        ${c_skeleton_BackgroundColor.name}: ${global_palette_black_300.var} \n    }\n`);\n\nconst contentClassName = style({\n    backgroundColor: '#f0f0f0',\n    paddingTop: global_spacer_md.var,\n    paddingBottom: global_spacer_md.var,\n    paddingLeft: global_spacer_md.var,\n    paddingRight: global_spacer_md.var\n});\n\nconst tableClassName = style({\n    paddingTop: global_spacer_md.var,\n    display: 'block',\n    $nest: {\n        '& td, & th': {\n            paddingTop: global_spacer_xs.var,\n            paddingBottom: global_spacer_xs.var,\n            paddingLeft: global_spacer_md.var,\n            paddingRight: global_spacer_md.var,\n            fontSize: global_FontSize_sm.var\n        },\n        '& td:first-child, & th:first-child': {\n            paddingLeft: 0\n        },\n        '& thead:first-child th': {\n            paddingTop: 0\n        }\n    }\n});\n\nconst titleClassName = style({\n    fontWeight: 600\n});\n\nexport const DefaultBehavior: React.FunctionComponent<DefaultBehaviorProps> = (props) => {\n    return (\n        <div { ...getOuiaProps('Notifications/DefaultBehavior', props) } className={ contentClassName } >\n            <div className={ titleClassName }>\n                Default behavior <Button onClick={ props.onEdit } isDisabled={ !props.onEdit } variant={ ButtonVariant.link }>Edit defaults</Button>\n            </div>\n            <div>Default behavior applies to all notifications in a bundle. You can override this default for any specific event type.</div>\n            <table className={ `${tableClassName} withDark300Skeleton` }>\n                <thead>\n                    <tr>\n                        <th>Action</th>\n                        <th>Recipient</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { props.loading ? (\n                        <>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                        </>\n                    ) : props.defaultBehavior === undefined ? (\n                        <tr><td>Error while loading the default behavior. </td></tr>\n                    ) : (\n                        props.defaultBehavior?.actions.map((a, index) => {\n                            return (\n                                <tr key={ index }>\n                                    <td><ActionComponent isDefault={ false } action={ a } /></td>\n                                    <td> <Recipient action={ a } hasOutline /></td>\n                                </tr>\n                            );\n                        })\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","export enum GroupByEnum {\n    Application = 'application',\n    None = 'none'\n}\n","import './Table.scss';\n\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport {\n    expandable,\n    ICell,\n    IRow,\n    IRowData,\n    RowWrapperProps,\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table';\nimport { global_spacer_md, global_spacer_sm } from '@patternfly/react-tokens';\nimport { joinClasses, OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\nimport { cssRaw, style } from 'typestyle';\n\nimport { Messages } from '../../properties/Messages';\nimport { Notification } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ActionComponent } from './ActionComponent';\nimport { Recipient } from './Recipient';\nimport { GroupByEnum } from './Types';\n\nconst pfBorderBottomClassName = style({\n    borderBottom: 'var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)'\n});\n\nconst noBorderBottom = style({\n    borderBottom: 'none !important'\n});\n\nconst cellPaddingBottom = style({\n    paddingBottom: '0 !important'\n});\n\nconst actionCellStyle = style({\n    paddingLeft: `${global_spacer_md.var} !important`\n});\n\nconst cellPaddingBottomStyle = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    '--pf-c-table__expandable-row-content--PaddingBottom': '0'\n} as any;\n\nconst cellPaddingTop = style({\n    paddingTop: `${global_spacer_sm.var} !important`\n} as any);\n\nconst cellPaddingTopStyle = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    '--pf-c-table__expandable-row-content--PaddingTop': '0'\n} as any;\n\nconst grayFontClassName = style({\n    color: '#888'\n});\n\nconst noExpandableBorderClassName = style({\n    $nest: {\n        '&:after': {\n            borderLeft: 'none !important',\n            paddingBottom: '0 !important'\n        }\n    }\n});\n\nconst componentClassName = 'notification-table';\n\ncssRaw(`\n.${componentClassName} table {\n    --pf-c-table--m-compact__expandable-row-content--PaddingTop: ${global_spacer_sm.var};\n    --pf-c-table--m-compact__expandable-row-content--PaddingBottom: ${global_spacer_sm.var};\n}\n`);\n\nconst applicationGroupClassName = style({\n    fontWeight: 600\n});\n\nconst columns: Array<ICell> = [\n    {\n        title: Messages.components.notifications.table.columns.event,\n        transforms: [ ],\n        cellFormatters: [ expandable ]\n    },\n    {\n        title: Messages.components.notifications.table.columns.action,\n        transforms: []\n    },\n    {\n        title: Messages.components.notifications.table.columns.recipient,\n        transforms: []\n    },\n    {\n        title: ''\n    }\n];\n\nexport interface NotificationsTableProps extends OuiaComponentProps {\n    notifications: NotificationRows;\n    onCollapse: (index: number, isOpen: boolean) => void;\n    onEdit?: OnEditNotification;\n}\n\ntype NotificationRowBase = {\n    loadingActionStatus: 'loading' | 'done' | 'error';\n}\n\nexport type NotificationRowGroupedByNone = Notification & NotificationRowBase;\n\nexport interface NotificationRowGroupedByApplication {\n    applicationDisplayName: string;\n    notifications: Array<NotificationRowGroupedByNone>;\n    isOpen: boolean;\n}\n\nexport type NotificationRows = {\n    grouped: GroupByEnum.Application;\n    data: Array<NotificationRowGroupedByApplication>;\n} | {\n    grouped: GroupByEnum.None;\n    data: Array<NotificationRowGroupedByNone>;\n}\n\nexport type OnEditNotification = (notification: Notification) => void;\n\ninterface EventCellProps {\n    eventTypeDisplayName: string;\n    applicationDisplayName: string;\n}\n\nconst EventCell: React.FunctionComponent<EventCellProps> = (props) => (\n    <>\n        <div> { props.eventTypeDisplayName } </div>\n        <div className={ grayFontClassName }> { props.applicationDisplayName } </div>\n    </>\n);\n\nconst RowWrapper: React.FunctionComponent<RowWrapperProps> = (props) => {\n    const { trRef, className, rowProps, row, ...rest } = props;\n    if (!row) {\n        return <></>;\n    }\n\n    const rowClassName = (row as any).props?.className ? (row as any).props.className : '';\n\n    return (\n        <tr\n            { ...rest }\n            ref={ trRef as any }\n            className={ css(\n                className,\n                row.isExpanded !== undefined && styles.tableExpandableRow,\n                row.isExpanded && styles.modifiers.expanded,\n                rowClassName\n            ) }\n            hidden={ row?.isExpanded !== undefined && !row.isExpanded }\n        >\n            { props.children }\n        </tr>\n    );\n};\n\nconst toTableRowsGroupedByNone = (notifications: Array<NotificationRowGroupedByNone>, onEdit?: OnEditNotification, parent?: number) => {\n    return notifications.reduce((rows, notification) => {\n        const rowSpan = Math.max(1, notification.useDefault ? 1 : notification.actions.length);\n        const firstAction = notification.actions.length > 0 ? notification.actions[0] : undefined;\n\n        rows.push({\n            id: `${parent !== undefined ? (parent.toString() + '-') : ''}${notification.id}`,\n            key: `${parent !== undefined ? (parent.toString() + '-') : ''}${notification.id}`,\n            cells: [\n                {\n                    title: <EventCell\n                        applicationDisplayName={ notification.applicationDisplayName }\n                        eventTypeDisplayName={ notification.eventTypeDisplayName }\n                    />,\n                    props: {\n                        rowSpan,\n                        className: joinClasses(\n                            noExpandableBorderClassName,\n                            pfBorderBottomClassName\n                        ),\n                        colSpan: parent === undefined ? 1 : 2\n                    }\n                },\n                {\n                    title: <><span><ActionComponent\n                        isDefault={ !!notification.useDefault }\n                        action={ firstAction }\n                        loading={ notification.loadingActionStatus === 'loading' }\n                        hasError={ notification.loadingActionStatus === 'error' }\n                    /></span></>,\n                    props: {\n                        className: joinClasses(actionCellStyle, cellPaddingBottom),\n                        style: cellPaddingBottomStyle\n                    }\n                },\n                {\n                    title: <><span>{ firstAction && <Recipient action={ firstAction } /> }</span></>,\n                    props: {\n                        className: cellPaddingBottom,\n                        style: cellPaddingBottomStyle\n                    }\n                },\n                {\n                    title: <><Button\n                        onClick={ () => onEdit && onEdit(notification) } isDisabled={ !onEdit }\n                        variant={ ButtonVariant.link }>Edit</Button></>,\n                    props: {\n                        className: cellPaddingBottom,\n                        style: cellPaddingBottomStyle\n                    }\n                }\n            ],\n            props: {\n                className: notification.actions.length > 1 ? noBorderBottom : ''\n            }\n        });\n\n        if (parent !== undefined) {\n            rows[rows.length - 1].parent = parent;\n            rows[rows.length - 1].fullWidth = true;\n        }\n\n        for (let i = 1; i < rowSpan; ++i) {\n            const classNames = joinClasses(\n                (i + 1 === rowSpan ? '' : cellPaddingBottom),\n                cellPaddingTop\n            );\n            const id = `${notification.id}-action-${i}`;\n            const cssStyle = {\n                ...cellPaddingTopStyle,\n                ...(i + 1 === rowSpan ? {} : cellPaddingBottomStyle)\n            };\n            rows.push({\n                id: `${parent !== undefined ? (parent.toString() + '-') : ''}${id}`,\n                key: `${parent !== undefined ? (parent.toString() + '-') : ''}${id}`,\n                cells: [\n                    {\n                        title: <ActionComponent\n                            isDefault={ !!notification.useDefault }\n                            action={ notification.actions[i] }\n                            loading={ notification.loadingActionStatus === 'loading' }\n                            hasError={ notification.loadingActionStatus === 'error' }\n                        />,\n                        props: {\n                            className: joinClasses(\n                                noExpandableBorderClassName,\n                                classNames,\n                                actionCellStyle\n                            ),\n                            style: cssStyle\n                        }\n                    },\n                    {\n                        title: <Recipient action={ notification.actions[i] } />,\n                        props: {\n                            className: classNames,\n                            style: cssStyle\n                        }\n                    },\n                    {\n                        props: {\n                            className: classNames,\n                            style: cssStyle\n                        }\n                    }\n                ],\n                props: {\n                    className: (i + 1 === rowSpan ? '' : noBorderBottom)\n                }\n            });\n\n            if (parent !== undefined) {\n                rows[rows.length - 1].parent = parent;\n                rows[rows.length - 1].fullWidth = true;\n            }\n        }\n\n        return rows;\n    }, [] as Array<IRow>);\n};\n\nconst toTableRowsGroupedByApplication = (applicationGroups: Array<NotificationRowGroupedByApplication>, onEdit?: OnEditNotification): Array<IRow> =>\n    applicationGroups.reduce((rows, applicationGroup) => {\n        rows.push({\n            id: applicationGroup.applicationDisplayName,\n            key: applicationGroup.applicationDisplayName,\n            cells: [\n                {\n                    title: <span className={ applicationGroupClassName }> Application: { applicationGroup.applicationDisplayName }</span>,\n                    props: {\n                        className: noExpandableBorderClassName\n                    }\n                },\n                {\n                    title: '',\n                    props: {\n                        colSpan: columns.length - 1\n                    }\n                }\n            ],\n            isOpen: applicationGroup.isOpen\n        });\n\n        rows.push(...toTableRowsGroupedByNone(applicationGroup.notifications, onEdit, rows.length - 1));\n\n        return rows;\n    }, [] as Array<IRow>);\n\nexport const NotificationsTable: React.FunctionComponent<NotificationsTableProps> = (props) => {\n\n    const rows = React.useMemo(() => {\n        const notifications = props.notifications;\n        switch (notifications.grouped) {\n            case GroupByEnum.Application:\n                return toTableRowsGroupedByApplication(notifications.data, props.onEdit);\n            case GroupByEnum.None:\n                return toTableRowsGroupedByNone(notifications.data, props.onEdit);\n            default:\n                assertNever(notifications);\n        }\n\n    }, [ props.notifications, props.onEdit ]);\n\n    const onCollapseHandler = React.useCallback((_event, _index: number, isOpen: boolean, data: IRowData) => {\n        const notifications = props.notifications;\n        const onCollapse = props.onCollapse;\n\n        if (notifications.grouped === GroupByEnum.None) {\n            throw new Error('Invalid group None for CollapseHandler');\n        }\n\n        const index = notifications.data.findIndex(n => n.applicationDisplayName === data.id);\n        if (onCollapse && index !== undefined && index !== -1) {\n            onCollapse(index, isOpen);\n        }\n\n    }, [ props.onCollapse, props.notifications ]);\n\n    return (\n        <div { ...getOuiaProps('Notifications/Table', props) } className={ componentClassName }>\n            <Table\n                aria-label={ Messages.components.notifications.table.title }\n                rows={ rows }\n                cells={ columns }\n                onCollapse={ onCollapseHandler }\n                rowWrapper={ RowWrapper as (props: RowWrapperProps) => React.ReactElement }\n                variant=\"compact\"\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>\n        </div>\n    );\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum NotificationFilterColumn {\n    NAME = 'name',\n    APPLICATION = 'application',\n    ACTION = 'action'\n}\n\nexport type NotificationFilters = Filters<typeof NotificationFilterColumn>;\nexport type SetNotificationFilters = SetFilters<typeof NotificationFilterColumn>;\nexport type ClearNotificationFilters = ClearFilters<typeof NotificationFilterColumn>;\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport camelcase from 'camelcase';\nimport * as React from 'react';\n\nimport { GroupByEnum } from '../Types';\n\nexport interface GroupByProps {\n    groupBy: (selected: GroupByEnum) => void;\n    selected: GroupByEnum;\n}\n\nexport const GroupBy: React.FunctionComponent<GroupByProps> = (props) => {\n    const items = [\n        <DropdownItem data-group-by={ GroupByEnum.Application } key=\"application\">Application</DropdownItem>,\n        <DropdownItem data-group-by={ GroupByEnum.None } key=\"none\">None</DropdownItem>\n    ];\n\n    const [ isOpen, setOpen ] = React.useState<boolean>(false);\n\n    const onSelect = React.useCallback((event) => {\n        const groupBy = props.groupBy;\n        const selected = props.selected;\n\n        if (event.target.dataset.groupBy !== selected) {\n            switch (event.target.dataset.groupBy) {\n                case GroupByEnum.Application:\n                    groupBy(GroupByEnum.Application);\n                    break;\n                case GroupByEnum.None:\n                    groupBy(GroupByEnum.None);\n                    break;\n            }\n        }\n\n        setOpen(false);\n    }, [ props.groupBy, props.selected ]);\n\n    const onToggle = React.useCallback((shouldBeOpen) => {\n        setOpen(shouldBeOpen);\n    }, [ setOpen ]);\n\n    const content = React.useMemo(() => {\n        return `Group by: ${camelcase(props.selected, {\n            pascalCase: true\n        })}`;\n    }, [ props.selected ]);\n\n    return (\n        <Dropdown\n            onSelect={ onSelect }\n            isOpen={ isOpen }\n            toggle={ <DropdownToggle\n                id=\"group-by-dropdown-toggle\"\n                toggleIndicator={ CaretDownIcon }\n                onToggle={ onToggle }\n            >\n                { content }\n            </DropdownToggle> }\n            dropdownItems={ items }\n        />\n    );\n};\n","import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ColumnsMetada,\n    ExporterType,\n    getInsights,\n    OuiaComponentProps,\n    useInsightsEnvironmentFlag,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { stagingBetaAndProdBetaEnvironment } from '../../types/Environments';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport {\n    ClearNotificationFilters,\n    NotificationFilterColumn,\n    NotificationFilters,\n    SetNotificationFilters\n} from './Filter';\nimport { GroupBy } from './Table/GroupBy';\nimport { GroupByEnum } from './Types';\nimport ApplicationFacet = Schemas.ApplicationFacet;\n\ninterface NotificationsToolbarProps extends OuiaComponentProps {\n    filters: NotificationFilters;\n    setFilters: SetNotificationFilters;\n    clearFilter: ClearNotificationFilters;\n\n    appFilterOptions: Array<ApplicationFacet>;\n\n    groupBy: GroupByEnum;\n    onGroupBySelected: (selected: GroupByEnum) => void;\n\n    onExport: (type: ExporterType) => void;\n}\n\nexport const NotificationsToolbar: React.FunctionComponent<NotificationsToolbarProps> = (props) => {\n\n    const filterMetadata = useMemo<ColumnsMetada<typeof NotificationFilterColumn>>(() => {\n\n        const appFilterItems = props.appFilterOptions.map(a => ({\n            value: a.label,\n            label: <> {a.label}</>\n        }));\n\n        return {\n            [NotificationFilterColumn.NAME]: {\n                label: 'Event type',\n                placeholder: 'Filter by event type'\n            },\n            [NotificationFilterColumn.APPLICATION]: {\n                label: 'Application',\n                placeholder: 'Filter by application',\n                options: {\n                    exclusive: false,\n                    default: [] as any,\n                    items: appFilterItems\n                }\n            },\n            [NotificationFilterColumn.ACTION]: {\n                label: 'Action',\n                placeholder: 'Filter by action'\n            }\n        };\n    }, [ props.appFilterOptions ]);\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        NotificationFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilter,\n        filterMetadata\n    );\n\n    const exportConfigInternal = useTableExportConfig(props.onExport);\n\n    const filterConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.filterConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const activeFiltersConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.activeFiltersConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const exportConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => exportConfigInternal, [ exportConfigInternal ])\n    );\n\n    return (\n        <div { ...getOuiaProps('Notifications/DualToolbar', props) }>\n            <PrimaryToolbar\n                filterConfig={ filterConfig }\n                activeFiltersConfig={ activeFiltersConfig }\n                dedicatedAction={ <GroupBy selected={ props.groupBy } groupBy={ props.onGroupBySelected } /> }\n                exportConfig={ exportConfig }\n            />\n            { props.children }\n            <PrimaryToolbar />\n        </div>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiNotifications';\nimport { toActions } from '../types/adapters/NotificationAdapter';\n\nexport const defaultNotificationBehaviorCreator = () => Operations.NotificationServiceGetEndpointsForDefaults.actionCreator();\n\nexport const defaultNotificationsDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetEndpointsForDefaults.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'DefaultNotificationBehavior',\n            200,\n            {\n                actions: toActions(payload.value)\n            },\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useDefaultNotificationBehavior = () => useTransformQueryResponse(\n    useQuery(defaultNotificationBehaviorCreator()),\n    defaultNotificationsDecoder\n);\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Schemas } from '../generated/OpenapiIntegrations';\nimport { Operations } from '../generated/OpenapiNotifications';\nimport { toNotifications } from '../types/adapters/NotificationAdapter';\nimport SetUUID = Schemas.SetUUID;\n\nexport const listNotificationsActionCreator = (pager?: Page) => {\n    const query = (pager ?? Page.defaultPage()).toQuery();\n    return Operations.NotificationServiceGetEventTypes.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        applicationIds: query.filterApplicationId as unknown as SetUUID\n    });\n};\n\nconst decoder = validationResponseTransformer((payload: Operations.NotificationServiceGetEventTypes.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'eventTypesArray',\n            200,\n            toNotifications(payload.value),\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useListNotifications = (pager?: Page) => useTransformQueryResponse(\n    useQuery(listNotificationsActionCreator(pager)),\n    decoder\n);\n","import * as Yup from 'yup';\n\nimport { NotificationType } from '../../types/Notification';\n\nconst ActionIntegration = Yup.object({\n    type: Yup.mixed().oneOf([ NotificationType.INTEGRATION ]).required(),\n    integration: Yup.object({\n        id: Yup.string().required()\n    }).required(),\n    integrationId: Yup.string().min(1)\n});\n\nconst ActionNotify = Yup.object({\n    type: Yup.mixed().oneOf([ NotificationType.EMAIL_SUBSCRIPTION /*, NotificationType.DRAWER */ ]).required(),\n    recipient: Yup.array(Yup.string()).min(0),\n    integrationId: Yup.string().min(0)\n});\n\nexport const WithActions = Yup.object({\n    actions: Yup.array(Yup.lazy(obj => {\n        if ((obj as any).hasOwnProperty('type')) {\n            if ((obj as any).type === NotificationType.INTEGRATION) {\n                return ActionIntegration;\n            }\n        }\n\n        return ActionNotify;\n    }))\n});\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { Messages } from '../../../properties/Messages';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { NotificationType } from '../../../types/Notification';\n\ntype ActionTypeOrIntegration = {\n    kind: 'integration';\n    type: UserIntegrationType;\n} | {\n    kind: 'notification';\n    type: NotificationType;\n}\n\nexport class ActionOption implements SelectOptionObject {\n    readonly integrationType: UserIntegrationType | undefined;\n    readonly notificationType: NotificationType;\n\n    constructor(type: ActionTypeOrIntegration) {\n        if (type.kind === 'integration') {\n            this.notificationType = NotificationType.INTEGRATION;\n            this.integrationType = type.type;\n        } else {\n            this.notificationType = type.type;\n            this.integrationType = undefined;\n        }\n    }\n\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof ActionOption) {\n            return selectOption.notificationType === this.notificationType && selectOption.integrationType === this.integrationType;\n        }\n\n        return false;\n    }\n\n    toString(): string {\n        const actionName = Messages.components.notifications.types[this.notificationType];\n        if (this.integrationType) {\n            const integrationName = Messages.components.integrations.integrationType[this.integrationType];\n            return `${actionName}: ${integrationName}`;\n        }\n\n        return actionName;\n    }\n}\n","import { Select, SelectOption, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { getInsights, OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { isStagingBetaOrProdBeta } from '../../../types/Environments';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { Action, ActionNotify, NotificationType } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ActionOption } from './ActionOption';\n\nconst getSelectOptions = () => [\n    ...([ NotificationType.DRAWER, NotificationType.EMAIL_SUBSCRIPTION ] as Array<ActionNotify['type']>)\n    .map(type => new ActionOption({\n        kind: 'notification',\n        type\n    })),\n    ...[ UserIntegrationType.WEBHOOK ].map(type => new ActionOption({\n        kind: 'integration',\n        type\n    }))\n];\n\nexport interface ActionTypeaheadProps extends OuiaComponentProps {\n    action: Action;\n    isDisabled?: boolean;\n    onSelected: (actionOption: ActionOption) => void;\n}\n\nexport const ActionTypeahead: React.FunctionComponent<ActionTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const toggle = React.useCallback(() => {\n        setOpen(prev => !prev);\n    }, [ setOpen ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const actionSelected = props.onSelected;\n        if (value instanceof ActionOption) {\n            actionSelected(value);\n            setOpen(false);\n        }\n\n    }, [ props.onSelected, setOpen ]);\n\n    const selectedOption = React.useMemo(() => {\n        if (props.action.type === NotificationType.INTEGRATION) {\n            return new ActionOption({\n                kind: 'integration',\n                type: props.action.integration.type\n            });\n        }\n\n        return new ActionOption({\n            kind: 'notification',\n            type: props.action.type\n        });\n    }, [ props.action ]);\n\n    const hideNonWebhooks = isStagingBetaOrProdBeta(getInsights());\n\n    return (\n        <div { ...getOuiaProps('ActionTypeahead', props) } >\n            <Select\n                variant={ SelectVariant.typeahead }\n                typeAheadAriaLabel=\"Select an action type\"\n                selections={ selectedOption }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onSelect={ onSelect }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n            >\n                { getSelectOptions()\n                .filter((o) => !hideNonWebhooks\n                    || o.notificationType === NotificationType.INTEGRATION)\n                .map(o => <SelectOption key={ o.toString() } value={ o } />) }\n            </Select>\n        </div>\n    );\n};\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { IntegrationRef } from '../../../types/Notification';\n\nexport class RecipientOption implements SelectOptionObject {\n    readonly recipientOrIntegration: string | IntegrationRef;\n\n    constructor(recipientOrIntegration: string | IntegrationRef) {\n        this.recipientOrIntegration = recipientOrIntegration;\n    }\n\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof RecipientOption && typeof selectOption.recipientOrIntegration === typeof this.recipientOrIntegration) {\n            if (typeof selectOption.recipientOrIntegration === 'string') {\n                return selectOption.recipientOrIntegration === this.recipientOrIntegration;\n            } else {\n                return selectOption.recipientOrIntegration.id === (this.recipientOrIntegration as IntegrationRef).id;\n            }\n        }\n\n        return false;\n    }\n\n    toString(): string {\n        if (typeof this.recipientOrIntegration === 'string') {\n            return this.recipientOrIntegration;\n        } else {\n            const postfix = this.recipientOrIntegration.isEnabled ? '' : ' - Disabled';\n            return `${this.recipientOrIntegration.name}${postfix}`;\n        }\n    }\n}\n","import { SelectOption } from '@patternfly/react-core';\nimport assertNever from 'assert-never';\nimport * as React from 'react';\n\nimport { IntegrationRef } from '../../../types/Notification';\nimport { RecipientOption } from './RecipientOption';\nimport { ReducerState } from './useTypeaheadReducer';\n\nconst mapper = <T extends IntegrationRef>(r: T | string) =>\n    <SelectOption key={ typeof r === 'string' ? r : r.id } value={ new RecipientOption(r) } />;\n\nexport const useRecipientOptionMemo = <T extends IntegrationRef>(state: ReducerState<T | string>) => {\n    return React.useMemo(() => {\n        if (state.show === 'default') {\n            if (state.loadingDefault) {\n                return [ <SelectOption\n                    key=\"loading-option\"\n                    isNoResultsOption={ true }\n                    value=\"Loading...\"\n                /> ];\n            } else {\n                return state.defaultValues.map(mapper);\n            }\n        } else if (state.show === 'filter') {\n            if (state.loadingFilter) {\n                return [ <SelectOption\n                    key=\"loading-option\"\n                    isNoResultsOption={ true }\n                    value=\"Loading...\"\n                /> ];\n            } else {\n                return state.filterValues.map(mapper);\n            }\n        }\n\n        assertNever(state.show);\n    }, [ state ]);\n};\n","import assertNever from 'assert-never';\nimport { Reducer, useCallback, useMemo, useReducer } from 'react';\n\nexport interface ReducerState<T> {\n    filterValues: Array<T>;\n    defaultValues: Array<T>;\n    show: 'default' | 'filter';\n    loadingFilter: boolean;\n    loadingDefault: boolean;\n    lastSearch: string;\n}\n\nenum ReducerActionType {\n    LOAD_FILTER_VALUE,\n    SET_FILTER_VALUE,\n    USE_DEFAULTS,\n    SET_DEFAULTS\n}\n\ntype ReducerAction<T> = {\n    type: ReducerActionType.USE_DEFAULTS;\n} | {\n    type: ReducerActionType.LOAD_FILTER_VALUE;\n    search: string;\n} | {\n    type: ReducerActionType.SET_FILTER_VALUE;\n    search: string;\n    values: Array<T>;\n} | {\n    type: ReducerActionType.SET_DEFAULTS;\n    values: Array<T>;\n}\n\nconst reducerFunction = <T>(state: ReducerState<T>, action: ReducerAction<T>): ReducerState<T> => {\n    switch (action.type) {\n        case ReducerActionType.SET_FILTER_VALUE:\n            if (action.search === state.lastSearch) {\n                if (action.values === state.filterValues) {\n                    return state;\n                }\n\n                return {\n                    ...state,\n                    loadingFilter: false,\n                    filterValues: action.values\n                };\n            }\n\n            return state;\n        case ReducerActionType.LOAD_FILTER_VALUE:\n            if (action.search !== state.lastSearch || state.show !== 'filter') {\n                return {\n                    ...state,\n                    loadingFilter: true,\n                    filterValues: [],\n                    lastSearch: action.search,\n                    show: 'filter'\n                };\n            }\n\n            return state;\n        case ReducerActionType.USE_DEFAULTS:\n            if (state.show !== 'default') {\n                return {\n                    ...state,\n                    show: 'default'\n                };\n            }\n\n            return state;\n        case ReducerActionType.SET_DEFAULTS:\n            return {\n                ...state,\n                defaultValues: action.values,\n                loadingDefault: false\n            };\n        default:\n            assertNever(action);\n    }\n};\n\nexport const useTypeaheadReducer = <T>() => {\n    const [ state, dispatch ] = useReducer<Reducer<ReducerState<T>, ReducerAction<T>>>(reducerFunction, {\n        filterValues: [],\n        defaultValues: [],\n        show: 'default',\n        loadingFilter: false,\n        loadingDefault: true,\n        lastSearch: ''\n    } as ReducerState<T>);\n\n    const setFilterValue = useCallback((search: string, values: Array<T>) => dispatch({\n        type: ReducerActionType.SET_FILTER_VALUE,\n        values,\n        search\n    }), [ dispatch ]);\n\n    const loadFilterValue = useCallback((search: string) => dispatch({\n        type: ReducerActionType.LOAD_FILTER_VALUE,\n        search\n    }), [ dispatch ]);\n\n    const setDefaults = useCallback((values: Array<T>) => dispatch({\n        type: ReducerActionType.SET_DEFAULTS,\n        values\n    }), [ dispatch ]);\n\n    const useDefaults = useCallback(() => dispatch({\n        type: ReducerActionType.USE_DEFAULTS\n    }), [ dispatch ]);\n\n    const dispatchers = useMemo(() => ({\n        setFilterValue,\n        loadFilterValue,\n        setDefaults,\n        useDefaults\n    }), [ setFilterValue, loadFilterValue, setDefaults, useDefaults ]);\n\n    return [ state, dispatchers ] as [ typeof state, typeof dispatchers ];\n};\n","import { Select, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationRef } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface IntegrationRecipientTypeaheadProps extends OuiaComponentProps {\n    selected: Partial<IntegrationRef> | undefined;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    integrationType: UserIntegrationType;\n    isDisabled?: boolean;\n    onSelected: (recipientOption: RecipientOption) => void;\n}\n\nexport const IntegrationRecipientTypeahead: React.FunctionComponent<IntegrationRecipientTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const [ state, dispatchers ] = useTypeaheadReducer<IntegrationRef>();\n\n    const toggle = React.useCallback((isOpen: boolean) => {\n        setOpen(isOpen);\n    }, [ setOpen ]);\n\n    React.useEffect(() => {\n        const getIntegrations = props.getIntegrations;\n        getIntegrations(props.integrationType, '').then(integrations => dispatchers.setDefaults(integrations));\n    }, [ props.getIntegrations, props.integrationType, dispatchers ]);\n\n    React.useEffect(() => {\n        const getIntegrations = props.getIntegrations;\n        if (state.loadingFilter) {\n            getIntegrations(props.integrationType, state.lastSearch).then(integrations => dispatchers.setFilterValue(\n                state.lastSearch,\n                integrations\n            ));\n        }\n    }, [ props.getIntegrations, props.integrationType, state.loadingFilter, state.lastSearch, dispatchers ]);\n\n    const onFilter = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        const search = e.target.value?.trim();\n\n        if (search === '') {\n            dispatchers.useDefaults();\n        } else {\n            dispatchers.loadFilterValue(search);\n        }\n\n        return [];\n    }, [ dispatchers ]);\n\n    const options = useRecipientOptionMemo(state);\n\n    const selection = React.useMemo(() => {\n        const sel = props.selected;\n        if (sel === undefined || sel.name === undefined || sel.id === undefined || sel.type === undefined) {\n            return undefined;\n        }\n\n        return new RecipientOption(sel as IntegrationRef);\n    }, [ props.selected ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const integrationSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n            integrationSelected(value);\n            setOpen(false);\n        }\n    }, [ props.onSelected ]);\n\n    return (\n        <div { ...getOuiaProps('IntegrationRecipientTypeahead', props) }>\n            <Select\n                variant={ SelectVariant.typeahead }\n                typeAheadAriaLabel=\"Choose webhook\"\n                placeholderText=\"Choose webhook\"\n                selections={ selection }\n                onSelect={ onSelect }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onFilter={ onFilter }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n            >\n                { options }\n            </Select>\n        </div>\n    );\n};\n","import { Select, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface RecipientTypeaheadProps extends OuiaComponentProps {\n    selected: Array<string> | undefined;\n    onSelected: (value: RecipientOption) => void;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    isDisabled?: boolean;\n    onClear: () => void;\n}\n\nexport const RecipientTypeahead: React.FunctionComponent<RecipientTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n    const [ state, dispatchers ] = useTypeaheadReducer<string>();\n\n    React.useEffect(() => {\n        const getRecipients = props.getRecipients;\n        getRecipients('').then(recipients => dispatchers.setDefaults(recipients));\n    }, [ props.getRecipients, dispatchers ]);\n\n    React.useEffect(() => {\n        const getRecipients = props.getRecipients;\n        if (state.loadingFilter) {\n            getRecipients(state.lastSearch).then(recipients => dispatchers.setFilterValue(\n                state.lastSearch,\n                recipients\n            ));\n        }\n    }, [ props.getRecipients, state.loadingFilter, state.lastSearch, dispatchers ]);\n\n    const toggle = React.useCallback((isOpen: boolean) => {\n        setOpen(isOpen);\n    }, [ setOpen ]);\n\n    const onFilter = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        const search = e.target.value?.trim();\n\n        if (search === '') {\n            dispatchers.useDefaults();\n        } else {\n            dispatchers.loadFilterValue(search);\n        }\n\n        return [];\n    }, [ dispatchers ]);\n\n    const options = useRecipientOptionMemo(state);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const selection = React.useMemo(() => {\n        const sel = props.selected;\n        if (sel === undefined) {\n            return undefined;\n        }\n\n        return (sel as Array<string>).map(s => new RecipientOption(s));\n\n    }, [ props.selected ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const onSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n            onSelected(value);\n        }\n    }, [ props.onSelected ]);\n\n    return (\n        <div { ...getOuiaProps('RecipientTypeahead', props) }>\n            <Select\n                variant={ SelectVariant.single }\n                typeAheadAriaLabel=\"Select the recipients\"\n                selections={ 'All registered users' }\n                onSelect={ onSelect }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onFilter={ onFilter }\n                menuAppendTo={ document.body }\n                isDisabled={ true }\n            >\n                { options }\n            </Select>\n        </div>\n    );\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { useField, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { Action, DefaultNotificationBehavior, IntegrationRef, NotificationType } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ActionOption } from './ActionOption';\nimport { ActionTypeahead } from './ActionTypeahead';\nimport { IntegrationRecipientTypeahead } from './IntegrationRecipientTypeahead';\nimport { RecipientOption } from './RecipientOption';\nimport { RecipientTypeahead } from './RecipientTypeahead';\n\nexport interface EditableActionTableProps {\n    actions: Array<Action>;\n    path: string;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    handleRemove?: (index: number) => () => void;\n    isDisabled?: boolean;\n}\n\ninterface EditableActionElementProps extends OuiaComponentProps {\n    path: string;\n    action: Action;\n    isDisabled?: boolean;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    onRemove?: () => void;\n}\n\nconst EditableActionRow: React.FunctionComponent<EditableActionElementProps> = (props) => {\n\n    const { setFieldValue } = useFormikContext<Notification | DefaultNotificationBehavior>();\n    const [\n        recipientFieldProps,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        _,\n        recipientFieldHelpers\n    ] = useField<Array<string> | undefined>(`${props.path}.recipient`);\n\n    const actionSelected = React.useCallback((value: ActionOption) => {\n        setFieldValue(`${props.path}.type`, value.notificationType);\n        if (value.integrationType) {\n            setFieldValue(`${props.path}.integration`, {\n                type: value.integrationType\n            });\n            setFieldValue(`${props.path}.recipient`, []);\n            setFieldValue(`${props.path}.integrationId`, '');\n        } else {\n            setFieldValue(`${props.path}.recipient`, []);\n            setFieldValue(`${props.path}.integration`, undefined);\n            setFieldValue(`${props.path}.integrationId`, '');\n        }\n    }, [ setFieldValue, props.path ]);\n\n    const integrationSelected = React.useCallback((value: RecipientOption) => {\n        if (typeof value.recipientOrIntegration !== 'string') {\n            setFieldValue(`${props.path}.integration`, value.recipientOrIntegration);\n            setFieldValue(`${props.path}.integrationId`, value.recipientOrIntegration.id);\n        }\n    }, [ setFieldValue, props.path ]);\n\n    const recipientSelected = React.useCallback((value: RecipientOption) => {\n        if (recipientFieldProps.value) {\n            const selected = recipientFieldProps.value;\n            const index = selected.indexOf(value.toString());\n            if (index === -1) {\n                recipientFieldHelpers.setValue([ ...selected, value.toString() ]);\n            } else {\n                recipientFieldHelpers.setValue([ ...selected ].filter((_, i) => i !== index));\n            }\n        }\n    }, [ recipientFieldProps, recipientFieldHelpers ]);\n\n    const recipientOnClear = React.useCallback(() => {\n        recipientFieldHelpers.setValue([]);\n    }, [ recipientFieldHelpers ]);\n\n    return (\n        <tr>\n            <td>\n                <ActionTypeahead\n                    action={ props.action }\n                    onSelected={ actionSelected }\n                    isDisabled={ props.isDisabled }\n                    ouiaId={ `${props.ouiaId ? 'action-' + props.ouiaId : undefined}` }\n                />\n            </td>\n            <td>\n                { props.action.type === NotificationType.INTEGRATION ? (\n                    <IntegrationRecipientTypeahead\n                        onSelected={ integrationSelected }\n                        integrationType={ props.action.integration?.type ?? UserIntegrationType.WEBHOOK }\n                        selected={ props.action.integration }\n                        getIntegrations={ props.getIntegrations }\n                        isDisabled={ props.isDisabled }\n                        ouiaId={ `${props.ouiaId ? 'recipient-' + props.ouiaId : undefined}` }\n                    />\n                ) : (\n                    <RecipientTypeahead\n                        onSelected={ recipientSelected }\n                        selected={ props.action.recipient }\n                        getRecipients={ props.getRecipients }\n                        isDisabled={ props.isDisabled }\n                        onClear={ recipientOnClear }\n                        ouiaId={ `${props.ouiaId ? 'recipient-' + props.ouiaId : undefined}` }\n                    />\n                ) }\n            </td>\n            <td>\n                <Button\n                    onClick={ props.onRemove }\n                    variant={ ButtonVariant.plain }\n                >\n                    <TimesIcon />\n                </Button>\n            </td>\n        </tr>\n    );\n};\n\nexport const EditableActionTable: React.FunctionComponent<EditableActionTableProps> = (props) => {\n\n    return (\n        <>\n            <thead { ...getOuiaProps('Notifications/Form/EditableActionHeader', {}) }>\n                <tr>\n                    <th>Action</th>\n                    <th>Recipient</th>\n                    <th />\n                </tr>\n            </thead>\n            <tbody { ...getOuiaProps('Notifications/Form/EditableActionBody', {}) }>\n                {\n                    props.actions.map((a, index) => {\n                        return (\n                            <EditableActionRow\n                                key={ index }\n                                ouiaId={ `${index}` }\n                                action={ a }\n                                isDisabled={ props.isDisabled }\n                                path={ `${props.path}.${index}` }\n                                getRecipients={ props.getRecipients }\n                                getIntegrations={ props.getIntegrations }\n                                onRemove={ props.handleRemove ? props.handleRemove(index) : undefined }\n                            />\n                        );\n                    })\n                }\n            </tbody>\n        </>\n    );\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { global_spacer_md, global_spacer_sm } from '@patternfly/react-tokens';\nimport {\n    Checkbox,\n    Form,\n    FormText,\n    OuiaComponentProps,\n    ouiaIdConcat\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { FieldArray, FieldArrayRenderProps, FormikProps, useFormikContext } from 'formik';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { UserIntegrationType } from '../../types/Integration';\nimport {\n    Action,\n    DefaultNotificationBehavior,\n    IntegrationRef,\n    Notification,\n    NotificationType\n} from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { EditableActionTable } from './Form/EditableActionTable';\n\ntype Type = 'default' | 'notification';\n\nexport interface NotificationFormProps extends OuiaComponentProps {\n    type: Type;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\ninterface ActionsArrayProps extends FieldArrayRenderProps {\n    form: FormikProps<Notification | DefaultNotificationBehavior>;\n    type: Type;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\nconst alignLeftClassName = style({\n    textAlign: 'left',\n    paddingLeft: 0\n});\n\nconst tableClassName = style({\n    display: 'block',\n    $nest: {\n        '& td, & th': {\n            paddingTop: global_spacer_sm.var,\n            paddingBottom: global_spacer_sm.var,\n            paddingLeft: global_spacer_md.var,\n            paddingRight: global_spacer_md.var\n        },\n        '& th': {\n            width: '500px'\n        },\n        '& th:last-child': {\n            width: '80px'\n        },\n        '& td:first-child, & th:first-child': {\n            paddingLeft: 0\n        }\n    }\n});\n\nconst ActionArray: React.FunctionComponent<ActionsArrayProps> = (props) => {\n\n    const { values, isSubmitting } = props.form;\n    const actions = values.actions;\n\n    const addAction = React.useCallback(() => {\n        const push = props.push;\n        const newAction: Action = {\n            type: NotificationType.EMAIL_SUBSCRIPTION,\n            integrationId: '',\n            recipient: []\n        };\n\n        push(newAction);\n    }, [ props.push ]);\n\n    return (\n        <>\n            { (actions === undefined || actions.length === 0) && (\n                <tbody { ...getOuiaProps('Notifications/Form/NoActions', {}) }>\n                    <tr>\n                        <td colSpan={ 3 }><span>No actions. Users will not be notified.</span></td>\n                    </tr>\n                </tbody>\n            )}\n\n            { actions && actions.length > 0 && (\n                <EditableActionTable\n                    path={ props.name }\n                    actions={ actions }\n                    getRecipients={ props.getRecipients }\n                    getIntegrations={ props.getIntegrations }\n                    handleRemove={ props.handleRemove }\n                    isDisabled={ isSubmitting }\n                />\n            ) }\n            <tbody { ...getOuiaProps('Notifications/Form/Button', {}) }>\n                <tr>\n                    <td>\n                        <Button\n                            className={ alignLeftClassName }\n                            variant={ ButtonVariant.link }\n                            icon={ <PlusCircleIcon /> }\n                            onClick={ addAction }\n                            isDisabled={ isSubmitting }\n                        >\n                            Add action\n                        </Button>\n                    </td>\n                </tr>\n            </tbody>\n        </>\n    );\n};\n\nexport const NotificationForm: React.FunctionComponent<NotificationFormProps> = (props) => {\n\n    const { values, isSubmitting } = useFormikContext<Notification | DefaultNotificationBehavior>();\n    const { type } = props;\n\n    const showActions: boolean = type === 'default' ? true : !(values as Notification).useDefault;\n\n    return (\n        <div { ... getOuiaProps('Notifications/Form', props) }>\n            <Form>\n                <table className={ tableClassName }>\n                    { props.type === 'notification' && (\n                        <>\n                            <thead />\n                            <tbody { ...getOuiaProps('Notifications/Form/ApplicationHeader', {}) }>\n                                <tr>\n                                    <td>\n                                        <FormText\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'event-name') }\n                                            label=\"Event name\"\n                                            name=\"eventTypeDisplayName\"\n                                            id=\"event\"\n                                        />\n                                    </td>\n                                    <td>\n                                        <FormText\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'application') }\n                                            label=\"Application\"\n                                            name=\"applicationDisplayName\"\n                                            id=\"application\"\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td colSpan={ 2 }>\n                                        <Checkbox\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'use-default') }\n                                            name=\"useDefault\"\n                                            id=\"useDefault\"\n                                            label=\"Use default notification actions\"\n                                            isDisabled={ isSubmitting }\n                                        />\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </>\n                    ) }\n                    { props.type === 'default' && (\n                        <tbody { ...getOuiaProps('Notifications/Form/DefaultHeader', {}) }>\n                            <tr>\n                                <td colSpan={ 3 }>\n                                    <div>Change the default notification actions for <b>Red Hat Insights</b>.</div>\n                                    <div>These actions apply to all events that use the default actions.</div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    )}\n\n                    { showActions && (\n                        <>\n                            <FieldArray name=\"actions\">\n                                { helpers =>  <ActionArray\n                                    type={ props.type }\n                                    { ...helpers }\n                                    getRecipients={ props.getRecipients }\n                                    getIntegrations={ props.getIntegrations }\n                                /> }\n                            </FieldArray>\n                        </>\n                    ) }\n                </table>\n            </Form>\n        </div>\n    );\n};\n","import { ModalVariant } from '@patternfly/react-core';\nimport { SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { WithActions } from '../../schemas/Integrations/Notifications';\nimport { UserIntegrationType } from '../../types/Integration';\nimport { DefaultNotificationBehavior, IntegrationRef, Notification } from '../../types/Notification';\nimport { NotificationForm } from './Form';\n\ntype DataFetcher = {\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\nexport type NotificationSaveModalProps = Omit<SaveModalProps, UsedProps> & ({\n    type: 'default';\n    data: DefaultNotificationBehavior;\n    onSave: (dnb: DefaultNotificationBehavior) => boolean | Promise<boolean>;\n} | {\n    type: 'notification';\n    data: Notification;\n    onSave: (notification: Notification) => boolean | Promise<boolean>;\n}) & DataFetcher;\n\ninterface InternalProps extends DataFetcher {\n    onClose: (saved: boolean) => void;\n    type: NotificationSaveModalProps['type'];\n}\n\nconst InternalNotificationSaveModal: React.FunctionComponent<InternalProps> = (props) => {\n    const title =  `Edit${props.type === 'default' && ' default' || ''} notification actions`;\n\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<Notification | DefaultNotificationBehavior>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            content={ <NotificationForm\n                type={ props.type }\n                getRecipients={ props.getRecipients }\n                getIntegrations={ props.getIntegrations }\n            /> }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            isOpen={ true }\n            title={ title }\n            onClose={ props.onClose }\n            variant={ ModalVariant.large }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const NotificationSaveModal: React.FunctionComponent<NotificationSaveModalProps> = (props) => {\n\n    const onSubmit = React.useCallback(async (data: Notification | DefaultNotificationBehavior) => {\n        const onClose = props.onClose;\n        let saved = false;\n        if (props.type === 'notification') {\n            const onSave = props.onSave;\n            saved = await onSave(data as Notification);\n        } else if (props.type === 'default') {\n            const onSave = props.onSave;\n            saved = await onSave(data as DefaultNotificationBehavior);\n        }\n\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onSave, props.onClose, props.type ]);\n\n    return (\n        <Formik<Notification | DefaultNotificationBehavior>\n            initialValues={ props.data }\n            validationSchema={ WithActions }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalNotificationSaveModal\n                type={ props.type }\n                onClose={ props.onClose }\n                getRecipients={ props.getRecipients }\n                getIntegrations={ props.getIntegrations }\n            />\n        </Formik>\n    );\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\n\nimport {\n    Operations, Schemas\n} from '../../generated/OpenapiIntegrations';\n\nexport const getDefaultActionIdAction = () => Operations.EndpointServiceCreateEndpoint.actionCreator({\n    body: {\n        type: Schemas.EndpointType.enum.default,\n        name: 'Default endpoint type',\n        description: '',\n        enabled: true,\n        properties: null\n    }\n});\n\nexport const getDefaultActionIdDecoder = validationResponseTransformer((payload: Operations.EndpointServiceCreateEndpoint.Payload) => {\n    if (payload.type === 'Endpoint') {\n        return validatedResponse(\n            'DefaultNotificationId',\n            payload.status,\n            payload.value.id as string,\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\n\nimport {\n    Operations, Schemas\n} from '../generated/OpenapiNotifications';\nimport { toActions } from '../types/adapters/NotificationAdapter';\nimport { UUID } from '../types/Notification';\n\nexport const getNotificationActionsByIdAction = (eventTypeId: UUID) => {\n    return Operations.NotificationServiceGetLinkedEndpoints.actionCreator({\n        eventTypeId\n    });\n};\n\nexport const hasDefaultNotificationDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetLinkedEndpoints.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'defaultNotification',\n            200,\n            payload.value.findIndex(a => a.type === Schemas.EndpointType.enum.default) !== -1,\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const getNotificationByIdActionDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetLinkedEndpoints.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'actionsArray',\n            200,\n            toActions(payload.value),\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n","import {\n    addDangerNotification,\n    addSuccessNotification,\n    Filter,\n    Operator,\n    Page\n} from '@redhat-cloud-services/insights-common-typescript';\nimport assertNever from 'assert-never';\nimport pLimit from 'p-limit';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport { NotificationSaveModal } from '../../../components/Notifications/SaveModal';\nimport {\n    getDefaultActionIdAction,\n    getDefaultActionIdDecoder\n} from '../../../services/Notifications/GetDefaultActionId';\nimport { actionAddActionToDefault } from '../../../services/useAddActionToDN';\nimport { actionAddActionToNotification } from '../../../services/useAddActionToNotification';\nimport {\n    defaultNotificationBehaviorCreator,\n    defaultNotificationsDecoder\n} from '../../../services/useDefaultNotificationBehavior';\nimport {\n    getNotificationActionsByIdAction,\n    getNotificationByIdActionDecoder,\n    hasDefaultNotificationDecoder\n} from '../../../services/useGetNotificationActions';\nimport {\n    listIntegrationIntegrationDecoder,\n    listIntegrationsActionCreator\n} from '../../../services/useListIntegrations';\nimport { actionRemoveActionFromDefault } from '../../../services/useRemoveActionFromDN';\nimport { actionRemoveActionFromNotification } from '../../../services/useRemoveActionFromNotification';\nimport { createIntegrationActionCreator } from '../../../services/useSaveIntegration';\nimport { IntegrationType, UserIntegrationType } from '../../../types/Integration';\nimport {\n    Action,\n    DefaultNotificationBehavior,\n    IntegrationRef,\n    Notification,\n    NotificationType\n} from '../../../types/Notification';\n\ninterface EditNotificationPagePropsNotification {\n    type: 'notification';\n    data: Notification;\n}\n\ninterface EditNotificationPagePropsDefault {\n    type: 'default';\n    data: DefaultNotificationBehavior;\n}\n\nexport type EditNotificationPageProps = {\n    onClose: (saved: boolean) => void;\n} & (EditNotificationPagePropsNotification | EditNotificationPagePropsDefault);\n\nconst recipients = [\n    'Admin',\n    'Another one',\n    'Default user access',\n    'Security admin',\n    'Stakeholders'\n];\n\nconst getRecipients = async (search: string) => {\n    if (search !== '') {\n        search = search.toLowerCase();\n        return recipients.filter(r => r.toLowerCase().includes(search));\n    }\n\n    return recipients;\n};\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport const EditNotificationPage: React.FunctionComponent<EditNotificationPageProps> = (props) => {\n\n    const { query } = useContext(ClientContext);\n\n    const getIntegrations = React.useCallback(async (type: UserIntegrationType, _search: string) => {\n        return query(listIntegrationsActionCreator(\n            Page.of(\n                1,\n                20,\n                new Filter()\n                .and('type', Operator.EQUAL, type)\n            )\n        )).then(response => {\n            let integrations: Array<IntegrationRef> = [];\n            const payload = response.payload ? listIntegrationIntegrationDecoder(response.payload) : undefined;\n\n            if (payload?.type === 'IntegrationPage') {\n                integrations = payload.value.data;\n            }\n\n            return integrations;\n        });\n    }, [ query ]);\n\n    const onSave = React.useCallback(async (data: Notification | DefaultNotificationBehavior) => {\n        const idMapper = (a: Action) => {\n            if (a.type !== NotificationType.INTEGRATION && a.type !== NotificationType.EMAIL_SUBSCRIPTION) {\n                throw new Error('Only integrations and EmailSubscription are supported');\n            }\n\n            return a.integrationId;\n        };\n\n        const type = props.type;\n        if (type !== 'notification' && type !== 'default') {\n            assertNever(type);\n        }\n\n        let oldActions: Array<Action> | undefined;\n        let oldUseDefault: boolean | undefined;\n        if (props.type === 'default') {\n            oldActions = await query(defaultNotificationBehaviorCreator())\n            .then(r => r.payload ? defaultNotificationsDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'DefaultNotificationBehavior' ? p.value.actions : undefined);\n\n            oldUseDefault = false;\n        } else if (props.type === 'notification') {\n            const id = props.data.id;\n            const actionsPromise = query(getNotificationActionsByIdAction(id));\n\n            oldActions = await actionsPromise\n            .then(r => r.payload ? getNotificationByIdActionDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'actionsArray' ? p.value : undefined);\n\n            oldUseDefault = await actionsPromise\n            .then(r => r.payload ? hasDefaultNotificationDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'defaultNotification' ? p.value : undefined);\n        }\n\n        const newUseDefault = props.type === 'notification' ? (data as Notification).useDefault : false;\n        let defaultActionId: string | undefined;\n\n        if (newUseDefault !== oldUseDefault) {\n            defaultActionId = await query(getDefaultActionIdAction())\n            .then(r => r.payload ? getDefaultActionIdDecoder(r.payload) : undefined)\n            .then(p => p?.type === 'DefaultNotificationId' ? p.value : undefined);\n        } else {\n            defaultActionId = 'nothing';\n        }\n\n        if (!oldActions || oldUseDefault === undefined || defaultActionId === undefined) {\n            addDangerNotification('Error updating actions', 'Failed to update actions. Please try again.');\n            return false;\n        }\n\n        const limit = pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS);\n\n        const originalIds = oldActions.map(idMapper);\n        const newIds = data.actions.map((a, i) => a.integrationId === '' ? { ...a, integrationId: `new${i}` } : a).map(idMapper);\n\n        const nonUserIntegrationsPromises: Array<Promise<boolean>> = [];\n\n        data.actions.map((a, index) => {\n            if (a.integrationId === '' && a.type === NotificationType.EMAIL_SUBSCRIPTION) {\n                nonUserIntegrationsPromises.push(limit(() => {\n                    return query(createIntegrationActionCreator({\n                        type: IntegrationType.EMAIL_SUBSCRIPTION,\n                        name: 'Email subscription',\n                        isEnabled: true\n                    }))\n                    .then(r => r.payload?.type === 'Endpoint' ? r.payload.value.id : undefined)\n                    .then(id => {\n                        if (id) {\n                            // Sanity check\n                            if (newIds[index] !== `new${index}`) {\n                                throw new Error(`Sync error, expected new${index} but found ${newIds[index]}`);\n                            }\n\n                            newIds[index] = id;\n                            return true;\n                        }\n\n                        return false;\n                    });\n                }));\n                // New, we need add this integration\n            }\n        });\n\n        if (nonUserIntegrationsPromises.length) {\n            const created = await Promise.all(nonUserIntegrationsPromises.map(p => p.catch(() => false))).then(all => all.every(e => e));\n            if (!created) {\n                addDangerNotification('Actions not added/removed', 'Some actions were not correctly added or removed. Please try again.');\n                return false;\n            }\n        }\n\n        let toDelete: Array<string>;\n        let toAdd: Array<string>;\n\n        if (newUseDefault) {\n            toDelete = originalIds.reduce<Array<string>>((arr, val) => {\n                if (!arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n\n            if (!oldUseDefault) {\n                toAdd = [ defaultActionId ];\n            } else {\n                toAdd = [];\n            }\n\n        } else {\n            toDelete = originalIds.reduce<Array<string>>((arr, val) => {\n                if (!newIds.includes(val) && !arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n\n            if (oldUseDefault) {\n                toDelete.push(defaultActionId);\n            }\n\n            toAdd = newIds.reduce<Array<string>>((arr, val) => {\n                if (!originalIds.includes(val) && !arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n        }\n\n        if (toAdd.length === 0 && toDelete.length === 0) {\n            // Nothing to update, display to the user that all was updated?\n            addSuccessNotification('Actions updated', 'All the actions were updated.');\n            return true;\n        }\n\n        const promises: Array<Promise<boolean>> = [];\n\n        if (props.type === 'notification') {\n            const notificationId = props.data.id;\n            promises.push(...toDelete.map(id => limit(() =>\n                query(actionRemoveActionFromNotification(notificationId, id)).then(r => !r.error))));\n            promises.push(...toAdd.map(id => limit(() => query(actionAddActionToNotification(notificationId, id)).then(r => !r.error))));\n        } else if (props.type === 'default') {\n            promises.push(...toDelete.map(id => limit(() => query(actionRemoveActionFromDefault(id)).then(r => !r.error))));\n            promises.push(...toAdd.map(id => limit(() => query(actionAddActionToDefault(id)).then(r => !r.error))));\n        }\n\n        const saved = await Promise.all(promises.map(p => p.catch(() => false))).then(all => all.every(e => e));\n\n        if (saved) {\n            addSuccessNotification('Actions updated', 'All the actions were updated.');\n        } else {\n            addDangerNotification('Actions not added/removed', 'Some actions were not correctly added or removed. Please try again.');\n        }\n\n        return saved;\n    }, [ props.type, query, props.data ]);\n\n    return (\n        <NotificationSaveModal\n            onSave={ onSave }\n            isSaving={ false }\n            { ...props }\n            getRecipients={ getRecipients }\n            getIntegrations={ getIntegrations }\n        />\n    );\n};\n","import { Operations  } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionRemoveActionFromNotification = (notificationId: UUID, actionId: UUID) => {\n    return Operations.NotificationServiceUnlinkEndpointFromEventType.actionCreator({\n        endpointId: actionId,\n        eventTypeId: notificationId\n    });\n};\n","import { Operations } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionAddActionToNotification = (notificationId: UUID, actionId: UUID) => {\n    return Operations.NotificationServiceLinkEndpointToEventType.actionCreator({\n        endpointId: actionId,\n        eventTypeId: notificationId\n    });\n};\n","import { Operations } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionRemoveActionFromDefault = (actionId: UUID) =>\n    Operations.NotificationServiceDeleteEndpointFromDefaults.actionCreator({\n        endpointId: actionId\n    });\n","import { Operations } from '../generated/OpenapiNotifications';\n\nexport const actionAddActionToDefault = (actionId: string) =>\n    Operations.NotificationServiceAddEndpointToDefaults.actionCreator({\n        endpointId: actionId\n    });\n","import { assertNever } from 'assert-never';\nimport { useReducer } from 'react';\n\nimport { DefaultNotificationBehavior, Notification } from '../../../types/Notification';\n\nenum UseFormModalReducerActionType {\n    EDIT_NOTIFICATION = 'edit-notification',\n    EDIT_DEFAULTS = 'edit-defaults',\n    NONE = 'none'\n}\n\ninterface UseFormModalReducerActionEditNotification {\n    type: UseFormModalReducerActionType.EDIT_NOTIFICATION;\n    template: Notification;\n}\n\ninterface UseFormModalReducerActionEditDefault {\n    type: UseFormModalReducerActionType.EDIT_DEFAULTS;\n    template: DefaultNotificationBehavior;\n}\n\ninterface UseFormModalReducerActionNone {\n    type: UseFormModalReducerActionType.NONE;\n}\n\ntype UseFormModalReducerAction = UseFormModalReducerActionEditNotification | UseFormModalReducerActionEditDefault | UseFormModalReducerActionNone;\n\ntype UseFormModalReducerState = {\n    isOpen: false;\n} | ({\n    isOpen: true;\n} & ({\n    type: 'default';\n    data: DefaultNotificationBehavior;\n} | {\n    type: 'notification';\n    data: Notification;\n}))\n\nconst noneState = {\n    isOpen: false as const\n};\n\nconst reducer = (state: UseFormModalReducerState, action: UseFormModalReducerAction): UseFormModalReducerState => {\n    switch (action.type) {\n        case UseFormModalReducerActionType.EDIT_DEFAULTS:\n            return {\n                isOpen: true,\n                type: 'default',\n                data: action.template\n            };\n        case UseFormModalReducerActionType.EDIT_NOTIFICATION:\n            return {\n                isOpen: true,\n                type: 'notification',\n                data: action.template\n            };\n        case UseFormModalReducerActionType.NONE:\n            return noneState;\n        default:\n            assertNever(action);\n    }\n};\n\nexport const makeEditNotificationAction = (template: Notification): UseFormModalReducerActionEditNotification => ({\n    type: UseFormModalReducerActionType.EDIT_NOTIFICATION,\n    template\n});\n\nexport const makeEditDefaultAction = (template: DefaultNotificationBehavior): UseFormModalReducerActionEditDefault => ({\n    type: UseFormModalReducerActionType.EDIT_DEFAULTS,\n    template\n});\n\nexport const makeNoneAction = (): UseFormModalReducerActionNone => ({\n    type: UseFormModalReducerActionType.NONE\n});\n\nexport const useFormModalReducer = () => {\n    return useReducer(reducer, noneState);\n};\n","import { assertNever } from 'assert-never';\nimport pLimit from 'p-limit';\nimport { default as React, useCallback, useContext, useEffect, useState } from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { usePrevious } from 'react-use';\n\nimport {\n    NotificationRowGroupedByApplication,\n    NotificationRowGroupedByNone,\n    NotificationRows\n} from '../../../components/Notifications/Table';\nimport { GroupByEnum } from '../../../components/Notifications/Types';\nimport { getNotificationActionsByIdAction } from '../../../services/useGetNotificationActions';\nimport { toActions, usesDefault } from '../../../types/adapters/NotificationAdapter';\nimport { Notification, UUID } from '../../../types/Notification';\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nconst toRowsGroupByNone = (notification: Notification): NotificationRowGroupedByNone => ({\n    loadingActionStatus: 'loading',\n    ...notification\n});\n\nconst findNotificationPath = (rows: Array<NotificationRowGroupedByApplication>, id: UUID): [number, number] => {\n    for (let i = 0; i < rows.length; ++i) {\n        for (let j = 0; j < rows[i].notifications.length; ++j) {\n            if (rows[i].notifications[j].id === id) {\n                return [ i, j ];\n            }\n        }\n    }\n\n    return [ -1, -1 ];\n};\n\nconst toRowGroupByApplication = (notifications: Array<Notification>): Array<NotificationRowGroupedByApplication> => {\n    const grouped = notifications.reduce((groups, notification) => {\n        if (!groups[notification.applicationDisplayName]) {\n            groups[notification.applicationDisplayName] = {\n                applicationDisplayName: notification.applicationDisplayName,\n                isOpen: true,\n                notifications: []\n            };\n        }\n\n        groups[notification.applicationDisplayName].notifications.push(toRowsGroupByNone(notification));\n        return groups;\n    }, {} as Record<string, NotificationRowGroupedByApplication>);\n\n    return Object.values(grouped);\n};\n\nexport const useNotificationRows = (notifications: Array<Notification>, groupBy: GroupByEnum) => {\n\n    const [ notificationRows, setNotificationRows ] = useState<NotificationRows>({\n        data: [],\n        grouped: GroupByEnum.Application\n    });\n    const prevNotificationInput = usePrevious(notifications);\n    const prevGroupBy = usePrevious(groupBy);\n    const { query } = useContext(ClientContext);\n    const [ limit ] = useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const setNotificationRowById = useCallback((id: UUID, partialNotificationRow: Partial<NotificationRowGroupedByNone>) => {\n        setNotificationRows(prev => {\n            if (prev.grouped === GroupByEnum.Application) {\n                const [ appIndex, notificationIndex ] = findNotificationPath(prev.data, id);\n\n                if (appIndex === -1) {\n                    return prev;\n                }\n\n                const newApps: Array<NotificationRowGroupedByApplication> = [ ...prev.data ];\n                newApps[appIndex] = { ...newApps[appIndex], notifications: [ ...newApps[appIndex].notifications ]};\n                newApps[appIndex].notifications[notificationIndex] = {\n                    ...newApps[appIndex].notifications[notificationIndex],\n                    ...partialNotificationRow\n                };\n\n                return {\n                    ...prev,\n                    data: newApps\n                };\n            } else if (prev.grouped === GroupByEnum.None) {\n                const index = prev.data.findIndex(n => n.id === id);\n                if (index === -1) {\n                    return prev;\n                }\n\n                const newNotifications = [ ...prev.data ];\n                newNotifications[index] = { ...newNotifications[index], ...partialNotificationRow };\n                return {\n                    ...prev,\n                    data: newNotifications\n                };\n            } else {\n                assertNever(prev);\n            }\n        });\n    }, [ setNotificationRows ]);\n\n    useEffect(() => {\n        if (notifications !== prevNotificationInput || groupBy !== prevGroupBy) {\n            setNotificationRows(_prev => {\n                switch (groupBy) {\n                    case GroupByEnum.None:\n                        return {\n                            grouped: GroupByEnum.None,\n                            data: notifications.map(toRowsGroupByNone)\n                        };\n                    case GroupByEnum.Application:\n                        return {\n                            grouped: GroupByEnum.Application,\n                            data: toRowGroupByApplication(notifications)\n                        };\n                    default:\n                        assertNever(groupBy);\n                }\n            });\n\n            if (notifications) {\n                limit.clearQueue();\n\n                notifications.map(notification => notification.id).forEach(notificationId => {\n                    limit(() => query(getNotificationActionsByIdAction(notificationId))).then(response => {\n                        if (response.payload && response.payload.status === 200) {\n                            setNotificationRowById(notificationId, {\n                                loadingActionStatus: 'done',\n                                actions: toActions(response.payload.value),\n                                useDefault: usesDefault(response.payload.value)\n                            });\n                        } else {\n                            setNotificationRowById(notificationId, {\n                                loadingActionStatus: 'error',\n                                actions: []\n                            });\n                        }\n                    });\n                });\n            }\n        }\n    }, [ groupBy, prevGroupBy, notifications, prevNotificationInput, limit, query, setNotificationRowById ]);\n\n    const onCollapse = React.useCallback((index: number, isOpen: boolean) => {\n        setNotificationRows(prevRows => {\n            switch (prevRows.grouped) {\n                case GroupByEnum.None:\n                    throw new Error('On collapse is not valid for group: None');\n                case GroupByEnum.Application:\n                    const data = [\n                        ...prevRows.data\n                    ];\n\n                    data[index] = {\n                        ...data[index],\n                        isOpen\n                    };\n\n                    return {\n                        ...prevRows,\n                        data\n                    };\n                default:\n                    assertNever(prevRows);\n            }\n        });\n    }, [ setNotificationRows ]);\n\n    return {\n        rows: notificationRows,\n        onCollapse\n    };\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nimport { Main, PageHeader, PageHeaderTitle, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    ExporterType,\n    getInsights,\n    InsightsEnvDetector,\n    RenderIfFalse\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { style } from 'typestyle';\n\nimport { AppContext, useAppContext } from '../../../app/AppContext';\nimport { DefaultBehavior } from '../../../components/Notifications/DefaultBehavior';\nimport { NotificationsTable } from '../../../components/Notifications/Table';\nimport { NotificationsToolbar } from '../../../components/Notifications/Toolbar';\nimport { GroupByEnum } from '../../../components/Notifications/Types';\nimport { Messages } from '../../../properties/Messages';\nimport { useDefaultNotificationBehavior } from '../../../services/useDefaultNotificationBehavior';\nimport { useListNotifications } from '../../../services/useListNotifications';\nimport { stagingBetaAndProdBetaEnvironment } from '../../../types/Environments';\nimport { Notification } from '../../../types/Notification';\nimport { EditNotificationPage } from '../Form/EditNotificationPage';\nimport {\n    makeEditDefaultAction,\n    makeEditNotificationAction,\n    makeNoneAction,\n    useFormModalReducer\n} from './useFormModalReducer';\nimport { useNotificationFilter } from './useNotificationFilter';\nimport { useNotificationPage } from './useNotificationPage';\nimport { useNotificationRows } from './useNotificationRows';\n\nconst displayInlineClassName = style({\n    display: 'inline'\n});\n\nconst tableTitleClassName = style({\n    fontWeight: 600,\n    paddingTop: global_spacer_md.var,\n    paddingBottom: global_spacer_md.var,\n    fontSize: '17px'\n});\n\nconst noPaddingTopClassName = style({\n    paddingTop: 0\n});\n\nconst emptyArray = [];\n\nexport const NotificationsListPage: React.FunctionComponent = () => {\n\n    const { rbac: { canWriteNotifications }} = useContext(AppContext);\n    const defaultNotificationBehavior = useDefaultNotificationBehavior();\n    const { applications } = useAppContext();\n\n    const notificationsFilter = useNotificationFilter(applications.map(a => a.label.toString()));\n    const [ groupBy, setGroupBy ] = React.useState<GroupByEnum>(GroupByEnum.Application);\n    const groupBySelected = React.useCallback((selected: GroupByEnum) => {\n        setGroupBy(selected);\n    }, [ setGroupBy ]);\n\n    const notificationPage = useNotificationPage(notificationsFilter.debouncedFilters, applications, 10);\n\n    const useNotifications = useListNotifications(notificationPage.page);\n    const {\n        rows: notificationRows,\n        onCollapse\n    } = useNotificationRows(\n        useNotifications.payload?.type === 'eventTypesArray' ? useNotifications.payload.value : emptyArray,\n        groupBy\n    );\n\n    const [ modalIsOpenState, dispatchModalIsOpen ] = useFormModalReducer();\n\n    const closeFormModal = React.useCallback((saved: boolean) => {\n        const updateDefaultNotifications = defaultNotificationBehavior.query;\n        const updateNotifications = useNotifications.query;\n        if (saved && modalIsOpenState.isOpen) {\n            if (modalIsOpenState.type === 'default') {\n                updateDefaultNotifications();\n            } else if (modalIsOpenState.type === 'notification') {\n                updateNotifications();\n            }\n        }\n\n        dispatchModalIsOpen(makeNoneAction());\n    }, [ dispatchModalIsOpen, defaultNotificationBehavior.query, modalIsOpenState, useNotifications.query ]);\n\n    const pageHeaderTitleProps = {\n        className: displayInlineClassName,\n        title: Messages.pages.notifications.list.title\n    };\n\n    const onExport = React.useCallback((type: ExporterType) => {\n        console.log('Export to', type);\n    }, []);\n\n    const onEditDefaultAction = React.useCallback(() => {\n        const payload = defaultNotificationBehavior.payload;\n        if (payload?.type === 'DefaultNotificationBehavior') {\n            dispatchModalIsOpen(makeEditDefaultAction(payload.value));\n        }\n    }, [ dispatchModalIsOpen, defaultNotificationBehavior.payload ]);\n\n    const onEditNotification = React.useCallback((notification: Notification) => {\n        dispatchModalIsOpen(makeEditNotificationAction(notification));\n    }, [ dispatchModalIsOpen ]);\n\n    return (\n        <>\n            <PageHeader>\n                <PageHeaderTitle { ...pageHeaderTitleProps } />\n                <InsightsEnvDetector insights={ getInsights() } onEnvironment={ stagingBetaAndProdBetaEnvironment }>\n                    <RenderIfFalse>\n                        <Button variant={ ButtonVariant.link }>{ Messages.pages.notifications.list.viewHistory }</Button>\n                    </RenderIfFalse>\n                </InsightsEnvDetector>\n            </PageHeader>\n            <Main className={ noPaddingTopClassName }>\n                <Section>\n                    <DefaultBehavior\n                        loading={ defaultNotificationBehavior.loading }\n                        defaultBehavior={ defaultNotificationBehavior.payload?.type === 'DefaultNotificationBehavior' ?\n                            defaultNotificationBehavior.payload.value :\n                            undefined }\n                        onEdit={ canWriteNotifications ? onEditDefaultAction : undefined }\n                    />\n                    <div className={ tableTitleClassName }>Insights notifications event types and behavior</div>\n                    <NotificationsToolbar\n                        filters={ notificationsFilter.filters }\n                        setFilters={ notificationsFilter.setFilters }\n                        clearFilter={ notificationsFilter.clearFilter }\n                        appFilterOptions={ applications }\n                        groupBy={ groupBy }\n                        onGroupBySelected={ groupBySelected }\n                        onExport={ onExport }\n                    >\n                        <NotificationsTable\n                            notifications={ notificationRows }\n                            onCollapse={ onCollapse }\n                            onEdit={ canWriteNotifications ? onEditNotification : undefined }\n                        />\n                    </NotificationsToolbar>\n                    { modalIsOpenState.isOpen && (\n                        <EditNotificationPage\n                            onClose={ closeFormModal }\n                            { ...modalIsOpenState }\n                        />\n                    ) }\n                </Section>\n            </Main>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Route, RouteProps, Switch } from 'react-router';\n\nimport { ErrorPage } from './pages/Error/Page';\nimport { IntegrationsListPage } from './pages/Integrations/List/Page';\nimport { NotificationsListPage } from './pages/Notifications/List/Page';\n\ninterface Path {\n    path: string;\n    component: React.ComponentType;\n}\n\nexport const linkTo = {\n    integrations: () => '/integrations',\n    notifications: () => '/notifications'\n};\n\nconst pathRoutes: Path[] = [\n    {\n        path: linkTo.integrations(),\n        component: IntegrationsListPage\n    },\n    {\n        path: linkTo.notifications(),\n        component: NotificationsListPage\n    }\n];\n\ntype InsightsRouteProps = RouteProps;\n\nconst InsightsRoute: React.FunctionComponent<InsightsRouteProps> = (props: InsightsRouteProps) => {\n    return (\n        <ErrorPage>\n            <Route { ...props } />\n        </ErrorPage>\n    );\n};\n\nexport const Routes: React.FunctionComponent = () => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <InsightsRoute\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                    exact={ true }\n                />\n            ))}\n        </Switch>\n    );\n};\n","import { Filter, Page, Sort } from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nexport interface UsePageReturn {\n    page: Page;\n    changePage: (page: number) => void;\n    changeItemsPerPage: (perPage: number) => void;\n}\n\nexport type FilterBuilder<T> = (filters: T | undefined) => Filter | undefined;\n\nexport const usePage = <T>(defaultPerPage: number, filterBuilder: FilterBuilder<T>, filters?: T, sort?: Sort): UsePageReturn => {\n    const [ currentPage, setCurrentPage ] = useState(1);\n    const [ itemsPerPage, setItemsPerPage ] = useState(defaultPerPage);\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [ filters, setCurrentPage, itemsPerPage ]);\n\n    const page = useMemo(() => {\n        const filter = filterBuilder ? filterBuilder(filters) : undefined;\n        return Page.of(currentPage, itemsPerPage, filter, sort);\n    }, [ currentPage, itemsPerPage, filters, sort, filterBuilder ]);\n\n    const changePage = useCallback((page: number) => {\n        setCurrentPage(page);\n    },  [ setCurrentPage ]);\n\n    const changeItemsPerPage = useCallback((perPage: number) => {\n        setItemsPerPage(perPage);\n    }, [ setItemsPerPage ]);\n\n    return {\n        page,\n        changePage,\n        changeItemsPerPage\n    };\n};\n","import { Exporter, ExporterType } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\n\nimport { UserIntegration } from '../../../types/Integration';\nimport { IntegrationExporterCsv } from './Csv';\nimport { IntegrationExporterJson } from './Json';\n\nexport const integrationExporterFactory = (type: ExporterType): Exporter<UserIntegration> => {\n    switch (type) {\n        case ExporterType.CSV:\n            return new IntegrationExporterCsv();\n        case ExporterType.JSON:\n            return new IntegrationExporterJson();\n    }\n\n    assertNever(type);\n};\n","import { useCallback } from 'react';\n\nimport { IntegrationRow, OnEnable } from '../../../components/Integrations/Table';\nimport { UserIntegration } from '../../../types/Integration';\n\ninterface ActionResolverParams {\n    onEdit: (integration: UserIntegration) => void;\n    onDelete: (integration: UserIntegration) => void;\n    canWrite: boolean;\n    onEnable: OnEnable;\n}\n\nexport const useActionResolver = (params: ActionResolverParams) => {\n\n    return useCallback((integration: IntegrationRow, index: number) => {\n        const onEdit = params.onEdit;\n        const onDelete = params.onDelete;\n        const onEnable = params.onEnable;\n\n        const isDisabled = !params.canWrite;\n\n        return [\n            {\n                title: 'Edit',\n                isDisabled,\n                onClick: () => onEdit(integration)\n            }, {\n                title: 'Remove',\n                isDisabled,\n                onClick: () => onDelete(integration)\n            }, {\n                title: integration.isEnabled ? 'Disable' : 'Enable',\n                isDisabled,\n                onClick: () => onEnable(integration, index, !integration.isEnabled)\n            }\n        ];\n\n    }, [ params.onEdit, params.onDelete, params.canWrite, params.onEnable ]);\n};\n","import { useFilters, useUrlStateMultipleOptions, useUrlStateString } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { useMemo } from 'react';\n\nimport { NotificationFilterColumn } from '../../../components/Notifications/Filter';\n\nconst DEBOUNCE_MS = 250;\n\nexport const useNotificationFilter = (initialAppOptions: Array<string>, debounce = DEBOUNCE_MS) => {\n    const useStateFactory = useMemo(() => {\n        const useUrlStateName = (defaultValue?: string) => useUrlStateString('name', defaultValue);\n        const useUrlStateApplication = (defaultValue?: Array<string>) => useUrlStateMultipleOptions(\n            'app',\n            initialAppOptions,\n            defaultValue\n        );\n        const useUrlStateAction = (defaultValue?: string) => useUrlStateString('action', defaultValue);\n\n        const useStateFactoryInternal = (column: NotificationFilterColumn) => {\n            switch (column) {\n                case NotificationFilterColumn.NAME:\n                    return useUrlStateName;\n                case NotificationFilterColumn.ACTION:\n                    return useUrlStateAction;\n                case NotificationFilterColumn.APPLICATION:\n                    return useUrlStateApplication;\n                default:\n                    assertNever(column);\n            }\n        };\n\n        return useStateFactoryInternal;\n        // This is an init param, so it doesn't need to recompute on change.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return useFilters(NotificationFilterColumn, debounce, useStateFactory);\n};\n","import {\n    arrayValue,\n    Filter,\n    Operator,\n    Page,\n    Sort\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { NotificationFilterColumn, NotificationFilters } from '../../../components/Notifications/Filter';\nimport { Schemas } from '../../../generated/OpenapiIntegrations';\nimport ApplicationFacet = Schemas.ApplicationFacet;\n\nexport interface UseNotificationPageReturn {\n    page: Page;\n    changePage: (page: number) => void;\n    changeItemsPerPage: (perPage: number) =>  void;\n}\n\nexport const useNotificationPage = (\n    filters: NotificationFilters,\n    appFilterOptions: Array<ApplicationFacet>,\n    defaultPerPage: number,\n    sort?: Sort): UseNotificationPageReturn => {\n    const [ currentPage, setCurrentPage ] = useState<number>(1);\n    const [ itemsPerPage, setItemsPerPage ] = useState<number>(defaultPerPage);\n\n    useEffect(() => setCurrentPage(1), [ setCurrentPage, filters ]);\n\n    const page = useMemo(() => {\n        const filter = new Filter();\n\n        const appFilter = filters[NotificationFilterColumn.APPLICATION];\n\n        if (appFilter) {\n            const appIds: Array<string> = [];\n            for (const appName of arrayValue(appFilter)) {\n                const filterOption = appFilterOptions.find(a => a.label === appName);\n                if (filterOption) {\n                    appIds.push(filterOption.value);\n                }\n            }\n\n            filter.and('applicationId', Operator.EQUAL, appIds);\n        }\n\n        return Page.of(currentPage, itemsPerPage, filter, sort);\n    }, [ currentPage, itemsPerPage, sort, filters, appFilterOptions ]);\n\n    const changePage = useCallback((page: number) => setCurrentPage(page), [ setCurrentPage ]);\n    const changeItemsPerPage = useCallback((perPage: number) => {\n        setCurrentPage(1);\n        setItemsPerPage(perPage);\n    }, [ setCurrentPage ]);\n\n    return {\n        page,\n        changePage,\n        changeItemsPerPage\n    };\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const getApplicationsAction = (bundleName: string) => Operations.NotificationServiceGetApplicationsFacets.actionCreator({\n    bundleName\n});\n\nexport const useGetApplications = (bundleName: string) => useQuery(getApplicationsAction(bundleName));\n","import './App.scss';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications';\nimport { AppSkeleton } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\n\nimport Config from '../config/Config';\nimport messages from '../properties/DefinedMessages';\nimport { Routes } from '../Routes';\nimport { getSubApp } from '../utils/Basename';\nimport { AppContext } from './AppContext';\nimport { useApp } from './useApp';\n\nconst App: React.ComponentType = () => {\n    const intl = useIntl();\n    const { rbac, applications } = useApp();\n    const location = useLocation();\n\n    const serviceName = React.useMemo(() => {\n        switch (getSubApp(location.pathname)) {\n            case Config.integrations.subAppId:\n                return intl.formatMessage(messages.integrations);\n            case Config.notifications.subAppId:\n                return intl.formatMessage(messages.notifications);\n            default:\n                return '';\n        }\n    }, [ intl, location.pathname ]);\n\n    const hasReadPermissions = React.useMemo(() => {\n        const appId = getSubApp(location.pathname);\n        switch (appId) {\n            case Config.integrations.subAppId:\n                return rbac?.canReadIntegrationsEndpoints;\n            case Config.notifications.subAppId:\n                return rbac?.canReadNotifications;\n        }\n\n        return false;\n    }, [ rbac, location.pathname ]);\n\n    if (!rbac || !applications) {\n        return (\n            <AppSkeleton />\n        );\n    }\n\n    return (\n        <AppContext.Provider value={ {\n            rbac,\n            applications\n        } }>\n            { hasReadPermissions ? (\n                <>\n                    <NotificationsPortal />\n                    <Routes />\n                </>\n            ) : (\n                <NotAuthorized serviceName={ serviceName } />\n            ) }\n        </AppContext.Provider>\n    );\n};\n\nexport default App;\n","import { fetchRBAC, Rbac, waitForInsights } from '@redhat-cloud-services/insights-common-typescript';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Config from '../config/Config';\nimport { useGetApplications } from '../services/Notifications/GetApplications';\nimport { AppContext } from './AppContext';\n\nexport const useApp = (): Omit<AppContext, 'rbac' | 'applications'> & Partial<Pick<AppContext, 'rbac' | 'applications'>> => {\n\n    const history = useHistory();\n    const [ rbac, setRbac ] = useState<Rbac | undefined>(undefined);\n    const getApplications = useGetApplications('insights');\n\n    const applications = useMemo(\n        () => getApplications.payload?.status === 200 ? getApplications.payload.value : undefined,\n        [ getApplications.payload ]\n    );\n\n    useEffect(() => {\n        waitForInsights().then((insights) => {\n            insights.chrome.init();\n            const appId = insights.chrome.getApp();\n            switch (appId) {\n                case Config.notifications.subAppId:\n                    document.title = Config.notifications.title;\n                    break;\n                case Config.integrations.subAppId:\n                    document.title = Config.integrations.title;\n                    break;\n            }\n\n            insights.chrome.identifyApp(appId);\n        });\n    }, [ history ]);\n\n    useEffect(() => {\n        waitForInsights().then(insights => {\n            insights.chrome.auth.getUser().then(() => {\n                fetchRBAC(`${Config.notifications.subAppId},${Config.integrations.subAppId}`).then(setRbac);\n            });\n        });\n    }, []);\n\n    return {\n        rbac: rbac ? {\n            canWriteNotifications: rbac.hasPermission('notifications', 'notifications', 'write'),\n            canReadNotifications: rbac.hasPermission('notifications', 'notifications', 'read'),\n            canWriteIntegrationsEndpoints: rbac.hasPermission('integrations', 'endpoints', 'write'),\n            canReadIntegrationsEndpoints: rbac.hasPermission('integrations', 'endpoints', 'read')\n        } : undefined,\n        applications\n    };\n};\n","import { getType } from 'typesafe-actions';\n\nimport { NotificationAppAction } from '../actions/NotificationAppAction';\nimport { SavedNotificationScopeActions } from '../actions/SavedNotificationScopeAction';\nimport { SavedNotificationScopeState, Status } from '../types/SavedNotificationScopeTypes';\n\nexport const INITIAL_STATE: SavedNotificationScopeState = null;\n\nexport const SavedNotificationScopeReducer = (\n    state: SavedNotificationScopeState = INITIAL_STATE,\n    action: NotificationAppAction): SavedNotificationScopeState => {\n    switch (action.type) {\n        case getType(SavedNotificationScopeActions.setIntegration):\n            return {\n                integration: action.payload,\n                status: Status.DONE\n            };\n        case getType(SavedNotificationScopeActions.start):\n            if (!state) {\n                return state;\n            }\n\n            return {\n                ...state,\n                status: Status.LOADING\n            };\n        case getType(SavedNotificationScopeActions.finish):\n            if (!state) {\n                return state;\n            }\n\n            return {\n                integration: { ...state.integration, isEnabled: action.payload },\n                status: Status.DONE\n            };\n        case getType(SavedNotificationScopeActions.unset):\n            return null;\n        default:\n            return state;\n    }\n};\n","import { initStore, restoreStore } from '@redhat-cloud-services/insights-common-typescript';\nimport { Middleware } from 'redux';\n\nimport { INITIAL_STATE as SNS_INITIAL_STATE, SavedNotificationScopeReducer } from './reducers/SavedNotificationScopeReducer';\nimport { NotificationAppState } from './types/NotificationAppState';\n\nexport const createStore = (...middleware: Middleware[]) => {\n    return initStore(\n        {\n            savedNotificationScope: SNS_INITIAL_STATE\n        } as NotificationAppState,\n        {\n            savedNotificationScope: SavedNotificationScopeReducer\n        },\n        ...middleware);\n};\n\nexport const resetStore = () => restoreStore();\n","import { ActionType, createAction } from 'typesafe-actions';\n\nimport { IntegrationRef } from '../../types/Notification';\n\nexport enum SavedNotificationScopeKeys {\n    SET_INTEGRATION = 'SET_INTEGRATION',\n    START = 'START',\n    FINISH = 'FINISH',\n    UNSET = 'UNSET'\n}\n\nexport const SavedNotificationScopeActions = {\n    setIntegration: createAction(SavedNotificationScopeKeys.SET_INTEGRATION)<IntegrationRef>(),\n    start: createAction(SavedNotificationScopeKeys.START)(),\n    finish: createAction(SavedNotificationScopeKeys.FINISH)<boolean>(),\n    unset: createAction(SavedNotificationScopeKeys.UNSET)()\n};\n\nexport type SavedNotificationScopeAction = ActionType<typeof SavedNotificationScopeActions>;\n","import { IntegrationRef } from '../../types/Notification';\n\nexport enum Status {\n    LOADING,\n    DONE\n}\n\nexport type SavedNotificationScopeState = {\n    integration: IntegrationRef;\n    status: Status;\n} | null;\n","// This is a custom getBaseName that doesn't add the appId\n// The reason is that this 'app' is in 2 menus (integrations and notifications), so is easier to just add that into our\n// paths for easier navigation.\nexport const getBaseName = (pathname: string) => {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n};\n\nexport const getSubApp = (pathname: string) => {\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        return pathName[1];\n    }\n\n    return pathName[0];\n};\n"],"sourceRoot":""}
{"version":3,"sources":["webpack://notifications-frontend/./src/app/App.scss","webpack://notifications-frontend/./src/components/Notifications/Table.scss","webpack://notifications-frontend/./src/app/App.scss?955f","webpack://notifications-frontend/./src/components/Notifications/Table.scss?bdaa","webpack://notifications-frontend/./src/config/Config.ts","webpack://notifications-frontend/./src/properties/DefinedMessages.ts","webpack://notifications-frontend/./src/components/RedirectToDefaultBundle.tsx","webpack://notifications-frontend/./src/types/Integration.ts","webpack://notifications-frontend/./src/properties/Messages.ts","webpack://notifications-frontend/./src/pages/Error/Page.tsx","webpack://notifications-frontend/./src/app/AppContext.tsx","webpack://notifications-frontend/./src/utils/getOuiaProps.ts","webpack://notifications-frontend/./src/components/Integrations/Table/ConnectionAttempt.tsx","webpack://notifications-frontend/./src/components/Integrations/Table/ConnectionAlert.tsx","webpack://notifications-frontend/./src/components/Integrations/Table/ConnectionDegraded.tsx","webpack://notifications-frontend/./src/components/Integrations/Table/ConnectionFailed.tsx","webpack://notifications-frontend/./src/components/Integrations/Table/ExpandedContent.tsx","webpack://notifications-frontend/./src/components/Integrations/Table.tsx","webpack://notifications-frontend/./src/hooks/useTableExportConfig.ts","webpack://notifications-frontend/./src/types/Environments.ts","webpack://notifications-frontend/./src/components/Integrations/Filters.ts","webpack://notifications-frontend/./src/components/Integrations/Toolbar.tsx","webpack://notifications-frontend/./src/components/Icons/EnabledIntegrationIcon.tsx","webpack://notifications-frontend/./src/components/Icons/DisabledIntegrationIcon.tsx","webpack://notifications-frontend/./src/generated/OpenapiIntegrations.ts","webpack://notifications-frontend/./src/types/adapters/IntegrationAdapter.ts","webpack://notifications-frontend/./src/services/useListIntegrations.ts","webpack://notifications-frontend/./src/utils/exporters/Integration/Csv.ts","webpack://notifications-frontend/./src/utils/exporters/Integration/Json.ts","webpack://notifications-frontend/./src/components/Integrations/AddNotificationBody.tsx","webpack://notifications-frontend/./src/schemas/Integrations/Integration.ts","webpack://notifications-frontend/./src/components/Integrations/Form/IntegrationTypeHttpForm.tsx","webpack://notifications-frontend/./src/components/Integrations/Form/IntegrationTypeForm.tsx","webpack://notifications-frontend/./src/components/Integrations/Form.tsx","webpack://notifications-frontend/./src/components/Integrations/SaveModal.tsx","webpack://notifications-frontend/./src/services/useSaveIntegration.ts","webpack://notifications-frontend/./src/services/useSwitchIntegrationEnabledStatus.ts","webpack://notifications-frontend/./src/store/selectors/SavedNotificationScopeSelector.ts","webpack://notifications-frontend/./src/pages/Integrations/Create/CreatePage.tsx","webpack://notifications-frontend/./src/components/Integrations/DeleteModal.tsx","webpack://notifications-frontend/./src/generated/OpenapiNotifications.ts","webpack://notifications-frontend/./src/types/Notification.ts","webpack://notifications-frontend/./src/types/adapters/NotificationAdapter.ts","webpack://notifications-frontend/./src/services/Notifications/GetAffectedNotificationsByEndpoint.ts","webpack://notifications-frontend/./src/services/useDeleteIntegration.ts","webpack://notifications-frontend/./src/pages/Integrations/Delete/DeleteModal.tsx","webpack://notifications-frontend/./src/pages/Integrations/List/useDeleteModalReducer.ts","webpack://notifications-frontend/./src/pages/Integrations/List/useFormModalReducer.ts","webpack://notifications-frontend/./src/pages/Integrations/List/useIntegrationFilter.ts","webpack://notifications-frontend/./src/services/useListIntegrationHistory.ts","webpack://notifications-frontend/./src/pages/Integrations/List/useIntegrationRows.ts","webpack://notifications-frontend/./src/pages/Integrations/List/Page.tsx","webpack://notifications-frontend/./src/services/Notifications/GetApplications.ts","webpack://notifications-frontend/./src/components/Icons/WebhookIcon.svg","webpack://notifications-frontend/./src/components/Icons/WebhookIcon.tsx","webpack://notifications-frontend/./src/components/Notifications/ActionComponent.tsx","webpack://notifications-frontend/./src/components/Notifications/Recipient.tsx","webpack://notifications-frontend/./src/components/Notifications/DefaultBehavior.tsx","webpack://notifications-frontend/./src/components/Notifications/Types.ts","webpack://notifications-frontend/./src/components/Notifications/Table.tsx","webpack://notifications-frontend/./src/components/Notifications/Filter.ts","webpack://notifications-frontend/./src/components/Notifications/Table/GroupBy.tsx","webpack://notifications-frontend/./src/components/Notifications/Toolbar.tsx","webpack://notifications-frontend/./src/services/useDefaultNotificationBehavior.ts","webpack://notifications-frontend/./src/services/useListNotifications.ts","webpack://notifications-frontend/./src/schemas/Integrations/Notifications.ts","webpack://notifications-frontend/./src/components/Notifications/Form/ActionOption.ts","webpack://notifications-frontend/./src/components/Notifications/Form/ActionTypeahead.tsx","webpack://notifications-frontend/./src/components/Notifications/Form/RecipientOption.ts","webpack://notifications-frontend/./src/components/Notifications/Form/useRecipientOptionMemo.tsx","webpack://notifications-frontend/./src/components/Notifications/Form/useTypeaheadReducer.ts","webpack://notifications-frontend/./src/components/Notifications/Form/IntegrationRecipientTypeahead.tsx","webpack://notifications-frontend/./src/components/Notifications/Form/RecipientTypeahead.tsx","webpack://notifications-frontend/./src/components/Notifications/Form/EditableActionTable.tsx","webpack://notifications-frontend/./src/components/Notifications/Form.tsx","webpack://notifications-frontend/./src/components/Notifications/SaveModal.tsx","webpack://notifications-frontend/./src/services/Notifications/GetDefaultActionId.ts","webpack://notifications-frontend/./src/services/useGetNotificationActions.ts","webpack://notifications-frontend/./src/pages/Notifications/Form/EditNotificationPage.tsx","webpack://notifications-frontend/./src/services/useRemoveActionFromNotification.ts","webpack://notifications-frontend/./src/services/useAddActionToNotification.ts","webpack://notifications-frontend/./src/services/useRemoveActionFromDN.ts","webpack://notifications-frontend/./src/services/useAddActionToDN.ts","webpack://notifications-frontend/./src/pages/Notifications/List/useFormModalReducer.ts","webpack://notifications-frontend/./src/pages/Notifications/List/useNotificationRows.ts","webpack://notifications-frontend/./src/pages/Notifications/List/BundlePage.tsx","webpack://notifications-frontend/./src/pages/Notifications/List/useNotificationFilter.ts","webpack://notifications-frontend/./src/pages/Notifications/List/useNotificationPage.ts","webpack://notifications-frontend/./src/pages/Notifications/List/Page.tsx","webpack://notifications-frontend/./src/Routes.tsx","webpack://notifications-frontend/./src/hooks/usePage.ts","webpack://notifications-frontend/./src/utils/exporters/Integration/Factory.ts","webpack://notifications-frontend/./src/pages/Integrations/List/useActionResolver.ts","webpack://notifications-frontend/./src/services/Notifications/GetBundles.ts","webpack://notifications-frontend/./src/app/useApp.ts","webpack://notifications-frontend/./src/app/App.tsx","webpack://notifications-frontend/./src/store/reducers/SavedNotificationScopeReducer.ts","webpack://notifications-frontend/./src/store/Store.ts","webpack://notifications-frontend/./src/store/actions/SavedNotificationScopeAction.ts","webpack://notifications-frontend/./src/store/types/SavedNotificationScopeTypes.ts","webpack://notifications-frontend/./src/utils/Basename.ts"],"names":["___CSS_LOADER_EXPORT___","i","push","module","id","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose","subAppId","title","notifications","description","defaultMessage","integrations","integrationsEmptyStateTitle","integrationsTableEmptyStateBody","defaultBundleName","RedirectToDefaultBundle","from","linkTo","to","IntegrationType","UserIntegrationType","cache","locale","navigator","language","slice","intl","onError","console","log","intlSettings","Messages","appName","formatMessage","appNameIntegrations","pages","list","add","edit","viewHistory","error","emptyState","content","showDetails","actions","goToIndex","components","toolbar","addIntegration","editIntegration","table","columns","name","type","lastConnectionAttempt","enabled","enableError","disableError","integrationType","WEBHOOK","types","EMAIL_SUBSCRIPTION","DRAWER","INTEGRATION","event","action","recipient","common","choose","ErrorPage","props","goToListPage","history","goBack","ErrorBoundaryPage","actionLabel","pageHeader","children","AppContext","rbac","canReadIntegrationsEndpoints","canReadNotifications","canWriteIntegrationsEndpoints","canWriteNotifications","getOuiaProps","getOuiaPropsFactory","ConnectionAttemptType","dateClassName","style","marginLeft","global_spacer_xs","ConnectionAttempt","formattedDate","format","toUtc","date","SUCCESS","color","global_success_color_100","FAILED","global_danger_color_100","getIcon","className","connectionAttemptClassName","global_spacer_sm","marginTopClassName","marginTop","ConnectionAlert","Alert","variant","alertVariant","isInline","attempts","map","attempt","index","key","isSuccess","ConnectionDegraded","failures","filter","length","AlertVariant","ConnectionFailed","titleClass","fontWeight","ExpandedContent","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","integration","url","sslVerificationEnabled","undefined","secretToken","LastConnectionAttemptStatus","connectionAlertClassName","paddingBottom","global_spacer_md","expandedContentClassName","paddingLeft","isEnabledLoadingClassName","smallMarginLeft","degradedClassName","global_warning_color_200","fontSize","getLastConnectionAttemptStatus","UNKNOWN","ERROR","WARNING","getConnectionAlert","status","LastConnectionAttemptSuccess","LastConnectionAttemptError","getConnectionAttemptCell","isLoading","Spinner","size","Text","cellFormatters","expandable","transforms","rowExpandedContentClassName","rowWrapperClassName","tableClassName","noneStyle","important","borderStyle","noBorderBottom","borderBottom","borderTop","buildClassNames","RowWrapper","trRef","rowProps","row","rest","ref","isExpanded","hidden","IntegrationsTable","useIntl","onCollapseHandler","_event","_index","isOpen","data","onCollapse","findIndex","rows","onEnable","reduce","idx","selected","isSelected","cells","lastConnectionAttempts","isConnectionAttemptLoading","isEnabledLoading","Switch","isChecked","isEnabled","onChange","isDisabled","ouiaId","fullWidth","parent","colSpan","actionsResolverCallback","rowData","actionResolver","integrationIndex","integrationRow","ouiaSafe","SkeletonTable","rowSize","loadingCount","paddingColumnSize","sortBy","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","EmptyStateBody","Table","rowWrapper","TableHeader","TableBody","useTableExportConfig","onExport","extraItems","onSelect","exporterTypeFromString","stagingBetaAndProdBetaEnvironment","IntegrationFilterColumn","enabledTextClassName","filterMetadata","NAME","label","placeholder","ENABLED","options","exclusive","items","value","IntegrationsToolbar","primaryToolbarFilterConfig","usePrimaryToolbarFilterConfig","filters","setFilters","clearFilters","actionsConfig","onClick","onAddIntegration","kebabToggleProps","exportConfig","filterConfig","useInsightsEnvironmentFlag","getInsights","useCallback","activeFiltersConfig","pageChanged","page","inner","perPageChanged","perPage","topPaginationProps","itemCount","count","isCompact","PaginationVariant","onSetPage","onFirstClick","onPreviousClick","onNextClick","onLastClick","onPageInput","onPerPageSelect","bottomPaginationProps","PrimaryToolbar","pagination","Schemas","Operations","zodSchemaApplication","bundle_id","zodSchemaUUID","created","optional","nullable","display_name","updated","nonstrict","zodSchemaBasicAuthentication","password","username","zodSchemaEmailSubscriptionAttributes","zodSchemaEndpoint","properties","zodSchemaWebhookAttributes","zodSchemaEndpointType","zodSchemaEntityTag","weak","zodSchemaFamily","zodSchemaHttpType","zodSchemaLink","params","rel","rels","uri","uriBuilder","zodSchemaUriBuilder","zodSchemaLocale","country","displayCountry","displayLanguage","displayName","displayScript","displayVariant","extensionKeys","iSO3Country","iSO3Language","script","unicodeLocaleAttributes","unicodeLocaleKeys","zodSchemaMediaType","parameters","subtype","wildcardSubtype","wildcardType","zodSchemaMeta","int","zodSchemaMultivaluedMapStringObject","zodSchemaMultivaluedMapStringString","zodSchemaNewCookie","comment","domain","expiry","httpOnly","maxAge","path","secure","version","zodSchemaStatusType","family","reasonPhrase","statusCode","basic_authentication","disable_ssl_verification","method","secret_token","Application","Attributes","BasicAuthentication","Bundle","EmailSubscriptionAttributes","EmailSubscriptionType","Endpoint","EndpointPage","links","meta","EndpointType","EntityTag","EventType","application","Facet","Family","HttpType","Link","Locale","MediaType","Meta","MultivaluedMapStringObject","MultivaluedMapStringString","NewCookie","NotificationHistory","details","endpointId","eventId","invocationResult","invocationTime","Response","allowedMethods","cookies","entity","entityTag","headers","lastModified","location","mediaType","metadata","statusInfo","stringHeaders","StatusType","UUID","UriBuilder","WebhookAttributes","EndpointServiceGetEndpoints","EndpointServiceCreateEndpoint","EndpointServiceSubscribeEmail","EndpointServiceUnsubscribeEmail","EndpointServiceGetEndpoint","EndpointServiceUpdateEndpoint","EndpointServiceDeleteEndpoint","EndpointServiceEnableEndpoint","EndpointServiceDisableEndpoint","EndpointServiceGetEndpointHistory","EndpointServiceGetDetailedEndpointHistory","actionCreator","query","active","limit","offset","pageNumber","sort_by","actionBuilder","queryParams","config","rules","ValidateRule","build","body","Response200","replace","applicationName","toString","bundleName","Response204","historyId","pageSize","getIntegrationType","Enum","webhook","email_subscription","default","Error","getEndpointType","toIntegration","serverIntegration","integrationBase","GET","toIntegrations","serverIntegrations","filterOutDefaultAction","toIntegrationProperties","integrationHttp","toServerIntegrationRequest","serverNotifications","e","enum","listIntegrationsActionCreator","pager","Page","toQuery","filterType","filterActive","listIntegrationIntegrationDecoder","validationResponseTransformer","payload","validatedResponse","Object","values","includes","errors","IntegrationExporterCsv","ExporterCsv","IntegrationExporterJson","ExporterJson","buttonClassname","AddNotificationBody","text","buttonText","Button","ButtonVariant","switchEnabled","IntegrationSchemaBase","required","max","trim","oneOf","IntegrationHttpSchema","concat","shape","notRequired","POST","IntegrationSchema","IntegrationTypeHttpForm","FormTextInput","isRequired","ouiaIdConcat","Checkbox","IntegrationTypeForm","FormSelectOption","IntegrationsForm","useFormikContext","Form","maxLength","FormSelect","InternalIntegrationSaveModal","pageTitle","isEdit","handleSubmit","isValid","isSubmitting","onSaveClicked","SaveModal","isSaving","onSave","onClose","actionButtonDisabled","IntegrationSaveModal","initialIntegration","cast","onSubmit","transformedIntegration","Formik","initialValues","validationSchema","validateOnMount","createIntegrationActionCreator","saveIntegrationActionCreator","decoder","response","switchIntegrationEnabledStatusActionCreator","useSwitchIntegrationEnabledStatus","useMutation","savedNotificationScopeSelector","state","savedNotificationScope","savedNotificationScopeEqualFn","left","right","AddNotificationBodyContainer","useSelector","dispatch","useDispatch","switchIntegrationEnabledStatus","mutate","SavedNotificationScopeAction","then","CreatePage","saveIntegrationMutation","useTransformQueryResponse","hasError","setError","onSaveIntegration","savedIntegration","addSuccessNotification","loading","IntegrationDeleteModal","onDeleteInternal","onDelete","Skeleton","eventText","ExpandableSection","toggleText","List","notification","ListItem","applicationDisplayName","eventTypeDisplayName","DeleteModal","isDeleting","titleIconVariant","NotificationType","NotificationServiceGetEndpointsForDefaults","NotificationServiceAddEndpointToDefaults","NotificationServiceDeleteEndpointFromDefaults","NotificationServiceGetEventTypes","NotificationServiceGetEventTypesAffectedByEndpointId","NotificationServiceGetLinkedEndpoints","NotificationServiceLinkEndpointToEventType","NotificationServiceUnlinkEndpointFromEventType","NotificationServiceGetApplicationsFacets","NotificationServiceGetBundleFacets","NotificationServiceMarkRead","applicationIds","bundleId","eventTypeId","_toAction","serverAction","userIntegration","toUserIntegration","integrationId","toNotification","serverNotification","JSON","stringify","useDefault","toAction","toNotifications","toActions","serverActions","notificationsForEndpointActionCreator","defaultNotificationsDecoder","deleteIntegrationActionCreator","IntegrationDeleteModalPage","deleteIntegrationMutation","getNotificationsQuery","useParameterizedQuery","deleteIntegration","UseDeleteModalReducerActionType","noneState","reducer","DELETE","NONE","useDeleteModalReducer","useReducer","UseFormModalReducerActionType","makeNoneAction","makeDeleteAction","template","isCopy","CREATE","EDIT","useUrlStateName","defaultValue","useUrlStateString","useUrlStateEnabled","_defaultValue","useUrlStateMultipleOptions","useStateFactory","column","notificationAppStateSelector","notificationAppStateEqualFn","integrationFilterBuilder","Filter","toLocaleLowerCase","and","Operator","getApplicationsAction","verticalAlign","width","height","src","marginLeftClassName","grayFontClassName","ActionTypeToIcon","actionType","ActionComponentWrapper","ActionComponent","isDefault","disabledLabelClassName","Recipient","Tooltip","position","Label","hasOutline","cssRaw","c_skeleton_BackgroundColor","global_palette_black_300","contentClassName","backgroundColor","paddingTop","paddingRight","display","$nest","global_FontSize_sm","titleClassName","DefaultBehavior","onEdit","defaultBehavior","GroupByEnum","pfBorderBottomClassName","cellPaddingBottom","actionCellStyle","cellPaddingBottomStyle","cellPaddingTop","cellPaddingTopStyle","noExpandableBorderClassName","borderLeft","applicationGroupClassName","EventCell","rowClassName","toTableRowsGroupedByNone","rowSpan","Math","firstAction","joinClasses","loadingActionStatus","classNames","cssStyle","NotificationsTable","grouped","applicationGroups","applicationGroup","None","n","NotificationFilterColumn","GroupBy","DropdownItem","setOpen","groupBy","target","dataset","onToggle","shouldBeOpen","pascalCase","Dropdown","toggle","DropdownToggle","toggleIndicator","dropdownItems","NotificationsToolbar","useMemo","appFilterItems","appFilterOptions","APPLICATION","ACTION","clearFilter","exportConfigInternal","dedicatedAction","onGroupBySelected","defaultNotificationBehaviorCreator","ActionIntegration","min","ActionNotify","WithActions","obj","hasOwnProperty","ActionOption","kind","this","notificationType","selectOption","actionName","ActionTypeahead","prev","actionSelected","onSelected","selectedOption","hideNonWebhooks","insights","getInsightsEnvironment","Select","SelectVariant","typeAheadAriaLabel","selections","menuAppendTo","document","o","SelectOption","RecipientOption","recipientOrIntegration","postfix","mapper","r","useRecipientOptionMemo","show","loadingDefault","isNoResultsOption","defaultValues","loadingFilter","filterValues","ReducerActionType","reducerFunction","SET_FILTER_VALUE","search","lastSearch","LOAD_FILTER_VALUE","USE_DEFAULTS","SET_DEFAULTS","useTypeaheadReducer","setFilterValue","loadFilterValue","setDefaults","useDefaults","IntegrationRecipientTypeahead","dispatchers","getIntegrations","onFilter","selection","sel","integrationSelected","placeholderText","RecipientTypeahead","getRecipients","recipients","s","EditableActionRow","setFieldValue","recipientFieldProps","_","recipientFieldHelpers","useField","recipientSelected","indexOf","setValue","recipientOnClear","onClear","onRemove","EditableActionTable","handleRemove","alignLeftClassName","textAlign","ActionArray","form","addAction","NotificationForm","showActions","FormText","FieldArray","helpers","InternalNotificationSaveModal","ModalVariant","NotificationSaveModal","saved","getDefaultActionIdDecoder","getNotificationActionsByIdAction","hasDefaultNotificationDecoder","getNotificationByIdActionDecoder","toLowerCase","EditNotificationPage","useContext","ClientContext","_search","idMapper","oldActions","oldUseDefault","actionsPromise","newUseDefault","defaultActionId","addDangerNotification","originalIds","newActions","newIds","nonUserIntegrationsPromises","Promise","all","catch","every","toDelete","toAdd","arr","val","promises","notificationId","actionId","actionRemoveActionFromNotification","actionAddActionToNotification","EDIT_DEFAULTS","EDIT_NOTIFICATION","toRowsGroupByNone","toRowGroupByApplication","groups","displayInlineClassName","tableTitleClassName","noPaddingTopClassName","emptyArray","NotificationListBundlePage","defaultNotificationBehavior","useQuery","notificationsFilter","initialAppOptions","debounce","useUrlStateApplication","useUrlStateAction","useFilters","useNotificationFilter","applications","setGroupBy","groupBySelected","notificationPage","bundle","defaultPerPage","sort","currentPage","setCurrentPage","useState","itemsPerPage","setItemsPerPage","useEffect","appFilter","appIds","arrayValue","filterOption","find","changePage","changeItemsPerPage","useNotificationPage","debouncedFilters","useNotifications","filterApplicationId","filterBundleId","listNotificationsActionCreator","notificationRows","setNotificationRows","prevNotificationInput","usePrevious","prevGroupBy","setNotificationRowById","partialNotificationRow","appIndex","notificationIndex","j","findNotificationPath","newApps","newNotifications","_prev","clearQueue","forEach","endpoints","prevRows","useNotificationRows","modalIsOpenState","dispatchModalIsOpen","closeFormModal","updateDefaultNotifications","updateNotifications","pageHeaderTitleProps","onEditDefaultAction","onEditNotification","PageHeader","PageHeaderTitle","InsightsEnvDetector","onEnvironment","RenderIfFalse","Main","Section","BundleStatus","pathRoutes","integrationFilter","useIntegrationFilter","pageData","filterBuilder","usePage","integrationsQuery","initFetch","exportIntegrationsQuery","integrationRows","setIntegrationRows","prevIntegrationsInput","reduxDispatch","switchStatus","setIntegrationRowByIndex","partialIntegration","prevIntegrations","newIntegrations","setIntegrationRowById","listIntegrationHistoryActionCreator","last5","reverse","Date","_integration","message","useIntegrationRows","deleteModalState","dispatchDeleteModal","onAddIntegrationClicked","exporter","ExporterType","integrationExporterFactory","exportedIntegrations","nextPage","export","now","canWrite","closeDeleteModal","deleted","pageCount","onFunction","chrome","on","getBundles","getApplications","navId","NOT_FOUND","FAILED_TO_LOAD","LOADING","isBundleStatus","AppSkeleton","InsightsRoute","Routes","pathRoute","exact","setRbac","waitForInsights","init","appId","getApp","identifyApp","auth","getUser","fetchRBAC","hasPermission","useApp","serviceName","pathname","hasReadPermissions","Provider","NotificationsPortal","NotAuthorized","SavedNotificationScopeReducer","getType","createStore","middleware","initStore","resetStore","restoreStore","SavedNotificationScopeKeys","SavedNotificationScopeActions","setIntegration","createAction","SET_INTEGRATION","start","START","finish","FINISH","unset","UNSET","Status","getBaseName","release","pathName","split","shift","getSubApp"],"mappings":"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","file":"js/953.6076ead8869b9d004506.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components/index.css\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_1___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_1___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".notifications{}.notifications :root{--ins-color--orange: #ec7a08}.notifications button:focus{outline:none}.notifications .pf-c-wizard__main-body{max-height:100%}.notifications .page__notifications#root{--pf-c-page__main-section--BackgroundColor: var(--pf-global--Color--light-100)}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/App.scss\"],\"names\":[],\"mappings\":\"AAAA,eAAc,CAAd,qBAC0J,4BAAoB,CAD9K,4BACoM,YAAY,CADhN,uCACyO,eAAe,CADxP,yCACmR,8EAA2C\",\"sourcesContent\":[\".notifications{\\n@import url(~@redhat-cloud-services/frontend-components/index.css);@import url(~@redhat-cloud-services/frontend-components-notifications/index.css);:root{--ins-color--orange: #ec7a08}button:focus{outline:none}.pf-c-wizard__main-body{max-height:100%}.page__notifications#root{--pf-c-page__main-section--BackgroundColor: var(--pf-global--Color--light-100)}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".notifications .notification-table .pf-c-table tbody>tr>:first-child::after{--pf-c-table__expandable-row--after--BorderLeftWidth: 0\\n}.notifications .pf-m-grid-md.pf-c-table tbody::after{--pf-c-table--tbody--after--BorderLeftWidth: 0\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Notifications/Table.scss\"],\"names\":[],\"mappings\":\"AAAA,4EAC6D;AAAqD,CADlH,qDAEuC;AAA4C\",\"sourcesContent\":[\".notifications{\\n.notification-table .pf-c-table tbody>tr>:first-child::after{--pf-c-table__expandable-row--after--BorderLeftWidth: 0\\n}.pf-m-grid-md.pf-c-table tbody::after{--pf-c-table--tbody--after--BorderLeftWidth: 0\\n}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../node_modules/sass-loader/dist/cjs.js!./App.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./Table.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./Table.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import { DeepReadonly } from 'ts-essentials';\n\nconst apiVersion = 'v1.0';\nconst apiBaseUrl = `/api/notifications/${apiVersion}`;\n\nexport const withBaseUrl = (path: string) => `${apiBaseUrl}${path}`;\n\nconst Config = {\n    integrations: {\n        subAppId: 'integrations',\n        title: 'Integrations | Settings'\n    },\n    notifications: {\n        subAppId: 'notifications',\n        title: 'Notifications | Settings'\n    },\n    pages: {\n    }\n};\n\nconst ReadonlyConfig: DeepReadonly<typeof Config> = Config;\nexport default ReadonlyConfig;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    notifications: {\n        id: 'notifications',\n        description: 'Application name',\n        defaultMessage: 'Notifications'\n    },\n    integrations: {\n        id: 'integrations',\n        description: 'Application name',\n        defaultMessage: 'Integrations'\n    },\n    integrationsEmptyStateTitle: {\n        id: 'integrationsEmptyStateTitle',\n        description: 'Integrations Empty State title',\n        defaultMessage: 'No integrations'\n    },\n    integrationsTableEmptyStateBody: {\n        id: 'integrationsTableEmptyStateBody',\n        description: 'Integrations Empty State body',\n        defaultMessage: 'Connect to webhooks and external applications.'\n    }\n});\n","import * as React from 'react';\nimport { Redirect } from 'react-router';\n\nimport { linkTo } from '../Routes';\n\nexport const defaultBundleName = 'rhel';\n\nexport const RedirectToDefaultBundle = () => <Redirect from={ linkTo.notifications('') } to={ linkTo.notifications(defaultBundleName) } />;\n","import { Schemas } from '../generated/OpenapiIntegrations';\n\nexport enum IntegrationType {\n    WEBHOOK = 'webhook',\n    EMAIL_SUBSCRIPTION = 'email_subscription'\n}\n\n// Integrations that the user can create in the Integrations page\nexport enum UserIntegrationType {\n    WEBHOOK = 'webhook'\n}\n\nexport interface IntegrationBase {\n    id: string;\n    name: string;\n    type: IntegrationType;\n    isEnabled: boolean;\n}\n\nexport interface IntegrationHttp extends IntegrationBase {\n    type: IntegrationType.WEBHOOK;\n    url: string;\n    sslVerificationEnabled: boolean;\n    secretToken?: string;\n    method: Schemas.HttpType;\n}\n\nexport interface IntegrationEmailSubscription extends IntegrationBase {\n    type: IntegrationType.EMAIL_SUBSCRIPTION\n}\n\nexport type Integration = IntegrationHttp | IntegrationEmailSubscription;\n\ntype ToUserIntegration<T extends IntegrationBase, TYPE extends UserIntegrationType[keyof UserIntegrationType]> = Omit<T, 'type'> & {\n    type: TYPE\n};\n\nexport type UserIntegration = ToUserIntegration<IntegrationHttp, UserIntegrationType.WEBHOOK>;\n\ntype NewIntegrationKeys = 'id';\n\nexport type NewIntegrationTemplate<T extends IntegrationBase | UserIntegration> = Omit<T, NewIntegrationKeys> & Partial<Pick<T, NewIntegrationKeys>>;\n\nexport type NewIntegrationBase = NewIntegrationTemplate<IntegrationBase>;\nexport type NewIntegration = NewIntegrationTemplate<Integration>;\nexport type NewUserIntegration = NewIntegrationTemplate<UserIntegration>;\n\nexport type ServerIntegrationRequest = Schemas.Endpoint;\nexport type ServerIntegrationResponse = Schemas.Endpoint;\n\nexport interface IntegrationConnectionAttempt {\n    date: Date;\n    isSuccess: boolean;\n}\n","import { intlHelper } from '@redhat-cloud-services/frontend-components-translations';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport { DeepReadonly } from 'ts-essentials';\n\nimport { IntegrationType } from '../types/Integration';\nimport messages from './DefinedMessages';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\nconst intlSettings = { locale };\n\nconst MutableMessages = {\n    appName: intlHelper(intl.formatMessage(messages.notifications), intlSettings),\n    appNameIntegrations: intlHelper(intl.formatMessage(messages.integrations), intlSettings),\n    pages: {\n        integrations: {\n            list: {\n                title: 'Integrations'\n            },\n            add: {\n                title: 'Add integration'\n            },\n            edit: {\n                title: 'Edit integration'\n            }\n        },\n        notifications: {\n            list: {\n                title: 'Notifications',\n                viewHistory: 'View notification history'\n            }\n        },\n        error: {\n            title: 'Notifications',\n            emptyState: {\n                title: 'Unhandled error',\n                content: 'There was a problem trying to process your request.',\n                showDetails: 'Show details',\n                actions: {\n                    goToIndex: 'Go back'\n                }\n            }\n        }\n    },\n    components: {\n        integrations: {\n            toolbar: {\n                actions: {\n                    addIntegration: 'Add integration',\n                    editIntegration: 'Edit integration'\n                }\n            },\n            table: {\n                title: 'Integrations',\n                columns: {\n                    name: 'Name',\n                    type: 'Type',\n                    lastConnectionAttempt: 'Last connection attempt',\n                    enabled: 'Enabled'\n                }\n            },\n            enableError: {\n                title: 'Unable to enable the Integration',\n                description: 'There was a problem trying to enable the integration: \"{0}\".\\nPlease try again.'\n            },\n            disableError: {\n                title: 'Unable to disable the Integration',\n                description: 'There was a problem trying to disable the integration: \"{0}\".\\nPlease try again.'\n            },\n            integrationType: {\n                [IntegrationType.WEBHOOK]: 'Webhook'\n            }\n        },\n        notifications: {\n            types: {\n                EMAIL_SUBSCRIPTION: 'Send an email',\n                DRAWER: 'Send to notification drawer',\n                INTEGRATION: 'Integration'\n            },\n            toolbar: {\n                actions: {\n\n                }\n            },\n            table: {\n                title: 'Notifications',\n                columns: {\n                    event: 'Event type',\n                    action: 'Action',\n                    recipient: 'Recipient'\n                }\n            }\n        }\n    },\n    common: {\n        choose: 'Please choose'\n    }\n};\n\nexport const Messages: DeepReadonly<typeof MutableMessages> = MutableMessages;\n","import { ErrorBoundaryPage } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { Messages } from '../../properties/Messages';\n\ntype ErrorPageProps = RouteComponentProps<any>;\n\nexport const ErrorPageInternal: React.FunctionComponent<ErrorPageProps> = (props) => {\n    const goToListPage = React.useCallback(() => {\n        props.history.goBack();\n    }, [ props.history ]);\n\n    return (\n        <ErrorBoundaryPage\n            action={ goToListPage }\n            actionLabel={ Messages.pages.error.emptyState.actions.goToIndex }\n            pageHeader={ Messages.pages.error.title }\n            title={ Messages.pages.error.emptyState.title }\n            description={ Messages.pages.error.emptyState.content }\n        >\n            { props.children }\n        </ErrorBoundaryPage>\n    );\n};\n\nexport const ErrorPage = withRouter(ErrorPageInternal);\n","import * as React from 'react';\nimport { useContext } from 'react';\n\nexport interface AppContext {\n    rbac: {\n        canWriteIntegrationsEndpoints: boolean;\n        canReadIntegrationsEndpoints: boolean;\n        canWriteNotifications: boolean;\n        canReadNotifications: boolean;\n    }\n}\n\nexport const AppContext = React.createContext<AppContext>({\n    rbac: {\n        canReadIntegrationsEndpoints: false,\n        canReadNotifications: false,\n        canWriteIntegrationsEndpoints: false,\n        canWriteNotifications: false\n    }\n});\n\nexport const useAppContext = () => useContext(AppContext);\n","import { getOuiaPropsFactory } from '@redhat-cloud-services/insights-common-typescript';\n\nexport const getOuiaProps = getOuiaPropsFactory('Notifications');\n","import { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { global_danger_color_100, global_spacer_xs, global_success_color_100 } from '@patternfly/react-tokens';\nimport { toUtc } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nexport interface ConnectionAttemptProps {\n    type: ConnectionAttemptType;\n    date: Date;\n}\n\nexport enum ConnectionAttemptType {\n    SUCCESS,\n    FAILED\n}\n\nconst dateClassName = style({\n    marginLeft: global_spacer_xs.var\n});\n\nconst dateFormatString = 'MMM d, HH:mm:ss';\n\nconst getIcon = (type: ConnectionAttemptType) => {\n    switch (type) {\n        case ConnectionAttemptType.SUCCESS:\n            return <CheckCircleIcon color={ global_success_color_100.value } />;\n        case ConnectionAttemptType.FAILED:\n            return <ExclamationCircleIcon color={ global_danger_color_100.value } />;\n        default:\n            assertNever(type);\n    }\n};\n\nexport const ConnectionAttempt: React.FunctionComponent<ConnectionAttemptProps> = (props) => {\n    const formattedDate = format(toUtc(props.date), dateFormatString);\n    return (\n        <>\n            { getIcon(props.type) } <span className={ dateClassName }> { formattedDate } UTC </span>\n        </>\n    );\n};\n","import { Alert, AlertVariant } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ConnectionAttempt, ConnectionAttemptType } from './ConnectionAttempt';\n\ninterface ConnectionAlertProps extends OuiaComponentProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n    alertVariant: AlertVariant;\n    description: string;\n    title: string;\n}\n\nconst connectionAttemptClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst marginTopClassName = style({\n    marginTop: global_spacer_sm.var\n});\n\nexport const ConnectionAlert: React.FunctionComponent<ConnectionAlertProps> = (props) => {\n    return (\n        <div { ...getOuiaProps('ConnectionAlert', props) }>\n            <Alert title={ props.title } variant={ props.alertVariant } isInline>\n                <p className={ marginTopClassName }>\n                    { props.description }\n                </p>\n                <p className={ marginTopClassName }>\n                    Last attempts: { props.attempts.map(\n                        (attempt, index) =>\n                            <span key={ index } className={ connectionAttemptClassName }>\n                                <ConnectionAttempt\n                                    type={ attempt.isSuccess ? ConnectionAttemptType.SUCCESS : ConnectionAttemptType.FAILED }\n                                    date={ attempt.date }\n                                />\n                            </span>\n                    ) }\n                </p>\n            </Alert>\n        </div>\n    );\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { ConnectionAlert } from './ConnectionAlert';\n\ninterface ConnectionDegradedProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n}\n\nexport const ConnectionDegraded: React.FunctionComponent<ConnectionDegradedProps> = (props) => {\n    const description = React.useMemo(() => {\n        const failures = props.attempts.filter(a => !a.isSuccess).length;\n        const attempts = props.attempts.length;\n\n        if (failures === 1) {\n            return `This connection has had 1 failure in the last ${ attempts } connection attempts.`;\n        }\n\n        return `This connection has had ${ failures } failures in the last ${ attempts } connection attempts.`;\n    }, [ props.attempts ]);\n\n    return <ConnectionAlert\n        attempts={ props.attempts }\n        alertVariant={ AlertVariant.warning }\n        description={ description }\n        title=\"Connection is degraded\"\n    />;\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { ConnectionAlert } from './ConnectionAlert';\n\ninterface ConnectionFailedProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n}\n\nexport const ConnectionFailed: React.FunctionComponent<ConnectionFailedProps> = (props) => {\n    return <ConnectionAlert\n        attempts={ props.attempts }\n        alertVariant={ AlertVariant.danger }\n        description=\"This connection has failed the most recent connection attempts.\"\n        title=\"Failed connection\"\n    />;\n};\n","import { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { UserIntegration } from '../../../types/Integration';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\n\nconst titleClass = style({\n    fontWeight: 400\n});\n\ninterface ExpandedContentProps extends OuiaComponentProps {\n    integration: UserIntegration;\n}\n\nexport const ExpandedContent: React.FunctionComponent<ExpandedContentProps> = (props) => {\n    return (\n        <TextContent { ...getOuiaProps('Integrations/Table/ExpandedContent', props) }>\n            <TextList component={ TextListVariants.dl }>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    Endpoint URL\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.url }\n                </TextListItem>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    SSL verification\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.sslVerificationEnabled ? 'Enabled' : 'Disabled' }\n                </TextListItem>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    Authentication type\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.secretToken !== undefined ? 'Secret token' : 'None' }\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n","import {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Spinner,\n    Switch,\n    Text,\n    Title\n} from '@patternfly/react-core';\nimport { CheckCircleIcon, CubesIcon, ExclamationCircleIcon, OffIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport {\n    expandable,\n    IActions,\n    IActionsResolver,\n    ICell,\n    IRow,\n    IRowData,\n    RowWrapperProps,\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table';\nimport {\n    global_danger_color_100,\n    global_spacer_md,\n    global_spacer_sm,\n    global_success_color_100,\n    global_warning_color_200\n} from '@patternfly/react-tokens';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { important } from 'csx';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { style } from 'typestyle';\n\nimport messages from '../../properties/DefinedMessages';\nimport { Messages } from '../../properties/Messages';\nimport { IntegrationConnectionAttempt, UserIntegration } from '../../types/Integration';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ConnectionDegraded } from './Table/ConnectionDegraded';\nimport { ConnectionFailed } from './Table/ConnectionFailed';\nimport { ExpandedContent } from './Table/ExpandedContent';\n\nexport type OnEnable = (integration: IntegrationRow, index: number, isChecked: boolean) => void;\n\ninterface IntegrationsTableProps extends OuiaComponentProps {\n    isLoading: boolean;\n    loadingCount?: number;\n    integrations: Array<IntegrationRow>;\n    onCollapse?: (integration: IntegrationRow, index: number, isOpen: boolean) => void;\n    onEnable?: OnEnable;\n    actionResolver: (row: IntegrationRow, index: number) => IActions;\n}\n\nexport type IntegrationRow = UserIntegration & {\n    isOpen: boolean;\n    isSelected: boolean;\n    isEnabledLoading: boolean;\n    isConnectionAttemptLoading: boolean;\n    lastConnectionAttempts?: Array<IntegrationConnectionAttempt>;\n}\n\nenum LastConnectionAttemptStatus {\n    UNKNOWN,\n    SUCCESS,\n    WARNING,\n    ERROR\n}\n\nconst connectionAlertClassName = style({\n    paddingBottom: global_spacer_md.var\n});\n\nconst expandedContentClassName = style({\n    paddingLeft: 0,\n    paddingBottom: 0\n});\n\nconst isEnabledLoadingClassName = style({\n    marginLeft: 10\n});\n\nconst smallMarginLeft = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst degradedClassName = style({\n    fontWeight: 600,\n    color: global_warning_color_200.var,\n    fontSize: 'var(--pf-global--FontSize--sm)'\n});\n\nconst getLastConnectionAttemptStatus = (attempts: Array<IntegrationConnectionAttempt>): LastConnectionAttemptStatus => {\n    if (attempts.length === 0) {\n        return LastConnectionAttemptStatus.UNKNOWN;\n    }\n\n    const failures = attempts.filter(a => !a.isSuccess).length;\n\n    if (failures === attempts.length) {\n        return LastConnectionAttemptStatus.ERROR;\n    } else if (failures > 0) {\n        return LastConnectionAttemptStatus.WARNING;\n    }\n\n    return LastConnectionAttemptStatus.SUCCESS;\n};\n\nconst getConnectionAlert = (attempts: Array<IntegrationConnectionAttempt>) => {\n    const status = getLastConnectionAttemptStatus(attempts);\n    switch (status) {\n        case LastConnectionAttemptStatus.UNKNOWN:\n        case LastConnectionAttemptStatus.SUCCESS:\n            return null;\n        case LastConnectionAttemptStatus.ERROR:\n            return (\n                <div className={ connectionAlertClassName }>\n                    <ConnectionFailed attempts={ attempts } />\n                </div>\n            );\n        case LastConnectionAttemptStatus.WARNING:\n            return (\n                <div className={ connectionAlertClassName }>\n                    <ConnectionDegraded attempts={ attempts } />\n                </div>\n            );\n        default:\n            assertNever(status);\n    }\n};\n\nconst LastConnectionAttemptSuccess: React.FunctionComponent = () => (\n    <>\n        <CheckCircleIcon color={ global_success_color_100.value } data-testid=\"success-icon\" />\n        <span className={ smallMarginLeft }>Success</span>\n    </>\n);\n\nconst LastConnectionAttemptError: React.FunctionComponent = () => (\n    <>\n        <ExclamationCircleIcon color={ global_danger_color_100.value } data-testid=\"fail-icon\" />\n        <span className={ smallMarginLeft }>Failure</span>\n    </>\n);\n\nconst getConnectionAttemptCell = (attempts: Array<IntegrationConnectionAttempt> | undefined, isLoading: boolean) => {\n    if (attempts === undefined) {\n        return 'Error fetching connection attempts';\n    }\n\n    if (isLoading) {\n        return <Spinner size=\"md\" />;\n    }\n\n    const status = getLastConnectionAttemptStatus(attempts);\n    switch (status) {\n        case LastConnectionAttemptStatus.UNKNOWN:\n            return <>\n                <OffIcon data-testid=\"off-icon\" />\n                <span className={ smallMarginLeft }>Unknown</span>\n            </>;\n        case LastConnectionAttemptStatus.SUCCESS:\n            return <><LastConnectionAttemptSuccess /></>;\n        case LastConnectionAttemptStatus.ERROR:\n            return <><LastConnectionAttemptError /></>;\n        case LastConnectionAttemptStatus.WARNING:\n            return <>\n                { attempts[0].isSuccess ? <LastConnectionAttemptSuccess /> : <LastConnectionAttemptError />}\n                <br />\n                <Text className={ degradedClassName }>Degraded connection</Text>\n            </>;\n        default:\n            assertNever(status);\n    }\n};\n\nconst toTableRows = (integrations: Array<IntegrationRow>, onEnable?: OnEnable): Array<IRow> => {\n    return integrations.reduce((rows, integration, idx) => {\n        rows.push({\n            id: integration.id,\n            key: integration.id,\n            isOpen: integration.isOpen,\n            selected: integration.isSelected,\n            cells: [\n                {\n                    title: integration.name\n                },\n                {\n                    title: Messages.components.integrations.integrationType[integration.type]\n                },\n                {\n                    title: getConnectionAttemptCell(integration.lastConnectionAttempts, integration.isConnectionAttemptLoading)\n                },\n                {\n                    title: <>\n                        { integration.isEnabledLoading ? (\n                            <Spinner className={ isEnabledLoadingClassName } size=\"md\" />\n                        ) : (\n                            <Switch\n                                id={ `table-row-switch-id-${integration.id}` }\n                                aria-label=\"Enabled\"\n                                isChecked={ integration.isEnabled }\n                                onChange={ isChecked => onEnable && onEnable(integration, idx, isChecked) }\n                                isDisabled={ !onEnable }\n                                ouiaId={ `enabled-${integration.id}` }\n                            />\n                        )}\n                    </>\n                }\n            ]\n        });\n        rows.push({\n            fullWidth: true,\n            parent: idx * 2,\n            cells: [\n                {\n                    title: <>\n                        {integration.lastConnectionAttempts !== undefined && getConnectionAlert(integration.lastConnectionAttempts)}\n                        <div className={ expandedContentClassName }>\n                            <ExpandedContent integration={ integration } ouiaId={ integration.id } />\n                        </div>\n                    </>,\n                    props: {\n                        colSpan: 6\n                    }\n                }\n            ]\n        });\n        return rows;\n    }, [] as Array<IRow>);\n};\n\nconst columns: Array<ICell> = [\n    {\n        title: Messages.components.integrations.table.columns.name,\n        cellFormatters: [ expandable ],\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.type,\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.lastConnectionAttempt,\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.enabled,\n        transforms: []\n    }\n];\n\nconst buildClassNames = () => {\n    const noneStyle = important('none');\n    const borderStyle = important('var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)');\n\n    const noBorderBottom = {\n        borderBottom: noneStyle\n    };\n\n    const rowExpandedContentClassName = style(noBorderBottom);\n    const rowWrapperClassName = style(noBorderBottom, {\n        borderTop: borderStyle\n    });\n    const tableClassName = style({\n        borderBottom: borderStyle\n    });\n\n    return {\n        rowExpandedContentClassName,\n        rowWrapperClassName,\n        tableClassName\n    };\n};\n\nconst {\n    rowExpandedContentClassName,\n    rowWrapperClassName,\n    tableClassName\n} = buildClassNames();\n\nconst RowWrapper: React.FunctionComponent<RowWrapperProps> = (props) => {\n    const { trRef, className, rowProps, row, ...rest } = props;\n    if (!row) {\n        return <></>;\n    }\n\n    return (\n        <tr\n            { ...rest }\n            ref={ trRef as any }\n            className={ css(\n                className,\n                row.isExpanded === true ? rowExpandedContentClassName : rowWrapperClassName,\n                row.isExpanded !== undefined && styles.tableExpandableRow,\n                row.isExpanded && styles.modifiers.expanded\n            ) }\n            hidden={ row?.isExpanded !== undefined && !row.isExpanded }\n        >\n            { props.children}\n        </tr>\n    );\n};\n\nexport const IntegrationsTable: React.FunctionComponent<IntegrationsTableProps> = (props) => {\n    const intl = useIntl();\n    const onCollapseHandler = React.useCallback((_event, _index: number, isOpen: boolean, data: IRowData) => {\n        const integrations = props.integrations;\n        const onCollapse = props.onCollapse;\n        const index = integrations.findIndex(integration => integration.id === data.id);\n        if (onCollapse && index !== -1) {\n            const integration = integrations[index];\n            onCollapse(integration, index, isOpen);\n        }\n    }, [ props.integrations, props.onCollapse ]);\n\n    const rows = React.useMemo(() => {\n        return toTableRows(props.integrations, props.onEnable);\n    }, [ props.integrations, props.onEnable ]);\n\n    const actionsResolverCallback: IActionsResolver = React.useCallback(rowData => {\n        const actionResolver = props.actionResolver;\n        if (rowData.parent === undefined && rowData && props.integrations) {\n            const integrationIndex = props.integrations.findIndex(i => i.id === rowData.id);\n            const integrationRow = props.integrations[integrationIndex];\n            if (integrationRow) {\n                return actionResolver(integrationRow, integrationIndex);\n            }\n        }\n\n        return [];\n    }, [ props.actionResolver, props.integrations ]);\n\n    if (props.isLoading) {\n        return (\n            <div { ...getOuiaProps('Integrations/Table',  { ...props, ouiaSafe: false }) }>\n                <SkeletonTable\n                    rowSize={ (props.loadingCount && props.loadingCount > 0) ? props.loadingCount : 10 }\n                    columns={ columns }\n                    paddingColumnSize={ 0 }\n                    sortBy={ undefined }\n                />\n            </div>\n        );\n    }\n\n    return (\n        <div { ...getOuiaProps('Integrations/Table', props) }>\n            {rows.length === 0 ?  (<EmptyState variant={ EmptyStateVariant.full }>\n                <EmptyStateIcon icon={ CubesIcon } />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {intl.formatMessage(messages.integrationsEmptyStateTitle)}\n                </Title>\n                <EmptyStateBody>\n                    {intl.formatMessage(messages.integrationsTableEmptyStateBody)}\n                </EmptyStateBody>\n            </EmptyState>) :\n                (<Table\n                    className={ tableClassName }\n                    aria-label={ Messages.components.integrations.table.title }\n                    rows={ rows }\n                    cells={ columns }\n                    onCollapse={ onCollapseHandler }\n                    rowWrapper={ RowWrapper as (props: RowWrapperProps) => React.ReactElement }\n                    actionResolver={ actionsResolverCallback }\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>)}\n        </div>\n    );\n};\n","import { ExporterType, exporterTypeFromString } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\ntype OnExport = (type: ExporterType) => void;\n\nexport const useTableExportConfig = (onExport: OnExport) => {\n    return React.useMemo(() => {\n        if (onExport) {\n            return {\n                extraItems: [],\n                onSelect: (_event, type: string) => {\n                    onExport(exporterTypeFromString(type));\n                }\n            };\n        }\n\n        return undefined;\n    }, [ onExport ]);\n};\n","import { Environment, getInsightsEnvironment, InsightsType } from '@redhat-cloud-services/insights-common-typescript';\n\nexport const stagingBetaAndProdBetaEnvironment: Array<Environment> = [\n    'stage-beta',\n    'prod-beta'\n];\n\nexport const isStagingBetaOrProdBeta = (insights: InsightsType) => {\n    return stagingBetaAndProdBetaEnvironment.includes(getInsightsEnvironment(insights));\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum IntegrationFilterColumn {\n    NAME = 'name',\n    ENABLED = 'enabled'\n}\n\nexport type IntegrationFilters = Filters<typeof IntegrationFilterColumn>;\nexport type SetIntegrationFilters = SetFilters<typeof IntegrationFilterColumn>;\nexport type ClearIntegrationFilters = ClearFilters<typeof IntegrationFilterColumn>;\n","import { PaginationProps, PaginationVariant } from '@patternfly/react-core';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ColumnsMetada,\n    ExporterType,\n    getInsights,\n    OuiaComponentProps,\n    useInsightsEnvironmentFlag,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { style } from 'typestyle';\n\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { Messages } from '../../properties/Messages';\nimport { stagingBetaAndProdBetaEnvironment } from '../../types/Environments';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { DisabledIntegrationIcon, EnabledIntegrationIcon } from '../Icons';\nimport { ClearIntegrationFilters, IntegrationFilterColumn, IntegrationFilters, SetIntegrationFilters } from './Filters';\n\ninterface IntegrationsToolbarProps extends OuiaComponentProps {\n    onAddIntegration?: () => void;\n    onExport: (type: ExporterType) => void;\n    filters: IntegrationFilters;\n    setFilters: SetIntegrationFilters;\n    clearFilters: ClearIntegrationFilters;\n    pageCount: number;\n    count: number;\n    page: number;\n    perPage: number;\n    pageChanged: (page: number) => void;\n    perPageChanged: (page: number) => void;\n}\n\nconst enabledTextClassName = style({\n    marginLeft: 4\n});\n\nconst filterMetadata: ColumnsMetada<typeof IntegrationFilterColumn> = {\n    [IntegrationFilterColumn.NAME]: {\n        label: 'Name',\n        placeholder: 'Filter by name'\n    },\n    [IntegrationFilterColumn.ENABLED]: {\n        label: 'Enabled',\n        placeholder: 'Filter by enabled',\n        options: {\n            exclusive: false,\n            items: [\n                {\n                    value: 'Enabled',\n                    label: <><EnabledIntegrationIcon /> <span className={ enabledTextClassName }>Enabled</span></>\n                },\n                {\n                    value: 'Disabled',\n                    label: <><DisabledIntegrationIcon /> <span className={ enabledTextClassName }>Disabled</span></>\n                }\n            ]\n        }\n    }\n};\n\nexport const IntegrationsToolbar: React.FunctionComponent<IntegrationsToolbarProps> = (props) => {\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        IntegrationFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilters,\n        filterMetadata\n    );\n\n    const actionsConfig = React.useMemo(() => {\n        const actions = [\n            {\n                key: 'add-integration',\n                label: Messages.components.integrations.toolbar.actions.addIntegration,\n                onClick: props.onAddIntegration,\n                props: {\n                    isDisabled: !props.onAddIntegration\n                }\n            }\n        ];\n\n        return {\n            actions,\n            kebabToggleProps: {\n                isDisabled: false\n            }\n        };\n    }, [ props.onAddIntegration ]);\n\n    const exportConfig = useTableExportConfig(props.onExport);\n\n    const filterConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.filterConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const activeFiltersConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.activeFiltersConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const pageChanged = React.useCallback((_event: unknown, page: number) => {\n        const inner = props.pageChanged;\n        inner(page);\n    }, [ props.pageChanged ]);\n\n    const perPageChanged = React.useCallback((_event: unknown, perPage: number) => {\n        const inner = props.perPageChanged;\n        inner(perPage);\n    }, [ props.perPageChanged ]);\n\n    const topPaginationProps = React.useMemo<PaginationProps>(() => ({\n        itemCount: props.count,\n        page: props.page,\n        perPage: props.perPage,\n        isCompact: true,\n        variant: PaginationVariant.top,\n        onSetPage: pageChanged,\n        onFirstClick: pageChanged,\n        onPreviousClick: pageChanged,\n        onNextClick: pageChanged,\n        onLastClick: pageChanged,\n        onPageInput: pageChanged,\n        onPerPageSelect: perPageChanged\n    }), [ props.count, props.page, props.perPage, pageChanged, perPageChanged ]);\n\n    const bottomPaginationProps = React.useMemo<PaginationProps>(() => ({\n        ...topPaginationProps,\n        isCompact: false,\n        variant: PaginationVariant.bottom\n    }), [ topPaginationProps ]);\n\n    return (\n        <div { ...getOuiaProps('Integrations/DualToolbar', props) }>\n            <PrimaryToolbar\n                actionsConfig={ actionsConfig }\n                exportConfig={ exportConfig }\n                filterConfig={ filterConfig }\n                activeFiltersConfig={ activeFiltersConfig }\n                pagination={ topPaginationProps }\n                id=\"integrations-top-toolbar\"\n            />\n            { props.children }\n            <PrimaryToolbar id=\"integrations-bottom-toolbar\" pagination={ bottomPaginationProps } />\n        </div>\n    );\n};\n","import { CheckCircleIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport const EnabledIntegrationIcon: React.FunctionComponent = () => {\n    return <CheckCircleIcon color=\"green\" />;\n};\n","import { OffIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport const DisabledIntegrationIcon: React.FunctionComponent = () => {\n    return <OffIcon />;\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const Attributes = zodSchemaAttributes();\n  export type Attributes = unknown;\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const EmailSubscriptionAttributes = zodSchemaEmailSubscriptionAttributes();\n  export type EmailSubscriptionAttributes = unknown;\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookAttributes | EmailSubscriptionAttributes)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType = 'webhook' | 'email_subscription' | 'default';\n\n  export const EntityTag = zodSchemaEntityTag();\n  export type EntityTag = {\n    value?: string | undefined | null;\n    weak?: boolean | undefined | null;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const Family = zodSchemaFamily();\n  export type Family =\n    | 'CLIENT_ERROR'\n    | 'INFORMATIONAL'\n    | 'OTHER'\n    | 'REDIRECTION'\n    | 'SERVER_ERROR'\n    | 'SUCCESSFUL';\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Link = zodSchemaLink();\n  export type Link = {\n    params?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    rel?: string | undefined | null;\n    rels?: Array<string> | undefined | null;\n    title?: string | undefined | null;\n    type?: string | undefined | null;\n    uri?: string | undefined | null;\n    uriBuilder?: UriBuilder | undefined | null;\n  };\n\n  export const Locale = zodSchemaLocale();\n  export type Locale = {\n    country?: string | undefined | null;\n    displayCountry?: string | undefined | null;\n    displayLanguage?: string | undefined | null;\n    displayName?: string | undefined | null;\n    displayScript?: string | undefined | null;\n    displayVariant?: string | undefined | null;\n    extensionKeys?: Array<string> | undefined | null;\n    iSO3Country?: string | undefined | null;\n    iSO3Language?: string | undefined | null;\n    language?: string | undefined | null;\n    script?: string | undefined | null;\n    unicodeLocaleAttributes?: Array<string> | undefined | null;\n    unicodeLocaleKeys?: Array<string> | undefined | null;\n    variant?: string | undefined | null;\n  };\n\n  export const MediaType = zodSchemaMediaType();\n  export type MediaType = {\n    parameters?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    subtype?: string | undefined | null;\n    type?: string | undefined | null;\n    wildcardSubtype?: boolean | undefined | null;\n    wildcardType?: boolean | undefined | null;\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();\n  export type MultivaluedMapStringObject = {\n    [x: string]: Array<unknown>;\n  };\n\n  export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();\n  export type MultivaluedMapStringString = {\n    [x: string]: Array<string>;\n  };\n\n  export const NewCookie = zodSchemaNewCookie();\n  export type NewCookie = {\n    comment?: string | undefined | null;\n    domain?: string | undefined | null;\n    expiry?: string | undefined | null;\n    httpOnly?: boolean | undefined | null;\n    maxAge?: number | undefined | null;\n    name?: string | undefined | null;\n    path?: string | undefined | null;\n    secure?: boolean | undefined | null;\n    value?: string | undefined | null;\n    version?: number | undefined | null;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    eventId?: string | undefined | null;\n    id?: number | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const Response = zodSchemaResponse();\n  export type Response = {\n    allowedMethods?: Array<string> | undefined | null;\n    cookies?:\n      | {\n          [x: string]: NewCookie;\n        }\n      | undefined\n      | null;\n    date?: string | undefined | null;\n    entity?: unknown | undefined | null;\n    entityTag?: EntityTag | undefined | null;\n    headers?: MultivaluedMapStringObject | undefined | null;\n    language?: Locale | undefined | null;\n    lastModified?: string | undefined | null;\n    length?: number | undefined | null;\n    links?: Array<Link> | undefined | null;\n    location?: string | undefined | null;\n    mediaType?: MediaType | undefined | null;\n    metadata?: MultivaluedMapStringObject | undefined | null;\n    status?: number | undefined | null;\n    statusInfo?: StatusType | undefined | null;\n    stringHeaders?: MultivaluedMapStringString | undefined | null;\n  };\n\n  export const StatusType = zodSchemaStatusType();\n  export type StatusType = {\n    family?: Family | undefined | null;\n    reasonPhrase?: string | undefined | null;\n    statusCode?: number | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UriBuilder = zodSchemaUriBuilder();\n  export type UriBuilder = unknown;\n\n  export const WebhookAttributes = zodSchemaWebhookAttributes();\n  export type WebhookAttributes = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification?: boolean | undefined | null;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAttributes() {\n      return z.unknown();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionAttributes() {\n      return z.unknown();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookAttributes(),\n              zodSchemaEmailSubscriptionAttributes()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default' ]);\n  }\n\n  function zodSchemaEntityTag() {\n      return z\n      .object({\n          value: z.string().optional().nullable(),\n          weak: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFamily() {\n      return z.enum([\n          'CLIENT_ERROR',\n          'INFORMATIONAL',\n          'OTHER',\n          'REDIRECTION',\n          'SERVER_ERROR',\n          'SUCCESSFUL'\n      ]);\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaLink() {\n      return z\n      .object({\n          params: z.record(z.string()).optional().nullable(),\n          rel: z.string().optional().nullable(),\n          rels: z.array(z.string()).optional().nullable(),\n          title: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          uri: z.string().optional().nullable(),\n          uriBuilder: zodSchemaUriBuilder().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLocale() {\n      return z\n      .object({\n          country: z.string().optional().nullable(),\n          displayCountry: z.string().optional().nullable(),\n          displayLanguage: z.string().optional().nullable(),\n          displayName: z.string().optional().nullable(),\n          displayScript: z.string().optional().nullable(),\n          displayVariant: z.string().optional().nullable(),\n          extensionKeys: z.array(z.string()).optional().nullable(),\n          iSO3Country: z.string().optional().nullable(),\n          iSO3Language: z.string().optional().nullable(),\n          language: z.string().optional().nullable(),\n          script: z.string().optional().nullable(),\n          unicodeLocaleAttributes: z.array(z.string()).optional().nullable(),\n          unicodeLocaleKeys: z.array(z.string()).optional().nullable(),\n          variant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMediaType() {\n      return z\n      .object({\n          parameters: z.record(z.string()).optional().nullable(),\n          subtype: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          wildcardSubtype: z.boolean().optional().nullable(),\n          wildcardType: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMultivaluedMapStringObject() {\n      return z.record(z.array(z.unknown()));\n  }\n\n  function zodSchemaMultivaluedMapStringString() {\n      return z.record(z.array(z.string()));\n  }\n\n  function zodSchemaNewCookie() {\n      return z\n      .object({\n          comment: z.string().optional().nullable(),\n          domain: z.string().optional().nullable(),\n          expiry: z.string().optional().nullable(),\n          httpOnly: z.boolean().optional().nullable(),\n          maxAge: z.number().int().optional().nullable(),\n          name: z.string().optional().nullable(),\n          path: z.string().optional().nullable(),\n          secure: z.boolean().optional().nullable(),\n          value: z.string().optional().nullable(),\n          version: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          eventId: z.string().optional().nullable(),\n          id: z.number().int().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaResponse() {\n      return z\n      .object({\n          allowedMethods: z.array(z.string()).optional().nullable(),\n          cookies: z.record(zodSchemaNewCookie()).optional().nullable(),\n          date: z.string().optional().nullable(),\n          entity: z.unknown().optional().nullable(),\n          entityTag: zodSchemaEntityTag().optional().nullable(),\n          headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          language: zodSchemaLocale().optional().nullable(),\n          lastModified: z.string().optional().nullable(),\n          length: z.number().int().optional().nullable(),\n          links: z.array(zodSchemaLink()).optional().nullable(),\n          location: z.string().optional().nullable(),\n          mediaType: zodSchemaMediaType().optional().nullable(),\n          metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          status: z.number().int().optional().nullable(),\n          statusInfo: zodSchemaStatusType().optional().nullable(),\n          stringHeaders: zodSchemaMultivaluedMapStringString()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatusType() {\n      return z\n      .object({\n          family: zodSchemaFamily().optional().nullable(),\n          reasonPhrase: z.string().optional().nullable(),\n          statusCode: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUriBuilder() {\n      return z.unknown();\n  }\n\n  function zodSchemaWebhookAttributes() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean().optional().nullable(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n}\n\nexport namespace Operations {\n  // GET /endpoints\n  export namespace EndpointServiceGetEndpoints {\n    const Active = z.boolean();\n    type Active = boolean;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Type = z.string();\n    type Type = string;\n    export interface Params {\n      active?: Active;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n      type?: Type;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EndpointPage', 200, Schemas.EndpointPage>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints';\n        const query = {} as Record<string, any>;\n        if (params.active !== undefined) {\n            query.active = params.active;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        if (params.type !== undefined) {\n            query.type = params.type;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.EndpointPage, 'EndpointPage', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /endpoints\n  export namespace EndpointServiceCreateEndpoint {\n    export interface Params {\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.Endpoint, 'Endpoint', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/email/subscription/{bundleName}/{applicationName}/{type}\n  export namespace EndpointServiceSubscribeEmail {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      type: Schemas.EmailSubscriptionType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/email/subscription/{bundleName}/{applicationName}/{type}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString())\n        .replace('{type}', params.type.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/email/subscription/{bundleName}/{applicationName}/{type}\n  export namespace EndpointServiceUnsubscribeEmail {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      type: Schemas.EmailSubscriptionType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/email/subscription/{bundleName}/{applicationName}/{type}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString())\n        .replace('{type}', params.type.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}\n  export namespace EndpointServiceGetEndpoint {\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.Endpoint, 'Endpoint', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/{id}\n  export namespace EndpointServiceUpdateEndpoint {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/{id}\n  export namespace EndpointServiceDeleteEndpoint {\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/{id}/enable\n  export namespace EndpointServiceEnableEndpoint {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/{id}/enable\n  export namespace EndpointServiceDisableEndpoint {\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}/history\n  export namespace EndpointServiceGetEndpointHistory {\n    const Response200 = z.array(Schemas.NotificationHistory);\n    type Response200 = Array<Schemas.NotificationHistory>;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/history'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}/history/{history_id}/details\n  export namespace EndpointServiceGetDetailedEndpointHistory {\n    const HistoryId = z.number().int();\n    type HistoryId = number;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const PageSize = z.number().int();\n    type PageSize = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      historyId: HistoryId;\n      id: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      pageSize?: PageSize;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/history/{history_id}/details'\n        .replace('{history_id}', params.historyId.toString())\n        .replace('{id}', params.id.toString());\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.pageSize !== undefined) {\n            query.pageSize = params.pageSize;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n}\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    Integration,\n    IntegrationBase,\n    IntegrationHttp,\n    IntegrationType,\n    NewIntegration,\n    NewUserIntegration,\n    ServerIntegrationRequest,\n    ServerIntegrationResponse,\n    UserIntegration,\n    UserIntegrationType\n} from '../Integration';\n\nconst getIntegrationType = (type: Schemas.EndpointType | undefined): IntegrationType => {\n    switch (type) {\n        case Schemas.EndpointType.Enum.webhook:\n            return IntegrationType.WEBHOOK;\n        case Schemas.EndpointType.Enum.email_subscription:\n            return IntegrationType.EMAIL_SUBSCRIPTION;\n        case Schemas.EndpointType.Enum.default:\n        case undefined:\n            throw new Error(`Unexpected type: ${type}`);\n        default:\n            assertNever(type);\n    }\n};\n\nexport const getEndpointType = (type: IntegrationType | UserIntegrationType): Schemas.EndpointType => {\n    switch (type) {\n        case IntegrationType.WEBHOOK:\n        case UserIntegrationType.WEBHOOK:\n            return Schemas.EndpointType.Enum.webhook;\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return Schemas.EndpointType.Enum.email_subscription;\n        default:\n            assertNever(type);\n    }\n};\n\nexport const toIntegration = (serverIntegration: ServerIntegrationResponse): Integration => {\n\n    const integrationBase: IntegrationBase = {\n        id: serverIntegration.id || '',\n        name: serverIntegration.name || '',\n        isEnabled: !!serverIntegration.enabled,\n        type: getIntegrationType(serverIntegration.type)\n    };\n\n    switch (integrationBase.type) {\n        case IntegrationType.WEBHOOK:\n            const properties = serverIntegration.properties as Schemas.WebhookAttributes;\n            return {\n                ...integrationBase,\n                url: properties.url || '',\n                sslVerificationEnabled: !properties.disable_ssl_verification,\n                secretToken: properties.secret_token === null ? undefined : properties.secret_token,\n                method: properties.method ?? Schemas.HttpType.Enum.GET\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return {\n                ...integrationBase,\n                type: IntegrationType.EMAIL_SUBSCRIPTION\n            };\n        default:\n            assertNever(integrationBase.type);\n    }\n};\n\nexport const toUserIntegration = (serverIntegration: ServerIntegrationResponse): UserIntegration => {\n    const integration = toIntegration(serverIntegration);\n    if (!Object.values(UserIntegrationType).includes(integration.type as unknown as UserIntegrationType)) {\n        throw new Error(`Unknown UserIntegrationType ${integration.type}`);\n    }\n\n    return integration as unknown as UserIntegration;\n};\n\nexport const toUserIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<UserIntegration> => {\n    return toIntegrations(serverIntegrations)\n    .filter(\n        integration => Object.values(UserIntegrationType)\n        .includes(integration.type as unknown as UserIntegrationType)) as unknown as Array<UserIntegration>;\n};\n\nexport const toIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<Integration> => {\n    return filterOutDefaultAction(serverIntegrations).map(toIntegration);\n};\n\nexport const toIntegrationProperties = (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration) => {\n    switch (integration.type) {\n        case IntegrationType.WEBHOOK:\n        case UserIntegrationType.WEBHOOK:\n            const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n            return {\n                url: integrationHttp.url,\n                method: integrationHttp.method,\n                disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n                secret_token: integrationHttp.secretToken\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return {};\n        default:\n            assertNever(integration);\n    }\n};\n\nexport const toServerIntegrationRequest =\n    (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration): ServerIntegrationRequest => {\n        return {\n            id: integration.id,\n            name: integration.name,\n            enabled: integration.isEnabled,\n            type: getEndpointType(integration.type),\n            description: '',\n            properties: toIntegrationProperties(integration)\n        };\n    };\n\nexport const filterOutDefaultAction = (serverNotifications: Array<ServerIntegrationResponse>) =>\n    serverNotifications.filter(e => e.type !== Schemas.EndpointType.enum.default);\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useParameterizedQuery, useQuery } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiIntegrations';\nimport { getEndpointType, toUserIntegrations } from '../types/adapters/IntegrationAdapter';\nimport { IntegrationType } from '../types/Integration';\n\nexport const listIntegrationsActionCreator = (pager?: Page) => {\n    const query = (pager ?? Page.defaultPage()).toQuery();\n    return Operations.EndpointServiceGetEndpoints.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        type: query.filterType ? getEndpointType(query.filterType as IntegrationType) : undefined,\n        active: query.filterActive ? query.filterActive === 'true' : undefined\n    });\n};\n\nexport const listIntegrationIntegrationDecoder = validationResponseTransformer((payload: Operations.EndpointServiceGetEndpoints.Payload) => {\n    if (payload?.status === 200) {\n        return validatedResponse(\n            'IntegrationPage',\n            200,\n            {\n                data: toUserIntegrations(payload.value.data),\n                count: payload.value.meta.count\n            },\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useListIntegrationsQuery = (pager?: Page, initFetch?: boolean) => useTransformQueryResponse(\n    useQuery(listIntegrationsActionCreator(pager), initFetch),\n    listIntegrationIntegrationDecoder\n);\n\nexport const useListIntegrationPQuery = () => useTransformQueryResponse(\n    useParameterizedQuery(listIntegrationsActionCreator),\n    listIntegrationIntegrationDecoder\n);\n","import { ExporterCsv, ExporterHeaders } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nexport class IntegrationExporterCsv extends ExporterCsv<UserIntegration> {\n\n    public serialize(integration: UserIntegration) {\n        return {\n            ...integration\n        };\n    }\n\n    public headers(): ExporterHeaders<IntegrationExporterCsv, UserIntegration> {\n        return [\n            [ 'id', 'id' ],\n            [ 'name', 'name' ],\n            [ 'isEnabled', 'isEnabled' ],\n            [ 'type', 'type' ],\n            // This works now, but what will happen when there are multiple types (slack, webhook, etc)\n            [ 'url', 'url' ]\n        ];\n    }\n}\n","import { ExporterJson } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nexport class IntegrationExporterJson extends ExporterJson<UserIntegration> {\n\n}\n","import { Button, ButtonVariant, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { IntegrationRef } from '../../types/Notification';\n\ninterface AddNotificationBodyProps {\n    integration: IntegrationRef;\n    isLoading: boolean;\n    switchEnabled: () => void;\n}\n\nconst buttonClassname = style({\n    paddingLeft: 0\n});\n\nexport const AddNotificationBody: React.FunctionComponent<AddNotificationBodyProps> = (props) => {\n\n    const text = props.integration.isEnabled ? 'This integration is enabled and ready to use.' : 'This integration is disabled.';\n    const buttonText = props.integration.isEnabled ? 'Disable integration' : 'Enable integration';\n\n    return (\n        <>\n            <div>{ text }</div>\n            <Button\n                className={ buttonClassname }\n                isDisabled={ props.isLoading }\n                variant={ ButtonVariant.link }\n                onClick={ props.switchEnabled }\n            >\n                {buttonText}\n            </Button>\n            { props.isLoading && (\n                <Spinner size=\"sm\" />\n            ) }\n        </>\n    );\n};\n","import * as Yup from 'yup';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    IntegrationHttp,\n    IntegrationType, NewIntegration,\n    NewIntegrationBase, NewIntegrationTemplate\n} from '../../types/Integration';\n\nexport const maxIntegrationNameLength = 150;\n\nexport const IntegrationSchemaBase = Yup.object<NewIntegrationBase>({\n    name: Yup.string().required('Write a name for this Integration.').max(maxIntegrationNameLength).trim(),\n    type: Yup.mixed<IntegrationType>().oneOf([ IntegrationType.WEBHOOK ]).default(IntegrationType.WEBHOOK),\n    isEnabled: Yup.boolean().default(true).required()\n});\n\nexport const IntegrationHttpSchema = IntegrationSchemaBase.concat(Yup.object<NewIntegrationTemplate<IntegrationHttp>>().shape({\n    type: Yup.mixed<IntegrationType.WEBHOOK>().oneOf([ IntegrationType.WEBHOOK ]).required(),\n    url: Yup.string().url().required('Write a valid url for this Integration.'),\n    sslVerificationEnabled: Yup.boolean().default(true),\n    secretToken: Yup.string().notRequired(),\n    method: Yup.mixed<Schemas.HttpType>().oneOf(Object.values(Schemas.HttpType.Enum)).default(Schemas.HttpType.Enum.POST)\n}));\n\nexport const IntegrationSchema = Yup.lazy<NewIntegration | NewIntegrationBase | undefined>(value => {\n    if (value) {\n        if (value.type === IntegrationType.WEBHOOK) {\n            return IntegrationHttpSchema;\n        }\n    }\n\n    return IntegrationSchemaBase;\n});\n","import { Checkbox, FormTextInput, ouiaIdConcat } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './IntegrationTypeForm';\n\nexport const IntegrationTypeHttpForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    return (\n        <div className=\"pf-c-form\" { ...getOuiaProps('Integrations/HttpForm', props) } >\n            <FormTextInput\n                isRequired={ true }\n                label=\"Endpoint URL\"\n                type=\"url\"\n                name=\"url\"\n                id=\"integration-type-http-url\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'endpoint-url') }\n            />\n            <Checkbox\n                id=\"integration-type-http-ssl-verification-enabled\"\n                label=\"Enable SSL verification\"\n                name=\"sslVerificationEnabled\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'is-ssl-verification-enabled') }\n            />\n            <FormTextInput\n                isRequired={ false }\n                label=\"Secret token\"\n                id=\"integration-type-http-secret-token\"\n                name=\"secretToken\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'secret-token') }\n            />\n        </div>\n    );\n};\n","import { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationTypeHttpForm } from './IntegrationTypeHttpForm';\n\nexport interface IntegrationTypeForm extends OuiaComponentProps {\n    type: UserIntegrationType;\n}\n\nexport const IntegrationTypeForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    switch (props.type) {\n        case UserIntegrationType.WEBHOOK:\n            return <IntegrationTypeHttpForm { ...props } />;\n        default:\n            assertNever(props.type);\n    }\n};\n","import { FormSelectOption } from '@patternfly/react-core';\nimport {\n    Form,\n    FormSelect,\n    FormTextInput,\n    OuiaComponentProps,\n    ouiaIdConcat\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { Messages } from '../../properties/Messages';\nimport { maxIntegrationNameLength } from '../../schemas/Integrations/Integration';\nimport { IntegrationType, NewUserIntegration } from '../../types/Integration';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './Form/IntegrationTypeForm';\n\nconst options = [ IntegrationType.WEBHOOK ]\n.map(type => Messages.components.integrations.integrationType[type])\n.map(label => (<FormSelectOption key={ label } label={ label } />));\n\nexport const IntegrationsForm: React.FunctionComponent<OuiaComponentProps> = (props) => {\n\n    const { values } = useFormikContext<NewUserIntegration>();\n\n    return (\n        <Form { ...getOuiaProps('Integrations/Form', props) }>\n            <FormTextInput\n                maxLength={ maxIntegrationNameLength }\n                isRequired={ true }\n                label=\"Integration name\"\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'name') }\n            />\n            <FormSelect\n                isRequired={ true }\n                label=\"Type\"\n                name=\"type\"\n                id=\"integration-type\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'type') }\n            >\n                { options }\n            </FormSelect>\n            <IntegrationTypeForm\n                type={ values.type }\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'type-form') }\n            />\n        </Form>\n    );\n};\n","import { ActionModalError, SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { Messages } from '../../properties/Messages';\nimport { IntegrationSchema } from '../../schemas/Integrations/Integration';\nimport { NewUserIntegration, UserIntegration } from '../../types/Integration';\nimport { IntegrationsForm } from './Form';\n\ntype PartialIntegration = Partial<UserIntegration>;\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\n\nexport interface IntegrationSaveModalProps extends Omit<SaveModalProps, UsedProps>{\n    initialIntegration?: PartialIntegration;\n    onSave: (integration: UserIntegration | NewUserIntegration) => boolean | Promise<boolean>;\n    isEdit: boolean;\n}\n\ninterface InternalIntegrationSaveModalProps {\n    isEdit: boolean;\n    onClose: (saved: boolean) => void;\n    error?: ActionModalError;\n}\n\nconst InternalIntegrationSaveModal: React.FunctionComponent<InternalIntegrationSaveModalProps> = (props) => {\n\n    const pageMessages = props.isEdit ? Messages.pages.integrations.edit : Messages.pages.integrations.add;\n    const pageTitle =  pageMessages.title;\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<NewUserIntegration>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            isOpen={ true }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            title={ pageTitle }\n            content={ <IntegrationsForm /> }\n            onClose={ props.onClose }\n            error={ props.error }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const IntegrationSaveModal: React.FunctionComponent<IntegrationSaveModalProps> = (props) => {\n\n    const [ initialIntegration ] = React.useState<PartialIntegration>(() => {\n        return {\n            // The call is twice, because we use lazy evaluation for the integration base type.\n            // To ensure we get the defaults on the second level (webhook, slack, etc) we need to call it again\n            ...IntegrationSchema.cast(IntegrationSchema.cast()),\n            ...props.initialIntegration\n        };\n    });\n\n    const onSubmit = React.useCallback(async (integration: PartialIntegration) => {\n        const onSave = props.onSave;\n        const onClose = props.onClose;\n        const transformedIntegration = IntegrationSchema.cast(integration) as NewUserIntegration;\n        const saved = await onSave(transformedIntegration);\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onSave, props.onClose ]);\n\n    return (\n        <Formik<PartialIntegration>\n            initialValues={ initialIntegration }\n            validationSchema={ IntegrationSchema }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalIntegrationSaveModal\n                isEdit={ props.isEdit }\n                onClose={ props.onClose }\n                error={ props.error }\n            />\n        </Formik>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiIntegrations';\nimport { toIntegration, toServerIntegrationRequest } from '../types/adapters/IntegrationAdapter';\nimport { Integration, NewIntegration, NewUserIntegration, UserIntegration } from '../types/Integration';\n\nexport const createIntegrationActionCreator = (integration: NewIntegration | NewUserIntegration) => {\n    return Operations.EndpointServiceCreateEndpoint.actionCreator({\n        body: toServerIntegrationRequest(integration)\n    });\n};\n\nexport const saveIntegrationActionCreator = (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration) => {\n    if (integration.id) {\n        return Operations.EndpointServiceUpdateEndpoint.actionCreator({\n            body: toServerIntegrationRequest(integration),\n            id: integration.id\n        });\n    }\n\n    return createIntegrationActionCreator(integration);\n};\n\nconst decoder = (response: Operations.EndpointServiceCreateEndpoint.Payload | Operations.EndpointServiceUpdateEndpoint.Payload) => {\n    if (response.type === 'Endpoint') {\n        return {\n            ...response,\n            type: 'Integration',\n            value: toIntegration(response.value)\n        };\n    }\n\n    return response;\n};\n\nexport const useSaveIntegrationMutation = () => useTransformQueryResponse(\n    useMutation(saveIntegrationActionCreator),\n    decoder\n);\n","import { useMutation } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiIntegrations';\nimport { Integration, ServerIntegrationResponse } from '../types/Integration';\n\nexport const switchIntegrationEnabledStatusActionCreator = (integration: Integration) => {\n    if (integration.isEnabled) {\n        return Operations.EndpointServiceDisableEndpoint.actionCreator({\n            id: integration.id\n        });\n    } else {\n        return Operations.EndpointServiceEnableEndpoint.actionCreator({\n            id: integration.id\n        });\n    }\n};\n\nexport const useSwitchIntegrationEnabledStatus =\n    () => useMutation<ServerIntegrationResponse>(switchIntegrationEnabledStatusActionCreator);\n","import { NotificationAppState } from '../types/NotificationAppState';\nimport { SavedNotificationScopeState } from '../types/SavedNotificationScopeTypes';\n\nexport const savedNotificationScopeSelector = (state: NotificationAppState): SavedNotificationScopeState => state.savedNotificationScope;\n\nexport const savedNotificationScopeEqualFn = (left: SavedNotificationScopeState, right: SavedNotificationScopeState): boolean => {\n    return left?.integration === right?.integration && left?.status === right?.status;\n};\n","import { ActionModalError, addSuccessNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { AddNotificationBody } from '../../../components/Integrations/AddNotificationBody';\nimport { IntegrationSaveModal } from '../../../components/Integrations/SaveModal';\nimport { useSaveIntegrationMutation } from '../../../services/useSaveIntegration';\nimport { useSwitchIntegrationEnabledStatus } from '../../../services/useSwitchIntegrationEnabledStatus';\nimport { SavedNotificationScopeActions } from '../../../store/actions/SavedNotificationScopeAction';\nimport {\n    savedNotificationScopeEqualFn,\n    savedNotificationScopeSelector\n} from '../../../store/selectors/SavedNotificationScopeSelector';\nimport { Status } from '../../../store/types/SavedNotificationScopeTypes';\nimport { Integration, NewUserIntegration, UserIntegration, UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationRef } from '../../../types/Notification';\n\ninterface CreatePageProps {\n    isEdit: boolean;\n    initialIntegration: Partial<UserIntegration>;\n    onClose: (saved: boolean) => void;\n}\n\ninterface AddNotificationBodyContainer {\n    integration: IntegrationRef;\n}\n\nconst AddNotificationBodyContainer: React.FunctionComponent<AddNotificationBodyContainer> = (props) => {\n\n    const savedNotificationScope = useSelector(savedNotificationScopeSelector, savedNotificationScopeEqualFn);\n    const dispatch = useDispatch();\n    const switchIntegrationEnabledStatus = useSwitchIntegrationEnabledStatus();\n\n    const onClick = React.useCallback((): void => {\n        const mutate = switchIntegrationEnabledStatus.mutate;\n        if (savedNotificationScope) {\n            dispatch(SavedNotificationScopeActions.start());\n            const integration = savedNotificationScope.integration;\n            mutate(integration).then(response => {\n                if (!response.error) {\n                    dispatch(SavedNotificationScopeActions.finish(!integration.isEnabled));\n                } else {\n                    dispatch(SavedNotificationScopeActions.finish(integration.isEnabled));\n                }\n            });\n        }\n    }, [ switchIntegrationEnabledStatus.mutate, dispatch, savedNotificationScope ]);\n\n    React.useEffect(() => {\n        dispatch(SavedNotificationScopeActions.setIntegration(props.integration));\n        return () => {\n            dispatch(SavedNotificationScopeActions.unset());\n        };\n    }, [ dispatch, props.integration ]);\n\n    if (!savedNotificationScope) {\n        return <React.Fragment />;\n    }\n\n    return <AddNotificationBody\n        integration={ savedNotificationScope.integration }\n        isLoading={ savedNotificationScope.status === Status.LOADING }\n        switchEnabled={ onClick }\n    />;\n};\n\nexport const CreatePage: React.FunctionComponent<CreatePageProps> = props => {\n\n    const saveIntegrationMutation = useSaveIntegrationMutation();\n    const [ hasError, setError ] = React.useState(false);\n\n    const onSaveIntegration = React.useCallback((integration: NewUserIntegration) => {\n        if (!integration.id) {\n            integration.isEnabled = true;\n        }\n\n        setError(false);\n\n        return saveIntegrationMutation.mutate(integration).then(response => {\n            if (response.payload?.status === 200) {\n\n                const savedIntegration: IntegrationRef =  response.payload?.type === 'Integration' ? {\n                    ...response.payload.value as Integration,\n                    type: response.payload.value.type as unknown as UserIntegrationType\n                } : integration as IntegrationRef;\n\n                const title = props.isEdit ? `${savedIntegration.name} saved successfully` : `${savedIntegration.name} added successfully`;\n\n                addSuccessNotification(\n                    title,\n                    <AddNotificationBodyContainer integration={ savedIntegration } />,\n                    true\n                );\n\n                return true;\n            } else {\n                setError(true);\n                return false;\n            }\n        });\n    }, [ saveIntegrationMutation, props.isEdit ]);\n\n    const error = React.useMemo<ActionModalError | undefined>(() => {\n        if (hasError) {\n            if (props.isEdit) {\n                return {\n                    title: 'Integration failed to update',\n                    description: <p>There was an error trying to update the Integration. Please try again.</p>\n                };\n            } else {\n                return {\n                    title: 'Failed to create Integration',\n                    description: <p>There was an error trying to create the Integration. Please try again.</p>\n                };\n            }\n        }\n\n        return undefined;\n    }, [ hasError, props.isEdit ]);\n\n    return (\n        <IntegrationSaveModal\n            initialIntegration={ props.initialIntegration }\n            onSave={ onSaveIntegration }\n            isEdit={ props.isEdit }\n            isSaving={ saveIntegrationMutation.loading }\n            onClose={ props.onClose }\n            error={ error }\n        />\n    );\n};\n","import { ExpandableSection, List, ListItem, Skeleton } from '@patternfly/react-core';\nimport { DeleteModal, DeleteModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { UserIntegration } from '../../types/Integration';\nimport { Notification } from '../../types/Notification';\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onDelete';\n\ninterface IntegrationDeleteModalProps extends Omit<DeleteModalProps, UsedProps> {\n    integration?: UserIntegration;\n    onDelete: (integration: UserIntegration) => boolean | Promise<boolean>;\n    notifications?: Array<Notification>;\n}\n\nexport const IntegrationDeleteModal: React.FunctionComponent<IntegrationDeleteModalProps> = (props) => {\n\n    const onDeleteInternal = React.useCallback(() => {\n        const integration = props.integration;\n        const onDelete = props.onDelete;\n        if (integration) {\n            return onDelete(integration);\n        }\n\n        return false;\n    }, [ props.onDelete, props.integration ]);\n\n    const content = React.useMemo(() => {\n        if (props.notifications === undefined) {\n            return (\n                <span data-testid=\"loading\">\n                    <Skeleton />\n                </span>\n            );\n        } else if (props.notifications.length === 0) {\n            return <span\n                data-testid=\"removing-integration-without-notifications\"\n            >\n                Removing integration <strong>{ props.integration?.name }</strong> does not affect any notification events.\n            </span>;\n        } else {\n            const eventText = props.notifications.length !== 1 ? 'events' : 'event';\n            return (\n                <span data-testid={ `removing-integration-with-notifications-${props.notifications.length}` }>\n                    Removing integration <strong>{ props.integration?.name }</strong> affects {props.notifications.length} notification {eventText}.\n                    { props.notifications.length > 0 && <ExpandableSection toggleText={ `View ${props.notifications.length} ${eventText}.` }>\n                        <List>\n                            { props.notifications.map(notification => (\n                                <ListItem\n                                    key={ notification.id }\n                                >\n                                    { notification.applicationDisplayName }: { notification.eventTypeDisplayName }\n                                </ListItem>\n                            )) }\n                        </List>\n                    </ExpandableSection> }\n                </span>\n            );\n        }\n    }, [ props.notifications, props.integration ]);\n\n    if (!props.integration) {\n        return null;\n    }\n\n    return (\n        <DeleteModal\n            isOpen={ true }\n            isDeleting={ props.isDeleting }\n            title={ 'Remove integration' }\n            content={ content }\n            onClose={ props.onClose }\n            onDelete={ onDeleteInternal }\n            error={ props.error }\n            titleIconVariant=\"warning\"\n        />\n    );\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const Attributes = zodSchemaAttributes();\n  export type Attributes = unknown;\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const EmailSubscriptionAttributes = zodSchemaEmailSubscriptionAttributes();\n  export type EmailSubscriptionAttributes = unknown;\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookAttributes | EmailSubscriptionAttributes)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType = 'webhook' | 'email_subscription' | 'default';\n\n  export const EntityTag = zodSchemaEntityTag();\n  export type EntityTag = {\n    value?: string | undefined | null;\n    weak?: boolean | undefined | null;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const Family = zodSchemaFamily();\n  export type Family =\n    | 'CLIENT_ERROR'\n    | 'INFORMATIONAL'\n    | 'OTHER'\n    | 'REDIRECTION'\n    | 'SERVER_ERROR'\n    | 'SUCCESSFUL';\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Link = zodSchemaLink();\n  export type Link = {\n    params?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    rel?: string | undefined | null;\n    rels?: Array<string> | undefined | null;\n    title?: string | undefined | null;\n    type?: string | undefined | null;\n    uri?: string | undefined | null;\n    uriBuilder?: UriBuilder | undefined | null;\n  };\n\n  export const Locale = zodSchemaLocale();\n  export type Locale = {\n    country?: string | undefined | null;\n    displayCountry?: string | undefined | null;\n    displayLanguage?: string | undefined | null;\n    displayName?: string | undefined | null;\n    displayScript?: string | undefined | null;\n    displayVariant?: string | undefined | null;\n    extensionKeys?: Array<string> | undefined | null;\n    iSO3Country?: string | undefined | null;\n    iSO3Language?: string | undefined | null;\n    language?: string | undefined | null;\n    script?: string | undefined | null;\n    unicodeLocaleAttributes?: Array<string> | undefined | null;\n    unicodeLocaleKeys?: Array<string> | undefined | null;\n    variant?: string | undefined | null;\n  };\n\n  export const MediaType = zodSchemaMediaType();\n  export type MediaType = {\n    parameters?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    subtype?: string | undefined | null;\n    type?: string | undefined | null;\n    wildcardSubtype?: boolean | undefined | null;\n    wildcardType?: boolean | undefined | null;\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();\n  export type MultivaluedMapStringObject = {\n    [x: string]: Array<unknown>;\n  };\n\n  export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();\n  export type MultivaluedMapStringString = {\n    [x: string]: Array<string>;\n  };\n\n  export const NewCookie = zodSchemaNewCookie();\n  export type NewCookie = {\n    comment?: string | undefined | null;\n    domain?: string | undefined | null;\n    expiry?: string | undefined | null;\n    httpOnly?: boolean | undefined | null;\n    maxAge?: number | undefined | null;\n    name?: string | undefined | null;\n    path?: string | undefined | null;\n    secure?: boolean | undefined | null;\n    value?: string | undefined | null;\n    version?: number | undefined | null;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    eventId?: string | undefined | null;\n    id?: number | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const Response = zodSchemaResponse();\n  export type Response = {\n    allowedMethods?: Array<string> | undefined | null;\n    cookies?:\n      | {\n          [x: string]: NewCookie;\n        }\n      | undefined\n      | null;\n    date?: string | undefined | null;\n    entity?: unknown | undefined | null;\n    entityTag?: EntityTag | undefined | null;\n    headers?: MultivaluedMapStringObject | undefined | null;\n    language?: Locale | undefined | null;\n    lastModified?: string | undefined | null;\n    length?: number | undefined | null;\n    links?: Array<Link> | undefined | null;\n    location?: string | undefined | null;\n    mediaType?: MediaType | undefined | null;\n    metadata?: MultivaluedMapStringObject | undefined | null;\n    status?: number | undefined | null;\n    statusInfo?: StatusType | undefined | null;\n    stringHeaders?: MultivaluedMapStringString | undefined | null;\n  };\n\n  export const StatusType = zodSchemaStatusType();\n  export type StatusType = {\n    family?: Family | undefined | null;\n    reasonPhrase?: string | undefined | null;\n    statusCode?: number | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UriBuilder = zodSchemaUriBuilder();\n  export type UriBuilder = unknown;\n\n  export const WebhookAttributes = zodSchemaWebhookAttributes();\n  export type WebhookAttributes = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification?: boolean | undefined | null;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAttributes() {\n      return z.unknown();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionAttributes() {\n      return z.unknown();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookAttributes(),\n              zodSchemaEmailSubscriptionAttributes()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default' ]);\n  }\n\n  function zodSchemaEntityTag() {\n      return z\n      .object({\n          value: z.string().optional().nullable(),\n          weak: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFamily() {\n      return z.enum([\n          'CLIENT_ERROR',\n          'INFORMATIONAL',\n          'OTHER',\n          'REDIRECTION',\n          'SERVER_ERROR',\n          'SUCCESSFUL'\n      ]);\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaLink() {\n      return z\n      .object({\n          params: z.record(z.string()).optional().nullable(),\n          rel: z.string().optional().nullable(),\n          rels: z.array(z.string()).optional().nullable(),\n          title: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          uri: z.string().optional().nullable(),\n          uriBuilder: zodSchemaUriBuilder().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLocale() {\n      return z\n      .object({\n          country: z.string().optional().nullable(),\n          displayCountry: z.string().optional().nullable(),\n          displayLanguage: z.string().optional().nullable(),\n          displayName: z.string().optional().nullable(),\n          displayScript: z.string().optional().nullable(),\n          displayVariant: z.string().optional().nullable(),\n          extensionKeys: z.array(z.string()).optional().nullable(),\n          iSO3Country: z.string().optional().nullable(),\n          iSO3Language: z.string().optional().nullable(),\n          language: z.string().optional().nullable(),\n          script: z.string().optional().nullable(),\n          unicodeLocaleAttributes: z.array(z.string()).optional().nullable(),\n          unicodeLocaleKeys: z.array(z.string()).optional().nullable(),\n          variant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMediaType() {\n      return z\n      .object({\n          parameters: z.record(z.string()).optional().nullable(),\n          subtype: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          wildcardSubtype: z.boolean().optional().nullable(),\n          wildcardType: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMultivaluedMapStringObject() {\n      return z.record(z.array(z.unknown()));\n  }\n\n  function zodSchemaMultivaluedMapStringString() {\n      return z.record(z.array(z.string()));\n  }\n\n  function zodSchemaNewCookie() {\n      return z\n      .object({\n          comment: z.string().optional().nullable(),\n          domain: z.string().optional().nullable(),\n          expiry: z.string().optional().nullable(),\n          httpOnly: z.boolean().optional().nullable(),\n          maxAge: z.number().int().optional().nullable(),\n          name: z.string().optional().nullable(),\n          path: z.string().optional().nullable(),\n          secure: z.boolean().optional().nullable(),\n          value: z.string().optional().nullable(),\n          version: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          eventId: z.string().optional().nullable(),\n          id: z.number().int().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaResponse() {\n      return z\n      .object({\n          allowedMethods: z.array(z.string()).optional().nullable(),\n          cookies: z.record(zodSchemaNewCookie()).optional().nullable(),\n          date: z.string().optional().nullable(),\n          entity: z.unknown().optional().nullable(),\n          entityTag: zodSchemaEntityTag().optional().nullable(),\n          headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          language: zodSchemaLocale().optional().nullable(),\n          lastModified: z.string().optional().nullable(),\n          length: z.number().int().optional().nullable(),\n          links: z.array(zodSchemaLink()).optional().nullable(),\n          location: z.string().optional().nullable(),\n          mediaType: zodSchemaMediaType().optional().nullable(),\n          metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          status: z.number().int().optional().nullable(),\n          statusInfo: zodSchemaStatusType().optional().nullable(),\n          stringHeaders: zodSchemaMultivaluedMapStringString()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatusType() {\n      return z\n      .object({\n          family: zodSchemaFamily().optional().nullable(),\n          reasonPhrase: z.string().optional().nullable(),\n          statusCode: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUriBuilder() {\n      return z.unknown();\n  }\n\n  function zodSchemaWebhookAttributes() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean().optional().nullable(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n}\n\nexport namespace Operations {\n  // GET /notifications/defaults\n  // Retrieve all integrations of the configured default actions.\n  export namespace NotificationServiceGetEndpointsForDefaults {\n    const Response200 = z.array(Schemas.Endpoint);\n    type Response200 = Array<Schemas.Endpoint>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/defaults/{endpointId}\n  // Add an integration to the list of configured default actions.\n  export namespace NotificationServiceAddEndpointToDefaults {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/defaults/{endpointId}\n  // Remove an integration from the list of configured default actions.\n  export namespace NotificationServiceDeleteEndpointFromDefaults {\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes\n  export namespace NotificationServiceGetEventTypes {\n    const ApplicationIds = z.array(z.string());\n    type ApplicationIds = Array<string>;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      applicationIds?: ApplicationIds;\n      bundleId?: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes';\n        const query = {} as Record<string, any>;\n        if (params.applicationIds !== undefined) {\n            query.applicationIds = params.applicationIds;\n        }\n\n        if (params.bundleId !== undefined) {\n            query.bundleId = params.bundleId;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/affectedByRemovalOfEndpoint/{endpointId}\n  export namespace NotificationServiceGetEventTypesAffectedByEndpointId {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/affectedByRemovalOfEndpoint/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/{eventTypeId}\n  export namespace NotificationServiceGetLinkedEndpoints {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.Endpoint);\n    type Response200 = Array<Schemas.Endpoint>;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/eventTypes/{eventTypeId}/{endpointId}\n  export namespace NotificationServiceLinkEndpointToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'\n        .replace('{endpointId}', params.endpointId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/eventTypes/{eventTypeId}/{endpointId}\n  export namespace NotificationServiceUnlinkEndpointFromEventType {\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'\n        .replace('{endpointId}', params.endpointId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/applications\n  // Return a thin list of configured applications. This can be used to configure a filter in the UI\n  export namespace NotificationServiceGetApplicationsFacets {\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export interface Params {\n      bundleName?: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/applications';\n        const query = {} as Record<string, any>;\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/bundles\n  // Return a thin list of configured bundles. This can be used to configure a filter in the UI\n  export namespace NotificationServiceGetBundleFacets {\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/{id}\n  export namespace NotificationServiceMarkRead {\n    const Id = z.number().int();\n    type Id = number;\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      id: Id;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n}\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\n\nexport type UUID = Schemas.UUID;\n\nexport interface Notification {\n    id: UUID;\n    applicationDisplayName: string;\n    eventTypeDisplayName: string;\n    actions?: Array<Action>;\n    useDefault?: boolean;\n}\n\nexport type IntegrationRef = Pick<UserIntegration, 'id' | 'name' | 'type' | 'isEnabled'>\n\nexport interface DefaultNotificationBehavior {\n    actions: Array<Action>;\n}\n\nexport interface ActionBase {\n    type: NotificationType;\n    integrationId: UUID;\n}\n\nexport interface ActionIntegration extends ActionBase {\n    type: NotificationType.INTEGRATION;\n    integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n    type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n    recipient: Array<string>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport enum NotificationType {\n    EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n    DRAWER = 'DRAWER',\n    INTEGRATION = 'INTEGRATION'\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { ServerIntegrationResponse } from '../Integration';\nimport { Action, Notification, NotificationType, ServerNotificationResponse } from '../Notification';\nimport { filterOutDefaultAction, toIntegration, toUserIntegration } from './IntegrationAdapter';\n\nconst _toAction = (type: NotificationType, serverAction: ServerIntegrationResponse): Action => {\n    if (type === NotificationType.INTEGRATION) {\n        const userIntegration = toUserIntegration(serverAction);\n        return {\n            type,\n            integrationId: userIntegration.id,\n            integration: userIntegration\n        };\n    }\n\n    const integration = toIntegration(serverAction);\n\n    return {\n        type,\n        integrationId: integration.id,\n        recipient: []\n    };\n};\n\nexport const usesDefault = (endpoints: Array<Schemas.Endpoint>): boolean =>\n    endpoints.findIndex(e => e.type === Schemas.EndpointType.enum.default) !== -1;\n\nexport const toNotification = (serverNotification: ServerNotificationResponse): Notification => {\n    if (!serverNotification.id || !serverNotification.application) {\n        throw new Error(`Unexpected notification from server ${JSON.stringify(serverNotification)}`);\n    }\n\n    return {\n        id: serverNotification.id,\n        applicationDisplayName: serverNotification.application.display_name,\n        eventTypeDisplayName: serverNotification.display_name,\n        actions: undefined,\n        useDefault: undefined\n    };\n};\n\nexport const toAction = (serverAction: ServerIntegrationResponse): Action => {\n    switch (serverAction.type) {\n        case Schemas.EndpointType.enum.webhook:\n            return _toAction(NotificationType.INTEGRATION, serverAction);\n        case Schemas.EndpointType.enum.email_subscription:\n            return _toAction(NotificationType.EMAIL_SUBSCRIPTION, serverAction);\n        case Schemas.EndpointType.enum.default:\n            throw new Error('EndpointType.default should not reach this point');\n        default:\n            assertNever(serverAction.type);\n    }\n};\n\nexport const toNotifications = (serverNotifications: Array<ServerNotificationResponse>) => serverNotifications.map(toNotification);\nexport const toActions = (serverActions: Array<ServerIntegrationResponse>): Array<Action> => filterOutDefaultAction(serverActions).map(toAction);\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toNotifications } from '../../types/adapters/NotificationAdapter';\n\nconst notificationsForEndpointActionCreator = (integrationId: string) => {\n    return Operations.NotificationServiceGetEventTypesAffectedByEndpointId.actionCreator({\n        endpointId: integrationId\n    });\n};\n\nconst defaultNotificationsDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceGetEventTypesAffectedByEndpointId.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'Notifications',\n                200,\n                toNotifications(payload.value),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetAffectedNotificationsByEndpoint = () =>\n    useTransformQueryResponse(useParameterizedQuery(notificationsForEndpointActionCreator), defaultNotificationsDecoder);\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiIntegrations';\n\nconst deleteIntegrationActionCreator = (integrationId: string) => {\n    return Operations.EndpointServiceDeleteEndpoint.actionCreator({\n        id: integrationId\n    });\n};\n\nexport const useDeleteIntegration = () => useMutation<boolean>(deleteIntegrationActionCreator);\n","import {\n    ActionModalError,\n    addSuccessNotification,\n    OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { IntegrationDeleteModal } from '../../../components/Integrations/DeleteModal';\nimport { useGetAffectedNotificationsByEndpoint } from '../../../services/Notifications/GetAffectedNotificationsByEndpoint';\nimport { useDeleteIntegration } from '../../../services/useDeleteIntegration';\nimport { UserIntegration } from '../../../types/Integration';\n\ninterface IntegrationDeleteModalPageProps extends OuiaComponentProps {\n    onClose: (deleted: boolean) => void;\n    integration: UserIntegration;\n}\n\nexport const IntegrationDeleteModalPage: React.FunctionComponent<IntegrationDeleteModalPageProps> = (props) => {\n\n    const deleteIntegrationMutation = useDeleteIntegration();\n    const getNotificationsQuery = useGetAffectedNotificationsByEndpoint();\n    const [ hasError, setError ] = React.useState(false);\n\n    const onDelete = React.useCallback((integration: UserIntegration) => {\n        const deleteIntegration = deleteIntegrationMutation.mutate;\n        setError(false);\n        return deleteIntegration(integration.id).then((response) => {\n            if (!response.error) {\n                addSuccessNotification('Integration removed', 'The integration was removed.');\n                return true;\n            } else {\n                setError(true);\n                return false;\n            }\n        });\n    }, [ deleteIntegrationMutation.mutate, setError ]);\n\n    const error = React.useMemo<ActionModalError | undefined>(() => {\n        if (hasError) {\n            return {\n                title: 'Failed to remove Integration',\n                description: <p>There was an error trying to remove the Integration. Please try again.</p>\n            };\n        }\n\n        return undefined;\n    }, [ hasError ]);\n\n    React.useEffect(() => {\n        const query = getNotificationsQuery.query;\n        query(props.integration.id);\n    }, [ props.integration, getNotificationsQuery.query ]);\n\n    const notifications = React.useMemo(() => {\n        const payload = getNotificationsQuery.payload;\n        if (payload && payload.type === 'Notifications') {\n            return payload.value;\n        }\n\n        return undefined;\n    }, [ getNotificationsQuery.payload ]);\n\n    return (\n        <IntegrationDeleteModal\n            integration={ props.integration }\n            notifications={ notifications }\n            isDeleting={ deleteIntegrationMutation.loading }\n            onClose={ props.onClose }\n            onDelete={ onDelete }\n            error={ error }\n        />\n    );\n};\n","import { assertNever } from 'assert-never';\nimport { useReducer } from 'react';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nenum UseDeleteModalReducerActionType {\n    DELETE = 'delete',\n    NONE = 'none'\n}\n\ninterface UseDeleteModalActionDelete {\n    type: UseDeleteModalReducerActionType.DELETE;\n    integration: UserIntegration;\n}\n\ninterface UseDeleteModalActionNone {\n    type: UseDeleteModalReducerActionType.NONE;\n}\n\ntype UseDeleteModalReducerAction = UseDeleteModalActionDelete | UseDeleteModalActionNone;\n\ninterface UseDeleteModalReducerState {\n    integration: UserIntegration | undefined;\n}\n\nconst noneState: UseDeleteModalReducerState = {\n    integration: undefined\n};\n\nconst reducer = (state: UseDeleteModalReducerState, action: UseDeleteModalReducerAction): UseDeleteModalReducerState => {\n    switch (action.type) {\n        case UseDeleteModalReducerActionType.DELETE:\n            return {\n                integration: action.integration\n            };\n        case UseDeleteModalReducerActionType.NONE:\n            return noneState;\n        default:\n            assertNever(action);\n\n    }\n};\n\nexport const useDeleteModalReducer = () => {\n    return useReducer(reducer, noneState);\n};\n\nuseDeleteModalReducer.makeNoneAction = (): UseDeleteModalActionNone => ({\n    type: UseDeleteModalReducerActionType.NONE\n});\n\nuseDeleteModalReducer.makeDeleteAction = (integration: UserIntegration): UseDeleteModalActionDelete => ({\n    type: UseDeleteModalReducerActionType.DELETE,\n    integration\n});\n","import { assertNever } from 'assert-never';\nimport { useReducer } from 'react';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nenum UseFormModalReducerActionType {\n    EDIT = 'edit',\n    CREATE = 'create',\n    NONE = 'none'\n}\n\ninterface UseFormModalReducerActionCreate {\n    type: UseFormModalReducerActionType.CREATE;\n    template?: Partial<UserIntegration>;\n}\n\ninterface UseFormModalReducerActionEdit {\n    type: UseFormModalReducerActionType.EDIT;\n    template: UserIntegration;\n}\n\ninterface UseFormModalReducerActionNone {\n    type: UseFormModalReducerActionType.NONE;\n}\n\ntype UseFormModalReducerAction = UseFormModalReducerActionCreate | UseFormModalReducerActionEdit | UseFormModalReducerActionNone;\n\ninterface UseFormModalReducerState {\n    isOpen: boolean;\n    isEdit: boolean;\n    template: UserIntegration | Partial<UserIntegration> | undefined;\n    isCopy: boolean;\n}\n\nconst noneState = {\n    isOpen: false,\n    isEdit: false,\n    template: undefined,\n    isCopy: false\n};\n\nconst reducer = (state: UseFormModalReducerState, action: UseFormModalReducerAction): UseFormModalReducerState => {\n    switch (action.type) {\n        case UseFormModalReducerActionType.CREATE:\n            return {\n                isOpen: true,\n                isEdit: false,\n                template: action.template ? {\n                    ...action.template,\n                    name: `Copy of ${action.template.name}`\n                } : undefined,\n                isCopy: !!action.template\n            };\n        case UseFormModalReducerActionType.EDIT:\n            return {\n                isOpen: true,\n                isEdit: true,\n                template: action.template,\n                isCopy: false\n            };\n        case UseFormModalReducerActionType.NONE:\n            return noneState;\n        default:\n            assertNever(action);\n    }\n};\n\nexport const makeCreateAction = (template?: Partial<UserIntegration>): UseFormModalReducerActionCreate => ({\n    type: UseFormModalReducerActionType.CREATE,\n    template\n});\n\nexport const makeEditAction = (template: UserIntegration): UseFormModalReducerActionEdit => ({\n    type: UseFormModalReducerActionType.EDIT,\n    template\n});\n\nexport const makeNoneAction = (): UseFormModalReducerActionNone => ({\n    type: UseFormModalReducerActionType.NONE\n});\n\nexport const useFormModalReducer = () => {\n    return useReducer(reducer, noneState);\n};\n","import {\n    useFilters,\n    useUrlStateMultipleOptions,\n    useUrlStateString\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\n\nimport { IntegrationFilterColumn } from '../../../components/Integrations/Filters';\n\nconst DEBOUNCE_MS = 250;\n\nconst useUrlStateName = (defaultValue?: string) => useUrlStateString('name', defaultValue);\nconst useUrlStateEnabled = (_defaultValue?: string) => useUrlStateMultipleOptions('enabled', [ 'Enabled', 'Disabled' ]);\n\nconst useStateFactory = (column: IntegrationFilterColumn) => {\n    switch (column) {\n        case IntegrationFilterColumn.NAME:\n            return useUrlStateName;\n        case IntegrationFilterColumn.ENABLED:\n            return useUrlStateEnabled;\n        default:\n            assertNever(column);\n    }\n};\n\nexport const useIntegrationFilter = (debounce = DEBOUNCE_MS) => {\n    return useFilters(IntegrationFilterColumn, debounce, useStateFactory);\n};\n","import { Operations } from '../generated/OpenapiIntegrations';\n\nexport const listIntegrationHistoryActionCreator = (integrationId: string) => {\n    return Operations.EndpointServiceGetEndpointHistory.actionCreator({\n        id: integrationId\n    });\n};\n","import { addDangerNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport pLimit from 'p-limit';\nimport { useCallback, useContext, useEffect, useState } from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { format } from 'react-string-format';\nimport { usePrevious } from 'react-use';\n\nimport { IntegrationRow } from '../../../components/Integrations/Table';\nimport { Messages } from '../../../properties/Messages';\nimport { listIntegrationHistoryActionCreator } from '../../../services/useListIntegrationHistory';\nimport { useSwitchIntegrationEnabledStatus } from '../../../services/useSwitchIntegrationEnabledStatus';\nimport { SavedNotificationScopeActions } from '../../../store/actions/SavedNotificationScopeAction';\nimport { NotificationAppState } from '../../../store/types/NotificationAppState';\nimport { SavedNotificationScopeState, Status } from '../../../store/types/SavedNotificationScopeTypes';\nimport { UserIntegration } from '../../../types/Integration';\n\nconst notificationAppStateSelector = (state: NotificationAppState): SavedNotificationScopeState => state.savedNotificationScope;\n\nconst notificationAppStateEqualFn = (left: SavedNotificationScopeState, right: SavedNotificationScopeState): boolean => {\n    return left?.integration === right?.integration && left?.status === right?.status;\n};\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport const useIntegrationRows = (integrations: Array<UserIntegration>) => {\n    const [ integrationRows, setIntegrationRows ] = useState<Array<IntegrationRow>>([]);\n    const prevIntegrationsInput = usePrevious(integrations);\n\n    const reduxDispatch = useDispatch();\n    const savedNotificationScope = useSelector<NotificationAppState, SavedNotificationScopeState>(\n        notificationAppStateSelector, notificationAppStateEqualFn\n    );\n\n    const switchStatus = useSwitchIntegrationEnabledStatus();\n    const { query } = useContext(ClientContext);\n    const [ limit ] = useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const setIntegrationRowByIndex = useCallback((index: number, partialIntegration: Partial<IntegrationRow>) => {\n        setIntegrationRows(prevIntegrations => {\n            const newIntegrations = [ ...prevIntegrations ];\n            newIntegrations[index] = { ...newIntegrations[index], ...partialIntegration };\n            return newIntegrations;\n        });\n    }, [ setIntegrationRows ]);\n\n    const setIntegrationRowById = useCallback((id: string, partialIntegration: Partial<IntegrationRow>) => {\n        setIntegrationRows(prevIntegrations => {\n            const index = prevIntegrations.findIndex(integration => integration.id === id);\n            if (index === -1) {\n                return prevIntegrations;\n            }\n\n            const newIntegrations = [ ...prevIntegrations ];\n            newIntegrations[index] = { ...newIntegrations[index], ...partialIntegration };\n            return newIntegrations;\n        });\n    }, [ setIntegrationRows ]);\n\n    useEffect(() => {\n        if (integrations !== prevIntegrationsInput) {\n            setIntegrationRows(prev => {\n                return integrations.map(integration => ({\n                    isOpen: false,\n                    isSelected: false,\n                    isEnabledLoading: false,\n                    lastConnectionAttempts: [],\n                    isConnectionAttemptLoading: true,\n                    ...prev.find(i => i.id === integration.id),\n                    ...integration\n                }));\n            });\n\n            if (integrations) {\n                limit.clearQueue();\n\n                integrations.map(integration => integration.id).forEach(integrationId => {\n                    limit(() => query(listIntegrationHistoryActionCreator(integrationId))).then(response => {\n\n                        if (response.payload && response.payload.status === 200) {\n                            const last5 = (response.payload.value.reverse().slice(0, 5)).map(p => ({\n                                isSuccess: !!p.invocationResult,\n                                date: new Date(p.created as string)\n                            }));\n                            setIntegrationRowById(integrationId, {\n                                isConnectionAttemptLoading: false,\n                                lastConnectionAttempts: last5\n                            });\n                        } else {\n                            setIntegrationRowById(integrationId, {\n                                isConnectionAttemptLoading: false,\n                                lastConnectionAttempts: undefined\n                            });\n                        }\n                    });\n                });\n            }\n        }\n    }, [ prevIntegrationsInput, integrations, setIntegrationRowById, limit, query ]);\n\n    const onCollapse = useCallback((_integration: IntegrationRow, index: number, isOpen: boolean) => {\n        setIntegrationRowByIndex(index, {\n            isOpen\n        });\n    }, [ setIntegrationRowByIndex ]);\n\n    const onEnable = useCallback((_integration: UserIntegration, index: number, isEnabled: boolean) => {\n        setIntegrationRowByIndex(index, {\n            isEnabledLoading: true\n        });\n\n        if (savedNotificationScope) {\n            if (_integration.id === savedNotificationScope.integration.id) {\n                reduxDispatch(SavedNotificationScopeActions.start());\n            }\n        }\n\n        switchStatus.mutate(_integration).then((response) => {\n            if (!response.error) {\n                setIntegrationRowByIndex(index, {\n                    isEnabled,\n                    isEnabledLoading: false\n                });\n                if (savedNotificationScope) {\n                    if (_integration.id === savedNotificationScope.integration.id) {\n                        reduxDispatch(SavedNotificationScopeActions.finish(isEnabled));\n                    }\n                }\n            } else {\n                const message = isEnabled ? Messages.components.integrations.enableError : Messages.components.integrations.disableError;\n\n                if (savedNotificationScope) {\n                    if (_integration.id === savedNotificationScope.integration.id) {\n                        reduxDispatch(SavedNotificationScopeActions.finish(_integration.isEnabled));\n                    }\n                }\n\n                addDangerNotification(\n                    message.title,\n                    format(message.description, _integration.name),\n                    true);\n                setIntegrationRowByIndex(index, {\n                    isEnabled: _integration.isEnabled,\n                    isEnabledLoading: false\n                });\n            }\n        });\n\n    }, [ setIntegrationRowByIndex, switchStatus, reduxDispatch, savedNotificationScope ]);\n\n    useEffect(() => {\n        if (savedNotificationScope) {\n            if (savedNotificationScope.status === Status.LOADING) {\n                setIntegrationRowById(\n                    savedNotificationScope.integration.id,\n                    { isEnabledLoading: true }\n                );\n            } else {\n                setIntegrationRowById(\n                    savedNotificationScope.integration.id,\n                    { isEnabledLoading: false, isEnabled: savedNotificationScope.integration.isEnabled }\n                );\n            }\n        }\n    }, [ savedNotificationScope, setIntegrationRowById ]);\n\n    return {\n        rows: integrationRows,\n        onCollapse,\n        onEnable\n    };\n};\n","import { Main, PageHeader, PageHeaderTitle, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    addDangerNotification,\n    ExporterType,\n    Filter,\n    Operator,\n    Page\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { format } from 'date-fns';\nimport inBrowserDownload from 'in-browser-download';\nimport * as React from 'react';\nimport { useContext } from 'react';\n\nimport { AppContext } from '../../../app/AppContext';\nimport { IntegrationFilters } from '../../../components/Integrations/Filters';\nimport { IntegrationsTable } from '../../../components/Integrations/Table';\nimport { IntegrationsToolbar } from '../../../components/Integrations/Toolbar';\nimport { usePage } from '../../../hooks/usePage';\nimport { Messages } from '../../../properties/Messages';\nimport { useListIntegrationPQuery, useListIntegrationsQuery } from '../../../services/useListIntegrations';\nimport { IntegrationType, UserIntegration } from '../../../types/Integration';\nimport { integrationExporterFactory } from '../../../utils/exporters/Integration/Factory';\nimport { CreatePage } from '../Create/CreatePage';\nimport { IntegrationDeleteModalPage } from '../Delete/DeleteModal';\nimport { useActionResolver } from './useActionResolver';\nimport { useDeleteModalReducer } from './useDeleteModalReducer';\nimport { makeCreateAction, makeEditAction, makeNoneAction, useFormModalReducer } from './useFormModalReducer';\nimport { useIntegrationFilter } from './useIntegrationFilter';\nimport { useIntegrationRows } from './useIntegrationRows';\n\nconst integrationFilterBuilder = (filters?: IntegrationFilters) => {\n    const filter = new Filter();\n    if (filters?.enabled?.length === 1) {\n        const isEnabled = filters.enabled[0].toLocaleLowerCase() === 'enabled';\n        filter.and('active', Operator.EQUAL, isEnabled.toString());\n    }\n\n    return filter.and('type', Operator.EQUAL, IntegrationType.WEBHOOK);\n};\n\nexport const IntegrationsListPage: React.FunctionComponent = () => {\n\n    const { rbac: { canWriteIntegrationsEndpoints }} = useContext(AppContext);\n    const integrationFilter = useIntegrationFilter();\n    const pageData = usePage<IntegrationFilters>(10, integrationFilterBuilder, integrationFilter.filters);\n    const integrationsQuery = useListIntegrationsQuery(pageData.page);\n    const exportIntegrationsQuery = useListIntegrationPQuery();\n\n    const integrations = React.useMemo(() => {\n        const payload = integrationsQuery.payload;\n        if (payload?.type === 'IntegrationPage') {\n            return payload.value;\n        }\n\n        return {\n            data: [],\n            count: 0\n        };\n    }, [ integrationsQuery.payload ]);\n\n    const integrationRows = useIntegrationRows(integrations.data);\n\n    const [ modalIsOpenState, dispatchModalIsOpen ] = useFormModalReducer();\n    const [ deleteModalState, dispatchDeleteModal ] = useDeleteModalReducer();\n\n    const onAddIntegrationClicked = React.useCallback(() => {\n        dispatchModalIsOpen(makeCreateAction());\n    }, [ dispatchModalIsOpen ]);\n\n    const onEdit = React.useCallback((integration: UserIntegration) => {\n        dispatchModalIsOpen(makeEditAction(integration));\n    }, [ dispatchModalIsOpen ]);\n\n    const onDelete = React.useCallback((integration: UserIntegration) => {\n        dispatchDeleteModal(useDeleteModalReducer.makeDeleteAction(integration));\n    }, [ dispatchDeleteModal ]);\n\n    const onExport = React.useCallback(async (type: ExporterType) => {\n        const query = exportIntegrationsQuery.query;\n        const exporter = integrationExporterFactory(type);\n        const exportedIntegrations: Array<UserIntegration> = [];\n        let page = Page.of(1, 100, new Filter().and('type', Operator.EQUAL, 'webhook'));\n        while (true) {\n            const data = await query(page);\n            if (data?.payload?.status !== 200) {\n                if (exportedIntegrations.length === 0) {\n                    addDangerNotification(\n                        'Unable to download integrations',\n                        'We were unable to download the integrations for exporting. Please try again.'\n                    );\n                    return;\n                } else {\n                    addDangerNotification(\n                        'Unable to download all integrations',\n                        `We were unable to download all the integrations for exporting. Downloading: ${exportedIntegrations.length}.`\n                    );\n                    break;\n                }\n            }\n\n            if (data.payload.value.data.length === 0) {\n                break;\n            }\n\n            page = page.nextPage();\n            exportedIntegrations.push(...data.payload.value.data);\n        }\n\n        if (exportedIntegrations) {\n            inBrowserDownload(\n                exporter.export(exportedIntegrations),\n                `integrations-${format(new Date(Date.now()), 'y-dd-MM')}.${exporter.type}`\n            );\n        }\n    }, [ exportIntegrationsQuery ]);\n\n    const actionResolver = useActionResolver({\n        canWrite: canWriteIntegrationsEndpoints,\n        onEdit,\n        onDelete,\n        onEnable: integrationRows.onEnable\n    });\n\n    const closeFormModal = React.useCallback((saved: boolean) => {\n        const query = integrationsQuery.query;\n        dispatchModalIsOpen(makeNoneAction());\n        if (saved) {\n            query();\n        }\n    }, [ dispatchModalIsOpen, integrationsQuery.query ]);\n\n    const closeDeleteModal = React.useCallback((deleted: boolean) => {\n        const query = integrationsQuery.query;\n        if (deleted) {\n            query();\n        }\n\n        dispatchDeleteModal(useDeleteModalReducer.makeNoneAction());\n    }, [ dispatchDeleteModal, integrationsQuery.query ]);\n\n    // This is an estimate of how many rows are in the next page (Won't be always correct because a new row could be added while we are browsing)\n    // Is used for the skeleton loading\n    const loadingCount = Math.min(pageData.page.size, integrations.count - (pageData.page.index - 1) * pageData.page.size)  || 10;\n\n    return (\n        <>\n            <PageHeader>\n                <PageHeaderTitle title={ Messages.pages.integrations.list.title } />\n            </PageHeader>\n            <Main>\n                <Section className='pf-c-page__main-section pf-m-light'>\n                    <IntegrationsToolbar\n                        onAddIntegration={ canWriteIntegrationsEndpoints ? onAddIntegrationClicked : undefined }\n                        onExport={ onExport }\n                        filters={ integrationFilter.filters }\n                        setFilters={ integrationFilter.setFilters }\n                        clearFilters={ integrationFilter.clearFilter }\n                        count={ integrations.count || 0 }\n                        pageCount={ integrations.data.length }\n                        page={ pageData.page.index }\n                        perPage={ pageData.page.size }\n                        pageChanged={ pageData.changePage }\n                        perPageChanged={ pageData.changeItemsPerPage }\n                    >\n                        <IntegrationsTable\n                            isLoading={ integrationsQuery.loading }\n                            loadingCount={ loadingCount }\n                            integrations={ integrationRows.rows }\n                            onCollapse={ integrationRows.onCollapse }\n                            onEnable={ canWriteIntegrationsEndpoints ? integrationRows.onEnable : undefined }\n                            actionResolver={ actionResolver }\n                        />\n                    </IntegrationsToolbar>\n                    { modalIsOpenState.isOpen && (\n                        <CreatePage\n                            isEdit={ modalIsOpenState.isEdit }\n                            initialIntegration={ modalIsOpenState.template || {} }\n                            onClose={ closeFormModal }\n                        />\n                    ) }\n                    { deleteModalState.integration && (\n                        <IntegrationDeleteModalPage\n                            onClose={ closeDeleteModal }\n                            integration={ deleteModalState.integration }\n                        />\n                    )}\n                </Section>\n            </Main>\n        </>\n    );\n};\n","import { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const getApplicationsAction = (bundleName: string) => Operations.NotificationServiceGetApplicationsFacets.actionCreator({\n    bundleName\n});\n\nexport const useGetApplications = () => useParameterizedQuery(getApplicationsAction);\n","export default __webpack_public_path__ + \"fonts/WebhookIcon.svg\";","import { SVGIconProps } from '@patternfly/react-icons/dist/js/createIcon';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport icon from './WebhookIcon.svg';\nconst className = style({\n    verticalAlign: '-0.125em',\n    width: '1em',\n    height: '1em'\n});\n\nexport const WebhookIcon: React.FunctionComponent<SVGIconProps> = () => {\n    return (\n        <img className={ className } src={ icon } />\n    );\n};\n","import { Spinner } from '@patternfly/react-core';\nimport { EnvelopeIcon } from '@patternfly/react-icons';\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { Messages } from '../../properties/Messages';\nimport { Action, NotificationType } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { WebhookIcon } from '../Icons/WebhookIcon';\n\nexport interface ActionComponentText extends OuiaComponentProps{\n    isDefault: boolean;\n    action: Action | undefined;\n    loading?: boolean;\n    hasError?: boolean;\n}\n\ninterface ActionTypeToIconProps {\n    actionType: NotificationType;\n}\n\nconst marginLeftClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst grayFontClassName = style({\n    color: '#888'\n});\n\nconst ActionTypeToIcon: React.FunctionComponent<ActionTypeToIconProps> = (props) => {\n    switch (props.actionType) {\n        case NotificationType.DRAWER:\n            return <BellIcon />;\n        case NotificationType.EMAIL_SUBSCRIPTION:\n            return <EnvelopeIcon />;\n        case NotificationType.INTEGRATION:\n            return <WebhookIcon />;\n        default:\n            assertNever(props.actionType);\n    }\n};\n\nconst ActionComponentWrapper: React.FunctionComponent<ActionComponentText> = (props) => (\n    <div { ...getOuiaProps('Notifications/ActionComponent', props) }>\n        { props.children }\n    </div>\n);\n\nexport const ActionComponent: React.FunctionComponent<ActionComponentText> = (props) => {\n\n    if (props.loading) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <Spinner size=\"md\" />\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (props.hasError) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span>Error loading actions</span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (props.isDefault) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span>Default behavior</span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (!props.action) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span className={ grayFontClassName }>\n                    <div>No actions.</div>\n                    <div>Users will not be notified.</div>\n                </span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    return (\n        <ActionComponentWrapper { ...props }>\n            <ActionTypeToIcon actionType={ props.action.type } />\n            <span className={ marginLeftClassName }>{ Messages.components.notifications.types[props.action.type] }</span>\n            { props.action.type === NotificationType.INTEGRATION && (\n                <span>: { Messages.components.integrations.integrationType[props.action.integration.type] }</span>\n            ) }\n        </ActionComponentWrapper>\n    );\n};\n","import { Label, Tooltip } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { Action, NotificationType } from '../../types/Notification';\n\ninterface RecipientProps {\n    action: Action;\n    hasOutline?: boolean;\n}\n\nconst disabledLabelClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nexport const Recipient: React.FunctionComponent<RecipientProps> = (props) => {\n    if (props.action.type === NotificationType.INTEGRATION) {\n        return (\n            <>\n                <span>{ props.action.integration.name }</span>\n                { !props.action.integration.isEnabled && (\n                    <>\n                        <Tooltip content=\"This integration has been disabled. This action wil not fire until it is enabled.\" position=\"bottom\">\n                            <Label variant={ props.hasOutline ? 'outline' : 'filled' } className={ disabledLabelClassName }>Disabled</Label>\n                        </Tooltip>\n                    </>\n                )}\n            </>\n        );\n    }\n\n    return <span>All registered users</span>;\n};\n","import { Button, ButtonVariant, Skeleton } from '@patternfly/react-core';\nimport {\n    c_skeleton_BackgroundColor, global_FontSize_sm, global_palette_black_300, global_spacer_md, global_spacer_xs\n} from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { cssRaw, style } from 'typestyle';\n\nimport { DefaultNotificationBehavior } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ActionComponent } from './ActionComponent';\nimport { Recipient } from './Recipient';\n\nexport interface DefaultBehaviorProps extends OuiaComponentProps {\n    defaultBehavior?: DefaultNotificationBehavior;\n    onEdit?: () => void;\n    loading: boolean;\n}\n\ncssRaw(`\n    table.withDark300Skeleton .pf-c-skeleton {\n        ${c_skeleton_BackgroundColor.name}: ${global_palette_black_300.var} \n    }\n`);\n\nconst contentClassName = style({\n    backgroundColor: '#f0f0f0',\n    paddingTop: global_spacer_md.var,\n    paddingBottom: global_spacer_md.var,\n    paddingLeft: global_spacer_md.var,\n    paddingRight: global_spacer_md.var\n});\n\nconst tableClassName = style({\n    paddingTop: global_spacer_md.var,\n    display: 'block',\n    $nest: {\n        '& td, & th': {\n            paddingTop: global_spacer_xs.var,\n            paddingBottom: global_spacer_xs.var,\n            paddingLeft: global_spacer_md.var,\n            paddingRight: global_spacer_md.var,\n            fontSize: global_FontSize_sm.var\n        },\n        '& td:first-child, & th:first-child': {\n            paddingLeft: 0\n        },\n        '& thead:first-child th': {\n            paddingTop: 0\n        }\n    }\n});\n\nconst titleClassName = style({\n    fontWeight: 600\n});\n\nexport const DefaultBehavior: React.FunctionComponent<DefaultBehaviorProps> = (props) => {\n    return (\n        <div { ...getOuiaProps('Notifications/DefaultBehavior', props) } className={ contentClassName } >\n            <div className={ titleClassName }>\n                Default behavior <Button onClick={ props.onEdit } isDisabled={ !props.onEdit } variant={ ButtonVariant.link }>Edit defaults</Button>\n            </div>\n            <div>Default behavior applies to all notifications in a bundle. You can override this default for any specific event type.</div>\n            <table className={ `${tableClassName} withDark300Skeleton` }>\n                <thead>\n                    <tr>\n                        <th>Action</th>\n                        <th>Recipient</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { props.loading ? (\n                        <>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                        </>\n                    ) : props.defaultBehavior === undefined ? (\n                        <tr><td>Error while loading the default behavior. </td></tr>\n                    ) : (\n                        props.defaultBehavior?.actions.map((a, index) => {\n                            return (\n                                <tr key={ index }>\n                                    <td><ActionComponent isDefault={ false } action={ a } /></td>\n                                    <td> <Recipient action={ a } hasOutline /></td>\n                                </tr>\n                            );\n                        })\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","export enum GroupByEnum {\n    Application = 'application',\n    None = 'none'\n}\n","import './Table.scss';\n\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport {\n    expandable,\n    ICell,\n    IRow,\n    IRowData,\n    RowWrapperProps,\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table';\nimport { global_spacer_md, global_spacer_sm } from '@patternfly/react-tokens';\nimport { joinClasses, OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\nimport { cssRaw, style } from 'typestyle';\n\nimport { Messages } from '../../properties/Messages';\nimport { Notification } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ActionComponent } from './ActionComponent';\nimport { Recipient } from './Recipient';\nimport { GroupByEnum } from './Types';\n\nconst pfBorderBottomClassName = style({\n    borderBottom: 'var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)'\n});\n\nconst noBorderBottom = style({\n    borderBottom: 'none !important'\n});\n\nconst cellPaddingBottom = style({\n    paddingBottom: '0 !important'\n});\n\nconst actionCellStyle = style({\n    paddingLeft: `${global_spacer_md.var} !important`\n});\n\nconst cellPaddingBottomStyle = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    '--pf-c-table__expandable-row-content--PaddingBottom': '0'\n} as any;\n\nconst cellPaddingTop = style({\n    paddingTop: `${global_spacer_sm.var} !important`\n} as any);\n\nconst cellPaddingTopStyle = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    '--pf-c-table__expandable-row-content--PaddingTop': '0'\n} as any;\n\nconst grayFontClassName = style({\n    color: '#888'\n});\n\nconst noExpandableBorderClassName = style({\n    $nest: {\n        '&:after': {\n            borderLeft: 'none !important',\n            paddingBottom: '0 !important'\n        }\n    }\n});\n\nconst componentClassName = 'notification-table';\n\ncssRaw(`\n.${componentClassName} table {\n    --pf-c-table--m-compact__expandable-row-content--PaddingTop: ${global_spacer_sm.var};\n    --pf-c-table--m-compact__expandable-row-content--PaddingBottom: ${global_spacer_sm.var};\n}\n`);\n\nconst applicationGroupClassName = style({\n    fontWeight: 600\n});\n\nconst columns: Array<ICell> = [\n    {\n        title: Messages.components.notifications.table.columns.event,\n        transforms: [ ],\n        cellFormatters: [ expandable ]\n    },\n    {\n        title: Messages.components.notifications.table.columns.action,\n        transforms: []\n    },\n    {\n        title: Messages.components.notifications.table.columns.recipient,\n        transforms: []\n    },\n    {\n        title: ''\n    }\n];\n\nexport interface NotificationsTableProps extends OuiaComponentProps {\n    notifications: NotificationRows;\n    onCollapse: (index: number, isOpen: boolean) => void;\n    onEdit?: OnEditNotification;\n}\n\ntype NotificationRowBase = {\n    loadingActionStatus: 'loading' | 'done' | 'error';\n}\n\nexport type NotificationRowGroupedByNone = Notification & NotificationRowBase;\n\nexport interface NotificationRowGroupedByApplication {\n    applicationDisplayName: string;\n    notifications: Array<NotificationRowGroupedByNone>;\n    isOpen: boolean;\n}\n\nexport type NotificationRows = {\n    grouped: GroupByEnum.Application;\n    data: Array<NotificationRowGroupedByApplication>;\n} | {\n    grouped: GroupByEnum.None;\n    data: Array<NotificationRowGroupedByNone>;\n}\n\nexport type OnEditNotification = (notification: Notification) => void;\n\ninterface EventCellProps {\n    eventTypeDisplayName: string;\n    applicationDisplayName: string;\n}\n\nconst EventCell: React.FunctionComponent<EventCellProps> = (props) => (\n    <>\n        <div> { props.eventTypeDisplayName } </div>\n        <div className={ grayFontClassName }> { props.applicationDisplayName } </div>\n    </>\n);\n\nconst RowWrapper: React.FunctionComponent<RowWrapperProps> = (props) => {\n    const { trRef, className, rowProps, row, ...rest } = props;\n    if (!row) {\n        return <></>;\n    }\n\n    const rowClassName = (row as any).props?.className ? (row as any).props.className : '';\n\n    return (\n        <tr\n            { ...rest }\n            ref={ trRef as any }\n            className={ css(\n                className,\n                row.isExpanded !== undefined && styles.tableExpandableRow,\n                row.isExpanded && styles.modifiers.expanded,\n                rowClassName\n            ) }\n            hidden={ row?.isExpanded !== undefined && !row.isExpanded }\n        >\n            { props.children }\n        </tr>\n    );\n};\n\nconst toTableRowsGroupedByNone = (notifications: Array<NotificationRowGroupedByNone>, onEdit?: OnEditNotification, parent?: number) => {\n    return notifications.reduce((rows, notification) => {\n        const rowSpan = Math.max(1, notification.useDefault ? 1 : notification.actions?.length ?? 0);\n        const firstAction = notification.actions?.length ? notification.actions[0] : undefined;\n\n        rows.push({\n            id: `${parent !== undefined ? (parent.toString() + '-') : ''}${notification.id}`,\n            key: `${parent !== undefined ? (parent.toString() + '-') : ''}${notification.id}`,\n            cells: [\n                {\n                    title: <EventCell\n                        applicationDisplayName={ notification.applicationDisplayName }\n                        eventTypeDisplayName={ notification.eventTypeDisplayName }\n                    />,\n                    props: {\n                        rowSpan,\n                        className: joinClasses(\n                            noExpandableBorderClassName,\n                            pfBorderBottomClassName\n                        ),\n                        colSpan: parent === undefined ? 1 : 2\n                    }\n                },\n                {\n                    title: <><span><ActionComponent\n                        isDefault={ !!notification.useDefault }\n                        action={ firstAction }\n                        loading={ notification.loadingActionStatus === 'loading' }\n                        hasError={ notification.loadingActionStatus === 'error' }\n                    /></span></>,\n                    props: {\n                        className: joinClasses(actionCellStyle, cellPaddingBottom),\n                        style: cellPaddingBottomStyle\n                    }\n                },\n                {\n                    title: <><span>{ firstAction && <Recipient action={ firstAction } /> }</span></>,\n                    props: {\n                        className: cellPaddingBottom,\n                        style: cellPaddingBottomStyle\n                    }\n                },\n                {\n                    title: <><Button\n                        onClick={ () => onEdit && onEdit(notification) } isDisabled={ !onEdit }\n                        variant={ ButtonVariant.link }>Edit</Button></>,\n                    props: {\n                        className: cellPaddingBottom,\n                        style: cellPaddingBottomStyle\n                    }\n                }\n            ],\n            props: {\n                className: notification.actions?.length && notification.actions.length > 1 ? noBorderBottom : ''\n            }\n        });\n\n        if (parent !== undefined) {\n            rows[rows.length - 1].parent = parent;\n            rows[rows.length - 1].fullWidth = true;\n        }\n\n        for (let i = 1; i < rowSpan; ++i) {\n            if (notification.actions === undefined || notification.actions[i] === undefined) {\n                throw new Error(`Undefined notification.actions at index ${i}. ${notification.actions}`);\n            }\n\n            const classNames = joinClasses(\n                (i + 1 === rowSpan ? '' : cellPaddingBottom),\n                cellPaddingTop\n            );\n            const id = `${notification.id}-action-${i}`;\n            const cssStyle = {\n                ...cellPaddingTopStyle,\n                ...(i + 1 === rowSpan ? {} : cellPaddingBottomStyle)\n            };\n            rows.push({\n                id: `${parent !== undefined ? (parent.toString() + '-') : ''}${id}`,\n                key: `${parent !== undefined ? (parent.toString() + '-') : ''}${id}`,\n                cells: [\n                    {\n                        title: <ActionComponent\n                            isDefault={ !!notification.useDefault }\n                            action={ notification.actions[i] }\n                            loading={ notification.loadingActionStatus === 'loading' }\n                            hasError={ notification.loadingActionStatus === 'error' }\n                        />,\n                        props: {\n                            className: joinClasses(\n                                noExpandableBorderClassName,\n                                classNames,\n                                actionCellStyle\n                            ),\n                            style: cssStyle\n                        }\n                    },\n                    {\n                        title: <Recipient action={ notification.actions[i] } />,\n                        props: {\n                            className: classNames,\n                            style: cssStyle\n                        }\n                    },\n                    {\n                        props: {\n                            className: classNames,\n                            style: cssStyle\n                        }\n                    }\n                ],\n                props: {\n                    className: (i + 1 === rowSpan ? '' : noBorderBottom)\n                }\n            });\n\n            if (parent !== undefined) {\n                rows[rows.length - 1].parent = parent;\n                rows[rows.length - 1].fullWidth = true;\n            }\n        }\n\n        return rows;\n    }, [] as Array<IRow>);\n};\n\nconst toTableRowsGroupedByApplication = (applicationGroups: Array<NotificationRowGroupedByApplication>, onEdit?: OnEditNotification): Array<IRow> =>\n    applicationGroups.reduce((rows, applicationGroup) => {\n        rows.push({\n            id: applicationGroup.applicationDisplayName,\n            key: applicationGroup.applicationDisplayName,\n            cells: [\n                {\n                    title: <span className={ applicationGroupClassName }> Application: { applicationGroup.applicationDisplayName }</span>,\n                    props: {\n                        className: noExpandableBorderClassName\n                    }\n                },\n                {\n                    title: '',\n                    props: {\n                        colSpan: columns.length - 1\n                    }\n                }\n            ],\n            isOpen: applicationGroup.isOpen\n        });\n\n        rows.push(...toTableRowsGroupedByNone(applicationGroup.notifications, onEdit, rows.length - 1));\n\n        return rows;\n    }, [] as Array<IRow>);\n\nexport const NotificationsTable: React.FunctionComponent<NotificationsTableProps> = (props) => {\n\n    const rows = React.useMemo(() => {\n        const notifications = props.notifications;\n        switch (notifications.grouped) {\n            case GroupByEnum.Application:\n                return toTableRowsGroupedByApplication(notifications.data, props.onEdit);\n            case GroupByEnum.None:\n                return toTableRowsGroupedByNone(notifications.data, props.onEdit);\n            default:\n                assertNever(notifications);\n        }\n\n    }, [ props.notifications, props.onEdit ]);\n\n    const onCollapseHandler = React.useCallback((_event, _index: number, isOpen: boolean, data: IRowData) => {\n        const notifications = props.notifications;\n        const onCollapse = props.onCollapse;\n\n        if (notifications.grouped === GroupByEnum.None) {\n            throw new Error('Invalid group None for CollapseHandler');\n        }\n\n        const index = notifications.data.findIndex(n => n.applicationDisplayName === data.id);\n        if (onCollapse && index !== undefined && index !== -1) {\n            onCollapse(index, isOpen);\n        }\n\n    }, [ props.onCollapse, props.notifications ]);\n\n    return (\n        <div { ...getOuiaProps('Notifications/Table', props) } className={ componentClassName }>\n            <Table\n                aria-label={ Messages.components.notifications.table.title }\n                rows={ rows }\n                cells={ columns }\n                onCollapse={ onCollapseHandler }\n                rowWrapper={ RowWrapper as (props: RowWrapperProps) => React.ReactElement }\n                variant=\"compact\"\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>\n        </div>\n    );\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum NotificationFilterColumn {\n    NAME = 'name',\n    APPLICATION = 'application',\n    ACTION = 'action'\n}\n\nexport type NotificationFilters = Filters<typeof NotificationFilterColumn>;\nexport type SetNotificationFilters = SetFilters<typeof NotificationFilterColumn>;\nexport type ClearNotificationFilters = ClearFilters<typeof NotificationFilterColumn>;\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport camelcase from 'camelcase';\nimport * as React from 'react';\n\nimport { GroupByEnum } from '../Types';\n\nexport interface GroupByProps {\n    groupBy: (selected: GroupByEnum) => void;\n    selected: GroupByEnum;\n}\n\nexport const GroupBy: React.FunctionComponent<GroupByProps> = (props) => {\n    const items = [\n        <DropdownItem data-group-by={ GroupByEnum.Application } key=\"application\">Application</DropdownItem>,\n        <DropdownItem data-group-by={ GroupByEnum.None } key=\"none\">None</DropdownItem>\n    ];\n\n    const [ isOpen, setOpen ] = React.useState<boolean>(false);\n\n    const onSelect = React.useCallback((event) => {\n        const groupBy = props.groupBy;\n        const selected = props.selected;\n\n        if (event.target.dataset.groupBy !== selected) {\n            switch (event.target.dataset.groupBy) {\n                case GroupByEnum.Application:\n                    groupBy(GroupByEnum.Application);\n                    break;\n                case GroupByEnum.None:\n                    groupBy(GroupByEnum.None);\n                    break;\n            }\n        }\n\n        setOpen(false);\n    }, [ props.groupBy, props.selected ]);\n\n    const onToggle = React.useCallback((shouldBeOpen) => {\n        setOpen(shouldBeOpen);\n    }, [ setOpen ]);\n\n    const content = React.useMemo(() => {\n        return `Group by: ${camelcase(props.selected, {\n            pascalCase: true\n        })}`;\n    }, [ props.selected ]);\n\n    return (\n        <Dropdown\n            onSelect={ onSelect }\n            isOpen={ isOpen }\n            toggle={ <DropdownToggle\n                id=\"group-by-dropdown-toggle\"\n                toggleIndicator={ CaretDownIcon }\n                onToggle={ onToggle }\n            >\n                { content }\n            </DropdownToggle> }\n            dropdownItems={ items }\n        />\n    );\n};\n","import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ColumnsMetada,\n    ExporterType,\n    getInsights,\n    OuiaComponentProps,\n    useInsightsEnvironmentFlag,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\n\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { stagingBetaAndProdBetaEnvironment } from '../../types/Environments';\nimport { Facet } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport {\n    ClearNotificationFilters,\n    NotificationFilterColumn,\n    NotificationFilters,\n    SetNotificationFilters\n} from './Filter';\nimport { GroupBy } from './Table/GroupBy';\nimport { GroupByEnum } from './Types';\n\ninterface NotificationsToolbarProps extends OuiaComponentProps {\n    filters: NotificationFilters;\n    setFilters: SetNotificationFilters;\n    clearFilter: ClearNotificationFilters;\n\n    appFilterOptions: Array<Facet>;\n\n    groupBy: GroupByEnum;\n    onGroupBySelected: (selected: GroupByEnum) => void;\n\n    onExport: (type: ExporterType) => void;\n}\n\nexport const NotificationsToolbar: React.FunctionComponent<NotificationsToolbarProps> = (props) => {\n\n    const filterMetadata = useMemo<ColumnsMetada<typeof NotificationFilterColumn>>(() => {\n\n        const appFilterItems = props.appFilterOptions.map(a => ({\n            value: a.displayName,\n            label: <> {a.displayName}</>\n        }));\n\n        return {\n            [NotificationFilterColumn.NAME]: {\n                label: 'Event type',\n                placeholder: 'Filter by event type'\n            },\n            [NotificationFilterColumn.APPLICATION]: {\n                label: 'Application',\n                placeholder: 'Filter by application',\n                options: {\n                    exclusive: false,\n                    default: [] as any,\n                    items: appFilterItems\n                }\n            },\n            [NotificationFilterColumn.ACTION]: {\n                label: 'Action',\n                placeholder: 'Filter by action'\n            }\n        };\n    }, [ props.appFilterOptions ]);\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        NotificationFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilter,\n        filterMetadata\n    );\n\n    const exportConfigInternal = useTableExportConfig(props.onExport);\n\n    const filterConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.filterConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const activeFiltersConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.activeFiltersConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const exportConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingBetaAndProdBetaEnvironment,\n        undefined,\n        useCallback(() => exportConfigInternal, [ exportConfigInternal ])\n    );\n\n    return (\n        <div { ...getOuiaProps('Notifications/DualToolbar', props) }>\n            <PrimaryToolbar\n                filterConfig={ filterConfig }\n                activeFiltersConfig={ activeFiltersConfig }\n                dedicatedAction={ <GroupBy selected={ props.groupBy } groupBy={ props.onGroupBySelected } /> }\n                exportConfig={ exportConfig }\n            />\n            { props.children }\n            <PrimaryToolbar />\n        </div>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiNotifications';\nimport { toActions } from '../types/adapters/NotificationAdapter';\n\nexport const defaultNotificationBehaviorCreator = () => Operations.NotificationServiceGetEndpointsForDefaults.actionCreator();\n\nexport const defaultNotificationsDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetEndpointsForDefaults.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'DefaultNotificationBehavior',\n            200,\n            {\n                actions: toActions(payload.value)\n            },\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useDefaultNotificationBehavior = () => useTransformQueryResponse(\n    useQuery(defaultNotificationBehaviorCreator()),\n    defaultNotificationsDecoder\n);\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Schemas } from '../generated/OpenapiIntegrations';\nimport { Operations } from '../generated/OpenapiNotifications';\nimport { toNotifications } from '../types/adapters/NotificationAdapter';\n\nexport const listNotificationsActionCreator = (pager?: Page) => {\n    const query = (pager ?? Page.defaultPage()).toQuery();\n    return Operations.NotificationServiceGetEventTypes.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        applicationIds: query.filterApplicationId as unknown as Array<Schemas.UUID>,\n        bundleId: query.filterBundleId as unknown as string\n    });\n};\n\nconst decoder = validationResponseTransformer((payload: Operations.NotificationServiceGetEventTypes.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'eventTypesArray',\n            200,\n            toNotifications(payload.value),\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useListNotifications = (pager?: Page) => useTransformQueryResponse(\n    useQuery(listNotificationsActionCreator(pager)),\n    decoder\n);\n","import * as Yup from 'yup';\n\nimport { NotificationType } from '../../types/Notification';\n\nconst ActionIntegration = Yup.object({\n    type: Yup.mixed().oneOf([ NotificationType.INTEGRATION ]).required(),\n    integration: Yup.object({\n        id: Yup.string().required()\n    }).required(),\n    integrationId: Yup.string().min(1)\n});\n\nconst ActionNotify = Yup.object({\n    type: Yup.mixed().oneOf([ NotificationType.EMAIL_SUBSCRIPTION /*, NotificationType.DRAWER */ ]).required(),\n    recipient: Yup.array(Yup.string()).min(0),\n    integrationId: Yup.string().min(0)\n});\n\nexport const WithActions = Yup.object({\n    actions: Yup.array(Yup.lazy(obj => {\n        if ((obj as any).hasOwnProperty('type')) {\n            if ((obj as any).type === NotificationType.INTEGRATION) {\n                return ActionIntegration;\n            }\n        }\n\n        return ActionNotify;\n    }))\n});\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { Messages } from '../../../properties/Messages';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { NotificationType } from '../../../types/Notification';\n\ntype ActionTypeOrIntegration = {\n    kind: 'integration';\n    type: UserIntegrationType;\n} | {\n    kind: 'notification';\n    type: NotificationType;\n}\n\nexport class ActionOption implements SelectOptionObject {\n    readonly integrationType: UserIntegrationType | undefined;\n    readonly notificationType: NotificationType;\n\n    constructor(type: ActionTypeOrIntegration) {\n        if (type.kind === 'integration') {\n            this.notificationType = NotificationType.INTEGRATION;\n            this.integrationType = type.type;\n        } else {\n            this.notificationType = type.type;\n            this.integrationType = undefined;\n        }\n    }\n\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof ActionOption) {\n            return selectOption.notificationType === this.notificationType && selectOption.integrationType === this.integrationType;\n        }\n\n        return false;\n    }\n\n    toString(): string {\n        const actionName = Messages.components.notifications.types[this.notificationType];\n        if (this.integrationType) {\n            const integrationName = Messages.components.integrations.integrationType[this.integrationType];\n            return `${actionName}: ${integrationName}`;\n        }\n\n        return actionName;\n    }\n}\n","import { Select, SelectOption, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { getInsights, OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { isStagingBetaOrProdBeta } from '../../../types/Environments';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { Action, ActionNotify, NotificationType } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ActionOption } from './ActionOption';\n\nconst getSelectOptions = () => [\n    ...([ NotificationType.DRAWER, NotificationType.EMAIL_SUBSCRIPTION ] as Array<ActionNotify['type']>)\n    .map(type => new ActionOption({\n        kind: 'notification',\n        type\n    })),\n    ...[ UserIntegrationType.WEBHOOK ].map(type => new ActionOption({\n        kind: 'integration',\n        type\n    }))\n];\n\nexport interface ActionTypeaheadProps extends OuiaComponentProps {\n    action: Action;\n    isDisabled?: boolean;\n    onSelected: (actionOption: ActionOption) => void;\n}\n\nexport const ActionTypeahead: React.FunctionComponent<ActionTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const toggle = React.useCallback(() => {\n        setOpen(prev => !prev);\n    }, [ setOpen ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const actionSelected = props.onSelected;\n        if (value instanceof ActionOption) {\n            actionSelected(value);\n            setOpen(false);\n        }\n\n    }, [ props.onSelected, setOpen ]);\n\n    const selectedOption = React.useMemo(() => {\n        if (props.action.type === NotificationType.INTEGRATION) {\n            return new ActionOption({\n                kind: 'integration',\n                type: props.action.integration.type\n            });\n        }\n\n        return new ActionOption({\n            kind: 'notification',\n            type: props.action.type\n        });\n    }, [ props.action ]);\n\n    const hideNonWebhooks = isStagingBetaOrProdBeta(getInsights());\n\n    return (\n        <div { ...getOuiaProps('ActionTypeahead', props) } >\n            <Select\n                variant={ SelectVariant.typeahead }\n                typeAheadAriaLabel=\"Select an action type\"\n                selections={ selectedOption }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onSelect={ onSelect }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n            >\n                { getSelectOptions()\n                .filter((o) => !hideNonWebhooks\n                    || o.notificationType === NotificationType.INTEGRATION)\n                .map(o => <SelectOption key={ o.toString() } value={ o } />) }\n            </Select>\n        </div>\n    );\n};\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { IntegrationRef } from '../../../types/Notification';\n\nexport class RecipientOption implements SelectOptionObject {\n    readonly recipientOrIntegration: string | IntegrationRef;\n\n    constructor(recipientOrIntegration: string | IntegrationRef) {\n        this.recipientOrIntegration = recipientOrIntegration;\n    }\n\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof RecipientOption && typeof selectOption.recipientOrIntegration === typeof this.recipientOrIntegration) {\n            if (typeof selectOption.recipientOrIntegration === 'string') {\n                return selectOption.recipientOrIntegration === this.recipientOrIntegration;\n            } else {\n                return selectOption.recipientOrIntegration.id === (this.recipientOrIntegration as IntegrationRef).id;\n            }\n        }\n\n        return false;\n    }\n\n    toString(): string {\n        if (typeof this.recipientOrIntegration === 'string') {\n            return this.recipientOrIntegration;\n        } else {\n            const postfix = this.recipientOrIntegration.isEnabled ? '' : ' - Disabled';\n            return `${this.recipientOrIntegration.name}${postfix}`;\n        }\n    }\n}\n","import { SelectOption } from '@patternfly/react-core';\nimport assertNever from 'assert-never';\nimport * as React from 'react';\n\nimport { IntegrationRef } from '../../../types/Notification';\nimport { RecipientOption } from './RecipientOption';\nimport { ReducerState } from './useTypeaheadReducer';\n\nconst mapper = <T extends IntegrationRef>(r: T | string) =>\n    <SelectOption key={ typeof r === 'string' ? r : r.id } value={ new RecipientOption(r) } />;\n\nexport const useRecipientOptionMemo = <T extends IntegrationRef>(state: ReducerState<T | string>) => {\n    return React.useMemo(() => {\n        if (state.show === 'default') {\n            if (state.loadingDefault) {\n                return [ <SelectOption\n                    key=\"loading-option\"\n                    isNoResultsOption={ true }\n                    value=\"Loading...\"\n                /> ];\n            } else {\n                return state.defaultValues.map(mapper);\n            }\n        } else if (state.show === 'filter') {\n            if (state.loadingFilter) {\n                return [ <SelectOption\n                    key=\"loading-option\"\n                    isNoResultsOption={ true }\n                    value=\"Loading...\"\n                /> ];\n            } else {\n                return state.filterValues.map(mapper);\n            }\n        }\n\n        assertNever(state.show);\n    }, [ state ]);\n};\n","import assertNever from 'assert-never';\nimport { Reducer, useCallback, useMemo, useReducer } from 'react';\n\nexport interface ReducerState<T> {\n    filterValues: Array<T>;\n    defaultValues: Array<T>;\n    show: 'default' | 'filter';\n    loadingFilter: boolean;\n    loadingDefault: boolean;\n    lastSearch: string;\n}\n\nenum ReducerActionType {\n    LOAD_FILTER_VALUE,\n    SET_FILTER_VALUE,\n    USE_DEFAULTS,\n    SET_DEFAULTS\n}\n\ntype ReducerAction<T> = {\n    type: ReducerActionType.USE_DEFAULTS;\n} | {\n    type: ReducerActionType.LOAD_FILTER_VALUE;\n    search: string;\n} | {\n    type: ReducerActionType.SET_FILTER_VALUE;\n    search: string;\n    values: Array<T>;\n} | {\n    type: ReducerActionType.SET_DEFAULTS;\n    values: Array<T>;\n}\n\nconst reducerFunction = <T>(state: ReducerState<T>, action: ReducerAction<T>): ReducerState<T> => {\n    switch (action.type) {\n        case ReducerActionType.SET_FILTER_VALUE:\n            if (action.search === state.lastSearch) {\n                if (action.values === state.filterValues) {\n                    return state;\n                }\n\n                return {\n                    ...state,\n                    loadingFilter: false,\n                    filterValues: action.values\n                };\n            }\n\n            return state;\n        case ReducerActionType.LOAD_FILTER_VALUE:\n            if (action.search !== state.lastSearch || state.show !== 'filter') {\n                return {\n                    ...state,\n                    loadingFilter: true,\n                    filterValues: [],\n                    lastSearch: action.search,\n                    show: 'filter'\n                };\n            }\n\n            return state;\n        case ReducerActionType.USE_DEFAULTS:\n            if (state.show !== 'default') {\n                return {\n                    ...state,\n                    show: 'default'\n                };\n            }\n\n            return state;\n        case ReducerActionType.SET_DEFAULTS:\n            return {\n                ...state,\n                defaultValues: action.values,\n                loadingDefault: false\n            };\n        default:\n            assertNever(action);\n    }\n};\n\nexport const useTypeaheadReducer = <T>() => {\n    const [ state, dispatch ] = useReducer<Reducer<ReducerState<T>, ReducerAction<T>>>(reducerFunction, {\n        filterValues: [],\n        defaultValues: [],\n        show: 'default',\n        loadingFilter: false,\n        loadingDefault: true,\n        lastSearch: ''\n    } as ReducerState<T>);\n\n    const setFilterValue = useCallback((search: string, values: Array<T>) => dispatch({\n        type: ReducerActionType.SET_FILTER_VALUE,\n        values,\n        search\n    }), [ dispatch ]);\n\n    const loadFilterValue = useCallback((search: string) => dispatch({\n        type: ReducerActionType.LOAD_FILTER_VALUE,\n        search\n    }), [ dispatch ]);\n\n    const setDefaults = useCallback((values: Array<T>) => dispatch({\n        type: ReducerActionType.SET_DEFAULTS,\n        values\n    }), [ dispatch ]);\n\n    const useDefaults = useCallback(() => dispatch({\n        type: ReducerActionType.USE_DEFAULTS\n    }), [ dispatch ]);\n\n    const dispatchers = useMemo(() => ({\n        setFilterValue,\n        loadFilterValue,\n        setDefaults,\n        useDefaults\n    }), [ setFilterValue, loadFilterValue, setDefaults, useDefaults ]);\n\n    return [ state, dispatchers ] as [ typeof state, typeof dispatchers ];\n};\n","import { Select, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationRef } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface IntegrationRecipientTypeaheadProps extends OuiaComponentProps {\n    selected: Partial<IntegrationRef> | undefined;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    integrationType: UserIntegrationType;\n    isDisabled?: boolean;\n    onSelected: (recipientOption: RecipientOption) => void;\n}\n\nexport const IntegrationRecipientTypeahead: React.FunctionComponent<IntegrationRecipientTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const [ state, dispatchers ] = useTypeaheadReducer<IntegrationRef>();\n\n    const toggle = React.useCallback((isOpen: boolean) => {\n        setOpen(isOpen);\n    }, [ setOpen ]);\n\n    React.useEffect(() => {\n        const getIntegrations = props.getIntegrations;\n        getIntegrations(props.integrationType, '').then(integrations => dispatchers.setDefaults(integrations));\n    }, [ props.getIntegrations, props.integrationType, dispatchers ]);\n\n    React.useEffect(() => {\n        const getIntegrations = props.getIntegrations;\n        if (state.loadingFilter) {\n            getIntegrations(props.integrationType, state.lastSearch).then(integrations => dispatchers.setFilterValue(\n                state.lastSearch,\n                integrations\n            ));\n        }\n    }, [ props.getIntegrations, props.integrationType, state.loadingFilter, state.lastSearch, dispatchers ]);\n\n    const options = useRecipientOptionMemo(state);\n\n    const onFilter = React.useCallback((e: React.ChangeEvent<HTMLInputElement> | null) => {\n        // Ignore filter calls with null event\n        if (e === null) {\n            return options;\n        }\n\n        const search = e.target.value?.trim();\n        if (search === '') {\n            dispatchers.useDefaults();\n        } else {\n            dispatchers.loadFilterValue(search);\n        }\n\n        return options;\n    }, [ dispatchers, options ]);\n\n    const selection = React.useMemo(() => {\n        const sel = props.selected;\n        if (sel === undefined || sel.name === undefined || sel.id === undefined || sel.type === undefined) {\n            return undefined;\n        }\n\n        return new RecipientOption(sel as IntegrationRef);\n    }, [ props.selected ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const integrationSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n            integrationSelected(value);\n            setOpen(false);\n        }\n    }, [ props.onSelected ]);\n\n    return (\n        <div { ...getOuiaProps('IntegrationRecipientTypeahead', props) }>\n            <Select\n                variant={ SelectVariant.typeahead }\n                typeAheadAriaLabel=\"Choose webhook\"\n                placeholderText=\"Choose webhook\"\n                selections={ selection }\n                onSelect={ onSelect }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onFilter={ onFilter }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n            >\n                { options }\n            </Select>\n        </div>\n    );\n};\n","import { Select, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface RecipientTypeaheadProps extends OuiaComponentProps {\n    selected: Array<string> | undefined;\n    onSelected: (value: RecipientOption) => void;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    isDisabled?: boolean;\n    onClear: () => void;\n}\n\nexport const RecipientTypeahead: React.FunctionComponent<RecipientTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n    const [ state, dispatchers ] = useTypeaheadReducer<string>();\n\n    React.useEffect(() => {\n        const getRecipients = props.getRecipients;\n        getRecipients('').then(recipients => dispatchers.setDefaults(recipients));\n    }, [ props.getRecipients, dispatchers ]);\n\n    React.useEffect(() => {\n        const getRecipients = props.getRecipients;\n        if (state.loadingFilter) {\n            getRecipients(state.lastSearch).then(recipients => dispatchers.setFilterValue(\n                state.lastSearch,\n                recipients\n            ));\n        }\n    }, [ props.getRecipients, state.loadingFilter, state.lastSearch, dispatchers ]);\n\n    const toggle = React.useCallback((isOpen: boolean) => {\n        setOpen(isOpen);\n    }, [ setOpen ]);\n\n    const options = useRecipientOptionMemo(state);\n\n    const onFilter = React.useCallback((e: React.ChangeEvent<HTMLInputElement> | null) => {\n        // Ignore filter calls with null event\n        if (e === null) {\n            return options;\n        }\n\n        const search = e.target.value?.trim();\n        if (search === '') {\n            dispatchers.useDefaults();\n        } else {\n            dispatchers.loadFilterValue(search);\n        }\n\n        return options;\n    }, [ dispatchers, options ]);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const selection = React.useMemo(() => {\n        const sel = props.selected;\n        if (sel === undefined) {\n            return undefined;\n        }\n\n        return (sel as Array<string>).map(s => new RecipientOption(s));\n\n    }, [ props.selected ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const onSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n            onSelected(value);\n        }\n    }, [ props.onSelected ]);\n\n    return (\n        <div { ...getOuiaProps('RecipientTypeahead', props) }>\n            <Select\n                variant={ SelectVariant.single }\n                typeAheadAriaLabel=\"Select the recipients\"\n                selections={ 'All registered users' }\n                onSelect={ onSelect }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onFilter={ onFilter }\n                menuAppendTo={ document.body }\n                isDisabled={ true }\n            >\n                { options }\n            </Select>\n        </div>\n    );\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { useField, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { Action, DefaultNotificationBehavior, IntegrationRef, NotificationType } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ActionOption } from './ActionOption';\nimport { ActionTypeahead } from './ActionTypeahead';\nimport { IntegrationRecipientTypeahead } from './IntegrationRecipientTypeahead';\nimport { RecipientOption } from './RecipientOption';\nimport { RecipientTypeahead } from './RecipientTypeahead';\n\nexport interface EditableActionTableProps {\n    actions: Array<Action>;\n    path: string;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    handleRemove?: (index: number) => () => void;\n    isDisabled?: boolean;\n}\n\ninterface EditableActionElementProps extends OuiaComponentProps {\n    path: string;\n    action: Action;\n    isDisabled?: boolean;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    onRemove?: () => void;\n}\n\nconst EditableActionRow: React.FunctionComponent<EditableActionElementProps> = (props) => {\n\n    const { setFieldValue } = useFormikContext<Notification | DefaultNotificationBehavior>();\n    const [\n        recipientFieldProps,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        _,\n        recipientFieldHelpers\n    ] = useField<Array<string> | undefined>(`${props.path}.recipient`);\n\n    const actionSelected = React.useCallback((value: ActionOption) => {\n        setFieldValue(`${props.path}.type`, value.notificationType);\n        if (value.integrationType) {\n            setFieldValue(`${props.path}.integration`, {\n                type: value.integrationType\n            });\n            setFieldValue(`${props.path}.recipient`, []);\n            setFieldValue(`${props.path}.integrationId`, '');\n        } else {\n            setFieldValue(`${props.path}.recipient`, []);\n            setFieldValue(`${props.path}.integration`, undefined);\n            setFieldValue(`${props.path}.integrationId`, '');\n        }\n    }, [ setFieldValue, props.path ]);\n\n    const integrationSelected = React.useCallback((value: RecipientOption) => {\n        if (typeof value.recipientOrIntegration !== 'string') {\n            setFieldValue(`${props.path}.integration`, value.recipientOrIntegration);\n            setFieldValue(`${props.path}.integrationId`, value.recipientOrIntegration.id);\n        }\n    }, [ setFieldValue, props.path ]);\n\n    const recipientSelected = React.useCallback((value: RecipientOption) => {\n        if (recipientFieldProps.value) {\n            const selected = recipientFieldProps.value;\n            const index = selected.indexOf(value.toString());\n            if (index === -1) {\n                recipientFieldHelpers.setValue([ ...selected, value.toString() ]);\n            } else {\n                recipientFieldHelpers.setValue([ ...selected ].filter((_, i) => i !== index));\n            }\n        }\n    }, [ recipientFieldProps, recipientFieldHelpers ]);\n\n    const recipientOnClear = React.useCallback(() => {\n        recipientFieldHelpers.setValue([]);\n    }, [ recipientFieldHelpers ]);\n\n    return (\n        <tr>\n            <td>\n                <ActionTypeahead\n                    action={ props.action }\n                    onSelected={ actionSelected }\n                    isDisabled={ props.isDisabled }\n                    ouiaId={ `${props.ouiaId ? 'action-' + props.ouiaId : undefined}` }\n                />\n            </td>\n            <td>\n                { props.action.type === NotificationType.INTEGRATION ? (\n                    <IntegrationRecipientTypeahead\n                        onSelected={ integrationSelected }\n                        integrationType={ props.action.integration?.type ?? UserIntegrationType.WEBHOOK }\n                        selected={ props.action.integration }\n                        getIntegrations={ props.getIntegrations }\n                        isDisabled={ props.isDisabled }\n                        ouiaId={ `${props.ouiaId ? 'recipient-' + props.ouiaId : undefined}` }\n                    />\n                ) : (\n                    <RecipientTypeahead\n                        onSelected={ recipientSelected }\n                        selected={ props.action.recipient }\n                        getRecipients={ props.getRecipients }\n                        isDisabled={ props.isDisabled }\n                        onClear={ recipientOnClear }\n                        ouiaId={ `${props.ouiaId ? 'recipient-' + props.ouiaId : undefined}` }\n                    />\n                ) }\n            </td>\n            <td>\n                <Button\n                    onClick={ props.onRemove }\n                    variant={ ButtonVariant.plain }\n                >\n                    <TimesIcon />\n                </Button>\n            </td>\n        </tr>\n    );\n};\n\nexport const EditableActionTable: React.FunctionComponent<EditableActionTableProps> = (props) => {\n\n    return (\n        <>\n            <thead { ...getOuiaProps('Notifications/Form/EditableActionHeader', {}) }>\n                <tr>\n                    <th>Action</th>\n                    <th>Recipient</th>\n                    <th />\n                </tr>\n            </thead>\n            <tbody { ...getOuiaProps('Notifications/Form/EditableActionBody', {}) }>\n                {\n                    props.actions.map((a, index) => {\n                        return (\n                            <EditableActionRow\n                                key={ index }\n                                ouiaId={ `${index}` }\n                                action={ a }\n                                isDisabled={ props.isDisabled }\n                                path={ `${props.path}.${index}` }\n                                getRecipients={ props.getRecipients }\n                                getIntegrations={ props.getIntegrations }\n                                onRemove={ props.handleRemove ? props.handleRemove(index) : undefined }\n                            />\n                        );\n                    })\n                }\n            </tbody>\n        </>\n    );\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { global_spacer_md, global_spacer_sm } from '@patternfly/react-tokens';\nimport {\n    Checkbox,\n    Form,\n    FormText,\n    OuiaComponentProps,\n    ouiaIdConcat\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { FieldArray, FieldArrayRenderProps, FormikProps, useFormikContext } from 'formik';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { UserIntegrationType } from '../../types/Integration';\nimport {\n    Action,\n    DefaultNotificationBehavior,\n    IntegrationRef,\n    Notification,\n    NotificationType\n} from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { EditableActionTable } from './Form/EditableActionTable';\n\ntype Type = 'default' | 'notification';\n\nexport interface NotificationFormProps extends OuiaComponentProps {\n    type: Type;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\ninterface ActionsArrayProps extends FieldArrayRenderProps {\n    form: FormikProps<Notification | DefaultNotificationBehavior>;\n    type: Type;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\nconst alignLeftClassName = style({\n    textAlign: 'left',\n    paddingLeft: 0\n});\n\nconst tableClassName = style({\n    display: 'block',\n    $nest: {\n        '& td, & th': {\n            paddingTop: global_spacer_sm.var,\n            paddingBottom: global_spacer_sm.var,\n            paddingLeft: global_spacer_md.var,\n            paddingRight: global_spacer_md.var\n        },\n        '& th': {\n            width: '500px'\n        },\n        '& th:last-child': {\n            width: '80px'\n        },\n        '& td:first-child, & th:first-child': {\n            paddingLeft: 0\n        }\n    }\n});\n\nconst ActionArray: React.FunctionComponent<ActionsArrayProps> = (props) => {\n\n    const { values, isSubmitting } = props.form;\n    const actions = values.actions;\n\n    const addAction = React.useCallback(() => {\n        const push = props.push;\n        const newAction: Action = {\n            type: NotificationType.EMAIL_SUBSCRIPTION,\n            integrationId: '',\n            recipient: []\n        };\n\n        push(newAction);\n    }, [ props.push ]);\n\n    return (\n        <>\n            { (actions === undefined || actions.length === 0) && (\n                <tbody { ...getOuiaProps('Notifications/Form/NoActions', {}) }>\n                    <tr>\n                        <td colSpan={ 3 }><span>No actions. Users will not be notified.</span></td>\n                    </tr>\n                </tbody>\n            )}\n\n            { actions && actions.length > 0 && (\n                <EditableActionTable\n                    path={ props.name }\n                    actions={ actions }\n                    getRecipients={ props.getRecipients }\n                    getIntegrations={ props.getIntegrations }\n                    handleRemove={ props.handleRemove }\n                    isDisabled={ isSubmitting }\n                />\n            ) }\n            <tbody { ...getOuiaProps('Notifications/Form/Button', {}) }>\n                <tr>\n                    <td>\n                        <Button\n                            className={ alignLeftClassName }\n                            variant={ ButtonVariant.link }\n                            icon={ <PlusCircleIcon /> }\n                            onClick={ addAction }\n                            isDisabled={ isSubmitting }\n                        >\n                            Add action\n                        </Button>\n                    </td>\n                </tr>\n            </tbody>\n        </>\n    );\n};\n\nexport const NotificationForm: React.FunctionComponent<NotificationFormProps> = (props) => {\n\n    const { values, isSubmitting } = useFormikContext<Notification | DefaultNotificationBehavior>();\n    const { type } = props;\n\n    const showActions: boolean = type === 'default' ? true : !(values as Notification).useDefault;\n\n    return (\n        <div { ... getOuiaProps('Notifications/Form', props) }>\n            <Form>\n                <table className={ tableClassName }>\n                    { props.type === 'notification' && (\n                        <>\n                            <thead />\n                            <tbody { ...getOuiaProps('Notifications/Form/ApplicationHeader', {}) }>\n                                <tr>\n                                    <td>\n                                        <FormText\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'event-name') }\n                                            label=\"Event name\"\n                                            name=\"eventTypeDisplayName\"\n                                            id=\"event\"\n                                        />\n                                    </td>\n                                    <td>\n                                        <FormText\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'application') }\n                                            label=\"Application\"\n                                            name=\"applicationDisplayName\"\n                                            id=\"application\"\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td colSpan={ 2 }>\n                                        <Checkbox\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'use-default') }\n                                            name=\"useDefault\"\n                                            id=\"useDefault\"\n                                            label=\"Use default notification actions\"\n                                            isDisabled={ isSubmitting }\n                                        />\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </>\n                    ) }\n                    { props.type === 'default' && (\n                        <tbody { ...getOuiaProps('Notifications/Form/DefaultHeader', {}) }>\n                            <tr>\n                                <td colSpan={ 3 }>\n                                    <div>Change the default notification actions for <b>Red Hat Insights</b>.</div>\n                                    <div>These actions apply to all events that use the default actions.</div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    )}\n\n                    { showActions && (\n                        <>\n                            <FieldArray name=\"actions\">\n                                { helpers =>  <ActionArray\n                                    type={ props.type }\n                                    { ...helpers }\n                                    getRecipients={ props.getRecipients }\n                                    getIntegrations={ props.getIntegrations }\n                                /> }\n                            </FieldArray>\n                        </>\n                    ) }\n                </table>\n            </Form>\n        </div>\n    );\n};\n","import { ModalVariant } from '@patternfly/react-core';\nimport { SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { WithActions } from '../../schemas/Integrations/Notifications';\nimport { UserIntegrationType } from '../../types/Integration';\nimport { DefaultNotificationBehavior, IntegrationRef, Notification } from '../../types/Notification';\nimport { NotificationForm } from './Form';\n\ntype DataFetcher = {\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\nexport type NotificationSaveModalProps = Omit<SaveModalProps, UsedProps> & ({\n    type: 'default';\n    data: DefaultNotificationBehavior;\n    onSave: (dnb: DefaultNotificationBehavior) => boolean | Promise<boolean>;\n} | {\n    type: 'notification';\n    data: Notification;\n    onSave: (notification: Notification) => boolean | Promise<boolean>;\n}) & DataFetcher;\n\ninterface InternalProps extends DataFetcher {\n    onClose: (saved: boolean) => void;\n    type: NotificationSaveModalProps['type'];\n}\n\nconst InternalNotificationSaveModal: React.FunctionComponent<InternalProps> = (props) => {\n    const title =  `Edit${props.type === 'default' && ' default' || ''} notification actions`;\n\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<Notification | DefaultNotificationBehavior>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            content={ <NotificationForm\n                type={ props.type }\n                getRecipients={ props.getRecipients }\n                getIntegrations={ props.getIntegrations }\n            /> }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            isOpen={ true }\n            title={ title }\n            onClose={ props.onClose }\n            variant={ ModalVariant.large }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const NotificationSaveModal: React.FunctionComponent<NotificationSaveModalProps> = (props) => {\n\n    const onSubmit = React.useCallback(async (data: Notification | DefaultNotificationBehavior) => {\n        const onClose = props.onClose;\n        let saved = false;\n        if (props.type === 'notification') {\n            const onSave = props.onSave;\n            saved = await onSave(data as Notification);\n        } else if (props.type === 'default') {\n            const onSave = props.onSave;\n            saved = await onSave(data as DefaultNotificationBehavior);\n        }\n\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onSave, props.onClose, props.type ]);\n\n    return (\n        <Formik<Notification | DefaultNotificationBehavior>\n            initialValues={ props.data }\n            validationSchema={ WithActions }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalNotificationSaveModal\n                type={ props.type }\n                onClose={ props.onClose }\n                getRecipients={ props.getRecipients }\n                getIntegrations={ props.getIntegrations }\n            />\n        </Formik>\n    );\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\n\nimport {\n    Operations, Schemas\n} from '../../generated/OpenapiIntegrations';\n\nexport const getDefaultActionIdAction = () => Operations.EndpointServiceCreateEndpoint.actionCreator({\n    body: {\n        type: Schemas.EndpointType.enum.default,\n        name: 'Default endpoint type',\n        description: '',\n        enabled: true,\n        properties: null\n    }\n});\n\nexport const getDefaultActionIdDecoder = validationResponseTransformer((payload: Operations.EndpointServiceCreateEndpoint.Payload) => {\n    if (payload.type === 'Endpoint') {\n        return validatedResponse(\n            'DefaultNotificationId',\n            payload.status,\n            payload.value.id as string,\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\n\nimport {\n    Operations, Schemas\n} from '../generated/OpenapiNotifications';\nimport { toActions } from '../types/adapters/NotificationAdapter';\nimport { UUID } from '../types/Notification';\n\nexport const getNotificationActionsByIdAction = (eventTypeId: UUID) => {\n    return Operations.NotificationServiceGetLinkedEndpoints.actionCreator({\n        eventTypeId\n    });\n};\n\nexport const hasDefaultNotificationDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetLinkedEndpoints.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'defaultNotification',\n            200,\n            payload.value.findIndex(a => a.type === Schemas.EndpointType.enum.default) !== -1,\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const getNotificationByIdActionDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetLinkedEndpoints.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'actionsArray',\n            200,\n            toActions(payload.value),\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n","import {\n    addDangerNotification,\n    addSuccessNotification,\n    Filter,\n    Operator,\n    Page\n} from '@redhat-cloud-services/insights-common-typescript';\nimport assertNever from 'assert-never';\nimport pLimit from 'p-limit';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport { NotificationSaveModal } from '../../../components/Notifications/SaveModal';\nimport {\n    getDefaultActionIdAction,\n    getDefaultActionIdDecoder\n} from '../../../services/Notifications/GetDefaultActionId';\nimport { actionAddActionToDefault } from '../../../services/useAddActionToDN';\nimport { actionAddActionToNotification } from '../../../services/useAddActionToNotification';\nimport {\n    defaultNotificationBehaviorCreator,\n    defaultNotificationsDecoder\n} from '../../../services/useDefaultNotificationBehavior';\nimport {\n    getNotificationActionsByIdAction,\n    getNotificationByIdActionDecoder,\n    hasDefaultNotificationDecoder\n} from '../../../services/useGetNotificationActions';\nimport {\n    listIntegrationIntegrationDecoder,\n    listIntegrationsActionCreator\n} from '../../../services/useListIntegrations';\nimport { actionRemoveActionFromDefault } from '../../../services/useRemoveActionFromDN';\nimport { actionRemoveActionFromNotification } from '../../../services/useRemoveActionFromNotification';\nimport { createIntegrationActionCreator } from '../../../services/useSaveIntegration';\nimport { IntegrationType, UserIntegrationType } from '../../../types/Integration';\nimport {\n    Action,\n    DefaultNotificationBehavior,\n    IntegrationRef,\n    Notification,\n    NotificationType\n} from '../../../types/Notification';\n\ninterface EditNotificationPagePropsNotification {\n    type: 'notification';\n    data: Notification;\n}\n\ninterface EditNotificationPagePropsDefault {\n    type: 'default';\n    data: DefaultNotificationBehavior;\n}\n\nexport type EditNotificationPageProps = {\n    onClose: (saved: boolean) => void;\n} & (EditNotificationPagePropsNotification | EditNotificationPagePropsDefault);\n\nconst recipients = [\n    'Admin',\n    'Another one',\n    'Default user access',\n    'Security admin',\n    'Stakeholders'\n];\n\nconst getRecipients = async (search: string) => {\n    if (search !== '') {\n        search = search.toLowerCase();\n        return recipients.filter(r => r.toLowerCase().includes(search));\n    }\n\n    return recipients;\n};\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport const EditNotificationPage: React.FunctionComponent<EditNotificationPageProps> = (props) => {\n\n    const { query } = useContext(ClientContext);\n\n    const getIntegrations = React.useCallback(async (type: UserIntegrationType, _search: string) => {\n        return query(listIntegrationsActionCreator(\n            Page.of(\n                1,\n                20,\n                new Filter()\n                .and('type', Operator.EQUAL, type)\n            )\n        )).then(response => {\n            let integrations: Array<IntegrationRef> = [];\n            const payload = response.payload ? listIntegrationIntegrationDecoder(response.payload) : undefined;\n\n            if (payload?.type === 'IntegrationPage') {\n                integrations = payload.value.data;\n            }\n\n            return integrations;\n        });\n    }, [ query ]);\n\n    const onSave = React.useCallback(async (data: Notification | DefaultNotificationBehavior) => {\n        const idMapper = (a: Action) => {\n            if (a.type !== NotificationType.INTEGRATION && a.type !== NotificationType.EMAIL_SUBSCRIPTION) {\n                throw new Error('Only integrations and EmailSubscription are supported');\n            }\n\n            return a.integrationId;\n        };\n\n        const type = props.type;\n        if (type !== 'notification' && type !== 'default') {\n            assertNever(type);\n        }\n\n        let oldActions: Array<Action> | undefined;\n        let oldUseDefault: boolean | undefined;\n        if (props.type === 'default') {\n            oldActions = await query(defaultNotificationBehaviorCreator())\n            .then(r => r.payload ? defaultNotificationsDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'DefaultNotificationBehavior' ? p.value.actions : undefined);\n\n            oldUseDefault = false;\n        } else if (props.type === 'notification') {\n            const id = props.data.id;\n            const actionsPromise = query(getNotificationActionsByIdAction(id));\n\n            oldActions = await actionsPromise\n            .then(r => r.payload ? getNotificationByIdActionDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'actionsArray' ? p.value : undefined);\n\n            oldUseDefault = await actionsPromise\n            .then(r => r.payload ? hasDefaultNotificationDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'defaultNotification' ? p.value : undefined);\n        }\n\n        const newUseDefault = props.type === 'notification' ? (data as Notification).useDefault : false;\n        let defaultActionId: string | undefined;\n\n        if (newUseDefault !== oldUseDefault) {\n            defaultActionId = await query(getDefaultActionIdAction())\n            .then(r => r.payload ? getDefaultActionIdDecoder(r.payload) : undefined)\n            .then(p => p?.type === 'DefaultNotificationId' ? p.value : undefined);\n        } else {\n            defaultActionId = 'nothing';\n        }\n\n        if (!oldActions || oldUseDefault === undefined || defaultActionId === undefined) {\n            addDangerNotification('Error updating actions', 'Failed to update actions. Please try again.');\n            return false;\n        }\n\n        const limit = pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS);\n\n        const originalIds = oldActions.map(idMapper);\n        const newActions = data.actions ?? [];\n        const newIds = newActions.map((a, i) => a.integrationId === '' ? { ...a, integrationId: `new${i}` } : a).map(idMapper);\n\n        const nonUserIntegrationsPromises: Array<Promise<boolean>> = [];\n\n        newActions.map((a, index) => {\n            if (a.integrationId === '' && a.type === NotificationType.EMAIL_SUBSCRIPTION) {\n                nonUserIntegrationsPromises.push(limit(() => {\n                    return query(createIntegrationActionCreator({\n                        type: IntegrationType.EMAIL_SUBSCRIPTION,\n                        name: 'Email subscription',\n                        isEnabled: true\n                    }))\n                    .then(r => r.payload?.type === 'Endpoint' ? r.payload.value.id : undefined)\n                    .then(id => {\n                        if (id) {\n                            // Sanity check\n                            if (newIds[index] !== `new${index}`) {\n                                throw new Error(`Sync error, expected new${index} but found ${newIds[index]}`);\n                            }\n\n                            newIds[index] = id;\n                            return true;\n                        }\n\n                        return false;\n                    });\n                }));\n                // New, we need add this integration\n            }\n        });\n\n        if (nonUserIntegrationsPromises.length) {\n            const created = await Promise.all(nonUserIntegrationsPromises.map(p => p.catch(() => false))).then(all => all.every(e => e));\n            if (!created) {\n                addDangerNotification('Actions not added/removed', 'Some actions were not correctly added or removed. Please try again.');\n                return false;\n            }\n        }\n\n        let toDelete: Array<string>;\n        let toAdd: Array<string>;\n\n        if (newUseDefault) {\n            toDelete = originalIds.reduce<Array<string>>((arr, val) => {\n                if (!arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n\n            if (!oldUseDefault) {\n                toAdd = [ defaultActionId ];\n            } else {\n                toAdd = [];\n            }\n\n        } else {\n            toDelete = originalIds.reduce<Array<string>>((arr, val) => {\n                if (!newIds.includes(val) && !arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n\n            if (oldUseDefault) {\n                toDelete.push(defaultActionId);\n            }\n\n            toAdd = newIds.reduce<Array<string>>((arr, val) => {\n                if (!originalIds.includes(val) && !arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n        }\n\n        if (toAdd.length === 0 && toDelete.length === 0) {\n            // Nothing to update, display to the user that all was updated?\n            addSuccessNotification('Actions updated', 'All the actions were updated.');\n            return true;\n        }\n\n        const promises: Array<Promise<boolean>> = [];\n\n        if (props.type === 'notification') {\n            const notificationId = props.data.id;\n            promises.push(...toDelete.map(id => limit(() =>\n                query(actionRemoveActionFromNotification(notificationId, id)).then(r => !r.error))));\n            promises.push(...toAdd.map(id => limit(() => query(actionAddActionToNotification(notificationId, id)).then(r => !r.error))));\n        } else if (props.type === 'default') {\n            promises.push(...toDelete.map(id => limit(() => query(actionRemoveActionFromDefault(id)).then(r => !r.error))));\n            promises.push(...toAdd.map(id => limit(() => query(actionAddActionToDefault(id)).then(r => !r.error))));\n        }\n\n        const saved = await Promise.all(promises.map(p => p.catch(() => false))).then(all => all.every(e => e));\n\n        if (saved) {\n            addSuccessNotification('Actions updated', 'All the actions were updated.');\n        } else {\n            addDangerNotification('Actions not added/removed', 'Some actions were not correctly added or removed. Please try again.');\n        }\n\n        return saved;\n    }, [ props.type, query, props.data ]);\n\n    return (\n        <NotificationSaveModal\n            onSave={ onSave }\n            isSaving={ false }\n            { ...props }\n            getRecipients={ getRecipients }\n            getIntegrations={ getIntegrations }\n        />\n    );\n};\n","import { Operations  } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionRemoveActionFromNotification = (notificationId: UUID, actionId: UUID) => {\n    return Operations.NotificationServiceUnlinkEndpointFromEventType.actionCreator({\n        endpointId: actionId,\n        eventTypeId: notificationId\n    });\n};\n","import { Operations } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionAddActionToNotification = (notificationId: UUID, actionId: UUID) => {\n    return Operations.NotificationServiceLinkEndpointToEventType.actionCreator({\n        endpointId: actionId,\n        eventTypeId: notificationId\n    });\n};\n","import { Operations } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionRemoveActionFromDefault = (actionId: UUID) =>\n    Operations.NotificationServiceDeleteEndpointFromDefaults.actionCreator({\n        endpointId: actionId\n    });\n","import { Operations } from '../generated/OpenapiNotifications';\n\nexport const actionAddActionToDefault = (actionId: string) =>\n    Operations.NotificationServiceAddEndpointToDefaults.actionCreator({\n        endpointId: actionId\n    });\n","import { assertNever } from 'assert-never';\nimport { useReducer } from 'react';\n\nimport { DefaultNotificationBehavior, Notification } from '../../../types/Notification';\n\nenum UseFormModalReducerActionType {\n    EDIT_NOTIFICATION = 'edit-notification',\n    EDIT_DEFAULTS = 'edit-defaults',\n    NONE = 'none'\n}\n\ninterface UseFormModalReducerActionEditNotification {\n    type: UseFormModalReducerActionType.EDIT_NOTIFICATION;\n    template: Notification;\n}\n\ninterface UseFormModalReducerActionEditDefault {\n    type: UseFormModalReducerActionType.EDIT_DEFAULTS;\n    template: DefaultNotificationBehavior;\n}\n\ninterface UseFormModalReducerActionNone {\n    type: UseFormModalReducerActionType.NONE;\n}\n\ntype UseFormModalReducerAction = UseFormModalReducerActionEditNotification | UseFormModalReducerActionEditDefault | UseFormModalReducerActionNone;\n\ntype UseFormModalReducerState = {\n    isOpen: false;\n} | ({\n    isOpen: true;\n} & ({\n    type: 'default';\n    data: DefaultNotificationBehavior;\n} | {\n    type: 'notification';\n    data: Notification;\n}))\n\nconst noneState = {\n    isOpen: false as const\n};\n\nconst reducer = (state: UseFormModalReducerState, action: UseFormModalReducerAction): UseFormModalReducerState => {\n    switch (action.type) {\n        case UseFormModalReducerActionType.EDIT_DEFAULTS:\n            return {\n                isOpen: true,\n                type: 'default',\n                data: action.template\n            };\n        case UseFormModalReducerActionType.EDIT_NOTIFICATION:\n            return {\n                isOpen: true,\n                type: 'notification',\n                data: action.template\n            };\n        case UseFormModalReducerActionType.NONE:\n            return noneState;\n        default:\n            assertNever(action);\n    }\n};\n\nexport const makeEditNotificationAction = (template: Notification): UseFormModalReducerActionEditNotification => ({\n    type: UseFormModalReducerActionType.EDIT_NOTIFICATION,\n    template\n});\n\nexport const makeEditDefaultAction = (template: DefaultNotificationBehavior): UseFormModalReducerActionEditDefault => ({\n    type: UseFormModalReducerActionType.EDIT_DEFAULTS,\n    template\n});\n\nexport const makeNoneAction = (): UseFormModalReducerActionNone => ({\n    type: UseFormModalReducerActionType.NONE\n});\n\nexport const useFormModalReducer = () => {\n    return useReducer(reducer, noneState);\n};\n","import { assertNever } from 'assert-never';\nimport pLimit from 'p-limit';\nimport { default as React, useCallback, useContext, useEffect, useState } from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { usePrevious } from 'react-use';\n\nimport {\n    NotificationRowGroupedByApplication,\n    NotificationRowGroupedByNone,\n    NotificationRows\n} from '../../../components/Notifications/Table';\nimport { GroupByEnum } from '../../../components/Notifications/Types';\nimport { getNotificationActionsByIdAction } from '../../../services/useGetNotificationActions';\nimport { toActions, usesDefault } from '../../../types/adapters/NotificationAdapter';\nimport { Notification, UUID } from '../../../types/Notification';\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nconst toRowsGroupByNone = (notification: Notification): NotificationRowGroupedByNone => ({\n    loadingActionStatus: 'loading',\n    ...notification\n});\n\nconst findNotificationPath = (rows: Array<NotificationRowGroupedByApplication>, id: UUID): [number, number] => {\n    for (let i = 0; i < rows.length; ++i) {\n        for (let j = 0; j < rows[i].notifications.length; ++j) {\n            if (rows[i].notifications[j].id === id) {\n                return [ i, j ];\n            }\n        }\n    }\n\n    return [ -1, -1 ];\n};\n\nconst toRowGroupByApplication = (notifications: Array<Notification>): Array<NotificationRowGroupedByApplication> => {\n    const grouped = notifications.reduce((groups, notification) => {\n        if (!groups[notification.applicationDisplayName]) {\n            groups[notification.applicationDisplayName] = {\n                applicationDisplayName: notification.applicationDisplayName,\n                isOpen: true,\n                notifications: []\n            };\n        }\n\n        groups[notification.applicationDisplayName].notifications.push(toRowsGroupByNone(notification));\n        return groups;\n    }, {} as Record<string, NotificationRowGroupedByApplication>);\n\n    return Object.values(grouped);\n};\n\nexport const useNotificationRows = (notifications: Array<Notification>, groupBy: GroupByEnum) => {\n\n    const [ notificationRows, setNotificationRows ] = useState<NotificationRows>({\n        data: [],\n        grouped: GroupByEnum.Application\n    });\n    const prevNotificationInput = usePrevious(notifications);\n    const prevGroupBy = usePrevious(groupBy);\n    const { query } = useContext(ClientContext);\n    const [ limit ] = useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const setNotificationRowById = useCallback((id: UUID, partialNotificationRow: Partial<NotificationRowGroupedByNone>) => {\n        setNotificationRows(prev => {\n            if (prev.grouped === GroupByEnum.Application) {\n                const [ appIndex, notificationIndex ] = findNotificationPath(prev.data, id);\n\n                if (appIndex === -1) {\n                    return prev;\n                }\n\n                const newApps: Array<NotificationRowGroupedByApplication> = [ ...prev.data ];\n                newApps[appIndex] = { ...newApps[appIndex], notifications: [ ...newApps[appIndex].notifications ]};\n                newApps[appIndex].notifications[notificationIndex] = {\n                    ...newApps[appIndex].notifications[notificationIndex],\n                    ...partialNotificationRow\n                };\n\n                return {\n                    ...prev,\n                    data: newApps\n                };\n            } else if (prev.grouped === GroupByEnum.None) {\n                const index = prev.data.findIndex(n => n.id === id);\n                if (index === -1) {\n                    return prev;\n                }\n\n                const newNotifications = [ ...prev.data ];\n                newNotifications[index] = { ...newNotifications[index], ...partialNotificationRow };\n                return {\n                    ...prev,\n                    data: newNotifications\n                };\n            } else {\n                assertNever(prev);\n            }\n        });\n    }, [ setNotificationRows ]);\n\n    useEffect(() => {\n        if (notifications !== prevNotificationInput || groupBy !== prevGroupBy) {\n            setNotificationRows(_prev => {\n                switch (groupBy) {\n                    case GroupByEnum.None:\n                        return {\n                            grouped: GroupByEnum.None,\n                            data: notifications.map(toRowsGroupByNone)\n                        };\n                    case GroupByEnum.Application:\n                        return {\n                            grouped: GroupByEnum.Application,\n                            data: toRowGroupByApplication(notifications)\n                        };\n                    default:\n                        assertNever(groupBy);\n                }\n            });\n\n            if (notifications) {\n                limit.clearQueue();\n\n                notifications.map(notification => notification.id).forEach(notificationId => {\n                    limit(() => query(getNotificationActionsByIdAction(notificationId))).then(response => {\n                        if (response.payload && response.payload.status === 200) {\n                            setNotificationRowById(notificationId, {\n                                loadingActionStatus: 'done',\n                                actions: toActions(response.payload.value),\n                                useDefault: usesDefault(response.payload.value)\n                            });\n                        } else {\n                            setNotificationRowById(notificationId, {\n                                loadingActionStatus: 'error',\n                                actions: []\n                            });\n                        }\n                    });\n                });\n            }\n        }\n    }, [ groupBy, prevGroupBy, notifications, prevNotificationInput, limit, query, setNotificationRowById ]);\n\n    const onCollapse = React.useCallback((index: number, isOpen: boolean) => {\n        setNotificationRows(prevRows => {\n            switch (prevRows.grouped) {\n                case GroupByEnum.None:\n                    throw new Error('On collapse is not valid for group: None');\n                case GroupByEnum.Application:\n                    const data = [\n                        ...prevRows.data\n                    ];\n\n                    data[index] = {\n                        ...data[index],\n                        isOpen\n                    };\n\n                    return {\n                        ...prevRows,\n                        data\n                    };\n                default:\n                    assertNever(prevRows);\n            }\n        });\n    }, [ setNotificationRows ]);\n\n    return {\n        rows: notificationRows,\n        onCollapse\n    };\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nimport { Main, PageHeader, PageHeaderTitle, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    ExporterType,\n    getInsights,\n    InsightsEnvDetector,\n    RenderIfFalse\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { default as React, useContext } from 'react';\nimport { style } from 'typestyle';\n\nimport { AppContext } from '../../../app/AppContext';\nimport { DefaultBehavior } from '../../../components/Notifications/DefaultBehavior';\nimport { NotificationsTable } from '../../../components/Notifications/Table';\nimport { NotificationsToolbar } from '../../../components/Notifications/Toolbar';\nimport { GroupByEnum } from '../../../components/Notifications/Types';\nimport { Messages } from '../../../properties/Messages';\nimport { useDefaultNotificationBehavior } from '../../../services/useDefaultNotificationBehavior';\nimport { useListNotifications } from '../../../services/useListNotifications';\nimport { stagingBetaAndProdBetaEnvironment } from '../../../types/Environments';\nimport { Facet, Notification } from '../../../types/Notification';\nimport { EditNotificationPage } from '../Form/EditNotificationPage';\nimport {\n    makeEditDefaultAction,\n    makeEditNotificationAction,\n    makeNoneAction,\n    useFormModalReducer\n} from './useFormModalReducer';\nimport { useNotificationFilter } from './useNotificationFilter';\nimport { useNotificationPage } from './useNotificationPage';\nimport { useNotificationRows } from './useNotificationRows';\n\ninterface NotificationListBundlePageProps {\n    bundle: Facet;\n    applications: Array<Facet>;\n}\n\nconst displayInlineClassName = style({\n    display: 'inline'\n});\n\nconst tableTitleClassName = style({\n    fontWeight: 600,\n    paddingTop: global_spacer_md.var,\n    paddingBottom: global_spacer_md.var,\n    fontSize: '17px'\n});\n\nconst noPaddingTopClassName = style({\n    paddingTop: 0\n});\n\nconst emptyArray = [];\n\nexport const NotificationListBundlePage: React.FunctionComponent<NotificationListBundlePageProps> = (props) => {\n    const { rbac: { canWriteNotifications }} = useContext(AppContext);\n    const defaultNotificationBehavior = useDefaultNotificationBehavior();\n\n    const notificationsFilter = useNotificationFilter(props.applications.map(a => a.displayName.toString()));\n    const [ groupBy, setGroupBy ] = React.useState<GroupByEnum>(GroupByEnum.Application);\n    const groupBySelected = React.useCallback((selected: GroupByEnum) => {\n        setGroupBy(selected);\n    }, [ setGroupBy ]);\n\n    const notificationPage = useNotificationPage(notificationsFilter.debouncedFilters, props.bundle, props.applications, 10);\n\n    const useNotifications = useListNotifications(notificationPage.page);\n    const {\n        rows: notificationRows,\n        onCollapse\n    } = useNotificationRows(\n        useNotifications.payload?.type === 'eventTypesArray' ? useNotifications.payload.value : emptyArray,\n        groupBy\n    );\n\n    const [ modalIsOpenState, dispatchModalIsOpen ] = useFormModalReducer();\n\n    const closeFormModal = React.useCallback((saved: boolean) => {\n        const updateDefaultNotifications = defaultNotificationBehavior.query;\n        const updateNotifications = useNotifications.query;\n        if (saved && modalIsOpenState.isOpen) {\n            if (modalIsOpenState.type === 'default') {\n                updateDefaultNotifications();\n            } else if (modalIsOpenState.type === 'notification') {\n                updateNotifications();\n            }\n        }\n\n        dispatchModalIsOpen(makeNoneAction());\n    }, [ dispatchModalIsOpen, defaultNotificationBehavior.query, modalIsOpenState, useNotifications.query ]);\n\n    const pageHeaderTitleProps = {\n        className: displayInlineClassName,\n        title: Messages.pages.notifications.list.title\n    };\n\n    const onExport = React.useCallback((type: ExporterType) => {\n        console.log('Export to', type);\n    }, []);\n\n    const onEditDefaultAction = React.useCallback(() => {\n        const payload = defaultNotificationBehavior.payload;\n        if (payload?.type === 'DefaultNotificationBehavior') {\n            dispatchModalIsOpen(makeEditDefaultAction(payload.value));\n        }\n    }, [ dispatchModalIsOpen, defaultNotificationBehavior.payload ]);\n\n    const onEditNotification = React.useCallback((notification: Notification) => {\n        dispatchModalIsOpen(makeEditNotificationAction(notification));\n    }, [ dispatchModalIsOpen ]);\n\n    return (\n        <>\n            <PageHeader>\n                <PageHeaderTitle { ...pageHeaderTitleProps } />\n                <InsightsEnvDetector insights={ getInsights() } onEnvironment={ stagingBetaAndProdBetaEnvironment }>\n                    <RenderIfFalse>\n                        <Button variant={ ButtonVariant.link }>{ Messages.pages.notifications.list.viewHistory }</Button>\n                    </RenderIfFalse>\n                </InsightsEnvDetector>\n            </PageHeader>\n            <Main className={ noPaddingTopClassName }>\n                <Section>\n                    <DefaultBehavior\n                        loading={ defaultNotificationBehavior.loading }\n                        defaultBehavior={ defaultNotificationBehavior.payload?.type === 'DefaultNotificationBehavior' ?\n                            defaultNotificationBehavior.payload.value :\n                            undefined }\n                        onEdit={ canWriteNotifications ? onEditDefaultAction : undefined }\n                    />\n                    <div className={ tableTitleClassName }>Insights notifications event types and behavior</div>\n                    <NotificationsToolbar\n                        filters={ notificationsFilter.filters }\n                        setFilters={ notificationsFilter.setFilters }\n                        clearFilter={ notificationsFilter.clearFilter }\n                        appFilterOptions={ props.applications }\n                        groupBy={ groupBy }\n                        onGroupBySelected={ groupBySelected }\n                        onExport={ onExport }\n                    >\n                        <NotificationsTable\n                            notifications={ notificationRows }\n                            onCollapse={ onCollapse }\n                            onEdit={ canWriteNotifications ? onEditNotification : undefined }\n                        />\n                    </NotificationsToolbar>\n                    { modalIsOpenState.isOpen && (\n                        <EditNotificationPage\n                            onClose={ closeFormModal }\n                            { ...modalIsOpenState }\n                        />\n                    ) }\n                </Section>\n            </Main>\n        </>\n    );\n};\n","import { useFilters, useUrlStateMultipleOptions, useUrlStateString } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { useMemo } from 'react';\n\nimport { NotificationFilterColumn } from '../../../components/Notifications/Filter';\n\nconst DEBOUNCE_MS = 250;\n\nexport const useNotificationFilter = (initialAppOptions: Array<string>, debounce = DEBOUNCE_MS) => {\n    const useStateFactory = useMemo(() => {\n        const useUrlStateName = (defaultValue?: string) => useUrlStateString('name', defaultValue);\n        const useUrlStateApplication = (defaultValue?: Array<string>) => useUrlStateMultipleOptions(\n            'app',\n            initialAppOptions,\n            defaultValue\n        );\n        const useUrlStateAction = (defaultValue?: string) => useUrlStateString('action', defaultValue);\n\n        const useStateFactoryInternal = (column: NotificationFilterColumn) => {\n            switch (column) {\n                case NotificationFilterColumn.NAME:\n                    return useUrlStateName;\n                case NotificationFilterColumn.ACTION:\n                    return useUrlStateAction;\n                case NotificationFilterColumn.APPLICATION:\n                    return useUrlStateApplication;\n                default:\n                    assertNever(column);\n            }\n        };\n\n        return useStateFactoryInternal;\n        // This is an init param, so it doesn't need to recompute on change.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return useFilters(NotificationFilterColumn, debounce, useStateFactory);\n};\n","import { arrayValue, Filter, Operator, Page, Sort } from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { NotificationFilterColumn, NotificationFilters } from '../../../components/Notifications/Filter';\nimport { Facet } from '../../../types/Notification';\n\nexport interface UseNotificationPageReturn {\n    page: Page;\n    changePage: (page: number) => void;\n    changeItemsPerPage: (perPage: number) =>  void;\n}\n\nexport const useNotificationPage = (\n    filters: NotificationFilters,\n    bundle: Facet,\n    appFilterOptions: Array<Facet>,\n    defaultPerPage: number,\n    sort?: Sort): UseNotificationPageReturn => {\n    const [ currentPage, setCurrentPage ] = useState<number>(1);\n    const [ itemsPerPage, setItemsPerPage ] = useState<number>(defaultPerPage);\n\n    useEffect(() => setCurrentPage(1), [ setCurrentPage, filters ]);\n\n    const page = useMemo(() => {\n        const filter = new Filter();\n\n        const appFilter = filters[NotificationFilterColumn.APPLICATION];\n\n        if (appFilter) {\n            const appIds: Array<string> = [];\n            for (const appName of arrayValue(appFilter)) {\n                const filterOption = appFilterOptions.find(a => a.displayName === appName);\n                if (filterOption) {\n                    appIds.push(filterOption.id);\n                }\n            }\n\n            filter.and('applicationId', Operator.EQUAL, appIds);\n        }\n\n        filter.and('bundleId', Operator.EQUAL, bundle.id);\n\n        return Page.of(currentPage, itemsPerPage, filter, sort);\n    }, [ currentPage, itemsPerPage, sort, filters, appFilterOptions, bundle ]);\n\n    const changePage = useCallback((page: number) => setCurrentPage(page), [ setCurrentPage ]);\n    const changeItemsPerPage = useCallback((perPage: number) => {\n        setCurrentPage(1);\n        setItemsPerPage(perPage);\n    }, [ setCurrentPage ]);\n\n    return {\n        page,\n        changePage,\n        changeItemsPerPage\n    };\n};\n","import { AppSkeleton, getInsights } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { defaultBundleName, RedirectToDefaultBundle } from '../../../components/RedirectToDefaultBundle';\nimport { linkTo } from '../../../Routes';\nimport { useGetApplications } from '../../../services/Notifications/GetApplications';\nimport { useGetBundles } from '../../../services/Notifications/GetBundles';\nimport { Facet } from '../../../types/Notification';\nimport { NotificationListBundlePage } from './BundlePage';\n\ninterface NotificationListPageParams {\n    bundleName: string;\n}\n\nenum BundleStatus {\n    LOADING,\n    NOT_FOUND,\n    FAILED_TO_LOAD\n}\n\nconst isBundleStatus = (bundle: Facet | BundleStatus): bundle is BundleStatus => typeof bundle === 'number';\n\nexport const NotificationsListPage: React.FunctionComponent = () => {\n\n    const params = useParams<NotificationListPageParams>();\n    const history = useHistory();\n    const insights = getInsights();\n    const onFunction = insights?.chrome?.on;\n\n    const getBundles = useGetBundles();\n    const getApplications = useGetApplications();\n\n    React.useEffect(() => {\n        if (onFunction) {\n            onFunction('APP_NAVIGATION', (event: any) => {\n                history.push(linkTo.notifications(event.navId));\n            });\n        }\n    }, [ history, onFunction ]);\n\n    const bundle: Facet | BundleStatus = useMemo(() => {\n        if (getBundles.payload?.status === 200) {\n            return getBundles.payload.value.find(b => b.name === params.bundleName) ?? BundleStatus.NOT_FOUND;\n        } else if (getBundles.payload) {\n            return BundleStatus.FAILED_TO_LOAD;\n        }\n\n        return BundleStatus.LOADING;\n    }, [ getBundles.payload, params.bundleName ]);\n\n    React.useEffect(() => {\n        const query = getApplications.query;\n        if (!isBundleStatus(bundle)) {\n            query(bundle.name);\n        }\n    }, [ bundle, getApplications.query ]);\n\n    const applications: Array<Facet> | null | undefined = useMemo(\n        () => {\n            if (getApplications.payload) {\n                return getApplications.payload.status === 200 ? getApplications.payload.value : null;\n            }\n\n            return undefined;\n        },\n        [ getApplications.payload ]\n    );\n\n    if (bundle === BundleStatus.NOT_FOUND) {\n        if (params.bundleName === defaultBundleName) {\n            throw new Error('Default bundle information not found');\n        }\n\n        return <RedirectToDefaultBundle />;\n    }\n\n    if (bundle === BundleStatus.FAILED_TO_LOAD) {\n        throw new Error('Unable to load bundle information');\n    }\n\n    if (applications === null) {\n        throw new Error('Unable to load application facets');\n    }\n\n    if (bundle === BundleStatus.LOADING || !applications) {\n        return (\n            <AppSkeleton />\n        );\n    }\n\n    return (\n        <NotificationListBundlePage\n            bundle={ bundle }\n            applications={ applications }\n        />\n    );\n};\n","import * as React from 'react';\nimport { Route, RouteProps, Switch } from 'react-router';\n\nimport { RedirectToDefaultBundle } from './components/RedirectToDefaultBundle';\nimport { ErrorPage } from './pages/Error/Page';\nimport { IntegrationsListPage } from './pages/Integrations/List/Page';\nimport { NotificationsListPage } from './pages/Notifications/List/Page';\n\ninterface Path {\n    path: string;\n    component: React.ComponentType;\n}\n\nexport const linkTo = {\n    integrations: () => '/integrations',\n    notifications: (bundle: string) => `/notifications/${bundle}`\n};\n\nconst EmptyPage: React.FunctionComponent = () => null;\n\nconst pathRoutes: Path[] = [\n    {\n        path: '/',\n        component: EmptyPage\n    },\n    {\n        path: linkTo.integrations(),\n        component: IntegrationsListPage\n    },\n    {\n        path: linkTo.notifications(':bundleName'),\n        component: NotificationsListPage\n    }\n];\n\ntype InsightsRouteProps = RouteProps;\n\nconst InsightsRoute: React.FunctionComponent<InsightsRouteProps> = (props: InsightsRouteProps) => {\n    return (\n        <ErrorPage>\n            <Route { ...props } />\n        </ErrorPage>\n    );\n};\n\nexport const Routes: React.FunctionComponent = () => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <InsightsRoute\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                    exact={ true }\n                />\n            ))}\n            <RedirectToDefaultBundle />\n        </Switch>\n    );\n};\n","import { Filter, Page, Sort } from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nexport interface UsePageReturn {\n    page: Page;\n    changePage: (page: number) => void;\n    changeItemsPerPage: (perPage: number) => void;\n}\n\nexport type FilterBuilder<T> = (filters: T | undefined) => Filter | undefined;\n\nexport const usePage = <T>(defaultPerPage: number, filterBuilder: FilterBuilder<T>, filters?: T, sort?: Sort): UsePageReturn => {\n    const [ currentPage, setCurrentPage ] = useState(1);\n    const [ itemsPerPage, setItemsPerPage ] = useState(defaultPerPage);\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [ filters, setCurrentPage, itemsPerPage ]);\n\n    const page = useMemo(() => {\n        const filter = filterBuilder ? filterBuilder(filters) : undefined;\n        return Page.of(currentPage, itemsPerPage, filter, sort);\n    }, [ currentPage, itemsPerPage, filters, sort, filterBuilder ]);\n\n    const changePage = useCallback((page: number) => {\n        setCurrentPage(page);\n    },  [ setCurrentPage ]);\n\n    const changeItemsPerPage = useCallback((perPage: number) => {\n        setItemsPerPage(perPage);\n    }, [ setItemsPerPage ]);\n\n    return {\n        page,\n        changePage,\n        changeItemsPerPage\n    };\n};\n","import { Exporter, ExporterType } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\n\nimport { UserIntegration } from '../../../types/Integration';\nimport { IntegrationExporterCsv } from './Csv';\nimport { IntegrationExporterJson } from './Json';\n\nexport const integrationExporterFactory = (type: ExporterType): Exporter<UserIntegration> => {\n    switch (type) {\n        case ExporterType.CSV:\n            return new IntegrationExporterCsv();\n        case ExporterType.JSON:\n            return new IntegrationExporterJson();\n    }\n\n    assertNever(type);\n};\n","import { useCallback } from 'react';\n\nimport { IntegrationRow, OnEnable } from '../../../components/Integrations/Table';\nimport { UserIntegration } from '../../../types/Integration';\n\ninterface ActionResolverParams {\n    onEdit: (integration: UserIntegration) => void;\n    onDelete: (integration: UserIntegration) => void;\n    canWrite: boolean;\n    onEnable: OnEnable;\n}\n\nexport const useActionResolver = (params: ActionResolverParams) => {\n\n    return useCallback((integration: IntegrationRow, index: number) => {\n        const onEdit = params.onEdit;\n        const onDelete = params.onDelete;\n        const onEnable = params.onEnable;\n\n        const isDisabled = !params.canWrite;\n\n        return [\n            {\n                title: 'Edit',\n                isDisabled,\n                onClick: () => onEdit(integration)\n            }, {\n                title: 'Remove',\n                isDisabled,\n                onClick: () => onDelete(integration)\n            }, {\n                title: integration.isEnabled ? 'Disable' : 'Enable',\n                isDisabled,\n                onClick: () => onEnable(integration, index, !integration.isEnabled)\n            }\n        ];\n\n    }, [ params.onEdit, params.onDelete, params.canWrite, params.onEnable ]);\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const getBundlesAction = () => Operations.NotificationServiceGetBundleFacets.actionCreator();\n\nexport const useGetBundles = () => useQuery(getBundlesAction());\n","import { fetchRBAC, Rbac, waitForInsights } from '@redhat-cloud-services/insights-common-typescript';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Config from '../config/Config';\nimport { AppContext } from './AppContext';\n\nexport const useApp = (): Omit<AppContext, 'rbac'> & Partial<Pick<AppContext, 'rbac'>> => {\n\n    const history = useHistory();\n    const [ rbac, setRbac ] = useState<Rbac | undefined>(undefined);\n\n    useEffect(() => {\n        waitForInsights().then((insights) => {\n            insights.chrome.init();\n            const appId = insights.chrome.getApp();\n            switch (appId) {\n                case Config.notifications.subAppId:\n                    document.title = Config.notifications.title;\n                    break;\n                case Config.integrations.subAppId:\n                    document.title = Config.integrations.title;\n                    break;\n            }\n\n            insights.chrome.identifyApp(appId);\n        });\n    }, [ history ]);\n\n    useEffect(() => {\n        waitForInsights().then(insights => {\n            insights.chrome.auth.getUser().then(() => {\n                fetchRBAC(`${Config.notifications.subAppId},${Config.integrations.subAppId}`).then(setRbac);\n            });\n        });\n    }, []);\n\n    return {\n        rbac: rbac ? {\n            canWriteNotifications: rbac.hasPermission('notifications', 'notifications', 'write'),\n            canReadNotifications: rbac.hasPermission('notifications', 'notifications', 'read'),\n            canWriteIntegrationsEndpoints: rbac.hasPermission('integrations', 'endpoints', 'write'),\n            canReadIntegrationsEndpoints: rbac.hasPermission('integrations', 'endpoints', 'read')\n        } : undefined\n    };\n};\n","import './App.scss';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications';\nimport { AppSkeleton } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\n\nimport Config from '../config/Config';\nimport messages from '../properties/DefinedMessages';\nimport { Routes } from '../Routes';\nimport { getSubApp } from '../utils/Basename';\nimport { AppContext } from './AppContext';\nimport { useApp } from './useApp';\n\nconst App: React.ComponentType = () => {\n    const intl = useIntl();\n    const { rbac } = useApp();\n    const location = useLocation();\n\n    const serviceName = React.useMemo(() => {\n        switch (getSubApp(location.pathname)) {\n            case Config.integrations.subAppId:\n                return intl.formatMessage(messages.integrations);\n            case Config.notifications.subAppId:\n                return intl.formatMessage(messages.notifications);\n            default:\n                return '';\n        }\n    }, [ intl, location.pathname ]);\n\n    const hasReadPermissions = React.useMemo(() => {\n        const appId = getSubApp(location.pathname);\n        switch (appId) {\n            case Config.integrations.subAppId:\n                return rbac?.canReadIntegrationsEndpoints;\n            case Config.notifications.subAppId:\n                return rbac?.canReadNotifications;\n        }\n\n        return false;\n    }, [ rbac, location.pathname ]);\n\n    if (!rbac) {\n        return (\n            <AppSkeleton />\n        );\n    }\n\n    return (\n        <AppContext.Provider value={ {\n            rbac\n        } }>\n            { hasReadPermissions ? (\n                <>\n                    <NotificationsPortal />\n                    <Routes />\n                </>\n            ) : (\n                <NotAuthorized serviceName={ serviceName } />\n            ) }\n        </AppContext.Provider>\n    );\n};\n\nexport default App;\n","import { getType } from 'typesafe-actions';\n\nimport { NotificationAppAction } from '../actions/NotificationAppAction';\nimport { SavedNotificationScopeActions } from '../actions/SavedNotificationScopeAction';\nimport { SavedNotificationScopeState, Status } from '../types/SavedNotificationScopeTypes';\n\nexport const INITIAL_STATE: SavedNotificationScopeState = null;\n\nexport const SavedNotificationScopeReducer = (\n    state: SavedNotificationScopeState = INITIAL_STATE,\n    action: NotificationAppAction): SavedNotificationScopeState => {\n    switch (action.type) {\n        case getType(SavedNotificationScopeActions.setIntegration):\n            return {\n                integration: action.payload,\n                status: Status.DONE\n            };\n        case getType(SavedNotificationScopeActions.start):\n            if (!state) {\n                return state;\n            }\n\n            return {\n                ...state,\n                status: Status.LOADING\n            };\n        case getType(SavedNotificationScopeActions.finish):\n            if (!state) {\n                return state;\n            }\n\n            return {\n                integration: { ...state.integration, isEnabled: action.payload },\n                status: Status.DONE\n            };\n        case getType(SavedNotificationScopeActions.unset):\n            return null;\n        default:\n            return state;\n    }\n};\n","import { initStore, restoreStore } from '@redhat-cloud-services/insights-common-typescript';\nimport { Middleware } from 'redux';\n\nimport { INITIAL_STATE as SNS_INITIAL_STATE, SavedNotificationScopeReducer } from './reducers/SavedNotificationScopeReducer';\nimport { NotificationAppState } from './types/NotificationAppState';\n\nexport const createStore = (...middleware: Middleware[]) => {\n    return initStore(\n        {\n            savedNotificationScope: SNS_INITIAL_STATE\n        } as NotificationAppState,\n        {\n            savedNotificationScope: SavedNotificationScopeReducer\n        },\n        ...middleware);\n};\n\nexport const resetStore = () => restoreStore();\n","import { ActionType, createAction } from 'typesafe-actions';\n\nimport { IntegrationRef } from '../../types/Notification';\n\nexport enum SavedNotificationScopeKeys {\n    SET_INTEGRATION = 'SET_INTEGRATION',\n    START = 'START',\n    FINISH = 'FINISH',\n    UNSET = 'UNSET'\n}\n\nexport const SavedNotificationScopeActions = {\n    setIntegration: createAction(SavedNotificationScopeKeys.SET_INTEGRATION)<IntegrationRef>(),\n    start: createAction(SavedNotificationScopeKeys.START)(),\n    finish: createAction(SavedNotificationScopeKeys.FINISH)<boolean>(),\n    unset: createAction(SavedNotificationScopeKeys.UNSET)()\n};\n\nexport type SavedNotificationScopeAction = ActionType<typeof SavedNotificationScopeActions>;\n","import { IntegrationRef } from '../../types/Notification';\n\nexport enum Status {\n    LOADING,\n    DONE\n}\n\nexport type SavedNotificationScopeState = {\n    integration: IntegrationRef;\n    status: Status;\n} | null;\n","// This is a custom getBaseName that doesn't add the appId\n// The reason is that this 'app' is in 2 menus (integrations and notifications), so is easier to just add that into our\n// paths for easier navigation.\nexport const getBaseName = (pathname: string) => {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n};\n\nexport const getSubApp = (pathname: string) => {\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        return pathName[1];\n    }\n\n    return pathName[0];\n};\n"],"sourceRoot":""}
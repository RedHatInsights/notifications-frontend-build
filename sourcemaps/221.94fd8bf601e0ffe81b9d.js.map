{"version":3,"sources":["webpack:///./src/types/Integration.ts","webpack:///./src/config/Config.ts","webpack:///./src/properties/DefinedMessages.ts","webpack:///./src/components/RedirectToDefaultBundle.tsx","webpack:///./src/properties/Messages.ts","webpack:///./src/pages/Error/Page.tsx","webpack:///./src/types/Server.ts","webpack:///./src/app/AppContext.tsx","webpack:///./src/utils/getOuiaProps.ts","webpack:///./src/components/Integrations/Table/ConnectionAttempt.tsx","webpack:///./src/components/Integrations/Table/ConnectionAlert.tsx","webpack:///./src/components/Integrations/Table/ConnectionDegraded.tsx","webpack:///./src/components/Integrations/Table/ConnectionFailed.tsx","webpack:///./src/components/Integrations/Table/ExpandedContent.tsx","webpack:///./src/components/Integrations/Table.tsx","webpack:///./src/hooks/useTableExportConfig.ts","webpack:///./src/types/Environments.ts","webpack:///./src/components/Integrations/Filters.ts","webpack:///./src/components/Integrations/Toolbar.tsx","webpack:///./src/components/Icons/EnabledIntegrationIcon.tsx","webpack:///./src/components/Icons/DisabledIntegrationIcon.tsx","webpack:///./src/hooks/useDeleteModalReducer.ts","webpack:///./src/hooks/useFormModalReducer.ts","webpack:///./src/hooks/usePage.ts","webpack:///./src/generated/OpenapiIntegrations.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts","webpack:///./src/services/useListIntegrations.ts","webpack:///./src/utils/exporters/Integration/Csv.ts","webpack:///./src/utils/exporters/Integration/Json.ts","webpack:///./src/utils/exporters/Integration/Factory.ts","webpack:///./src/components/Integrations/AddNotificationBody.tsx","webpack:///./src/schemas/Integrations/Integration.ts","webpack:///./src/components/Integrations/Form/IntegrationTypeCamelForm.tsx","webpack:///./src/components/Integrations/Form/IntegrationTypeHttpForm.tsx","webpack:///./src/components/Integrations/Form/IntegrationTypeForm.tsx","webpack:///./src/components/Integrations/Form.tsx","webpack:///./src/components/Integrations/SaveModal.tsx","webpack:///./src/services/useSaveIntegration.ts","webpack:///./src/services/useSwitchIntegrationEnabledStatus.ts","webpack:///./src/store/selectors/SavedNotificationScopeSelector.ts","webpack:///./src/pages/Integrations/Create/CreatePage.tsx","webpack:///./src/components/Integrations/DeleteModal.tsx","webpack:///./src/generated/OpenapiNotifications.ts","webpack:///./src/types/Notification.ts","webpack:///./src/types/Recipient.ts","webpack:///./src/types/adapters/NotificationAdapter.ts","webpack:///./src/types/adapters/BehaviorGroupAdapter.ts","webpack:///./src/services/Notifications/GetAffectedBehaviorGroupsByEndpoint.ts","webpack:///./src/services/useDeleteIntegration.ts","webpack:///./src/pages/Integrations/Delete/DeleteModal.tsx","webpack:///./src/pages/Integrations/List/useIntegrationFilter.ts","webpack:///./src/services/useListIntegrationHistory.ts","webpack:///./src/pages/Integrations/List/Page.tsx","webpack:///./src/pages/Integrations/List/useIntegrationRows.ts","webpack:///./src/pages/Integrations/List/useActionResolver.ts","webpack:///./src/components/ButtonLink.tsx","webpack:///./src/components/Notifications/EventLog/EventLogDateFilter.tsx","webpack:///./src/components/UtcDate.tsx","webpack:///./src/components/Notifications/EventLog/EventLogActionPopoverContent.tsx","webpack:///./src/components/Notifications/EventLog/EventLogTable.tsx","webpack:///./src/components/Notifications/EventLog/EventLogFilter.ts","webpack:///./src/components/Notifications/EventLog/EventLogToolbar.tsx","webpack:///./src/types/adapters/NotificationEventAdapter.ts","webpack:///./src/services/EventLog/GetNotificationEvents.ts","webpack:///./src/services/Notifications/GetApplications.ts","webpack:///./src/services/Notifications/GetBundles.ts","webpack:///./src/pages/Notifications/EventLog/useFilterBuilder.ts","webpack:///./src/pages/Notifications/EventLog/EventLogPage.tsx","webpack:///./src/utils/Immutable.ts","webpack:///./src/utils/Find.ts","webpack:///./src/components/Notifications/Table/BehaviorGroupCell.tsx","webpack:///./src/components/Notifications/NotificationsBehaviorGroupTable.tsx","webpack:///./src/components/Ouia.tsx","webpack:///./src/components/Notifications/Filter.ts","webpack:///./src/components/Notifications/Types.ts","webpack:///./src/components/Notifications/Table/GroupBy.tsx","webpack:///./src/components/Notifications/Toolbar.tsx","webpack:///./src/services/useListNotifications.ts","webpack:///./src/components/Icons/WebhookIcon.svg","webpack:///./src/components/Icons/WebhookIcon.tsx","webpack:///./src/components/Notifications/ActionComponent.tsx","webpack:///./src/components/Notifications/Recipient.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupCard.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupCardList.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupDeleteModal.tsx","webpack:///./src/hooks/useOnDeleteWrapper.ts","webpack:///./src/services/Notifications/DeleteBehaviorGroup.ts","webpack:///./src/services/Notifications/GetAffectedNotificationsByBehaviorGroup.ts","webpack:///./src/pages/Notifications/Form/DeleteBehaviorGroupPage.tsx","webpack:///./src/schemas/Integrations/Notifications.ts","webpack:///./src/components/Notifications/RecipientContext.ts","webpack:///./src/components/Notifications/Form/RecipientOption.ts","webpack:///./src/components/Notifications/Form/useRecipientOptionMemo.tsx","webpack:///./src/components/Notifications/Form/useTypeaheadReducer.ts","webpack:///./src/components/Notifications/Form/IntegrationRecipientTypeahead.tsx","webpack:///./src/components/Notifications/Form/RecipientTypeahead.tsx","webpack:///./src/components/Notifications/EditableActionRow/RecipientForm.tsx","webpack:///./src/components/Notifications/Form/ActionOption.ts","webpack:///./src/components/Notifications/Form/ActionTypeahead.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupFormActionsTable.tsx","webpack:///./src/components/Notifications/BehaviorGroup/useBehaviorGroupActionHandlers.ts","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupForm.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupSaveModal.tsx","webpack:///./src/components/Notifications/useGetRecipients.ts","webpack:///./src/services/Notifications/SaveBehaviorGroup.ts","webpack:///./src/services/Notifications/UpdateBehaviorGroupActions.ts","webpack:///./src/pages/Notifications/Form/EditBehaviorGroupPage.tsx","webpack:///./src/components/Notifications/useGetIntegrations.ts","webpack:///./src/services/Integrations/GetDefaultSystemEndpoint.ts","webpack:///./src/pages/Notifications/List/BehaviorGroupsSection.tsx","webpack:///./src/services/Notifications/GetBehaviorGroups.ts","webpack:///./src/services/Notifications/GetBehaviorGroupByNotificationId.ts","webpack:///./src/services/Notifications/LinkBehaviorGroup.ts","webpack:///./src/pages/Notifications/List/useBehaviorGroupNotificationRows.tsx","webpack:///./src/pages/Notifications/List/BundlePageBehaviorGroupContent.tsx","webpack:///./src/pages/Notifications/List/useNotificationFilter.ts","webpack:///./src/pages/Notifications/List/useBehaviorGroupContent.ts","webpack:///./src/pages/Notifications/List/useNotificationPage.ts","webpack:///./src/pages/Notifications/List/BundlePage.tsx","webpack:///./src/pages/Notifications/List/Page.tsx","webpack:///./src/Routes.tsx","webpack:///./src/pages/Notifications/EventLog/useEventLogFilter.ts","webpack:///./src/generated/OpenapiPrivate.ts","webpack:///./src/types/adapters/ServerAdapter.ts","webpack:///./src/services/GetServerStatus.ts","webpack:///./src/app/App.tsx","webpack:///./src/app/useApp.ts","webpack:///./src/store/reducers/SavedNotificationScopeReducer.ts","webpack:///./src/store/Store.ts","webpack:///./src/store/actions/SavedNotificationScopeAction.ts","webpack:///./src/store/types/SavedNotificationScopeTypes.ts","webpack:///./src/utils/Basename.ts"],"names":["IntegrationType","UserIntegrationType","WEBHOOK","CAMEL","integrations","subAppId","title","notifications","integrationNames","EMAIL_SUBSCRIPTION","pages","paging","defaultPerPage","id","description","defaultMessage","integrationsEmptyStateTitle","integrationsTableEmptyStateBody","defaultBundleName","RedirectToDefaultBundle","from","linkTo","to","cache","locale","navigator","language","slice","intl","onError","console","log","intlSettings","Messages","appName","formatMessage","appNameIntegrations","list","add","edit","viewHistory","eventLog","subtitle","viewNotifications","error","emptyState","content","showDetails","actions","goToIndex","components","toolbar","addIntegration","editIntegration","table","columns","name","type","lastConnectionAttempt","enabled","enableError","disableError","integrationType","types","DRAWER","INTEGRATION","event","action","recipient","common","choose","ErrorPage","props","goToListPage","history","goBack","ErrorBoundaryPage","actionLabel","pageHeader","children","ServerStatus","AppContext","rbac","canReadIntegrationsEndpoints","canReadNotifications","canWriteIntegrationsEndpoints","canWriteNotifications","isOrgAdmin","server","status","RUNNING","useAppContext","useContext","getOuiaProps","getOuiaPropsFactory","ConnectionAttemptType","dateClassName","style","marginLeft","global_spacer_xs","ConnectionAttempt","formattedDate","format","toUtc","date","SUCCESS","color","global_success_color_100","FAILED","global_danger_color_100","getIcon","className","connectionAttemptClassName","global_spacer_sm","marginTopClassName","marginTop","ConnectionAlert","Alert","variant","alertVariant","isInline","attempts","map","attempt","index","key","isSuccess","ConnectionDegraded","failures","filter","a","length","AlertVariant","ConnectionFailed","titleClass","fontWeight","ExpandedContent","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","integration","url","sslVerificationEnabled","undefined","secretToken","LastConnectionAttemptStatus","connectionAlertClassName","paddingBottom","global_spacer_md","expandedContentClassName","paddingLeft","isEnabledLoadingClassName","smallMarginLeft","degradedClassName","global_warning_color_200","fontSize","getLastConnectionAttemptStatus","UNKNOWN","ERROR","WARNING","getConnectionAlert","LastConnectionAttemptSuccess","LastConnectionAttemptError","getConnectionAttemptCell","isLoading","Spinner","size","Text","cellFormatters","expandable","transforms","rowExpandedContentClassName","rowWrapperClassName","tableClassName","noneStyle","important","borderStyle","noBorderBottom","borderBottom","borderTop","buildClassNames","RowWrapper","trRef","rowProps","row","rest","ref","isExpanded","hidden","IntegrationsTable","useIntl","onCollapseHandler","_event","_index","isOpen","data","onCollapse","findIndex","rows","onEnable","reduce","idx","push","selected","isSelected","cells","lastConnectionAttempts","isConnectionAttemptLoading","isEnabledLoading","Switch","isChecked","isEnabled","onChange","isDisabled","ouiaId","fullWidth","parent","colSpan","actionsResolverCallback","rowData","actionResolver","integrationIndex","i","integrationRow","ouiaSafe","SkeletonTable","rowSize","loadingCount","paddingColumnSize","sortBy","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","EmptyStateBody","Table","rowWrapper","TableHeader","TableBody","useTableExportConfig","onExport","extraItems","onSelect","exporterTypeFromString","stagingAndProd","stagingAndProdStable","isStagingOrProd","insights","includes","getInsightsEnvironment","IntegrationFilterColumn","cssRaw","enabledTextClassName","filterMetadata","NAME","label","placeholder","ENABLED","options","exclusive","items","value","IntegrationsToolbar","primaryToolbarFilterConfig","usePrimaryToolbarFilterConfig","filters","setFilters","clearFilters","actionsConfig","onClick","onAddIntegration","kebabToggleProps","exportConfig","filterConfig","useInsightsEnvironmentFlag","getInsights","useCallback","activeFiltersConfig","pageChanged","page","inner","perPageChanged","perPage","topPaginationProps","itemCount","count","isCompact","PaginationVariant","onSetPage","onFirstClick","onPreviousClick","onNextClick","onLastClick","onPageInput","onPerPageSelect","bottomPaginationProps","PrimaryToolbar","pagination","UseDeleteModalReducerActionType","initialState","reducer","state","DELETE","RESET","useDeleteModalReducer","dispatch","useReducer","useMemo","delete","makeDeleteAction","reset","UseFormModalReducerActionType","isEdit","template","isCopy","useFormModalReducer","copyFunction","CREATE","EDIT","buildReducer","create","usePage","filterBuilder","sort","currentPage","setCurrentPage","useState","itemsPerPage","setItemsPerPage","useEffect","Page","changePage","changeItemsPerPage","Operations","Schemas","zodSchemaApplication","bundle_id","zodSchemaUUID","created","optional","nullable","display_name","updated","nonstrict","zodSchemaBasicAuthentication","password","username","zodSchemaBehaviorGroupAction","endpoint","zodSchemaEndpoint","zodSchemaBehaviorGroupActionId","behaviorGroupId","endpointId","zodSchemaBundle","zodSchemaCamelProperties","basic_authentication","disable_ssl_verification","extras","secret_token","sub_type","zodSchemaEmailSubscriptionProperties","group_id","ignore_preferences","only_admins","properties","zodSchemaWebhookProperties","zodSchemaEndpointType","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","application","bundle","event_type","details","endpoint_type","invocation_result","zodSchemaHttpType","zodSchemaMeta","int","zodSchemaStatus","method","Application","BasicAuthentication","BehaviorGroup","BehaviorGroupAction","BehaviorGroupActionId","Bundle","CamelProperties","CurrentStatus","end_time","start_time","EmailSubscriptionProperties","EmailSubscriptionType","Endpoint","EndpointPage","links","meta","EndpointProperties","EndpointType","EventLogEntry","EventLogEntryAction","EventType","application_id","Facet","displayName","HttpType","Meta","NotificationHistory","invocationResult","invocationTime","PageEventLogEntry","RenderEmailTemplateRequest","body_template","payload","subject_template","RequestEmailSubscriptionProperties","Status","UUID","WebhookProperties","__Empty","max","EndpointServiceGetEndpoints","EndpointServiceCreateEndpoint","EndpointServiceSubscribeEmail","EndpointServiceUnsubscribeEmail","EndpointServiceGetOrCreateEmailSubscriptionEndpoint","EndpointServiceGetEndpoint","EndpointServiceUpdateEndpoint","EndpointServiceDeleteEndpoint","EndpointServiceEnableEndpoint","EndpointServiceDisableEndpoint","EndpointServiceGetEndpointHistory","EndpointServiceGetDetailedEndpointHistory","actionCreator","params","query","active","limit","offset","pageNumber","sort_by","actionBuilder","queryParams","config","rules","ValidateRule","build","body","Response200","path","replace","applicationName","toString","bundleName","includeDetail","historyId","getIntegrationType","Error","getEndpointType","notNull","defaultValue","toIntegration","serverIntegration","integrationBase","toIntegrationWebhook","subType","basicAuth","user","pass","toIntegrationCamel","ignorePreferences","groupId","onlyAdmin","toIntegrationEmail","toIntegrationProperties","integrationHttp","integrationCamel","integrationEmail","toServerIntegrationRequest","listIntegrationsActionCreator","pager","toQuery","filterType","t","filterActive","listIntegrationIntegrationDecoder","validationResponseTransformer","validatedResponse","serverIntegrations","serverNotifications","e","errors","IntegrationExporterCsv","ExporterCsv","IntegrationExporterJson","ExporterJson","buttonClassname","AddNotificationBody","text","buttonText","Button","ButtonVariant","switchEnabled","IntegrationSchemaBase","required","trim","oneOf","default","IntegrationHttpSchema","concat","shape","notRequired","Object","values","IntegrationCamelSchema","when","is","then","transform","s","JSON","parse","test","IntegrationSchema","IntegrationTypeCamelForm","FormTextInput","isRequired","ouiaIdConcat","Checkbox","FormSection","FormTextArea","IntegrationTypeHttpForm","IntegrationTypeForm","IntegrationsForm","useFormikContext","FormSelectOption","Form","maxLength","FormSelect","InternalIntegrationSaveModal","pageTitle","handleSubmit","isValid","isSubmitting","onSaveClicked","SaveModal","isSaving","onSave","onClose","actionButtonDisabled","IntegrationSaveModal","initialIntegration","initial","cast","stringify","onSubmit","async","transformedIntegration","Formik","initialValues","validationSchema","validateOnMount","saveIntegrationActionCreator","createIntegrationActionCreator","decoder","response","switchIntegrationEnabledStatusActionCreator","savedNotificationScopeSelector","savedNotificationScope","ConnectedAddNotificationBodyContainer","connect","reduxDispatch","switchIntegrationEnabledStatus","useMutation","mutate","SavedNotificationScopeAction","CreatePage","saveIntegrationMutation","useTransformQueryResponse","hasError","setError","onSaveIntegration","savedIntegration","addSuccessNotification","loading","IntegrationDeleteModal","onDeleteInternal","onDelete","behaviorGroups","Skeleton","behaviorGroupText","ExpandableSection","toggleText","List","behaviorGroup","ListItem","DeleteModal","isDeleting","titleIconVariant","NotificationServiceCreateBehaviorGroup","NotificationServiceGetBehaviorGroupsAffectedByRemovalOfEndpoint","NotificationServiceUpdateBehaviorGroupActions","NotificationServiceUpdateBehaviorGroup","NotificationServiceDeleteBehaviorGroup","NotificationServiceFindBehaviorGroupsByBundleId","NotificationServiceGetEventTypes","NotificationServiceGetEventTypesAffectedByRemovalOfBehaviorGroup","NotificationServiceGetLinkedBehaviorGroups","NotificationServiceUpdateEventTypeBehaviors","EventServiceGetEvents","NotificationServiceGetApplicationsFacets","NotificationServiceGetBundleFacets","NotificationServiceMarkRead","bundleId","applicationIds","eventTypeId","appIds","bundleIds","endDate","endpointTypes","eventTypeDisplayName","includeDetails","invocationResults","startDate","Response204","isActionNotify","NotificationType","isActionIntegration","Recipient","this","IntegrationRecipient","super","NotificationRecipient","integrationId","sendToAdmin","_toAction","serverAction","toNotification","serverNotification","applicationDisplayName","reduceActions","current","draft","existingAction","find","toNotifications","reportBehaviorGroup","element","toBehaviorGroup","serverBehaviorGroup","behaviorAction","toAction","toShallowBehaviorGroupRequest","behaviorGroupsForEndpointActionCreator","defaultBehaviorGroupDecoder","deleteIntegrationActionCreator","IntegrationDeleteModalPage","deleteIntegrationMutation","getBehaviorGroupsQuery","useParameterizedQuery","deleteIntegration","useUrlStateName","useUrlStateString","useUrlStateEnabled","_defaultValue","useUrlStateMultipleOptions","useStateFactory","column","integrationFilterBuilder","Filter","toLocaleLowerCase","and","Operator","userIntegrationCopier","userIntegration","ConnectedIntegrationsListPage","integrationFilter","debounce","useFilters","useIntegrationFilter","pageData","integrationsQuery","useQuery","initFetch","exportIntegrationsQuery","integrationRows","setIntegrationRows","prevIntegrationsInput","usePrevious","ClientContext","setIntegrationRowByIndex","partialIntegration","prevIntegrations","newIntegrations","setIntegrationRowById","prev","clearQueue","forEach","last5","p","Date","_integration","message","addDangerNotification","useIntegrationRows","modalIsOpenState","modalIsOpenActions","deleteModalState","deleteModalActions","onAddIntegrationClicked","onEdit","exporter","ExporterType","integrationExporterFactory","exportedIntegrations","nextPage","export","now","canWrite","closeFormModal","saved","closeDeleteModal","deleted","Math","min","PageHeader","PageHeaderTitle","Main","Section","clearFilter","pageCount","ButtonLink","navigate","EventLogDateFilterValue","labels","TODAY","YESTERDAY","LAST_7","LAST_14","CUSTOM","toClassName","paddingRight","global_palette_black_600","datePickerClassName","backgroundColor","cursor","$nest","borderBottomColor","global_active_color_100","EventLogSelectObject","selectOption","dateInputProps","isReadOnly","CustomDateFilter","maxDate","minDate","days","startRangeValidators","isBefore","isAfter","period","endRangeValidators","setStartDate","start","setPeriod","parseISO","setEndDate","end","startValue","endValue","Split","SplitItem","DatePicker","inputProps","validators","Bullseye","EventLogDateFilter","v","SelectOption","setOpen","onToggle","_e","selectObject","setValue","Select","SelectVariant","selections","retentionDays","UtcDate","isUtc","formatted","actionLabelMap","headerClass","minWidth","EventLogActionPopoverContent","TableComposable","borders","TableVariant","Thead","Tr","Th","Tbody","Td","width","success","EventLogTableColumns","labelClassName","EventLogTable","onSort","columnIndex","sortByDirection","_extraData","externalOnSort","sortOptions","EVENT","APPLICATION","DATE","direction","sortDirection","sortColumn","events","Array","_","LabelGroup","Popover","isVisible","hasAutoWidth","bodyContent","endpointType","Label","EventLogFilterColumn","EventLogToolbar","bundleOptions","applicationOptions","BUNDLE","b","chipValue","dedicatedAction","dateFilter","setDateFilter","toNotificationEvent","serverEvent","fromUtc","toNotificationEventAction","serverEndpointType","eventDecoder","getApplicationsAction","useGetBundles","DATE_FORMAT","subtitleClassName","paddingTop","emptyImmutableArray","freeze","emptyImmutableObject","findById","findByKey","val","grayFontClassName","global_palette_black_700","noBehaviorGroupsClassName","textAlign","bellClassName","marginRight","BehaviorGroupChip","unlink","notification","Chip","BehaviorGroupCell","onSelected","dataset","currentTarget","firstChild","behaviorGroupContent","found","OptionsMenuItem","bg","toggle","OptionsMenuToggle","toggleTemplate","ChipGroup","readonlyText","global_palette_black_400","join","isEditMode","OptionsMenu","menuItems","menuAppendTo","document","TableText","wrapModifier","actionButtonClassName","float","cellWidth","EmptySpan","_props","emptySpanProducer","NotificationsBehaviorGroupTable","Component","Wrapped","ouia","callbacks","onStartEditing","onFinishEditing","onCancelEditing","onBehaviorGroupLinkUpdated","loadingActionStatus","behaviors","global_disabled_color_100","isOutsideDropdown","actionsToggle","NotificationFilterColumn","GroupByEnum","GroupBy","DropdownItem","None","groupBy","target","shouldBeOpen","pascalCase","Dropdown","DropdownToggle","toggleIndicator","dropdownItems","NotificationsToolbar","appFilterItems","appFilterOptions","ACTION","exportConfigInternal","onGroupBySelected","verticalAlign","height","alt","src","marginLeftClassName","ActionTypeToIcon","actionType","ActionComponentWrapper","ActionComponent","isDefault","disabledLabelClassName","Tooltip","position","hasOutline","r","cardClassName","contentTitleStyle","BehaviorGroupCardLayout","switchOpen","Card","isFlat","CardHeader","CardHeaderMain","TextVariants","CardActions","KebabToggle","isPlain","DropdownPosition","CardBody","Grid","hasGutter","GridItem","span","contents","BehaviorGroupCard","onClickEdit","onClickDelete","BehaviorGroupCardSkeleton","contentWidth","cardsWrapperClassName","overflow","cardWrapperClassName","BehaviorGroupCardListLayout","measureRef","measuredSizing","useMeasure","container","refContainer","getBoundingClientRect","Flex","alignItems","alignContent","FlexItem","BehaviorGroupCardList","BehaviorGroupCardListSkeleton","BehaviorGroupDeleteModal","toDelete","useOnDeleteWrapper","cancelButtonTitle","conflictingNotifications","cancelButtonVariant","ackDelete","setAckDelete","Stack","StackItem","actionButtonHidden","BehaviorGroupDeleteModalSkeleton","deleteBehaviorGroupAction","defaultNotificationsDecoder","DeleteBehaviorGroupPage","deleteBehaviorGroup","affected","getAffectedNotificationsByBehaviorGroupAction","ActionIntegration","ActionNotify","ActionsArray","obj","hasOwnProperty","context","foundEmail","integrationIds","createError","BehaviorGroupSchema","RecipientContext","createContext","getIntegrations","getNotificationRecipients","useRecipientContext","RecipientContextProvider","Provider","RecipientOption","equals","mapper","getKey","useRecipientOptionMemo","show","loadingDefault","isNoResultsOption","defaultValues","loadingFilter","filterValues","ReducerActionType","reducerFunction","SET_FILTER_VALUE","search","lastSearch","LOAD_FILTER_VALUE","USE_DEFAULTS","SET_DEFAULTS","useTypeaheadReducer","setFilterValue","loadFilterValue","setDefaults","useDefaults","IntegrationRecipientTypeahead","prevOpen","dispatchers","onOpenChange","onFilter","selection","sel","integrationSelected","chooseText","toLowerCase","typeAheadAriaLabel","placeholderText","RecipientTypeahead","recipients","onClear","dummyOnToggle","RecipientForm","recipientSelected","recipientOnClear","FormHelperText","isError","isHidden","ActionOption","kind","notificationType","actionName","ActionTypeahead","actionSelected","selectedOption","showAsProd","selectableOptions","availableNotificationTypes","availableIntegrationTypes","selectedNotifications","o","tableHeaderClassName","tableBodyClassName","alignLeftClassName","emptySpan","BehaviorGroupFormActionsTable","setValues","touched","setFieldTouched","form","touchedActions","errorActions","Set","setValueDispatch","updater","Function","addAction","rowHandlers","setActions","handleActionSelected","handleIntegrationSelected","handleRecipientSelected","rowAsNotification","handleRecipientOnClear","isTouched","handleRemove","EditBehaviorGroupForm","FieldArray","helpers","InternalBehaviorGroupSaveModal","ModalVariant","BehaviorGroupSaveModal","getRecipients","lowerCaseSearch","useGetRecipients","saveBehaviorGroupActionCreator","updateBehaviorGroupActionsActionCreator","endpointIds","EditBehaviorGroupPage","_search","useGetIntegrations","actionsContextValue","saveBehaviorGroupMutation","updateBehaviorGroupActionsMutation","fetchingIntegrations","setFetchingIntegrations","updateBehaviorGroupActions","saveBehaviorGroup","original","Promise","resolve","toFetch","onlyAdmins","toSystemProperties","all","systemProps","systemProperties","getDefaultSystemEndpointAction","result","newIds","endpointsToAdd","flat","catch","err","expandableSectionClassName","global_BackgroundColor_100","global_spacer_lg","sectionClassName","sectionTitleClassName","titleClassName","global_palette_black_1000","emptyAddButtonClassName","BehaviorGroupAddButton","buttonProps","button","isAriaDisabled","BehaviorGroupsSection","setExpanded","setFilter","filteredBehaviors","lowerCaseFilter","editModalState","editModalActions","createGroup","stopPropagation","onCloseModal","reload","onCloseDelete","onClearFilter","contentId","ExpandableSectionToggle","Badge","isRead","isDetached","SearchInput","behaviorGroupDecoder","getBehaviorGroupByNotificationAction","notificationId","getNotification","behaviorGroupSectionClassName","marginBottom","global_spacer_xl","emptyArray","BundlePageBehaviorGroupContent","notificationsFilter","initialAppOptions","useUrlStateApplication","useUrlStateAction","useNotificationFilter","applications","useGetBehaviorGroups","errorObject","useBehaviorGroupContent","notificationPage","appFilter","arrayValue","filterOption","useNotificationPage","debouncedFilters","useNotifications","filterApplicationId","filterBundleId","listNotificationsActionCreator","notificationRows","updateBehaviorGroupLink","startEditMode","finishEditMode","cancelEditMode","updateBehaviorGroups","setNotificationRows","prevNotificationInput","removeBehaviorGroup","splice","ob","nb","linkBehavior","setEditMode","command","behaviorGroupIds","linkBehaviorGroupAction","draftNotification","oldBehaviors","_prev","useBehaviorGroupNotificationRows","isLinked","displayInlineClassName","display","NotificationListBundlePage","pageHeaderTitleProps","eventLogPageUrl","isFilled","InsightsEnvDetector","onEnvironment","RenderIfFalse","Link","BundleStatus","pathRoutes","getBundles","bundles","getApplications","eventLogFilters","useApplication","useBundle","useEvent","useEventLogFilter","setSortDirection","setSortColumn","selectedBundleNames","selectedBundles","selectedAppNames","selectedApps","filterPeriod","today","sub","toDate","yesterday","useFilterBuilder","toUpperCase","Sort","eventsPage","eventsQuery","filterBundleIds","filterAppIds","filterStart","filterEnd","filterEvent","useGetEvents","eventNotificationPageUrl","NOT_FOUND","FAILED_TO_LOAD","LOADING","isBundleStatus","AppSkeleton","InsightsRoute","Routes","on","chrome","pathname","domEvent","href","base","relative","substr","route","exact","location","pathRoute","StatusServiceGetCurrentStatus","adapter","currentStatus","MAINTENANCE","utcFormat","regularFormat","serverStatus","setRbac","setServer","setOrgAdmin","waitForInsights","init","appId","getApp","identifyApp","auth","getUser","identity","is_org_admin","fetchRBAC","hasPermission","useApp","serviceName","hasReadPermissions","utcStartTime","utcEndTime","startTime","endTime","timezone","Maintenance","timeZone","NotificationsPortal","NotAuthorized","SavedNotificationScopeReducer","getType","createStore","middleware","initStore","resetStore","restoreStore","SavedNotificationScopeKeys","SavedNotificationScopeActions","setIntegration","createAction","SET_INTEGRATION","START","finish","FINISH","unset","UNSET","getBaseName","release","pathName","split","shift","getSubApp"],"mappings":"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","file":"js/221.6769d25b170fcf3acb77.js","sourcesContent":["import { Schemas } from '../generated/OpenapiIntegrations';\nimport { UUID } from './Notification';\n\n// Integrations that exist\nexport enum IntegrationType {\n    WEBHOOK = 'webhook',\n    CAMEL = 'camel',\n    EMAIL_SUBSCRIPTION = 'email_subscription'\n}\n\nexport const UserIntegrationType = {\n    WEBHOOK: IntegrationType.WEBHOOK,\n    CAMEL: IntegrationType.CAMEL\n} as const;\n\nexport type UserIntegrationType = (typeof UserIntegrationType)[keyof typeof UserIntegrationType];\n\nexport interface IntegrationBase<T extends IntegrationType> {\n    id: string;\n    name: string;\n    type: T;\n    isEnabled: boolean;\n}\n\nexport interface IntegrationHttp extends IntegrationBase<IntegrationType.WEBHOOK> {\n    type: IntegrationType.WEBHOOK;\n    url: string;\n    sslVerificationEnabled: boolean;\n    secretToken?: string;\n    method: Schemas.HttpType;\n}\n\nexport interface IntegrationCamel extends IntegrationBase<IntegrationType.CAMEL> {\n    type: IntegrationType.CAMEL;\n    url: string;\n    sslVerificationEnabled: boolean;\n    secretToken?: string;\n    subType?: string;\n    basicAuth?: {\n        user: string;\n        pass: string;\n    };\n    extras?: Record<string, string>;\n}\n\nexport interface IntegrationEmailSubscription extends IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION> {\n    type: IntegrationType.EMAIL_SUBSCRIPTION,\n    onlyAdmin: boolean;\n    ignorePreferences: boolean;\n    groupId?: UUID\n}\n\nexport type Integration = IntegrationHttp | IntegrationEmailSubscription | IntegrationCamel;\n\n// Integrations that the user can create in the Integrations page;\nexport type UserIntegration = Extract<Integration, {\n    type: UserIntegrationType\n}>;\n\ntype NewIntegrationKeys = 'id';\n\nexport type NewIntegrationTemplate<\n    T extends IntegrationBase<IntegrationType>\n> = Omit<T, NewIntegrationKeys> & Partial<Pick<T, NewIntegrationKeys>>;\n\nexport type NewIntegrationBase = NewIntegrationTemplate<IntegrationBase<UserIntegrationType>>;\nexport type NewIntegration = NewIntegrationTemplate<Integration>;\nexport type NewUserIntegration = NewIntegrationTemplate<UserIntegration>;\n\nexport type ServerIntegrationRequest = Schemas.Endpoint;\nexport type ServerIntegrationResponse = Schemas.Endpoint;\n\nexport interface IntegrationConnectionAttempt {\n    date: Date;\n    isSuccess: boolean;\n}\n","import { DeepReadonly } from 'ts-essentials';\n\nimport { IntegrationType } from '../types/Integration';\n\nconst apiVersion = 'v1.0';\nconst apiBaseUrl = `/api/notifications/${apiVersion}`;\n\nexport const withBaseUrl = (path: string) => `${apiBaseUrl}${path}`;\n\nconst Config = {\n    integrations: {\n        subAppId: 'integrations',\n        title: 'Integrations | Settings'\n    },\n    notifications: {\n        subAppId: 'notifications',\n        title: 'Notifications | Settings'\n    },\n    integrationNames: {\n        [IntegrationType.CAMEL]: 'Integration: Camel',\n        [IntegrationType.WEBHOOK]: 'Integration: Webhook',\n        [IntegrationType.EMAIL_SUBSCRIPTION]: 'Email'\n    } as Record<IntegrationType, string>,\n    pages: {\n    },\n    paging: {\n        defaultPerPage: 20\n    }\n};\n\nconst ReadonlyConfig: DeepReadonly<typeof Config> = Config;\nexport default ReadonlyConfig;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    notifications: {\n        id: 'notifications',\n        description: 'Application name',\n        defaultMessage: 'Notifications'\n    },\n    integrations: {\n        id: 'integrations',\n        description: 'Application name',\n        defaultMessage: 'Integrations'\n    },\n    integrationsEmptyStateTitle: {\n        id: 'integrationsEmptyStateTitle',\n        description: 'Integrations Empty State title',\n        defaultMessage: 'No integrations'\n    },\n    integrationsTableEmptyStateBody: {\n        id: 'integrationsTableEmptyStateBody',\n        description: 'Integrations Empty State body',\n        defaultMessage: 'Connect to webhooks and external applications.'\n    }\n});\n","import * as React from 'react';\nimport { Redirect } from 'react-router';\n\nimport { linkTo } from '../Routes';\n\nexport const defaultBundleName = 'rhel';\n\nexport const RedirectToDefaultBundle = () => <Redirect from={ linkTo.notifications('') } to={ linkTo.notifications(defaultBundleName) } />;\n","import { intlHelper } from '@redhat-cloud-services/frontend-components-translations';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport { DeepReadonly } from 'ts-essentials';\n\nimport { IntegrationType } from '../types/Integration';\nimport messages from './DefinedMessages';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\nconst intlSettings = { locale };\n\nconst MutableMessages = {\n    appName: intlHelper(intl.formatMessage(messages.notifications), intlSettings),\n    appNameIntegrations: intlHelper(intl.formatMessage(messages.integrations), intlSettings),\n    pages: {\n        integrations: {\n            list: {\n                title: 'Integrations'\n            },\n            add: {\n                title: 'Add integration'\n            },\n            edit: {\n                title: 'Edit integration'\n            }\n        },\n        notifications: {\n            list: {\n                title: 'Notifications',\n                viewHistory: 'View event log'\n            },\n            eventLog: {\n                title: 'Event Log',\n                subtitle: 'View all the events affecting your organization',\n                viewNotifications: 'View notification settings'\n            }\n        },\n        error: {\n            title: 'Notifications',\n            emptyState: {\n                title: 'Unhandled error',\n                content: 'There was a problem trying to process your request.',\n                showDetails: 'Show details',\n                actions: {\n                    goToIndex: 'Go back'\n                }\n            }\n        }\n    },\n    components: {\n        integrations: {\n            toolbar: {\n                actions: {\n                    addIntegration: 'Add integration',\n                    editIntegration: 'Edit integration'\n                }\n            },\n            table: {\n                title: 'Integrations',\n                columns: {\n                    name: 'Name',\n                    type: 'Type',\n                    lastConnectionAttempt: 'Last connection attempt',\n                    enabled: 'Enabled'\n                }\n            },\n            enableError: {\n                title: 'Unable to enable the Integration',\n                description: 'There was a problem trying to enable the integration: \"{0}\".\\nPlease try again.'\n            },\n            disableError: {\n                title: 'Unable to disable the Integration',\n                description: 'There was a problem trying to disable the integration: \"{0}\".\\nPlease try again.'\n            },\n            integrationType: {\n                [IntegrationType.WEBHOOK]: 'Webhook',\n                [IntegrationType.CAMEL]: 'Camel'\n            }\n        },\n        notifications: {\n            types: {\n                EMAIL_SUBSCRIPTION: 'Send an email',\n                DRAWER: 'Send to notification drawer',\n                INTEGRATION: 'Integration'\n            },\n            toolbar: {\n                actions: {\n\n                }\n            },\n            table: {\n                title: 'Notifications',\n                columns: {\n                    event: 'Event type',\n                    action: 'Action',\n                    recipient: 'Recipient'\n                }\n            }\n        }\n    },\n    common: {\n        choose: 'Please choose'\n    }\n};\n\nexport const Messages: DeepReadonly<typeof MutableMessages> = MutableMessages;\n","import { ErrorBoundaryPage } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { Messages } from '../../properties/Messages';\n\ntype ErrorPageProps = RouteComponentProps<any>;\n\nexport const ErrorPageInternal: React.FunctionComponent<ErrorPageProps> = (props) => {\n    const goToListPage = React.useCallback(() => {\n        props.history.goBack();\n    }, [ props.history ]);\n\n    return (\n        <ErrorBoundaryPage\n            action={ goToListPage }\n            actionLabel={ Messages.pages.error.emptyState.actions.goToIndex }\n            pageHeader={ Messages.pages.error.title }\n            title={ Messages.pages.error.emptyState.title }\n            description={ Messages.pages.error.emptyState.content }\n        >\n            { props.children }\n        </ErrorBoundaryPage>\n    );\n};\n\nexport const ErrorPage = withRouter(ErrorPageInternal);\n","export enum ServerStatus {\n    RUNNING = 'RUNNING',\n    MAINTENANCE = 'MAINTENANCE'\n}\n\ntype ServerRunning = {\n    status: ServerStatus.RUNNING;\n}\n\ntype ServerMaintenance = {\n    status: ServerStatus.MAINTENANCE;\n    from: Date,\n    to: Date\n}\n\nexport type Server = ServerRunning | ServerMaintenance;\n","import * as React from 'react';\nimport { useContext } from 'react';\n\nimport { Server, ServerStatus } from '../types/Server';\n\nexport interface AppContext {\n    rbac: {\n        canWriteIntegrationsEndpoints: boolean;\n        canReadIntegrationsEndpoints: boolean;\n        canWriteNotifications: boolean;\n        canReadNotifications: boolean;\n    },\n    isOrgAdmin: boolean,\n    server: Server\n}\n\nexport const AppContext = React.createContext<AppContext>({\n    rbac: {\n        canReadIntegrationsEndpoints: false,\n        canReadNotifications: false,\n        canWriteIntegrationsEndpoints: false,\n        canWriteNotifications: false\n    },\n    isOrgAdmin: false,\n    server: {\n        status: ServerStatus.RUNNING\n    }\n});\n\nexport const useAppContext = () => useContext(AppContext);\n","import { getOuiaPropsFactory } from '@redhat-cloud-services/insights-common-typescript';\n\nexport const getOuiaProps = getOuiaPropsFactory('Notifications');\n","import { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { global_danger_color_100, global_spacer_xs, global_success_color_100 } from '@patternfly/react-tokens';\nimport { toUtc } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nexport interface ConnectionAttemptProps {\n    type: ConnectionAttemptType;\n    date: Date;\n}\n\nexport enum ConnectionAttemptType {\n    SUCCESS,\n    FAILED\n}\n\nconst dateClassName = style({\n    marginLeft: global_spacer_xs.var\n});\n\nconst dateFormatString = 'MMM d, HH:mm:ss';\n\nconst getIcon = (type: ConnectionAttemptType) => {\n    switch (type) {\n        case ConnectionAttemptType.SUCCESS:\n            return <CheckCircleIcon color={ global_success_color_100.value } />;\n        case ConnectionAttemptType.FAILED:\n            return <ExclamationCircleIcon color={ global_danger_color_100.value } />;\n        default:\n            assertNever(type);\n    }\n};\n\nexport const ConnectionAttempt: React.FunctionComponent<ConnectionAttemptProps> = (props) => {\n    const formattedDate = format(toUtc(props.date), dateFormatString);\n    return (\n        <>\n            { getIcon(props.type) } <span className={ dateClassName }> { formattedDate } UTC </span>\n        </>\n    );\n};\n","import { Alert, AlertVariant } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ConnectionAttempt, ConnectionAttemptType } from './ConnectionAttempt';\n\ninterface ConnectionAlertProps extends OuiaComponentProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n    alertVariant: AlertVariant;\n    description: string;\n    title: string;\n}\n\nconst connectionAttemptClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst marginTopClassName = style({\n    marginTop: global_spacer_sm.var\n});\n\nexport const ConnectionAlert: React.FunctionComponent<ConnectionAlertProps> = (props) => {\n    return (\n        <div { ...getOuiaProps('ConnectionAlert', props) }>\n            <Alert title={ props.title } variant={ props.alertVariant } isInline>\n                <p className={ marginTopClassName }>\n                    { props.description }\n                </p>\n                <p className={ marginTopClassName }>\n                    Last attempts: { props.attempts.map(\n                        (attempt, index) =>\n                            <span key={ index } className={ connectionAttemptClassName }>\n                                <ConnectionAttempt\n                                    type={ attempt.isSuccess ? ConnectionAttemptType.SUCCESS : ConnectionAttemptType.FAILED }\n                                    date={ attempt.date }\n                                />\n                            </span>\n                    ) }\n                </p>\n            </Alert>\n        </div>\n    );\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { ConnectionAlert } from './ConnectionAlert';\n\ninterface ConnectionDegradedProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n}\n\nexport const ConnectionDegraded: React.FunctionComponent<ConnectionDegradedProps> = (props) => {\n    const description = React.useMemo(() => {\n        const failures = props.attempts.filter(a => !a.isSuccess).length;\n        const attempts = props.attempts.length;\n\n        if (failures === 1) {\n            return `This connection has had 1 failure in the last ${ attempts } connection attempts.`;\n        }\n\n        return `This connection has had ${ failures } failures in the last ${ attempts } connection attempts.`;\n    }, [ props.attempts ]);\n\n    return <ConnectionAlert\n        attempts={ props.attempts }\n        alertVariant={ AlertVariant.warning }\n        description={ description }\n        title=\"Connection is degraded\"\n    />;\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { ConnectionAlert } from './ConnectionAlert';\n\ninterface ConnectionFailedProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n}\n\nexport const ConnectionFailed: React.FunctionComponent<ConnectionFailedProps> = (props) => {\n    return <ConnectionAlert\n        attempts={ props.attempts }\n        alertVariant={ AlertVariant.danger }\n        description=\"This connection has failed the most recent connection attempts.\"\n        title=\"Failed connection\"\n    />;\n};\n","import { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { UserIntegration } from '../../../types/Integration';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\n\nconst titleClass = style({\n    fontWeight: 400\n});\n\ninterface ExpandedContentProps extends OuiaComponentProps {\n    integration: UserIntegration;\n}\n\nexport const ExpandedContent: React.FunctionComponent<ExpandedContentProps> = (props) => {\n    return (\n        <TextContent { ...getOuiaProps('Integrations/Table/ExpandedContent', props) }>\n            <TextList component={ TextListVariants.dl }>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    Endpoint URL\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.url }\n                </TextListItem>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    SSL verification\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.sslVerificationEnabled ? 'Enabled' : 'Disabled' }\n                </TextListItem>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    Authentication type\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.secretToken !== undefined ? 'Secret token' : 'None' }\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n","import {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Spinner,\n    Switch,\n    Text,\n    Title\n} from '@patternfly/react-core';\nimport { CheckCircleIcon, CubesIcon, ExclamationCircleIcon, OffIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport {\n    expandable,\n    IActions,\n    IActionsResolver,\n    ICell,\n    IRow,\n    IRowData,\n    RowWrapperProps,\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table';\nimport {\n    global_danger_color_100,\n    global_spacer_md,\n    global_spacer_sm,\n    global_success_color_100,\n    global_warning_color_200\n} from '@patternfly/react-tokens';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { important } from 'csx';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { style } from 'typestyle';\n\nimport messages from '../../properties/DefinedMessages';\nimport { Messages } from '../../properties/Messages';\nimport { IntegrationConnectionAttempt, UserIntegration } from '../../types/Integration';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ConnectionDegraded } from './Table/ConnectionDegraded';\nimport { ConnectionFailed } from './Table/ConnectionFailed';\nimport { ExpandedContent } from './Table/ExpandedContent';\n\nexport type OnEnable = (integration: IntegrationRow, index: number, isChecked: boolean) => void;\n\ninterface IntegrationsTableProps extends OuiaComponentProps {\n    isLoading: boolean;\n    loadingCount?: number;\n    integrations: Array<IntegrationRow>;\n    onCollapse?: (integration: IntegrationRow, index: number, isOpen: boolean) => void;\n    onEnable?: OnEnable;\n    actionResolver: (row: IntegrationRow, index: number) => IActions;\n}\n\nexport type IntegrationRow = UserIntegration & {\n    isOpen: boolean;\n    isSelected: boolean;\n    isEnabledLoading: boolean;\n    isConnectionAttemptLoading: boolean;\n    lastConnectionAttempts?: Array<IntegrationConnectionAttempt>;\n}\n\nenum LastConnectionAttemptStatus {\n    UNKNOWN,\n    SUCCESS,\n    WARNING,\n    ERROR\n}\n\nconst connectionAlertClassName = style({\n    paddingBottom: global_spacer_md.var\n});\n\nconst expandedContentClassName = style({\n    paddingLeft: 0,\n    paddingBottom: 0\n});\n\nconst isEnabledLoadingClassName = style({\n    marginLeft: 10\n});\n\nconst smallMarginLeft = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst degradedClassName = style({\n    fontWeight: 600,\n    color: global_warning_color_200.var,\n    fontSize: 'var(--pf-global--FontSize--sm)'\n});\n\nconst getLastConnectionAttemptStatus = (attempts: Array<IntegrationConnectionAttempt>): LastConnectionAttemptStatus => {\n    if (attempts.length === 0) {\n        return LastConnectionAttemptStatus.UNKNOWN;\n    }\n\n    const failures = attempts.filter(a => !a.isSuccess).length;\n\n    if (failures === attempts.length) {\n        return LastConnectionAttemptStatus.ERROR;\n    } else if (failures > 0) {\n        return LastConnectionAttemptStatus.WARNING;\n    }\n\n    return LastConnectionAttemptStatus.SUCCESS;\n};\n\nconst getConnectionAlert = (attempts: Array<IntegrationConnectionAttempt>) => {\n    const status = getLastConnectionAttemptStatus(attempts);\n    switch (status) {\n        case LastConnectionAttemptStatus.UNKNOWN:\n        case LastConnectionAttemptStatus.SUCCESS:\n            return null;\n        case LastConnectionAttemptStatus.ERROR:\n            return (\n                <div className={ connectionAlertClassName }>\n                    <ConnectionFailed attempts={ attempts } />\n                </div>\n            );\n        case LastConnectionAttemptStatus.WARNING:\n            return (\n                <div className={ connectionAlertClassName }>\n                    <ConnectionDegraded attempts={ attempts } />\n                </div>\n            );\n        default:\n            assertNever(status);\n    }\n};\n\nconst LastConnectionAttemptSuccess: React.FunctionComponent = () => (\n    <>\n        <span>\n            <CheckCircleIcon color={ global_success_color_100.value } data-testid=\"success-icon\" />\n            <span className={ smallMarginLeft }>Success</span>\n        </span>\n    </>\n);\n\nconst LastConnectionAttemptError: React.FunctionComponent = () => (\n    <>\n        <span>\n            <ExclamationCircleIcon color={ global_danger_color_100.value } data-testid=\"fail-icon\" />\n            <span className={ smallMarginLeft }>Failure</span>\n        </span>\n    </>\n);\n\nconst getConnectionAttemptCell = (attempts: Array<IntegrationConnectionAttempt> | undefined, isLoading: boolean) => {\n    if (attempts === undefined) {\n        return 'Error fetching connection attempts';\n    }\n\n    if (isLoading) {\n        return <Spinner size=\"md\" />;\n    }\n\n    const status = getLastConnectionAttemptStatus(attempts);\n    switch (status) {\n        case LastConnectionAttemptStatus.UNKNOWN:\n            return <>\n                <span>\n                    <OffIcon data-testid=\"off-icon\" />\n                    <span className={ smallMarginLeft }>Unknown</span>\n                </span>\n            </>;\n        case LastConnectionAttemptStatus.SUCCESS:\n            return <><LastConnectionAttemptSuccess /></>;\n        case LastConnectionAttemptStatus.ERROR:\n            return <><LastConnectionAttemptError /></>;\n        case LastConnectionAttemptStatus.WARNING:\n            return <>\n                { attempts[0].isSuccess ? <LastConnectionAttemptSuccess /> : <LastConnectionAttemptError />}\n                <br />\n                <Text className={ degradedClassName }>Degraded connection</Text>\n            </>;\n        default:\n            assertNever(status);\n    }\n};\n\nconst toTableRows = (integrations: Array<IntegrationRow>, onEnable?: OnEnable): Array<IRow> => {\n    return integrations.reduce((rows, integration, idx) => {\n        rows.push({\n            id: integration.id,\n            key: integration.id,\n            isOpen: integration.isOpen,\n            selected: integration.isSelected,\n            cells: [\n                {\n                    title: integration.name\n                },\n                {\n                    title: Messages.components.integrations.integrationType[integration.type]\n                },\n                {\n                    title: getConnectionAttemptCell(integration.lastConnectionAttempts, integration.isConnectionAttemptLoading)\n                },\n                {\n                    title: <>\n                        { integration.isEnabledLoading ? (\n                            <Spinner className={ isEnabledLoadingClassName } size=\"md\" />\n                        ) : (\n                            <Switch\n                                id={ `table-row-switch-id-${integration.id}` }\n                                aria-label=\"Enabled\"\n                                isChecked={ integration.isEnabled }\n                                onChange={ isChecked => onEnable && onEnable(integration, idx, isChecked) }\n                                isDisabled={ !onEnable }\n                                ouiaId={ `enabled-${integration.id}` }\n                            />\n                        )}\n                    </>\n                }\n            ]\n        });\n        rows.push({\n            fullWidth: true,\n            parent: idx * 2,\n            cells: [\n                {\n                    title: <>\n                        {integration.lastConnectionAttempts !== undefined && getConnectionAlert(integration.lastConnectionAttempts)}\n                        <div className={ expandedContentClassName }>\n                            <ExpandedContent integration={ integration } ouiaId={ integration.id } />\n                        </div>\n                    </>,\n                    props: {\n                        colSpan: 6\n                    }\n                }\n            ]\n        });\n        return rows;\n    }, [] as Array<IRow>);\n};\n\nconst columns: Array<ICell> = [\n    {\n        title: Messages.components.integrations.table.columns.name,\n        cellFormatters: [ expandable ],\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.type,\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.lastConnectionAttempt,\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.enabled,\n        transforms: []\n    }\n];\n\nconst buildClassNames = () => {\n    const noneStyle = important('none');\n    const borderStyle = important('var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)');\n\n    const noBorderBottom = {\n        borderBottom: noneStyle\n    };\n\n    const rowExpandedContentClassName = style(noBorderBottom);\n    const rowWrapperClassName = style(noBorderBottom, {\n        borderTop: borderStyle\n    });\n    const tableClassName = style({\n        borderBottom: borderStyle\n    });\n\n    return {\n        rowExpandedContentClassName,\n        rowWrapperClassName,\n        tableClassName\n    };\n};\n\nconst {\n    rowExpandedContentClassName,\n    rowWrapperClassName,\n    tableClassName\n} = buildClassNames();\n\nconst RowWrapper: React.FunctionComponent<RowWrapperProps> = (props) => {\n    const { trRef, className, rowProps, row, ...rest } = props;\n    if (!row) {\n        return <></>;\n    }\n\n    return (\n        <tr\n            { ...rest }\n            ref={ trRef as any }\n            className={ css(\n                className,\n                row.isExpanded === true ? rowExpandedContentClassName : rowWrapperClassName,\n                row.isExpanded !== undefined && styles.tableExpandableRow,\n                row.isExpanded && styles.modifiers.expanded\n            ) }\n            hidden={ row?.isExpanded !== undefined && !row.isExpanded }\n        >\n            { props.children}\n        </tr>\n    );\n};\n\nexport const IntegrationsTable: React.FunctionComponent<IntegrationsTableProps> = (props) => {\n    const intl = useIntl();\n    const onCollapseHandler = React.useCallback((_event, _index: number, isOpen: boolean, data: IRowData) => {\n        const integrations = props.integrations;\n        const onCollapse = props.onCollapse;\n        const index = integrations.findIndex(integration => integration.id === data.id);\n        if (onCollapse && index !== -1) {\n            const integration = integrations[index];\n            onCollapse(integration, index, isOpen);\n        }\n    }, [ props.integrations, props.onCollapse ]);\n\n    const rows = React.useMemo(() => {\n        return toTableRows(props.integrations, props.onEnable);\n    }, [ props.integrations, props.onEnable ]);\n\n    const actionsResolverCallback: IActionsResolver = React.useCallback(rowData => {\n        const actionResolver = props.actionResolver;\n        if (rowData.parent === undefined && rowData && props.integrations) {\n            const integrationIndex = props.integrations.findIndex(i => i.id === rowData.id);\n            const integrationRow = props.integrations[integrationIndex];\n            if (integrationRow) {\n                return actionResolver(integrationRow, integrationIndex);\n            }\n        }\n\n        return [];\n    }, [ props.actionResolver, props.integrations ]);\n\n    if (props.isLoading) {\n        return (\n            <div { ...getOuiaProps('Integrations/Table',  { ...props, ouiaSafe: false }) }>\n                <SkeletonTable\n                    rowSize={ (props.loadingCount && props.loadingCount > 0) ? props.loadingCount : 10 }\n                    columns={ columns }\n                    paddingColumnSize={ 0 }\n                    sortBy={ undefined }\n                />\n            </div>\n        );\n    }\n\n    return (\n        <div { ...getOuiaProps('Integrations/Table', props) }>\n            {rows.length === 0 ?  (<EmptyState variant={ EmptyStateVariant.full }>\n                <EmptyStateIcon icon={ CubesIcon } />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {intl.formatMessage(messages.integrationsEmptyStateTitle)}\n                </Title>\n                <EmptyStateBody>\n                    {intl.formatMessage(messages.integrationsTableEmptyStateBody)}\n                </EmptyStateBody>\n            </EmptyState>) :\n                (<Table\n                    className={ tableClassName }\n                    aria-label={ Messages.components.integrations.table.title }\n                    rows={ rows }\n                    cells={ columns }\n                    onCollapse={ onCollapseHandler }\n                    rowWrapper={ RowWrapper as (props: RowWrapperProps) => React.ReactElement }\n                    actionResolver={ actionsResolverCallback }\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>)}\n        </div>\n    );\n};\n","import { ExporterType, exporterTypeFromString } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\ntype OnExport = (type: ExporterType) => void;\n\nexport const useTableExportConfig = (onExport: OnExport) => {\n    return React.useMemo(() => {\n        if (onExport) {\n            return {\n                extraItems: [],\n                onSelect: (_event, type: string) => {\n                    onExport(exporterTypeFromString(type));\n                }\n            };\n        }\n\n        return undefined;\n    }, [ onExport ]);\n};\n","import { Environment, getInsightsEnvironment, InsightsType } from '@redhat-cloud-services/insights-common-typescript';\n\nexport const stagingAndProd: Array<Environment> = [\n    'stage-beta',\n    'prod-beta',\n    'stage',\n    'prod'\n];\n\nexport const stagingAndProdStable: Array<Environment> = [\n    'stage',\n    'prod'\n];\n\nexport const isStagingOrProd = (insights: InsightsType) => {\n    return stagingAndProd.includes(getInsightsEnvironment(insights));\n};\n\nexport const isStagingOrProdStable = (insights: InsightsType) => {\n    return stagingAndProdStable.includes(getInsightsEnvironment(insights));\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum IntegrationFilterColumn {\n    NAME = 'name',\n    ENABLED = 'enabled'\n}\n\nexport type IntegrationFilters = Filters<typeof IntegrationFilterColumn>;\nexport type SetIntegrationFilters = SetFilters<typeof IntegrationFilterColumn>;\nexport type ClearIntegrationFilters = ClearFilters<typeof IntegrationFilterColumn>;\n","import { PaginationProps, PaginationVariant } from '@patternfly/react-core';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ColumnsMetada,\n    ExporterType,\n    getInsights,\n    OuiaComponentProps,\n    useInsightsEnvironmentFlag,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { cssRaw, style } from 'typestyle';\n\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { Messages } from '../../properties/Messages';\nimport { stagingAndProd } from '../../types/Environments';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { DisabledIntegrationIcon, EnabledIntegrationIcon } from '../Icons';\nimport { ClearIntegrationFilters, IntegrationFilterColumn, IntegrationFilters, SetIntegrationFilters } from './Filters';\n\ncssRaw(`\n    @media only screen and (max-width: 768px) {\n        #integrations-bottom-toolbar .ins-c-primary-toolbar__pagination {\n            flex: 1;\n        }\n    }\n`);\n\ninterface IntegrationsToolbarProps extends OuiaComponentProps {\n    onAddIntegration?: () => void;\n    onExport: (type: ExporterType) => void;\n    filters: IntegrationFilters;\n    setFilters: SetIntegrationFilters;\n    clearFilters: ClearIntegrationFilters;\n    pageCount: number;\n    count: number;\n    page: number;\n    perPage: number;\n    pageChanged: (page: number) => void;\n    perPageChanged: (page: number) => void;\n}\n\nconst enabledTextClassName = style({\n    marginLeft: 4\n});\n\nconst filterMetadata: ColumnsMetada<typeof IntegrationFilterColumn> = {\n    [IntegrationFilterColumn.NAME]: {\n        label: 'Name',\n        placeholder: 'Filter by name'\n    },\n    [IntegrationFilterColumn.ENABLED]: {\n        label: 'Enabled',\n        placeholder: 'Filter by enabled',\n        options: {\n            exclusive: false,\n            items: [\n                {\n                    value: 'Enabled',\n                    label: <><EnabledIntegrationIcon /> <span className={ enabledTextClassName }>Enabled</span></>\n                },\n                {\n                    value: 'Disabled',\n                    label: <><DisabledIntegrationIcon /> <span className={ enabledTextClassName }>Disabled</span></>\n                }\n            ]\n        }\n    }\n};\n\nexport const IntegrationsToolbar: React.FunctionComponent<IntegrationsToolbarProps> = (props) => {\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        IntegrationFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilters,\n        filterMetadata\n    );\n\n    const actionsConfig = React.useMemo(() => {\n        const actions = [\n            {\n                key: 'add-integration',\n                label: Messages.components.integrations.toolbar.actions.addIntegration,\n                onClick: props.onAddIntegration,\n                props: {\n                    isDisabled: !props.onAddIntegration\n                }\n            }\n        ];\n\n        return {\n            actions,\n            kebabToggleProps: {\n                isDisabled: false\n            }\n        };\n    }, [ props.onAddIntegration ]);\n\n    const exportConfig = useTableExportConfig(props.onExport);\n\n    const filterConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingAndProd,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.filterConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const activeFiltersConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingAndProd,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.activeFiltersConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const pageChanged = React.useCallback((_event: unknown, page: number) => {\n        const inner = props.pageChanged;\n        inner(page);\n    }, [ props.pageChanged ]);\n\n    const perPageChanged = React.useCallback((_event: unknown, perPage: number) => {\n        const inner = props.perPageChanged;\n        inner(perPage);\n    }, [ props.perPageChanged ]);\n\n    const topPaginationProps = React.useMemo<PaginationProps>(() => ({\n        itemCount: props.count,\n        page: props.page,\n        perPage: props.perPage,\n        isCompact: true,\n        variant: PaginationVariant.top,\n        onSetPage: pageChanged,\n        onFirstClick: pageChanged,\n        onPreviousClick: pageChanged,\n        onNextClick: pageChanged,\n        onLastClick: pageChanged,\n        onPageInput: pageChanged,\n        onPerPageSelect: perPageChanged\n    }), [ props.count, props.page, props.perPage, pageChanged, perPageChanged ]);\n\n    const bottomPaginationProps = React.useMemo<PaginationProps>(() => ({\n        ...topPaginationProps,\n        isCompact: false,\n        variant: PaginationVariant.bottom\n    }), [ topPaginationProps ]);\n\n    return (\n        <div { ...getOuiaProps('Integrations/DualToolbar', props) }>\n            <PrimaryToolbar\n                actionsConfig={ actionsConfig }\n                exportConfig={ exportConfig }\n                filterConfig={ filterConfig }\n                activeFiltersConfig={ activeFiltersConfig }\n                pagination={ topPaginationProps }\n                id=\"integrations-top-toolbar\"\n            />\n            { props.children }\n            <PrimaryToolbar id=\"integrations-bottom-toolbar\" pagination={ bottomPaginationProps } />\n        </div>\n    );\n};\n","import { CheckCircleIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport const EnabledIntegrationIcon: React.FunctionComponent = () => {\n    return <CheckCircleIcon color=\"green\" />;\n};\n","import { OffIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport const DisabledIntegrationIcon: React.FunctionComponent = () => {\n    return <OffIcon />;\n};\n","import { assertNever } from 'assert-never';\nimport { useMemo, useReducer } from 'react';\n\nenum UseDeleteModalReducerActionType {\n    DELETE = 'delete',\n    RESET = 'reset'\n}\n\ninterface UseDeleteModalActionDelete<T> {\n    type: UseDeleteModalReducerActionType.DELETE;\n    data: T;\n}\n\ninterface UseDeleteModalActionReset {\n    type: UseDeleteModalReducerActionType.RESET;\n}\n\ntype UseDeleteModalReducerAction<T> = UseDeleteModalActionDelete<T> | UseDeleteModalActionReset;\n\ntype UseDeleteModalReducerState<T> = {\n    isOpen: false;\n    data: undefined;\n} | {\n    isOpen: true;\n    data: T;\n}\n\nconst initialState: UseDeleteModalReducerState<undefined> = {\n    isOpen: false,\n    data: undefined\n};\n\ntype ReducerFunction<T> = (state: UseDeleteModalReducerState<T>, action: UseDeleteModalReducerAction<T>) => UseDeleteModalReducerState<T>;\ntype ReducerActions<T> = {\n    delete: (data: T) => void;\n    reset: () => void;\n}\n\nconst reducer = <T>(\n    state: UseDeleteModalReducerState<T>,\n    action: UseDeleteModalReducerAction<T>\n): UseDeleteModalReducerState<T> => {\n    switch (action.type) {\n        case UseDeleteModalReducerActionType.DELETE:\n            return {\n                isOpen: true,\n                data: action.data\n            };\n        case UseDeleteModalReducerActionType.RESET:\n            return initialState;\n        default:\n            assertNever(action);\n\n    }\n};\n\nconst makeDeleteAction = <T>(data: T): UseDeleteModalActionDelete<T> => ({\n    type: UseDeleteModalReducerActionType.DELETE,\n    data\n});\n\nconst makeResetAction = (): UseDeleteModalActionReset => ({\n    type: UseDeleteModalReducerActionType.RESET\n});\n\nexport const useDeleteModalReducer = <T>(): [ UseDeleteModalReducerState<T>, ReducerActions<T> ] => {\n    const [ state, dispatch ] = useReducer<ReducerFunction<T>>(reducer, initialState);\n\n    const actions = useMemo<ReducerActions<T>>(() => ({\n        delete: data => dispatch(makeDeleteAction(data)),\n        reset: () => dispatch(makeResetAction())\n    }), [ dispatch ]);\n\n    return [ state, actions ];\n};\n","import { assertNever } from 'assert-never';\nimport { useMemo, useReducer } from 'react';\n\nenum UseFormModalReducerActionType {\n    EDIT = 'edit',\n    CREATE = 'create',\n    RESET = 'reset'\n}\n\ninterface UseFormModalReducerActionCreate<T> {\n    type: UseFormModalReducerActionType.CREATE;\n    template?: Partial<T>;\n}\n\ninterface UseFormModalReducerActionEdit<T> {\n    type: UseFormModalReducerActionType.EDIT;\n    template: T;\n}\n\ninterface UseFormModalReducerActionReset {\n    type: UseFormModalReducerActionType.RESET;\n}\n\ntype UseFormModalReducerAction<T> = UseFormModalReducerActionCreate<T> | UseFormModalReducerActionEdit<T> | UseFormModalReducerActionReset;\ntype ReducerAction<T> = {\n    create: (template?: Partial<T>) => void;\n    edit: (template: T) => void;\n    reset: () => void;\n};\n\ninterface UseFormModalReducerState<T> {\n    isOpen: boolean;\n    isEdit: boolean;\n    template: T | Partial<T> | undefined;\n    isCopy: boolean;\n}\n\nconst initialState: UseFormModalReducerState<undefined> = {\n    isOpen: false,\n    isEdit: false,\n    template: undefined,\n    isCopy: false\n};\n\ntype CopyFunction<T> = (from: Partial<T>) => Partial<T>;\n\nconst buildReducer = <T>(copyFunction?: CopyFunction<T>) => {\n    const reducer = (\n        state: UseFormModalReducerState<T>,\n        action: UseFormModalReducerAction<T>\n    ): UseFormModalReducerState<T> => {\n        switch (action.type) {\n            case UseFormModalReducerActionType.CREATE:\n                return {\n                    isOpen: true,\n                    isEdit: false,\n                    template: action.template ? copyFunction ? copyFunction(action.template) : action.template : undefined,\n                    isCopy: !!action.template\n                };\n            case UseFormModalReducerActionType.EDIT:\n                return {\n                    isOpen: true,\n                    isEdit: true,\n                    template: action.template,\n                    isCopy: false\n                };\n            case UseFormModalReducerActionType.RESET:\n                return initialState;\n            default:\n                assertNever(action);\n        }\n    };\n\n    return reducer;\n};\n\nconst makeCreateAction = <T>(template?: Partial<T>): UseFormModalReducerActionCreate<T> => ({\n    type: UseFormModalReducerActionType.CREATE,\n    template\n});\n\nconst makeEditAction = <T>(template: T): UseFormModalReducerActionEdit<T> => ({\n    type: UseFormModalReducerActionType.EDIT,\n    template\n});\n\nconst makeResetAction = (): UseFormModalReducerActionReset => ({\n    type: UseFormModalReducerActionType.RESET\n});\n\nexport const useFormModalReducer = <T>(copyFunction?: CopyFunction<T>): [ UseFormModalReducerState<T>, ReducerAction<T> ] => {\n    const reducer = useMemo(() => {\n        return buildReducer(copyFunction);\n    }, [ copyFunction ]);\n\n    const [ state, dispatch ] = useReducer(reducer, initialState);\n\n    const actions = useMemo<ReducerAction<T>>(() => ({\n        create: (data?: Partial<T>) => dispatch(makeCreateAction(data)),\n        edit: (data: T) => dispatch(makeEditAction(data)),\n        reset: () => dispatch(makeResetAction())\n    }), [ dispatch ]);\n\n    return [ state, actions ];\n};\n","import { Filter, Page, Sort } from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nexport interface UsePageReturn {\n    page: Page;\n    changePage: (page: number) => void;\n    changeItemsPerPage: (perPage: number) => void;\n}\n\nexport type FilterBuilder<T> = (filters: T | undefined) => Filter | undefined;\n\nexport const usePage = <T>(defaultPerPage: number, filterBuilder: FilterBuilder<T>, filters?: T, sort?: Sort): UsePageReturn => {\n    const [ currentPage, setCurrentPage ] = useState(1);\n    const [ itemsPerPage, setItemsPerPage ] = useState(defaultPerPage);\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [ filters, setCurrentPage, itemsPerPage ]);\n\n    const page = useMemo(() => {\n        const filter = filterBuilder ? filterBuilder(filters) : undefined;\n        return Page.of(currentPage, itemsPerPage, filter, sort);\n    }, [ currentPage, itemsPerPage, filters, sort, filterBuilder ]);\n\n    const changePage = useCallback((page: number) => {\n        setCurrentPage(page);\n    },  [ setCurrentPage ]);\n\n    const changeItemsPerPage = useCallback((perPage: number) => {\n        setItemsPerPage(perPage);\n    }, [ setItemsPerPage ]);\n\n    return {\n        page,\n        changePage,\n        changeItemsPerPage\n    };\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    only_admins: boolean;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'MAINTENANCE' | 'UP';\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'MAINTENANCE', 'UP' ]);\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /endpoints\n  export namespace EndpointServiceGetEndpoints {\n    const Active = z.boolean();\n    type Active = boolean;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Type = z.array(z.string());\n    type Type = Array<string>;\n    export interface Params {\n      active?: Active;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n      type?: Type;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EndpointPage', 200, Schemas.EndpointPage>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints';\n        const query = {} as Record<string, any>;\n        if (params.active !== undefined) {\n            query.active = params.active;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        if (params.type !== undefined) {\n            query.type = params.type;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.EndpointPage, 'EndpointPage', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /endpoints\n  export namespace EndpointServiceCreateEndpoint {\n    export interface Params {\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Endpoint, 'Endpoint', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/email/subscription/{bundleName}/{applicationName}/{type}\n  export namespace EndpointServiceSubscribeEmail {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      type: Schemas.EmailSubscriptionType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/integrations/v1.0/endpoints/email/subscription/{bundleName}/{applicationName}/{type}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString())\n        .replace('{type}', params.type.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/email/subscription/{bundleName}/{applicationName}/{type}\n  export namespace EndpointServiceUnsubscribeEmail {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      type: Schemas.EmailSubscriptionType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/integrations/v1.0/endpoints/email/subscription/{bundleName}/{applicationName}/{type}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString())\n        .replace('{type}', params.type.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /endpoints/system/email_subscription\n  export namespace EndpointServiceGetOrCreateEmailSubscriptionEndpoint {\n    export interface Params {\n      body: Schemas.RequestEmailSubscriptionProperties;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/system/email_subscription';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Endpoint, 'Endpoint', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}\n  export namespace EndpointServiceGetEndpoint {\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Endpoint, 'Endpoint', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/{id}\n  export namespace EndpointServiceUpdateEndpoint {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/{id}\n  export namespace EndpointServiceDeleteEndpoint {\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/{id}/enable\n  export namespace EndpointServiceEnableEndpoint {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/{id}/enable\n  export namespace EndpointServiceDisableEndpoint {\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}/history\n  export namespace EndpointServiceGetEndpointHistory {\n    const IncludeDetail = z.boolean();\n    type IncludeDetail = boolean;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.NotificationHistory);\n    type Response200 = Array<Schemas.NotificationHistory>;\n    export interface Params {\n      id: Schemas.UUID;\n      includeDetail?: IncludeDetail;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/history'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        if (params.includeDetail !== undefined) {\n            query.includeDetail = params.includeDetail;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}/history/{history_id}/details\n  export namespace EndpointServiceGetDetailedEndpointHistory {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      historyId: Schemas.UUID;\n      id: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/integrations/v1.0/endpoints/{id}/history/{history_id}/details'\n        .replace('{history_id}', params.historyId.toString())\n        .replace('{id}', params.id.toString());\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    Integration,\n    IntegrationBase,\n    IntegrationCamel, IntegrationEmailSubscription,\n    IntegrationHttp,\n    IntegrationType,\n    NewIntegration,\n    ServerIntegrationRequest,\n    ServerIntegrationResponse\n} from '../Integration';\n\nconst getIntegrationType = (type: Schemas.EndpointType | undefined): IntegrationType => {\n    switch (type) {\n        case Schemas.EndpointType.Enum.camel:\n            return IntegrationType.CAMEL;\n        case Schemas.EndpointType.Enum.webhook:\n            return IntegrationType.WEBHOOK;\n        case Schemas.EndpointType.Enum.email_subscription:\n            return IntegrationType.EMAIL_SUBSCRIPTION;\n        case Schemas.EndpointType.Enum.default:\n        case undefined:\n            throw new Error(`Unexpected type: ${type}`);\n        default:\n            assertNever(type);\n    }\n};\n\nexport const getEndpointType = (type: IntegrationType): Schemas.EndpointType => {\n    switch (type) {\n        case IntegrationType.WEBHOOK:\n            return Schemas.EndpointType.Enum.webhook;\n        case IntegrationType.CAMEL:\n            return Schemas.EndpointType.Enum.camel;\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return Schemas.EndpointType.Enum.email_subscription;\n        default:\n            assertNever(type);\n    }\n};\n\ntype NotNullType = {\n    <T>(value: T | undefined | null): T | undefined;\n    <T>(value: T | undefined | null, defaultValue: T): T;\n}\n\nconst notNull: NotNullType = <T>(value: T | undefined | null, defaultValue?: T): T | undefined => value === null ? defaultValue : value;\n\nconst toIntegrationWebhook = (integrationBase: IntegrationBase<IntegrationType.WEBHOOK>, properties: Schemas.WebhookProperties): IntegrationHttp => ({\n    ...integrationBase,\n    url: properties.url || '',\n    sslVerificationEnabled: !properties.disable_ssl_verification,\n    secretToken: notNull(properties.secret_token),\n    method: properties.method ?? Schemas.HttpType.Enum.GET\n});\n\nconst toIntegrationCamel = (integrationBase: IntegrationBase<IntegrationType.CAMEL>, properties: Schemas.CamelProperties): IntegrationCamel => ({\n    ...integrationBase,\n    url: properties.url || '',\n    sslVerificationEnabled: !properties.disable_ssl_verification,\n    secretToken: notNull(properties.secret_token),\n\n    subType: notNull(properties.sub_type),\n    basicAuth: properties.basic_authentication === null ?\n        undefined\n        :\n        {\n            user: notNull(properties.basic_authentication?.username, ''),\n            pass: notNull(properties.basic_authentication?.password, '')\n        },\n    extras: notNull(properties.extras)\n});\n\nconst toIntegrationEmail = (\n    integrationBase: IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n    properties: Schemas.EmailSubscriptionProperties): IntegrationEmailSubscription => ({\n    ...integrationBase,\n    ignorePreferences: properties.ignore_preferences,\n    groupId: properties.group_id === null ? undefined : properties.group_id,\n    onlyAdmin: properties.only_admins\n});\n\nexport const toIntegration = (serverIntegration: ServerIntegrationResponse): Integration => {\n\n    const integrationBase: IntegrationBase<IntegrationType> = {\n        id: serverIntegration.id || '',\n        name: serverIntegration.name || '',\n        isEnabled: !!serverIntegration.enabled,\n        type: getIntegrationType(serverIntegration.type)\n    };\n\n    switch (integrationBase.type) {\n        case IntegrationType.WEBHOOK:\n            return toIntegrationWebhook(\n                integrationBase as IntegrationBase<IntegrationType.WEBHOOK>,\n                serverIntegration.properties as Schemas.WebhookProperties\n            );\n\n        case IntegrationType.CAMEL: {\n            return toIntegrationCamel(\n                integrationBase as IntegrationBase<IntegrationType.CAMEL>,\n                serverIntegration.properties as Schemas.CamelProperties\n            );\n        }\n\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return toIntegrationEmail(\n                integrationBase as IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n                serverIntegration.properties as Schemas.EmailSubscriptionProperties\n            );\n        default:\n            assertNever(integrationBase.type);\n    }\n};\n\nexport const toIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<Integration> => {\n    return filterOutDefaultAction(serverIntegrations).map(toIntegration);\n};\n\ntype ServerIntegrationProperties = Schemas.EmailSubscriptionProperties | Schemas.WebhookProperties | Schemas.CamelProperties\n\nexport const toIntegrationProperties = (integration: Integration | NewIntegration): ServerIntegrationProperties => {\n    switch (integration.type) {\n        case IntegrationType.WEBHOOK:\n            const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n            return {\n                url: integrationHttp.url,\n                method: integrationHttp.method,\n                disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n                secret_token: integrationHttp.secretToken\n            };\n        case IntegrationType.CAMEL:\n            const integrationCamel: IntegrationCamel = integration as IntegrationCamel;\n            return {\n                url: integrationCamel.url,\n                disable_ssl_verification: !integrationCamel.sslVerificationEnabled,\n                secret_token: integrationCamel.secretToken,\n                sub_type: integrationCamel.subType,\n                basic_authentication: {\n                    username: integrationCamel.basicAuth?.user,\n                    password: integrationCamel.basicAuth?.pass\n                },\n                extras: integrationCamel.extras\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            const integrationEmail: IntegrationEmailSubscription = integration as IntegrationEmailSubscription;\n            return {\n                only_admins: integrationEmail.onlyAdmin,\n                group_id: integrationEmail.groupId,\n                ignore_preferences: integrationEmail.ignorePreferences\n            };\n        default:\n            assertNever(integration);\n    }\n};\n\nexport const toServerIntegrationRequest =\n    (integration: Integration | NewIntegration): ServerIntegrationRequest => {\n        return {\n            id: integration.id,\n            name: integration.name,\n            enabled: integration.isEnabled,\n            type: getEndpointType(integration.type),\n            description: '',\n            properties: toIntegrationProperties(integration)\n        };\n    };\n\nexport const filterOutDefaultAction = (serverNotifications: Array<ServerIntegrationResponse>) =>\n    serverNotifications.filter(e => e.type !== Schemas.EndpointType.enum.default);\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useParameterizedQuery, useQuery } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiIntegrations';\nimport { getEndpointType, toIntegrations } from '../types/adapters/IntegrationAdapter';\nimport { IntegrationType, UserIntegration } from '../types/Integration';\n\nexport const listIntegrationsActionCreator = (pager?: Page) => {\n    const query = (pager ?? Page.defaultPage()).toQuery();\n    return Operations.EndpointServiceGetEndpoints.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        type: query.filterType ? (query.filterType as Array<IntegrationType>).map(t => getEndpointType(t)) : undefined,\n        active: query.filterActive ? query.filterActive === 'true' : undefined\n    });\n};\n\nexport const listIntegrationIntegrationDecoder = validationResponseTransformer((payload: Operations.EndpointServiceGetEndpoints.Payload) => {\n    if (payload?.status === 200) {\n        return validatedResponse(\n            'IntegrationPage',\n            200,\n            {\n                data: toIntegrations(payload.value.data) as Array<UserIntegration>,\n                count: payload.value.meta.count\n            },\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useListIntegrationsQuery = (pager?: Page, initFetch?: boolean) => useTransformQueryResponse(\n    useQuery(listIntegrationsActionCreator(pager), initFetch),\n    listIntegrationIntegrationDecoder\n);\n\nexport const useListIntegrationPQuery = () => useTransformQueryResponse(\n    useParameterizedQuery(listIntegrationsActionCreator),\n    listIntegrationIntegrationDecoder\n);\n","import { ExporterCsv, ExporterHeaders } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nexport class IntegrationExporterCsv extends ExporterCsv<UserIntegration> {\n\n    public serialize(integration: UserIntegration) {\n        return {\n            ...integration\n        };\n    }\n\n    public headers(): ExporterHeaders<IntegrationExporterCsv, UserIntegration> {\n        return [\n            [ 'id', 'id' ],\n            [ 'name', 'name' ],\n            [ 'isEnabled', 'isEnabled' ],\n            [ 'type', 'type' ],\n            // This works now, but what will happen when there are multiple types (slack, webhook, etc)\n            [ 'url', 'url' ]\n        ];\n    }\n}\n","import { ExporterJson } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nexport class IntegrationExporterJson extends ExporterJson<UserIntegration> {\n\n}\n","import { Exporter, ExporterType } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\n\nimport { UserIntegration } from '../../../types/Integration';\nimport { IntegrationExporterCsv } from './Csv';\nimport { IntegrationExporterJson } from './Json';\n\nexport const integrationExporterFactory = (type: ExporterType): Exporter<UserIntegration> => {\n    switch (type) {\n        case ExporterType.CSV:\n            return new IntegrationExporterCsv();\n        case ExporterType.JSON:\n            return new IntegrationExporterJson();\n    }\n\n    assertNever(type);\n};\n","import { Button, ButtonVariant, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { IntegrationRef } from '../../types/Notification';\n\ninterface AddNotificationBodyProps {\n    integration: IntegrationRef;\n    isLoading: boolean;\n    switchEnabled: () => void;\n}\n\nconst buttonClassname = style({\n    paddingLeft: 0\n});\n\nexport const AddNotificationBody: React.FunctionComponent<AddNotificationBodyProps> = (props) => {\n\n    const text = props.integration.isEnabled ? 'This integration is enabled and ready to use.' : 'This integration is disabled.';\n    const buttonText = props.integration.isEnabled ? 'Disable integration' : 'Enable integration';\n\n    return (\n        <>\n            <div>{ text }</div>\n            <Button\n                className={ buttonClassname }\n                isDisabled={ props.isLoading }\n                variant={ ButtonVariant.link }\n                onClick={ props.switchEnabled }\n            >\n                {buttonText}\n            </Button>\n            { props.isLoading && (\n                <Spinner size=\"sm\" />\n            ) }\n        </>\n    );\n};\n","import * as Yup from 'yup';\nimport Lazy from 'yup/lib/Lazy';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    IntegrationCamel,\n    IntegrationHttp,\n    IntegrationType, NewIntegration,\n    NewIntegrationBase, NewIntegrationTemplate\n} from '../../types/Integration';\n\nexport const maxIntegrationNameLength = 150;\n\nexport const IntegrationSchemaBase: Yup.SchemaOf<NewIntegrationBase> = Yup.object({\n    id: Yup.string().optional(),\n    name: Yup.string().required('Write a name for this Integration.').max(maxIntegrationNameLength).trim(),\n    type: Yup.mixed<IntegrationType>().oneOf([ IntegrationType.WEBHOOK, IntegrationType.CAMEL ]).default(IntegrationType.WEBHOOK).optional(),\n    isEnabled: Yup.boolean().default(true).required()\n});\n\nexport const IntegrationHttpSchema: Yup.SchemaOf<NewIntegrationTemplate<IntegrationHttp>> = IntegrationSchemaBase.concat(Yup.object().shape({\n    type: Yup.mixed<IntegrationType.WEBHOOK>().oneOf([ IntegrationType.WEBHOOK ]).required(),\n    url: Yup.string().url().required('Write a valid url for this Integration.'),\n    sslVerificationEnabled: Yup.boolean().default(true),\n    secretToken: Yup.string().notRequired(),\n    method: Yup.mixed<Schemas.HttpType>().oneOf(Object.values(Schemas.HttpType.Enum)).default(Schemas.HttpType.Enum.POST)\n}));\n\nexport const IntegrationCamelSchema: Yup.SchemaOf<NewIntegrationTemplate<IntegrationCamel>> = IntegrationSchemaBase.concat(Yup.object().shape({\n    type: Yup.mixed<IntegrationType.CAMEL>().oneOf([ IntegrationType.CAMEL ]).required(),\n    url: Yup.string().url().required('Provide a url/host for this Integration.'),\n    sslVerificationEnabled: Yup.boolean().default(true),\n    secretToken: Yup.string().notRequired(),\n    subType: Yup.string().required('Provide a camel sub-type'),\n    basicAuth: Yup.object().shape({\n        user: Yup.string().when('pass',\n            {\n                is: pass => pass && pass.length > 0,\n                then: Yup.string().required('Provide an user')\n            }\n        ),\n        pass: Yup.string().when('user',\n            {\n                is: user => user && user.length > 0,\n                then: Yup.string().required('Provide a password.')\n            }\n        )\n    }, [ [ 'user', 'pass' ] ]).optional(),\n    extras: Yup.mixed()\n    .default({})\n    .transform(s => {\n        try {\n            return JSON.parse(s);\n        } catch (e) {\n            return null;\n        }\n    })\n    .test('valid-json-object', 'Provide a valid json object', extras => extras && typeof extras === 'object')\n}));\n\nexport const IntegrationSchema: Lazy<Yup.SchemaOf<NewIntegration | NewIntegrationBase | NewIntegrationBase>> = Yup.lazy(value => {\n    if (value) {\n        if (value.type === IntegrationType.WEBHOOK) {\n            return IntegrationHttpSchema;\n        }\n\n        if (value.type === IntegrationType.CAMEL) {\n            return IntegrationCamelSchema;\n        }\n    }\n\n    return IntegrationSchemaBase;\n});\n","import { FormSection } from '@patternfly/react-core';\nimport { Checkbox, FormTextArea, FormTextInput, ouiaIdConcat } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './IntegrationTypeForm';\n\nexport const IntegrationTypeCamelForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    // <!-- this should be a dropdown -->\n    return (\n        <div className=\"pf-c-form\" { ...getOuiaProps('Integrations/HttpForm', props) } >\n            <FormTextInput\n                isRequired={ true }\n                label=\"Sub type\"\n                type=\"text\"\n                name=\"subType\"\n                id=\"integration-type-camel-type\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'camel-type') }\n            />\n            <FormTextInput\n                isRequired={ true }\n                label=\"Endpoint URL\"\n                type=\"text\"\n                name=\"url\"\n                id=\"integration-type-camel-url\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'endpoint-url') }\n            />\n            <Checkbox\n                id=\"integration-type-camel-ssl-verification-enabled\"\n                label=\"Enable SSL verification\"\n                name=\"sslVerificationEnabled\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'is-ssl-verification-enabled') }\n            />\n            <FormTextInput\n                isRequired={ false }\n                label=\"Secret token\"\n                id=\"integration-type-camel-secret-token\"\n                name=\"secretToken\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'secret-token') }\n            />\n            <FormSection title=\"Basic auth\">\n                <FormTextInput\n                    id=\"basic-auth-user\"\n                    name=\"basicAuth.user\"\n                    label=\"User\"\n                    ouiaId={ ouiaIdConcat(props.ouiaId, 'basic-auth-user') }\n                />\n                <FormTextInput\n                    id=\"basic-auth-pass\"\n                    name=\"basicAuth.pass\"\n                    label=\"Password\"\n                    ouiaId={ ouiaIdConcat(props.ouiaId, 'basic-auth-pass') }\n                />\n            </FormSection>\n            <FormTextArea id=\"form-extras\" name=\"extras\" label=\"Extras\" ouiaId={ ouiaIdConcat(props.ouiaId, 'extras') } />\n        </div>\n    );\n};\n","import { Checkbox, FormTextInput, ouiaIdConcat } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './IntegrationTypeForm';\n\nexport const IntegrationTypeHttpForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    return (\n        <div className=\"pf-c-form\" { ...getOuiaProps('Integrations/HttpForm', props) } >\n            <FormTextInput\n                isRequired={ true }\n                label=\"Endpoint URL\"\n                type=\"url\"\n                name=\"url\"\n                id=\"integration-type-http-url\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'endpoint-url') }\n            />\n            <Checkbox\n                id=\"integration-type-http-ssl-verification-enabled\"\n                label=\"Enable SSL verification\"\n                name=\"sslVerificationEnabled\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'is-ssl-verification-enabled') }\n            />\n            <FormTextInput\n                isRequired={ false }\n                label=\"Secret token\"\n                id=\"integration-type-http-secret-token\"\n                name=\"secretToken\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'secret-token') }\n            />\n        </div>\n    );\n};\n","import { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\n\nimport { IntegrationType, UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationTypeCamelForm } from './IntegrationTypeCamelForm';\nimport { IntegrationTypeHttpForm } from './IntegrationTypeHttpForm';\n\nexport interface IntegrationTypeForm extends OuiaComponentProps {\n    type: UserIntegrationType;\n}\n\nexport const IntegrationTypeForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    switch (props.type) {\n        case IntegrationType.WEBHOOK:\n            return <IntegrationTypeHttpForm { ...props } />;\n        case IntegrationType.CAMEL:\n            return <IntegrationTypeCamelForm { ...props } />;\n        default:\n            assertNever(props.type);\n    }\n};\n","import { FormSelectOption } from '@patternfly/react-core';\nimport { Form, FormSelect, FormTextInput, getInsights, OuiaComponentProps, ouiaIdConcat } from '@redhat-cloud-services/insights-common-typescript';\nimport { useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { Messages } from '../../properties/Messages';\nimport { maxIntegrationNameLength } from '../../schemas/Integrations/Integration';\nimport { isStagingOrProd } from '../../types/Environments';\nimport { IntegrationType, NewUserIntegration } from '../../types/Integration';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './Form/IntegrationTypeForm';\n\nexport const IntegrationsForm: React.FunctionComponent<OuiaComponentProps> = (props) => {\n\n    const { values } = useFormikContext<NewUserIntegration>();\n    const insights = getInsights();\n\n    const options = React.useMemo(() => {\n        const options = isStagingOrProd(insights) ? [ IntegrationType.WEBHOOK ] : [\n            IntegrationType.WEBHOOK,\n            IntegrationType.CAMEL\n        ];\n\n        return options\n        .map(type => (<FormSelectOption key={ type } label={ Messages.components.integrations.integrationType[type] } value={ type } />));\n    }, [ insights ]);\n\n    return (\n        <Form { ...getOuiaProps('Integrations/Form', props) }>\n            <FormTextInput\n                maxLength={ maxIntegrationNameLength }\n                isRequired={ true }\n                label=\"Integration name\"\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'name') }\n            />\n            <FormSelect\n                isRequired={ true }\n                label=\"Type\"\n                name=\"type\"\n                id=\"integration-type\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'type') }\n            >\n                { options }\n            </FormSelect>\n            <IntegrationTypeForm\n                type={ values.type }\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'type-form') }\n            />\n        </Form>\n    );\n};\n","import { ActionModalError, SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { Messages } from '../../properties/Messages';\nimport { IntegrationSchema } from '../../schemas/Integrations/Integration';\nimport { IntegrationType, NewUserIntegration, UserIntegration } from '../../types/Integration';\nimport { IntegrationsForm } from './Form';\n\ntype PartialIntegration = Partial<UserIntegration>;\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\n\nexport interface IntegrationSaveModalProps extends Omit<SaveModalProps, UsedProps>{\n    initialIntegration?: PartialIntegration;\n    onSave: (integration: UserIntegration | NewUserIntegration) => boolean | Promise<boolean>;\n    isEdit: boolean;\n}\n\ninterface InternalIntegrationSaveModalProps {\n    isEdit: boolean;\n    onClose: (saved: boolean) => void;\n    error?: ActionModalError;\n}\n\nconst InternalIntegrationSaveModal: React.FunctionComponent<InternalIntegrationSaveModalProps> = (props) => {\n\n    const pageMessages = props.isEdit ? Messages.pages.integrations.edit : Messages.pages.integrations.add;\n    const pageTitle =  pageMessages.title;\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<NewUserIntegration>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            isOpen={ true }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            title={ pageTitle }\n            content={ <IntegrationsForm /> }\n            onClose={ props.onClose }\n            error={ props.error }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const IntegrationSaveModal: React.FunctionComponent<IntegrationSaveModalProps> = (props) => {\n\n    const [ initialIntegration ] = React.useState<PartialIntegration>(() => {\n        const initial = {\n            // The call is twice, because we use lazy evaluation for the integration base type.\n            // To ensure we get the defaults on the second level (webhook, slack, etc) we need to call it again\n            ...IntegrationSchema.cast(IntegrationSchema.cast({})),\n            ...props.initialIntegration\n        } as PartialIntegration;\n\n        // patch extras to be a string for CAMEL\n        if (initial.type === IntegrationType.CAMEL && typeof initial.extras === 'object') {\n            // We are casting as any, because `extras` is an object, but we need it to be a string for the form\n            initial.extras = JSON.stringify(initial.extras, undefined, 2) as any;\n        }\n\n        return initial;\n    });\n\n    const onSubmit = React.useCallback(async (integration: PartialIntegration) => {\n        const onSave = props.onSave;\n        const onClose = props.onClose;\n        const transformedIntegration = IntegrationSchema.cast(integration) as NewUserIntegration;\n        const saved = await onSave(transformedIntegration);\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onSave, props.onClose ]);\n\n    return (\n        <Formik<PartialIntegration>\n            initialValues={ initialIntegration }\n            validationSchema={ IntegrationSchema }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalIntegrationSaveModal\n                isEdit={ props.isEdit }\n                onClose={ props.onClose }\n                error={ props.error }\n            />\n        </Formik>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiIntegrations';\nimport { toIntegration, toServerIntegrationRequest } from '../types/adapters/IntegrationAdapter';\nimport { Integration, NewIntegration, UserIntegration } from '../types/Integration';\n\nexport const createIntegrationActionCreator = (integration: NewIntegration) => {\n    return Operations.EndpointServiceCreateEndpoint.actionCreator({\n        body: toServerIntegrationRequest(integration)\n    });\n};\n\nexport const saveIntegrationActionCreator = (integration: Integration | NewIntegration | UserIntegration) => {\n    if (integration.id) {\n        return Operations.EndpointServiceUpdateEndpoint.actionCreator({\n            body: toServerIntegrationRequest(integration),\n            id: integration.id\n        });\n    }\n\n    return createIntegrationActionCreator(integration);\n};\n\nconst decoder = (response: Operations.EndpointServiceCreateEndpoint.Payload | Operations.EndpointServiceUpdateEndpoint.Payload) => {\n    if (response.type === 'Endpoint') {\n        return {\n            ...response,\n            type: 'Integration',\n            value: toIntegration(response.value)\n        };\n    }\n\n    return response;\n};\n\nexport const useSaveIntegrationMutation = () => useTransformQueryResponse(\n    useMutation(saveIntegrationActionCreator),\n    decoder\n);\n","import { useMutation } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiIntegrations';\nimport { Integration, ServerIntegrationResponse } from '../types/Integration';\n\nexport const switchIntegrationEnabledStatusActionCreator = (integration: Integration) => {\n    if (integration.isEnabled) {\n        return Operations.EndpointServiceDisableEndpoint.actionCreator({\n            id: integration.id\n        });\n    } else {\n        return Operations.EndpointServiceEnableEndpoint.actionCreator({\n            id: integration.id\n        });\n    }\n};\n\nexport const useSwitchIntegrationEnabledStatus =\n    () => useMutation<ServerIntegrationResponse>(switchIntegrationEnabledStatusActionCreator);\n","import { NotificationAppState } from '../types/NotificationAppState';\nimport { SavedNotificationScopeState } from '../types/SavedNotificationScopeTypes';\n\nexport const savedNotificationScopeSelector = (state: NotificationAppState): SavedNotificationScopeState => state.savedNotificationScope;\n\nexport const savedNotificationScopeEqualFn = (left: SavedNotificationScopeState, right: SavedNotificationScopeState): boolean => {\n    return left?.integration === right?.integration && left?.status === right?.status;\n};\n","import { ActionModalError, addSuccessNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { AddNotificationBody } from '../../../components/Integrations/AddNotificationBody';\nimport { IntegrationSaveModal } from '../../../components/Integrations/SaveModal';\nimport { useSaveIntegrationMutation } from '../../../services/useSaveIntegration';\nimport { useSwitchIntegrationEnabledStatus } from '../../../services/useSwitchIntegrationEnabledStatus';\nimport { SavedNotificationScopeActions } from '../../../store/actions/SavedNotificationScopeAction';\nimport {\n    savedNotificationScopeSelector\n} from '../../../store/selectors/SavedNotificationScopeSelector';\nimport { NotificationAppState } from '../../../store/types/NotificationAppState';\nimport { SavedNotificationScopeState, Status } from '../../../store/types/SavedNotificationScopeTypes';\nimport { Integration, NewUserIntegration, UserIntegration, UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationRef } from '../../../types/Notification';\n\ninterface CreatePageProps {\n    isEdit: boolean;\n    initialIntegration: Partial<UserIntegration>;\n    onClose: (saved: boolean) => void;\n}\n\ninterface AddNotificationBodyContainer {\n    integration: IntegrationRef;\n    reduxDispatch: Dispatch;\n    savedNotificationScope: SavedNotificationScopeState;\n}\n\nconst AddNotificationBodyContainer: React.FunctionComponent<AddNotificationBodyContainer> = (props) => {\n    const switchIntegrationEnabledStatus = useSwitchIntegrationEnabledStatus();\n\n    const onClick = React.useCallback((): void => {\n        const reduxDispatch = props.reduxDispatch;\n        const mutate = switchIntegrationEnabledStatus.mutate;\n        const savedNotificationScope = props.savedNotificationScope;\n        if (savedNotificationScope) {\n            reduxDispatch(SavedNotificationScopeActions.start());\n            const integration = savedNotificationScope.integration;\n            mutate(integration).then(response => {\n                if (!response.error) {\n                    reduxDispatch(SavedNotificationScopeActions.finish(!integration.isEnabled));\n                } else {\n                    reduxDispatch(SavedNotificationScopeActions.finish(integration.isEnabled));\n                }\n            });\n        }\n    }, [ switchIntegrationEnabledStatus.mutate, props.reduxDispatch, props.savedNotificationScope ]);\n\n    React.useEffect(() => {\n        const reduxDispatch = props.reduxDispatch;\n        reduxDispatch(SavedNotificationScopeActions.setIntegration(props.integration));\n        return () => {\n            reduxDispatch(SavedNotificationScopeActions.unset());\n        };\n    }, [ props.reduxDispatch, props.integration ]);\n\n    if (!props.savedNotificationScope) {\n        return <React.Fragment />;\n    }\n\n    return <AddNotificationBody\n        integration={ props.savedNotificationScope.integration }\n        isLoading={ props.savedNotificationScope.status === Status.LOADING }\n        switchEnabled={ onClick }\n    />;\n};\n\nconst ConnectedAddNotificationBodyContainer = connect(\n    (state: NotificationAppState) => ({\n        savedNotificationScope: savedNotificationScopeSelector(state)\n    }),\n    dispatch => ({\n        reduxDispatch: dispatch\n    })\n)(AddNotificationBodyContainer);\n\nexport const CreatePage: React.FunctionComponent<CreatePageProps> = props => {\n\n    const saveIntegrationMutation = useSaveIntegrationMutation();\n    const [ hasError, setError ] = React.useState(false);\n\n    const onSaveIntegration = React.useCallback((integration: NewUserIntegration) => {\n        if (!integration.id) {\n            integration.isEnabled = true;\n        }\n\n        setError(false);\n\n        return saveIntegrationMutation.mutate(integration).then(response => {\n            if (response.payload?.status === 200) {\n\n                const savedIntegration: IntegrationRef =  response.payload?.type === 'Integration' ? {\n                    ...response.payload.value as Integration,\n                    type: response.payload.value.type as unknown as UserIntegrationType\n                } : integration as IntegrationRef;\n\n                const title = props.isEdit ? `${savedIntegration.name} saved successfully` : `${savedIntegration.name} added successfully`;\n\n                addSuccessNotification(\n                    title,\n                    <ConnectedAddNotificationBodyContainer integration={ savedIntegration } />,\n                    true\n                );\n\n                return true;\n            } else {\n                setError(true);\n                return false;\n            }\n        });\n    }, [ saveIntegrationMutation, props.isEdit ]);\n\n    const error = React.useMemo<ActionModalError | undefined>(() => {\n        if (hasError) {\n            if (props.isEdit) {\n                return {\n                    title: 'Integration failed to update',\n                    description: <p>There was an error trying to update the Integration. Please try again.</p>\n                };\n            } else {\n                return {\n                    title: 'Failed to create Integration',\n                    description: <p>There was an error trying to create the Integration. Please try again.</p>\n                };\n            }\n        }\n\n        return undefined;\n    }, [ hasError, props.isEdit ]);\n\n    return (\n        <IntegrationSaveModal\n            initialIntegration={ props.initialIntegration }\n            onSave={ onSaveIntegration }\n            isEdit={ props.isEdit }\n            isSaving={ saveIntegrationMutation.loading }\n            onClose={ props.onClose }\n            error={ error }\n        />\n    );\n};\n","import { ExpandableSection, List, ListItem, Skeleton } from '@patternfly/react-core';\nimport { DeleteModal, DeleteModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { UserIntegration } from '../../types/Integration';\nimport { BehaviorGroup } from '../../types/Notification';\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onDelete';\n\ninterface IntegrationDeleteModalProps extends Omit<DeleteModalProps, UsedProps> {\n    integration?: UserIntegration;\n    onDelete: (integration: UserIntegration) => boolean | Promise<boolean>;\n    behaviorGroups?: Array<BehaviorGroup>;\n}\n\nexport const IntegrationDeleteModal: React.FunctionComponent<IntegrationDeleteModalProps> = (props) => {\n\n    const onDeleteInternal = React.useCallback(() => {\n        const integration = props.integration;\n        const onDelete = props.onDelete;\n        if (integration) {\n            return onDelete(integration);\n        }\n\n        return false;\n    }, [ props.onDelete, props.integration ]);\n\n    const content = React.useMemo(() => {\n        if (props.behaviorGroups === undefined) {\n            return (\n                <span data-testid=\"loading\">\n                    <Skeleton />\n                </span>\n            );\n        } else if (props.behaviorGroups.length === 0) {\n            return <span\n                data-testid=\"removing-integration-without-notifications\"\n            >\n                Removing integration <strong>{ props.integration?.name }</strong> does not affect any behavior group.\n            </span>;\n        } else {\n            const behaviorGroupText = props.behaviorGroups.length !== 1 ? 'behavior groups' : 'behavior group';\n            return (\n                <span data-testid={ `removing-integration-with-notifications-${props.behaviorGroups.length}` }>\n                    Removing integration <strong>{ props.integration?.name }</strong> affects {props.behaviorGroups.length} {behaviorGroupText}.\n                    { props.behaviorGroups.length > 0 &&\n                    <ExpandableSection toggleText={ `View ${props.behaviorGroups.length} ${behaviorGroupText}.` }>\n                        <List>\n                            { props.behaviorGroups.map(behaviorGroup => (\n                                <ListItem\n                                    key={ behaviorGroup.id }\n                                >\n                                    { behaviorGroup.bundleName }: { behaviorGroup.displayName }\n                                </ListItem>\n                            )) }\n                        </List>\n                    </ExpandableSection> }\n                </span>\n            );\n        }\n    }, [ props.behaviorGroups, props.integration ]);\n\n    if (!props.integration) {\n        return null;\n    }\n\n    return (\n        <DeleteModal\n            isOpen={ true }\n            isDeleting={ props.isDeleting }\n            title={ 'Remove integration' }\n            content={ content }\n            onClose={ props.onClose }\n            onDelete={ onDeleteInternal }\n            error={ props.error }\n            titleIconVariant=\"warning\"\n        />\n    );\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    only_admins: boolean;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'MAINTENANCE' | 'UP';\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'MAINTENANCE', 'UP' ]);\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // POST /notifications/behaviorGroups\n  // Create a behavior group.\n  export namespace NotificationServiceCreateBehaviorGroup {\n    export interface Params {\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'BehaviorGroup', 200, Schemas.BehaviorGroup>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/behaviorGroups';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.BehaviorGroup, 'BehaviorGroup', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/behaviorGroups/affectedByRemovalOfEndpoint/{endpointId}\n  // Retrieve the behavior groups affected by the removal of an endpoint.\n  export namespace NotificationServiceGetBehaviorGroupsAffectedByRemovalOfEndpoint {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/affectedByRemovalOfEndpoint/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/behaviorGroups/{behaviorGroupId}/actions\n  // Update the list of actions of a behavior group.\n  export namespace NotificationServiceUpdateBehaviorGroupActions {\n    const Body = z.array(z.string());\n    type Body = Array<string>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{behaviorGroupId}/actions'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/behaviorGroups/{id}\n  // Update a behavior group.\n  export namespace NotificationServiceUpdateBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/behaviorGroups/{id}\n  // Delete a behavior group.\n  export namespace NotificationServiceDeleteBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleId}/behaviorGroups\n  // Retrieve the behavior groups of a bundle.\n  export namespace NotificationServiceFindBehaviorGroupsByBundleId {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleId}/behaviorGroups'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes\n  // Retrieve all event types. The returned list can be filtered by bundle or application.\n  export namespace NotificationServiceGetEventTypes {\n    const ApplicationIds = z.array(z.string());\n    type ApplicationIds = Array<string>;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      applicationIds?: ApplicationIds;\n      bundleId?: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes';\n        const query = {} as Record<string, any>;\n        if (params.applicationIds !== undefined) {\n            query.applicationIds = params.applicationIds;\n        }\n\n        if (params.bundleId !== undefined) {\n            query.bundleId = params.bundleId;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}\n  // Retrieve the event types affected by the removal of a behavior group.\n  export namespace NotificationServiceGetEventTypesAffectedByRemovalOfBehaviorGroup {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/{eventTypeId}/behaviorGroups\n  // Retrieve the behavior groups linked to an event type.\n  export namespace NotificationServiceGetLinkedBehaviorGroups {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/eventTypes/{eventTypeId}/behaviorGroups\n  // Update the list of behavior groups of an event type.\n  export namespace NotificationServiceUpdateEventTypeBehaviors {\n    const Body = z.array(z.string());\n    type Body = Array<string>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/events\n  // Retrieve the event log entries.\n  export namespace EventServiceGetEvents {\n    const AppIds = z.array(z.string());\n    type AppIds = Array<string>;\n    const BundleIds = z.array(z.string());\n    type BundleIds = Array<string>;\n    const EndDate = z.string();\n    type EndDate = string;\n    const EndpointTypes = z.array(Schemas.EndpointType);\n    type EndpointTypes = Array<Schemas.EndpointType>;\n    const EventTypeDisplayName = z.string();\n    type EventTypeDisplayName = string;\n    const IncludeDetails = z.boolean();\n    type IncludeDetails = boolean;\n    const InvocationResults = z.array(z.boolean());\n    type InvocationResults = Array<boolean>;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const StartDate = z.string();\n    type StartDate = string;\n    export interface Params {\n      appIds?: AppIds;\n      bundleIds?: BundleIds;\n      endDate?: EndDate;\n      endpointTypes?: EndpointTypes;\n      eventTypeDisplayName?: EventTypeDisplayName;\n      includeDetails?: IncludeDetails;\n      invocationResults?: InvocationResults;\n      limit?: Limit;\n      offset?: Offset;\n      sortBy?: SortBy;\n      startDate?: StartDate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'PageEventLogEntry', 200, Schemas.PageEventLogEntry>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/events';\n        const query = {} as Record<string, any>;\n        if (params.appIds !== undefined) {\n            query.appIds = params.appIds;\n        }\n\n        if (params.bundleIds !== undefined) {\n            query.bundleIds = params.bundleIds;\n        }\n\n        if (params.endDate !== undefined) {\n            query.endDate = params.endDate;\n        }\n\n        if (params.endpointTypes !== undefined) {\n            query.endpointTypes = params.endpointTypes;\n        }\n\n        if (params.eventTypeDisplayName !== undefined) {\n            query.eventTypeDisplayName = params.eventTypeDisplayName;\n        }\n\n        if (params.includeDetails !== undefined) {\n            query.includeDetails = params.includeDetails;\n        }\n\n        if (params.invocationResults !== undefined) {\n            query.invocationResults = params.invocationResults;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sortBy = params.sortBy;\n        }\n\n        if (params.startDate !== undefined) {\n            query.startDate = params.startDate;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.PageEventLogEntry,\n                    'PageEventLogEntry',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/applications\n  // Return a thin list of configured applications. This can be used to configure a filter in the UI\n  export namespace NotificationServiceGetApplicationsFacets {\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export interface Params {\n      bundleName?: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/applications';\n        const query = {} as Record<string, any>;\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/bundles\n  // Return a thin list of configured bundles. This can be used to configure a filter in the UI\n  export namespace NotificationServiceGetBundleFacets {\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/{id}\n  export namespace NotificationServiceMarkRead {\n    const Id = z.number().int();\n    type Id = number;\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      id: Id;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n}\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { NotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface NotificationBase {\n    id: UUID;\n    applicationDisplayName: string;\n    eventTypeDisplayName: string;\n}\n\nexport interface Notification extends NotificationBase {\n    actions?: Array<Action>;\n    useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends NotificationBase {\n    readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<UserIntegration, 'id' | 'name' | 'type' | 'isEnabled'>\n\nexport interface DefaultNotificationBehavior {\n    actions: Array<Action>;\n}\n\nexport interface ActionBase {\n    type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n    type: NotificationType.INTEGRATION;\n    integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n    type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n    recipient: ReadonlyArray<NotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n    action.type === NotificationType.EMAIL_SUBSCRIPTION || action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (action: Action): action is ActionIntegration =>\n    action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n    EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n    DRAWER = 'DRAWER',\n    INTEGRATION = 'INTEGRATION'\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n    readonly id: UUID;\n    readonly actions: ReadonlyArray<Action>;\n    readonly bundleId: UUID,\n    readonly displayName: string;\n    readonly bundleName: string;\n}\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> & Omit<BehaviorGroup, 'id'>;\n\nexport type EmailSystemProperties = {\n    type: NotificationType.EMAIL_SUBSCRIPTION;\n    props: {\n        onlyAdmins: boolean;\n        ignorePreferences: false;\n        groupId: undefined;\n    }\n}\nexport type SystemProperties = EmailSystemProperties;\n","import { IntegrationRef, UUID } from './Notification';\n\nexport abstract class Recipient {\n    readonly displayName: string;\n\n    protected constructor(displayName: string) {\n        this.displayName = displayName;\n    }\n\n    public abstract getKey();\n    public abstract equals(recipient: Recipient);\n}\n\nexport class IntegrationRecipient extends Recipient {\n    readonly integration: IntegrationRef;\n\n    public constructor(integration: IntegrationRef) {\n        super(integration.name + (integration.isEnabled ? '' : ' - Disabled'));\n        this.integration = integration;\n    }\n\n    public getKey() {\n        return this.integration.id;\n    }\n\n    public equals(recipient: Recipient) {\n        if (recipient instanceof IntegrationRecipient) {\n            return recipient.integration.id === this.integration.id;\n        }\n\n        return false;\n    }\n}\n\nexport class NotificationRecipient extends Recipient {\n    readonly sendToAdmin: boolean;\n    readonly integrationId: UUID | undefined;\n    readonly key: string;\n\n    public constructor(integrationId: UUID | undefined, sendToAdmin: boolean) {\n        let displayName = 'Users:';\n        if (sendToAdmin) {\n            displayName += ' Admins';\n        } else {\n            displayName += ' All';\n        }\n\n        super(displayName);\n        this.key = sendToAdmin ? 'admin' : 'user';\n        this.sendToAdmin = sendToAdmin;\n        this.integrationId = integrationId;\n    }\n\n    public getKey() {\n        return this.key;\n    }\n\n    public equals(recipient: Recipient) {\n        if (recipient instanceof NotificationRecipient) {\n            return recipient.sendToAdmin === this.sendToAdmin;\n        }\n\n        return false;\n    }\n}\n\n","import { assertNever } from 'assert-never';\nimport produce, { castDraft } from 'immer';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { IntegrationEmailSubscription, ServerIntegrationResponse, UserIntegration } from '../Integration';\nimport {\n    Action, ActionNotify,\n    NotificationBase,\n    NotificationType,\n    ServerNotificationResponse,\n    SystemProperties\n} from '../Notification';\nimport { NotificationRecipient } from '../Recipient';\nimport { toIntegration } from './IntegrationAdapter';\n\nconst _toAction = (type: NotificationType, serverAction: ServerIntegrationResponse): Action => {\n    if (type === NotificationType.INTEGRATION) {\n        const userIntegration = toIntegration(serverAction) as UserIntegration;\n        return {\n            type,\n            integration: userIntegration\n        };\n    }\n\n    const integration = toIntegration(serverAction) as IntegrationEmailSubscription;\n\n    return {\n        type,\n        recipient: [ new NotificationRecipient(integration.id, integration.onlyAdmin) ]\n    };\n};\n\nexport const usesDefault = (endpoints: Array<Schemas.Endpoint>): boolean =>\n    endpoints.findIndex(e => e.type === Schemas.EndpointType.enum.default) !== -1;\n\nexport const toNotification = (serverNotification: ServerNotificationResponse): NotificationBase => {\n    if (!serverNotification.id || !serverNotification.application) {\n        throw new Error(`Unexpected notification from server ${JSON.stringify(serverNotification)}`);\n    }\n\n    return {\n        id: serverNotification.id,\n        applicationDisplayName: serverNotification.application.display_name,\n        eventTypeDisplayName: serverNotification.display_name\n    };\n};\n\nexport const toAction = (serverAction: ServerIntegrationResponse): Action => {\n    switch (serverAction.type) {\n        case Schemas.EndpointType.enum.webhook:\n            return _toAction(NotificationType.INTEGRATION, serverAction);\n        case Schemas.EndpointType.enum.camel:\n            return _toAction(NotificationType.INTEGRATION, serverAction);\n        case Schemas.EndpointType.enum.email_subscription:\n            return _toAction(NotificationType.EMAIL_SUBSCRIPTION, serverAction);\n        case Schemas.EndpointType.enum.default:\n            throw new Error('EndpointType.default should not reach this point');\n        default:\n            assertNever(serverAction.type);\n    }\n};\n\nexport const reduceActions = (actions: ReadonlyArray<Action>): ReadonlyArray<Action> => actions.reduce((actions, current) => {\n    return produce(actions, draft => {\n        if (current.type === NotificationType.EMAIL_SUBSCRIPTION) {\n            const existingAction = draft.find(a => a.type === current.type) as ActionNotify;\n            if (existingAction) {\n                castDraft(existingAction.recipient).push(current.recipient[0]);\n            } else {\n                draft.push(castDraft(current));\n            }\n        } else {\n            draft.push(castDraft(current));\n        }\n    });\n}, [] as ReadonlyArray<Action>);\n\nexport const toNotifications = (serverNotifications: Array<ServerNotificationResponse>) => serverNotifications.map(toNotification);\n\nexport const toSystemProperties = (action: Action): ReadonlyArray<SystemProperties> => {\n    if (action.type === NotificationType.EMAIL_SUBSCRIPTION) {\n        return action.recipient.map(r => ({\n            type: NotificationType.EMAIL_SUBSCRIPTION,\n            props: {\n                onlyAdmins: r.sendToAdmin,\n                ignorePreferences: false,\n                groupId: undefined\n            }\n        }));\n    } else {\n        throw new Error(`No system properties for type ${action.type}`);\n    }\n};\n","import { Schemas } from '../../generated/OpenapiNotifications';\nimport { BehaviorGroup, NewBehaviorGroup } from '../Notification';\nimport { reduceActions, toAction } from './NotificationAdapter';\n\ntype ServerBehaviorGroup = Schemas.BehaviorGroup;\n\nconst reportBehaviorGroup = (element: ServerBehaviorGroup): never => {\n    throw new Error('Invalid behavior group:' + JSON.stringify(element));\n};\n\nexport const toBehaviorGroup = (serverBehaviorGroup: ServerBehaviorGroup): BehaviorGroup => {\n    const actions = serverBehaviorGroup.actions?.map((behaviorAction) => {\n        if (behaviorAction.endpoint) {\n            return toAction(behaviorAction.endpoint);\n        }\n\n        return reportBehaviorGroup(serverBehaviorGroup);\n    }) || [];\n\n    return {\n        actions: reduceActions(actions),\n        bundleId: serverBehaviorGroup.bundle_id,\n        displayName: serverBehaviorGroup.display_name,\n        id: serverBehaviorGroup.id ?? reportBehaviorGroup(serverBehaviorGroup),\n        bundleName: serverBehaviorGroup.bundle?.display_name ?? ''\n    };\n};\n\nexport const toShallowBehaviorGroupRequest = (behaviorGroup: BehaviorGroup | NewBehaviorGroup): ServerBehaviorGroup => {\n    return {\n        bundle_id: behaviorGroup.bundleId,\n        display_name: behaviorGroup.displayName\n    };\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toBehaviorGroup } from '../../types/adapters/BehaviorGroupAdapter';\n\nconst behaviorGroupsForEndpointActionCreator = (integrationId: string) => {\n    return Operations.NotificationServiceGetBehaviorGroupsAffectedByRemovalOfEndpoint.actionCreator({\n        endpointId: integrationId\n    });\n};\n\nconst defaultBehaviorGroupDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceGetBehaviorGroupsAffectedByRemovalOfEndpoint.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'BehaviorGroups',\n                200,\n                payload.value.map(toBehaviorGroup),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetAffectedBehaviorGroupsByEndpoint = () =>\n    useTransformQueryResponse(useParameterizedQuery(behaviorGroupsForEndpointActionCreator), defaultBehaviorGroupDecoder);\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiIntegrations';\n\nexport const deleteIntegrationActionCreator = (integrationId: string) => {\n    return Operations.EndpointServiceDeleteEndpoint.actionCreator({\n        id: integrationId\n    });\n};\n\nexport const useDeleteIntegration = () => useMutation<boolean>(deleteIntegrationActionCreator);\n","import {\n    ActionModalError,\n    addSuccessNotification,\n    OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { IntegrationDeleteModal } from '../../../components/Integrations/DeleteModal';\nimport { useGetAffectedBehaviorGroupsByEndpoint } from '../../../services/Notifications/GetAffectedBehaviorGroupsByEndpoint';\nimport { useDeleteIntegration } from '../../../services/useDeleteIntegration';\nimport { UserIntegration } from '../../../types/Integration';\n\ninterface IntegrationDeleteModalPageProps extends OuiaComponentProps {\n    onClose: (deleted: boolean) => void;\n    integration: UserIntegration;\n}\n\nexport const IntegrationDeleteModalPage: React.FunctionComponent<IntegrationDeleteModalPageProps> = (props) => {\n\n    const deleteIntegrationMutation = useDeleteIntegration();\n    const getBehaviorGroupsQuery = useGetAffectedBehaviorGroupsByEndpoint();\n    const [ hasError, setError ] = React.useState(false);\n\n    const onDelete = React.useCallback((integration: UserIntegration) => {\n        const deleteIntegration = deleteIntegrationMutation.mutate;\n        setError(false);\n        return deleteIntegration(integration.id).then((response) => {\n            if (!response.error) {\n                addSuccessNotification('Integration removed', 'The integration was removed.');\n                return true;\n            } else {\n                setError(true);\n                return false;\n            }\n        });\n    }, [ deleteIntegrationMutation.mutate, setError ]);\n\n    const error = React.useMemo<ActionModalError | undefined>(() => {\n        if (hasError) {\n            return {\n                title: 'Failed to remove Integration',\n                description: <p>There was an error trying to remove the Integration. Please try again.</p>\n            };\n        }\n\n        return undefined;\n    }, [ hasError ]);\n\n    React.useEffect(() => {\n        const query = getBehaviorGroupsQuery.query;\n        query(props.integration.id);\n    }, [ props.integration, getBehaviorGroupsQuery.query ]);\n\n    const behaviorGroups = React.useMemo(() => {\n        const payload = getBehaviorGroupsQuery.payload;\n        if (payload && payload.type === 'BehaviorGroups') {\n            return payload.value;\n        }\n\n        return undefined;\n    }, [ getBehaviorGroupsQuery.payload ]);\n\n    return (\n        <IntegrationDeleteModal\n            integration={ props.integration }\n            behaviorGroups={ behaviorGroups }\n            isDeleting={ deleteIntegrationMutation.loading }\n            onClose={ props.onClose }\n            onDelete={ onDelete }\n            error={ error }\n        />\n    );\n};\n","import {\n    useFilters,\n    useUrlStateMultipleOptions,\n    useUrlStateString\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\n\nimport { IntegrationFilterColumn } from '../../../components/Integrations/Filters';\n\nconst DEBOUNCE_MS = 250;\n\nconst useUrlStateName = (defaultValue?: string) => useUrlStateString('name', defaultValue);\nconst useUrlStateEnabled = (_defaultValue?: string) => useUrlStateMultipleOptions('enabled', [ 'Enabled', 'Disabled' ]);\n\nconst useStateFactory = (column: IntegrationFilterColumn) => {\n    switch (column) {\n        case IntegrationFilterColumn.NAME:\n            return useUrlStateName;\n        case IntegrationFilterColumn.ENABLED:\n            return useUrlStateEnabled;\n        default:\n            assertNever(column);\n    }\n};\n\nexport const useIntegrationFilter = (debounce = DEBOUNCE_MS) => {\n    return useFilters(IntegrationFilterColumn, debounce, useStateFactory);\n};\n","import { Operations } from '../generated/OpenapiIntegrations';\n\ntype IntegrationHistoryParams = {\n    integrationId: string;\n    limit?: number;\n    sortBy?: 'nh.created:desc'\n}\n\nexport const listIntegrationHistoryActionCreator = (params: IntegrationHistoryParams) => {\n    return Operations.EndpointServiceGetEndpointHistory.actionCreator({\n        id: params.integrationId,\n        limit: params.limit,\n        sortBy: params.sortBy\n    });\n};\n","import { Main, PageHeader, PageHeaderTitle, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    addDangerNotification,\n    ExporterType,\n    Filter,\n    Operator,\n    Page\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { format } from 'date-fns';\nimport inBrowserDownload from 'in-browser-download';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { AppContext } from '../../../app/AppContext';\nimport { IntegrationFilters } from '../../../components/Integrations/Filters';\nimport { IntegrationsTable } from '../../../components/Integrations/Table';\nimport { IntegrationsToolbar } from '../../../components/Integrations/Toolbar';\nimport { useDeleteModalReducer } from '../../../hooks/useDeleteModalReducer';\nimport { useFormModalReducer } from '../../../hooks/useFormModalReducer';\nimport { usePage } from '../../../hooks/usePage';\nimport { Messages } from '../../../properties/Messages';\nimport { useListIntegrationPQuery, useListIntegrationsQuery } from '../../../services/useListIntegrations';\nimport { NotificationAppState } from '../../../store/types/NotificationAppState';\nimport { SavedNotificationScopeState } from '../../../store/types/SavedNotificationScopeTypes';\nimport { IntegrationType, UserIntegration } from '../../../types/Integration';\nimport { integrationExporterFactory } from '../../../utils/exporters/Integration/Factory';\nimport { CreatePage } from '../Create/CreatePage';\nimport { IntegrationDeleteModalPage } from '../Delete/DeleteModal';\nimport { useActionResolver } from './useActionResolver';\nimport { useIntegrationFilter } from './useIntegrationFilter';\nimport { useIntegrationRows } from './useIntegrationRows';\n\nconst integrationFilterBuilder = (filters?: IntegrationFilters) => {\n    const filter = new Filter();\n    if (filters?.enabled?.length === 1) {\n        const isEnabled = filters.enabled[0].toLocaleLowerCase() === 'enabled';\n        filter.and('active', Operator.EQUAL, isEnabled.toString());\n    }\n\n    return filter.and('type', Operator.EQUAL, [ IntegrationType.WEBHOOK, IntegrationType.CAMEL ]);\n};\n\nconst userIntegrationCopier = (userIntegration: Partial<UserIntegration>) => ({\n    ...userIntegration,\n    name: `Copy of ${userIntegration.name}`\n});\n\ninterface IntegrationsListPageProps {\n    reduxDispatch: Dispatch;\n    savedNotificationScope: SavedNotificationScopeState;\n}\n\nexport const IntegrationsListPage: React.FunctionComponent<IntegrationsListPageProps> = props => {\n\n    const { rbac: { canWriteIntegrationsEndpoints }} = useContext(AppContext);\n    const integrationFilter = useIntegrationFilter();\n    const pageData = usePage<IntegrationFilters>(10, integrationFilterBuilder, integrationFilter.filters);\n    const integrationsQuery = useListIntegrationsQuery(pageData.page);\n    const exportIntegrationsQuery = useListIntegrationPQuery();\n\n    const integrations = React.useMemo(() => {\n        const payload = integrationsQuery.payload;\n        if (payload?.type === 'IntegrationPage') {\n            return payload.value;\n        }\n\n        return {\n            data: [],\n            count: 0\n        };\n    }, [ integrationsQuery.payload ]);\n\n    const integrationRows = useIntegrationRows(integrations.data, props.reduxDispatch, props.savedNotificationScope);\n    const [ modalIsOpenState, modalIsOpenActions ] = useFormModalReducer<UserIntegration>(userIntegrationCopier);\n    const [ deleteModalState, deleteModalActions ] = useDeleteModalReducer<UserIntegration>();\n\n    const onAddIntegrationClicked = React.useCallback(() => {\n        modalIsOpenActions.create();\n    }, [ modalIsOpenActions ]);\n\n    const onEdit = React.useCallback((integration: UserIntegration) => {\n        modalIsOpenActions.edit(integration);\n    }, [ modalIsOpenActions ]);\n\n    const onDelete = React.useCallback((integration: UserIntegration) => {\n        deleteModalActions.delete(integration);\n    }, [ deleteModalActions ]);\n\n    const onExport = React.useCallback(async (type: ExporterType) => {\n        const query = exportIntegrationsQuery.query;\n        const exporter = integrationExporterFactory(type);\n        const exportedIntegrations: Array<UserIntegration> = [];\n        let page = Page.of(1, 100, new Filter().and('type', Operator.EQUAL, 'webhook'));\n        while (true) {\n            const data = await query(page);\n            if (data?.payload?.status !== 200) {\n                if (exportedIntegrations.length === 0) {\n                    addDangerNotification(\n                        'Unable to download integrations',\n                        'We were unable to download the integrations for exporting. Please try again.'\n                    );\n                    return;\n                } else {\n                    addDangerNotification(\n                        'Unable to download all integrations',\n                        `We were unable to download all the integrations for exporting. Downloading: ${exportedIntegrations.length}.`\n                    );\n                    break;\n                }\n            }\n\n            if (data.payload.value.data.length === 0) {\n                break;\n            }\n\n            page = page.nextPage();\n            exportedIntegrations.push(...data.payload.value.data);\n        }\n\n        if (exportedIntegrations) {\n            inBrowserDownload(\n                exporter.export(exportedIntegrations),\n                `integrations-${format(new Date(Date.now()), 'y-dd-MM')}.${exporter.type}`\n            );\n        }\n    }, [ exportIntegrationsQuery ]);\n\n    const actionResolver = useActionResolver({\n        canWrite: canWriteIntegrationsEndpoints,\n        onEdit,\n        onDelete,\n        onEnable: integrationRows.onEnable\n    });\n\n    const closeFormModal = React.useCallback((saved: boolean) => {\n        const query = integrationsQuery.query;\n        modalIsOpenActions.reset();\n        if (saved) {\n            query();\n        }\n    }, [ modalIsOpenActions, integrationsQuery.query ]);\n\n    const closeDeleteModal = React.useCallback((deleted: boolean) => {\n        const query = integrationsQuery.query;\n        if (deleted) {\n            query();\n        }\n\n        deleteModalActions.reset();\n    }, [ deleteModalActions, integrationsQuery.query ]);\n\n    // This is an estimate of how many rows are in the next page (Won't be always correct because a new row could be added while we are browsing)\n    // Is used for the skeleton loading\n    const loadingCount = Math.min(pageData.page.size, integrations.count - (pageData.page.index - 1) * pageData.page.size)  || 10;\n\n    return (\n        <>\n            <PageHeader>\n                <PageHeaderTitle title={ Messages.pages.integrations.list.title } />\n            </PageHeader>\n            <Main>\n                <Section className='pf-c-page__main-section pf-m-light'>\n                    <IntegrationsToolbar\n                        onAddIntegration={ canWriteIntegrationsEndpoints ? onAddIntegrationClicked : undefined }\n                        onExport={ onExport }\n                        filters={ integrationFilter.filters }\n                        setFilters={ integrationFilter.setFilters }\n                        clearFilters={ integrationFilter.clearFilter }\n                        count={ integrations.count || 0 }\n                        pageCount={ integrations.data.length }\n                        page={ pageData.page.index }\n                        perPage={ pageData.page.size }\n                        pageChanged={ pageData.changePage }\n                        perPageChanged={ pageData.changeItemsPerPage }\n                    >\n                        <IntegrationsTable\n                            isLoading={ integrationsQuery.loading }\n                            loadingCount={ loadingCount }\n                            integrations={ integrationRows.rows }\n                            onCollapse={ integrationRows.onCollapse }\n                            onEnable={ canWriteIntegrationsEndpoints ? integrationRows.onEnable : undefined }\n                            actionResolver={ actionResolver }\n                        />\n                    </IntegrationsToolbar>\n                    { modalIsOpenState.isOpen && (\n                        <CreatePage\n                            isEdit={ modalIsOpenState.isEdit }\n                            initialIntegration={ modalIsOpenState.template || {} }\n                            onClose={ closeFormModal }\n                        />\n                    ) }\n                    { deleteModalState.data && (\n                        <IntegrationDeleteModalPage\n                            onClose={ closeDeleteModal }\n                            integration={ deleteModalState.data }\n                        />\n                    )}\n                </Section>\n            </Main>\n        </>\n    );\n};\n\nconst notificationAppStateSelector = (state: NotificationAppState) => ({\n    savedNotificationScope: state.savedNotificationScope\n});\n\nexport const ConnectedIntegrationsListPage = connect(\n    notificationAppStateSelector,\n    dispatch => ({\n        reduxDispatch: dispatch\n    })\n)(IntegrationsListPage);\n","import { addDangerNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport pLimit from 'p-limit';\nimport { useCallback, useContext, useEffect, useState } from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { format } from 'react-string-format';\nimport { usePrevious } from 'react-use';\nimport { Dispatch } from 'redux';\n\nimport { IntegrationRow } from '../../../components/Integrations/Table';\nimport { Messages } from '../../../properties/Messages';\nimport { listIntegrationHistoryActionCreator } from '../../../services/useListIntegrationHistory';\nimport {\n    switchIntegrationEnabledStatusActionCreator\n} from '../../../services/useSwitchIntegrationEnabledStatus';\nimport { SavedNotificationScopeActions } from '../../../store/actions/SavedNotificationScopeAction';\nimport { SavedNotificationScopeState, Status } from '../../../store/types/SavedNotificationScopeTypes';\nimport { UserIntegration } from '../../../types/Integration';\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport const useIntegrationRows = (\n    integrations: Array<UserIntegration>,\n    reduxDispatch: Dispatch,\n    savedNotificationScope: SavedNotificationScopeState) => {\n    const [ integrationRows, setIntegrationRows ] = useState<Array<IntegrationRow>>([]);\n    const prevIntegrationsInput = usePrevious(integrations);\n\n    const { query } = useContext(ClientContext);\n    const [ limit ] = useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const setIntegrationRowByIndex = useCallback((index: number, partialIntegration: Partial<IntegrationRow>) => {\n        setIntegrationRows(prevIntegrations => {\n            const newIntegrations = [ ...prevIntegrations ];\n            newIntegrations[index] = { ...newIntegrations[index], ...partialIntegration } as IntegrationRow;\n            return newIntegrations;\n        });\n    }, [ setIntegrationRows ]);\n\n    const setIntegrationRowById = useCallback((id: string, partialIntegration: Partial<IntegrationRow>) => {\n        setIntegrationRows(prevIntegrations => {\n            const index = prevIntegrations.findIndex(integration => integration.id === id);\n            if (index === -1) {\n                return prevIntegrations;\n            }\n\n            const newIntegrations = [ ...prevIntegrations ];\n            newIntegrations[index] = { ...newIntegrations[index], ...partialIntegration } as IntegrationRow;\n            return newIntegrations;\n        });\n    }, [ setIntegrationRows ]);\n\n    useEffect(() => {\n        if (integrations !== prevIntegrationsInput) {\n            setIntegrationRows(prev => {\n                return integrations.map(integration => ({\n                    isOpen: false,\n                    isSelected: false,\n                    isEnabledLoading: false,\n                    lastConnectionAttempts: [],\n                    isConnectionAttemptLoading: true,\n                    ...prev.find(i => i.id === integration.id),\n                    ...integration\n                }));\n            });\n\n            if (integrations) {\n                limit.clearQueue();\n\n                integrations.map(integration => integration.id).forEach(integrationId => {\n                    limit(() => query(listIntegrationHistoryActionCreator({\n                        integrationId,\n                        limit: 5,\n                        sortBy: 'nh.created:desc'\n                    }))).then(response => {\n\n                        if (response.payload && response.payload.status === 200) {\n                            const last5 = response.payload.value.map(p => ({\n                                isSuccess: p.invocationResult,\n                                date: new Date(p.created as string)\n                            }));\n                            setIntegrationRowById(integrationId, {\n                                isConnectionAttemptLoading: false,\n                                lastConnectionAttempts: last5\n                            });\n                        } else {\n                            setIntegrationRowById(integrationId, {\n                                isConnectionAttemptLoading: false,\n                                lastConnectionAttempts: undefined\n                            });\n                        }\n                    });\n                });\n            }\n        }\n    }, [ prevIntegrationsInput, integrations, setIntegrationRowById, limit, query ]);\n\n    const onCollapse = useCallback((_integration: IntegrationRow, index: number, isOpen: boolean) => {\n        setIntegrationRowByIndex(index, {\n            isOpen\n        });\n    }, [ setIntegrationRowByIndex ]);\n\n    const onEnable = useCallback((_integration: UserIntegration, index: number, isEnabled: boolean) => {\n        setIntegrationRowByIndex(index, {\n            isEnabledLoading: true\n        });\n\n        if (savedNotificationScope) {\n            if (_integration.id === savedNotificationScope.integration.id) {\n                reduxDispatch(SavedNotificationScopeActions.start());\n            }\n        }\n\n        query(switchIntegrationEnabledStatusActionCreator(_integration)).then((response) => {\n            if (!response.error) {\n                setIntegrationRowByIndex(index, {\n                    isEnabled,\n                    isEnabledLoading: false\n                });\n                if (savedNotificationScope) {\n                    if (_integration.id === savedNotificationScope.integration.id) {\n                        reduxDispatch(SavedNotificationScopeActions.finish(isEnabled));\n                    }\n                }\n            } else {\n                const message = isEnabled ? Messages.components.integrations.enableError : Messages.components.integrations.disableError;\n\n                if (savedNotificationScope) {\n                    if (_integration.id === savedNotificationScope.integration.id) {\n                        reduxDispatch(SavedNotificationScopeActions.finish(_integration.isEnabled));\n                    }\n                }\n\n                addDangerNotification(\n                    message.title,\n                    format(message.description, _integration.name),\n                    true);\n                setIntegrationRowByIndex(index, {\n                    isEnabled: _integration.isEnabled,\n                    isEnabledLoading: false\n                });\n            }\n        });\n\n    }, [ setIntegrationRowByIndex, query, reduxDispatch, savedNotificationScope ]);\n\n    useEffect(() => {\n        if (savedNotificationScope) {\n            if (savedNotificationScope.status === Status.LOADING) {\n                setIntegrationRowById(\n                    savedNotificationScope.integration.id,\n                    { isEnabledLoading: true }\n                );\n            } else {\n                setIntegrationRowById(\n                    savedNotificationScope.integration.id,\n                    { isEnabledLoading: false, isEnabled: savedNotificationScope.integration.isEnabled }\n                );\n            }\n        }\n    }, [ savedNotificationScope, setIntegrationRowById ]);\n\n    return {\n        rows: integrationRows,\n        onCollapse,\n        onEnable\n    };\n};\n","import { useCallback } from 'react';\n\nimport { IntegrationRow, OnEnable } from '../../../components/Integrations/Table';\nimport { UserIntegration } from '../../../types/Integration';\n\ninterface ActionResolverParams {\n    onEdit: (integration: UserIntegration) => void;\n    onDelete: (integration: UserIntegration) => void;\n    canWrite: boolean;\n    onEnable: OnEnable;\n}\n\nexport const useActionResolver = (params: ActionResolverParams) => {\n\n    return useCallback((integration: IntegrationRow, index: number) => {\n        const onEdit = params.onEdit;\n        const onDelete = params.onDelete;\n        const onEnable = params.onEnable;\n\n        const isDisabled = !params.canWrite;\n\n        return [\n            {\n                title: 'Edit',\n                isDisabled,\n                onClick: () => onEdit(integration)\n            }, {\n                title: 'Remove',\n                isDisabled,\n                onClick: () => onDelete(integration)\n            }, {\n                title: integration.isEnabled ? 'Disable' : 'Enable',\n                isDisabled,\n                onClick: () => onEnable(integration, index, !integration.isEnabled)\n            }\n        ];\n\n    }, [ params.onEdit, params.onDelete, params.canWrite, params.onEnable ]);\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport const ButtonLink: React.FunctionComponent<{ navigate: () => void }> = (props) => {\n    return <Button variant={ ButtonVariant.secondary } onClick={ props.navigate }>{ props.children }</Button>;\n};\n","import {\n    Bullseye,\n    DatePicker,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    Split,\n    SplitItem,\n    TextInputProps\n} from '@patternfly/react-core';\nimport { global_active_color_100, global_palette_black_600, global_spacer_sm } from '@patternfly/react-tokens';\nimport { important } from 'csx';\nimport { add, format, isAfter, isBefore, min, parseISO } from 'date-fns';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { Dispatch } from 'react';\nimport { SetStateAction } from 'react';\nimport { style } from 'typestyle';\n\nimport { EventPeriod } from '../../../types/Event';\n\nexport enum EventLogDateFilterValue {\n    TODAY = 'today',\n    YESTERDAY = 'yesterday',\n    LAST_7 = 'last_7',\n    LAST_14 = 'last_14',\n    CUSTOM = 'custom'\n}\n\nconst labels: Record<EventLogDateFilterValue, string> = {\n    [EventLogDateFilterValue.TODAY]: 'Today',\n    [EventLogDateFilterValue.YESTERDAY]: 'Yesterday',\n    [EventLogDateFilterValue.LAST_7]: 'Last 7 days',\n    [EventLogDateFilterValue.LAST_14]: 'Last 14 days',\n    [EventLogDateFilterValue.CUSTOM]: 'Custom'\n};\n\nconst toClassName = style({\n    paddingLeft: global_spacer_sm.value,\n    paddingRight: global_spacer_sm.value,\n    color: global_palette_black_600.value\n});\n\nconst datePickerClassName = style({\n    backgroundColor: important('white'),\n    cursor: 'pointer',\n    $nest: {\n        '&::placeholder': {\n            color: important('black')\n        },\n        '&:hover': {\n            borderBottomColor: global_active_color_100.value\n        }\n    }\n});\n\nclass EventLogSelectObject implements SelectOptionObject {\n\n    readonly value: EventLogDateFilterValue;\n\n    constructor(value: EventLogDateFilterValue) {\n        this.value = value;\n    }\n\n    toString(): string {\n        return labels[this.value];\n    }\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof EventLogSelectObject) {\n            return selectOption.value === this.value;\n        }\n\n        return false;\n    }\n}\n\nconst dateInputProps: TextInputProps = {\n    isReadOnly: true,\n    className: datePickerClassName\n};\n\ninterface CustomDateFilterProps {\n    retentionDays: number;\n    period: EventPeriod;\n    setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n}\n\nconst CustomDateFilter: React.FunctionComponent<CustomDateFilterProps> = props => {\n    const maxDate = React.useMemo(() => new Date(), []);\n    const minDate = React.useMemo(() => add(maxDate, {\n        days: -14\n    }), [ maxDate ]);\n\n    const startRangeValidators = React.useMemo(() => [ (date) => {\n        if (isBefore(date, minDate)) {\n            return 'Date is before the retention policy';\n        } else if (isAfter(date, maxDate)) {\n            return 'Date is after today';\n        } else if (props.period[1] && isAfter(date, props.period[1])) {\n            return 'Start date must be before end date';\n        }\n\n        return '';\n    } ], [ minDate, maxDate, props.period ]);\n\n    const endRangeValidators = React.useMemo(() => [ (date) => {\n        if (isBefore(date, minDate)) {\n            return 'Date is before the retention policy';\n        } else if (isAfter(date, maxDate)) {\n            return 'Date is after today';\n        } else if (props.period[0] && isBefore(date, props.period[0])) {\n            return 'End date must be after start date';\n        }\n\n        return '';\n    } ], [ minDate, maxDate, props.period ]);\n\n    const setStartDate = React.useCallback((start: string) => {\n        const setPeriod = props.setPeriod;\n        const startDate = parseISO(start);\n        setPeriod(produce(draft => {\n            draft[0] = startDate;\n            if (!draft[1]) {\n                draft[1] = min([ add(startDate, { days: 1 }), maxDate ]);\n            }\n        }));\n    }, [\n        props.setPeriod,\n        maxDate\n    ]);\n\n    const setEndDate = React.useCallback((end: string) => {\n        const setPeriod = props.setPeriod;\n        setPeriod(produce(draft => {\n            draft[1] = parseISO(end);\n        }));\n    }, [ props.setPeriod ]);\n\n    const startValue: string | undefined = React.useMemo(() => props.period[0] ? format(props.period[0], 'yyyy-MM-dd') : undefined, [ props.period ]);\n    const endValue: string | undefined = React.useMemo(() => props.period[1] ? format(props.period[1], 'yyyy-MM-dd') : undefined, [ props.period ]);\n\n    return (\n        <Split>\n            <SplitItem>\n                <DatePicker\n                    placeholder=\"Start\"\n                    inputProps={ dateInputProps }\n                    validators={ startRangeValidators }\n                    onChange={ setStartDate }\n                    value={ startValue }\n                />\n            </SplitItem>\n            <SplitItem>\n                <Bullseye>\n                    <span className={ toClassName }>to</span>\n                </Bullseye>\n            </SplitItem>\n            <SplitItem>\n                <DatePicker\n                    placeholder=\"End\"\n                    inputProps={ dateInputProps }\n                    validators={ endRangeValidators }\n                    onChange={ setEndDate }\n                    value={ endValue }\n                />\n            </SplitItem>\n        </Split>\n    );\n};\n\nexport interface EventLogDateFilterProps {\n    value: EventLogDateFilterValue;\n    setValue: (value: EventLogDateFilterValue) => void;\n    retentionDays: number;\n    period: EventPeriod;\n    setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n}\n\nexport const EventLogDateFilter: React.FunctionComponent<EventLogDateFilterProps> = props => {\n\n    const options = React.useMemo(\n        () => Object.values(EventLogDateFilterValue).map(v => <SelectOption key={ v } value={ new EventLogSelectObject(v) } />),\n        []\n    );\n    const [ isOpen, setOpen ] = React.useState(false);\n    const onToggle = React.useCallback(() => setOpen(prev => !prev), [ setOpen ]);\n    const value = React.useMemo(() => new EventLogSelectObject(props.value), [ props.value ]);\n    const onSelect = React.useCallback((_e: any, selectObject: SelectOptionObject | string) => {\n        const setValue = props.setValue;\n        if (selectObject instanceof EventLogSelectObject) {\n            setValue(selectObject.value);\n            setOpen(false);\n        }\n    }, [ props.setValue ]);\n\n    return (\n        <Split>\n            <SplitItem>\n                <Select\n                    isOpen={ isOpen }\n                    variant={ SelectVariant.single }\n                    onToggle={ onToggle }\n                    selections={ value }\n                    onSelect={ onSelect }\n                >\n                    { options }\n                </Select>\n            </SplitItem>\n            { props.value === EventLogDateFilterValue.CUSTOM && (\n                <SplitItem>\n                    <CustomDateFilter\n                        period={ props.period }\n                        setPeriod={ props.setPeriod }\n                        retentionDays={ props.retentionDays }\n                    />\n                </SplitItem>\n            ) }\n        </Split>\n    );\n};\n","import { toUtc } from '@redhat-cloud-services/insights-common-typescript';\nimport format from 'date-fns/format';\nimport * as React from 'react';\n\nexport interface UtcDateProps {\n    date: Date;\n    isUtc?: boolean;\n}\n\nconst dateFormatString = 'dd MMM yyyy HH:mm:ss';\n\nexport const UtcDate: React.FunctionComponent<UtcDateProps> = props => {\n    const { date, isUtc } = props;\n    const formatted = React.useMemo(() => format(isUtc ? date : toUtc(date), dateFormatString), [ date, isUtc ]);\n\n    return (\n        <>\n            { formatted } UTC\n        </>\n    );\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { TableComposable, TableVariant, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport { important } from 'csx';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport Config from '../../../config/Config';\nimport { IntegrationType } from '../../../types/Integration';\nimport { UUID } from '../../../types/Notification';\n\nconst actionLabelMap: Record<IntegrationType, string> = Config.integrationNames;\nconst headerClass = style({\n    minWidth: important('90px')\n});\n\ninterface EventLogActionPopoverContentProps {\n    id: UUID;\n    type: IntegrationType;\n    success: boolean;\n}\n\nexport const EventLogActionPopoverContent: React.FunctionComponent<EventLogActionPopoverContentProps> = props => {\n    return (\n        <TableComposable\n            borders={ false }\n            variant={ TableVariant.compact }\n        >\n            <Thead>\n                <Tr>\n                    <Th className={ headerClass }>Action</Th>\n                    <Th>Recipient</Th>\n                    <Th className={ headerClass }>Status</Th>\n                </Tr>\n            </Thead>\n            <Tbody>\n                <Tr>\n                    <Td>{ actionLabelMap[props.type] }</Td>\n                    <Td>\n                        <Skeleton width=\"150px\"  />\n                    </Td>\n                    <Td>{ props.success ? <>Success</> : <> Failure</> }</Td>\n                </Tr>\n            </Tbody>\n        </TableComposable>\n    );\n};\n","import { Label, LabelGroup, Popover, Skeleton } from '@patternfly/react-core';\nimport { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { IExtraColumnData, SortByDirection, TableComposable, Tbody, Td, Th, Thead, ThProps, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport Config from '../../../config/Config';\nimport { NotificationEvent } from '../../../types/Event';\nimport { IntegrationType } from '../../../types/Integration';\nimport { UtcDate } from '../../UtcDate';\nimport { EventLogActionPopoverContent } from './EventLogActionPopoverContent';\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport interface EventLogTableProps {\n    events: ReadonlyArray<NotificationEvent>;\n    loading: boolean;\n    onSort: (column: EventLogTableColumns, direction: SortDirection) => void;\n    sortColumn: EventLogTableColumns;\n    sortDirection: SortDirection;\n}\n\nexport enum EventLogTableColumns {\n    EVENT,\n    APPLICATION,\n    DATE\n}\n\nconst actionLabelMap: Record<IntegrationType, string> = Config.integrationNames;\n\nconst labelClassName = style({\n    cursor: 'pointer'\n});\n\nexport const EventLogTable: React.FunctionComponent<EventLogTableProps> = props => {\n    const onSort = React.useCallback((\n        _event: React.MouseEvent,\n        columnIndex: number,\n        sortByDirection: SortByDirection,\n        _extraData: IExtraColumnData) => {\n        const externalOnSort = props.onSort;\n        externalOnSort(columnIndex, sortByDirection);\n    }, [ props.onSort ]);\n\n    const sortOptions: Record<EventLogTableColumns, undefined | ThProps['sort']> = React.useMemo(() => ({\n        [EventLogTableColumns.EVENT]: undefined,\n        [EventLogTableColumns.APPLICATION]: undefined,\n        [EventLogTableColumns.DATE]: {\n            sortBy: {\n                direction: props.sortDirection,\n                index: props.sortColumn\n            },\n            columnIndex: EventLogTableColumns.DATE,\n            onSort\n        }\n    }), [ props.sortColumn, props.sortDirection, onSort ]);\n\n    const rows = React.useMemo(() => {\n        const events = props.events;\n        if (props.loading) {\n            return (\n                [ ...Array(10) ].map((_, i) => (\n                    <Tr key={ `loading-row-${i}` }>\n                        <Td><Skeleton /></Td>\n                        <Td><Skeleton /></Td>\n                        <Td><Skeleton /></Td>\n                        <Td><Skeleton /></Td>\n                    </Tr>\n                ))\n            );\n        } else {\n            return events.map(e => (\n                <Tr key={ e.id }>\n                    <Td>{ e.event }</Td>\n                    <Td>{ e.application } - { e.bundle }</Td>\n                    <Td>\n                        { e.actions.length > 0 ? (\n                            <LabelGroup>\n                                { e.actions.map(a => (<Popover\n                                    key={ a.id }\n                                    isVisible={ false /* Remove this to allow to show/hide the popover */ }\n                                    hasAutoWidth\n                                    bodyContent={ <EventLogActionPopoverContent id={ a.id } type={ a.endpointType } success={ a.success } /> }\n                                >\n                                    <Label\n                                        className={ labelClassName }\n                                        icon={ a.success ? <CheckCircleIcon /> : <ExclamationCircleIcon /> }\n                                        color={ a.success ? 'green' : 'red' }\n                                    >\n                                        { actionLabelMap[a.endpointType] }\n                                    </Label>\n                                </Popover>))}\n                            </LabelGroup>\n                        ) : ('No actions')}\n\n                    </Td>\n                    <Td><UtcDate date={ e.date } /></Td>\n                </Tr>\n            ));\n        }\n    }, [ props.loading, props.events ]);\n\n    return (\n        <TableComposable>\n            <Thead>\n                <Tr>\n                    <Th\n                        sort={ sortOptions[EventLogTableColumns.EVENT] }\n                    >\n                        Event\n                    </Th>\n                    <Th\n                        sort={ sortOptions[EventLogTableColumns.APPLICATION] }\n                    >\n                        Application\n                    </Th>\n                    <Th>\n                        Actions\n                    </Th>\n                    <Th\n                        sort={ sortOptions[EventLogTableColumns.DATE] }\n                    >\n                        Date and time\n                    </Th>\n                </Tr>\n            </Thead>\n            <Tbody>\n                { rows }\n            </Tbody>\n        </TableComposable>\n    );\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum EventLogFilterColumn {\n    EVENT = 'event',\n    APPLICATION = 'application',\n    BUNDLE = 'bundle'\n}\n\nexport type EventLogFilters = Filters<typeof EventLogFilterColumn>;\nexport type SetEventLogFilters = SetFilters<typeof EventLogFilterColumn>;\nexport type ClearEventLogFilters = ClearFilters<typeof EventLogFilterColumn>;\n","import { PaginationProps, PaginationVariant } from '@patternfly/react-core';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ColumnsMetada,\n    OuiaComponentProps,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { Dispatch } from 'react';\nimport { SetStateAction } from 'react';\n\nimport { EventPeriod } from '../../../types/Event';\nimport { Facet } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { EventLogDateFilter, EventLogDateFilterValue } from './EventLogDateFilter';\nimport { ClearEventLogFilters, EventLogFilterColumn, EventLogFilters, SetEventLogFilters } from './EventLogFilter';\n\ninterface EventLogToolbarProps extends OuiaComponentProps {\n    filters: EventLogFilters,\n    setFilters: SetEventLogFilters,\n    clearFilter: ClearEventLogFilters\n\n    bundleOptions: ReadonlyArray<Facet>;\n    applicationOptions: ReadonlyArray<Facet>;\n\n    pageCount: number;\n    count: number;\n    page: number;\n    perPage: number;\n    pageChanged: (page: number) => void;\n    perPageChanged: (page: number) => void;\n\n    dateFilter: EventLogDateFilterValue;\n    setDateFilter: (value: EventLogDateFilterValue) => void;\n\n    retentionDays: number;\n    period: EventPeriod;\n    setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n}\n\nexport const EventLogToolbar: React.FunctionComponent<EventLogToolbarProps> = (props) => {\n\n    const filterMetadata = React.useMemo<ColumnsMetada<typeof EventLogFilterColumn>>(() => {\n        const bundleOptions = props.bundleOptions;\n        const applicationOptions = props.applicationOptions;\n        return {\n            [EventLogFilterColumn.EVENT]: {\n                label: 'Event',\n                placeholder: 'Filter by event'\n            },\n            [EventLogFilterColumn.BUNDLE]: {\n                label: 'Bundle',\n                placeholder: 'Filter by bundle',\n                options: {\n                    exclusive: false,\n                    items: bundleOptions.map(b => ({\n                        value: b.name,\n                        chipValue: b.displayName,\n                        label: b.displayName\n                    }))\n                }\n            },\n            [EventLogFilterColumn.APPLICATION]: {\n                label: 'Application',\n                placeholder: 'Filter by application',\n                options: {\n                    exclusive: false,\n                    items: applicationOptions.map(a => ({\n                        value: a.name,\n                        chipValue: a.displayName,\n                        label: a.displayName\n                    }))\n                }\n            }\n        };\n    }, [ props.bundleOptions, props.applicationOptions ]);\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        EventLogFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilter,\n        filterMetadata\n    );\n\n    const pageChanged = React.useCallback((_event: unknown, page: number) => {\n        const inner = props.pageChanged;\n        inner(page);\n    }, [ props.pageChanged ]);\n\n    const perPageChanged = React.useCallback((_event: unknown, perPage: number) => {\n        const inner = props.perPageChanged;\n        inner(perPage);\n    }, [ props.perPageChanged ]);\n\n    const topPaginationProps = React.useMemo<PaginationProps>(() => ({\n        itemCount: props.count,\n        page: props.page,\n        perPage: props.perPage,\n        isCompact: true,\n        variant: PaginationVariant.top,\n        onSetPage: pageChanged,\n        onFirstClick: pageChanged,\n        onPreviousClick: pageChanged,\n        onNextClick: pageChanged,\n        onLastClick: pageChanged,\n        onPageInput: pageChanged,\n        onPerPageSelect: perPageChanged\n    }), [ props.count, props.page, props.perPage, pageChanged, perPageChanged ]);\n\n    const bottomPaginationProps = React.useMemo<PaginationProps>(() => ({\n        ...topPaginationProps,\n        isCompact: false,\n        variant: PaginationVariant.bottom\n    }), [ topPaginationProps ]);\n\n    return (\n        <div { ...getOuiaProps('Notifications/EventLog/DualToolbar', props) }>\n            <PrimaryToolbar\n                { ...primaryToolbarFilterConfig }\n                dedicatedAction={ <EventLogDateFilter\n                    value={ props.dateFilter }\n                    setValue={ props.setDateFilter }\n                    retentionDays={ props.retentionDays }\n                    setPeriod={ props.setPeriod }\n                    period={ props.period }\n                /> }\n                pagination={ topPaginationProps }\n            />\n            { props.children }\n            <PrimaryToolbar\n                pagination={ bottomPaginationProps }\n            />\n        </div>\n    );\n};\n","import { fromUtc } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { NotificationEvent } from '../Event';\nimport { IntegrationType } from '../Integration';\n\ntype ServerEvent = Schemas.EventLogEntry;\n\nexport const toNotificationEvent = (serverEvent: ServerEvent): NotificationEvent => ({\n    id: serverEvent.id,\n    bundle: serverEvent.bundle,\n    application: serverEvent.application,\n    event: serverEvent.event_type,\n    date: fromUtc(new Date(serverEvent.created)),\n    actions: serverEvent.actions.map(a => ({\n        id: a.id,\n        endpointType: toNotificationEventAction(a.endpoint_type),\n        success: a.invocation_result\n    }))\n});\n\nconst toNotificationEventAction = (serverEndpointType: ServerEvent['actions'][number]['endpoint_type']) => {\n    switch (serverEndpointType) {\n        case 'camel':\n            return IntegrationType.CAMEL;\n        case 'email_subscription':\n            return IntegrationType.EMAIL_SUBSCRIPTION;\n        case 'webhook':\n            return IntegrationType.WEBHOOK;\n        case 'default':\n        default:\n            throw new Error(`unknown endpoint type: ${serverEndpointType}`);\n    }\n};\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toNotificationEvent } from '../../types/adapters/NotificationEventAdapter';\n\nconst eventDecoder = validationResponseTransformer(\n    (payload: Operations.EventServiceGetEvents.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'Events',\n                200,\n                {\n                    ...payload.value,\n                    data: payload.value.data.map(toNotificationEvent)\n                },\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetEvents = (page?: Page) => {\n    const query = (page ?? Page.defaultPage()).toQuery();\n    return useTransformQueryResponse(\n        useQuery(Operations.EventServiceGetEvents.actionCreator({\n            limit: +query.limit,\n            offset: +query.offset,\n            bundleIds: query.filterBundleIds as [],\n            appIds: query.filterAppIds as [],\n            startDate: query.filterStart as string,\n            endDate: query.filterEnd as string,\n            eventTypeDisplayName: query.filterEvent as string,\n            sortBy: `${query.sortColumn}:${query.sortDirection}`\n        })),\n        eventDecoder\n    );\n};\n","import { useParameterizedQuery, useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const getApplicationsAction = (bundleName?: string) => Operations.NotificationServiceGetApplicationsFacets.actionCreator({\n    bundleName\n});\n\nexport const useGetApplicationsLazy = () => useParameterizedQuery(getApplicationsAction);\nexport const useGetApplications = (bundleName?: string) => useQuery(getApplicationsAction(bundleName));\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const getBundlesAction = () => Operations.NotificationServiceGetBundleFacets.actionCreator();\n\nexport const useGetBundles = () => useQuery(getBundlesAction());\n","import { Filter, Operator, toUtc } from '@redhat-cloud-services/insights-common-typescript';\nimport { format, sub, toDate } from 'date-fns';\nimport { useCallback } from 'react';\n\nimport { EventLogDateFilterValue } from '../../../components/Notifications/EventLog/EventLogDateFilter';\nimport { EventLogFilters } from '../../../components/Notifications/EventLog/EventLogFilter';\nimport { EventPeriod } from '../../../types/Event';\nimport { Facet } from '../../../types/Notification';\n\nconst DATE_FORMAT = 'yyyy-MM-dd';\n\nexport const useFilterBuilder = (\n    bundles: ReadonlyArray<Facet>,\n    applications: ReadonlyArray<Facet>,\n    dateFilter: EventLogDateFilterValue,\n    period: EventPeriod) => {\n    return useCallback((filters?: EventLogFilters) => {\n        const filter = new Filter();\n        if (filters?.bundle) {\n            const selectedBundleNames = filters?.bundle;\n            const selectedBundles = bundles.filter(b => selectedBundleNames.includes(b.name)).map(b => b.id);\n            filter.and('bundleIds', Operator.EQUAL, selectedBundles);\n        }\n\n        if (filters?.application) {\n            const selectedAppNames = filters?.application;\n            const selectedApps = applications.filter(a => selectedAppNames.includes(a.name)).map(a => a.id);\n            filter.and('appIds', Operator.EQUAL, selectedApps);\n        }\n\n        if (filters?.event) {\n            filter.and('event', Operator.EQUAL, filters.event);\n        }\n\n        let filterPeriod = [ undefined, undefined ] as [ Date | undefined, Date | undefined ];\n        const today = toUtc(new Date());\n\n        switch (dateFilter) {\n            case EventLogDateFilterValue.LAST_14:\n                filterPeriod = [ sub(toDate(today), {\n                    days: 14\n                }), today ];\n                break;\n            case EventLogDateFilterValue.LAST_7:\n                filterPeriod = [ sub(toDate(today), {\n                    days: 7\n                }), today ];\n                break;\n            case EventLogDateFilterValue.TODAY:\n                filterPeriod = [ today, today ];\n                break;\n            case EventLogDateFilterValue.YESTERDAY:\n                const yesterday = sub(toDate(today), {\n                    days: 1\n                });\n                filterPeriod = [ yesterday, yesterday ];\n                break;\n            case EventLogDateFilterValue.CUSTOM:\n                filterPeriod = period;\n                break;\n        }\n\n        if (filterPeriod[0] && filterPeriod[1]) {\n            filter.and('start', Operator.EQUAL, format(filterPeriod[0], DATE_FORMAT));\n            filter.and('end', Operator.EQUAL, format(filterPeriod[1], DATE_FORMAT));\n        }\n\n        return filter;\n    }, [ bundles, applications, dateFilter, period ]);\n};\n","import { Split, SplitItem, Text, TextContent } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Direction, Sort } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { style } from 'typestyle';\n\nimport { ButtonLink } from '../../../components/ButtonLink';\nimport { EventLogDateFilterValue } from '../../../components/Notifications/EventLog/EventLogDateFilter';\nimport { EventLogFilters } from '../../../components/Notifications/EventLog/EventLogFilter';\nimport {\n    EventLogTable,\n    EventLogTableColumns,\n    SortDirection\n} from '../../../components/Notifications/EventLog/EventLogTable';\nimport { EventLogToolbar } from '../../../components/Notifications/EventLog/EventLogToolbar';\nimport Config from '../../../config/Config';\nimport { usePage } from '../../../hooks/usePage';\nimport { Messages } from '../../../properties/Messages';\nimport { linkTo } from '../../../Routes';\nimport { useGetEvents } from '../../../services/EventLog/GetNotificationEvents';\nimport { useGetApplications } from '../../../services/Notifications/GetApplications';\nimport { useGetBundles } from '../../../services/Notifications/GetBundles';\nimport { EventPeriod } from '../../../types/Event';\nimport { useEventLogFilter } from './useEventLogFilter';\nimport { useFilterBuilder } from './useFilterBuilder';\n\nconst RETENTION_DAYS = 14;\n\nconst subtitleClassName = style({\n    paddingTop: global_spacer_sm.value\n});\n\nexport const EventLogPage: React.FunctionComponent = () => {\n\n    const getBundles = useGetBundles();\n    const bundles = React.useMemo(() => {\n        const payload = getBundles.payload;\n        if (payload?.status === 200) {\n            return payload.value;\n        }\n\n        return [];\n    }, [ getBundles.payload ]);\n\n    const getApplications = useGetApplications();\n    const applications = React.useMemo(() => {\n        const payload = getApplications.payload;\n        if (payload?.status === 200) {\n            return payload.value;\n        }\n\n        return [];\n    }, [ getApplications.payload ]);\n\n    const [ dateFilter, setDateFilter ] = React.useState<EventLogDateFilterValue>(EventLogDateFilterValue.LAST_14);\n\n    const eventLogFilters = useEventLogFilter();\n\n    const [ period, setPeriod ] = React.useState<EventPeriod>([ undefined, undefined ]);\n\n    const [ sortDirection, setSortDirection ] = React.useState<SortDirection>('desc');\n    const [ sortColumn, setSortColumn ] = React.useState<EventLogTableColumns>(EventLogTableColumns.DATE);\n\n    const onSort = React.useCallback((column: EventLogTableColumns, direction: SortDirection) => {\n        setSortDirection(direction);\n        setSortColumn(column);\n    }, [ setSortDirection, setSortColumn ]);\n\n    const filterBuilder = useFilterBuilder(bundles, applications, dateFilter, period);\n\n    const sort: Sort = React.useMemo(() => {\n        const direction = sortDirection.toUpperCase() as Direction;\n        let column: string;\n        if (sortColumn === EventLogTableColumns.DATE) {\n            column = 'created';\n        } else {\n            throw new Error(`Invalid sorting index: ${sortColumn}`);\n        }\n\n        return Sort.by(column, direction);\n    }, [ sortColumn, sortDirection ]);\n\n    const eventsPage = usePage<EventLogFilters>(Config.paging.defaultPerPage, filterBuilder, eventLogFilters.filters, sort);\n\n    const eventsQuery = useGetEvents(eventsPage.page);\n\n    const events = React.useMemo(() => {\n        if (eventsQuery.payload?.status === 200) {\n            return {\n                data: eventsQuery.payload.value.data,\n                count: eventsQuery.payload.value.meta.count\n            };\n        }\n\n        return {\n            data: [],\n            count: 0\n        };\n    }, [ eventsQuery ]);\n\n    const eventNotificationPageUrl = React.useMemo(() => {\n        const bundles = eventLogFilters.filters.bundle as Array<string> | undefined;\n        if (bundles && bundles.length > 0) {\n            return linkTo.notifications(bundles[0]);\n        }\n\n        return linkTo.notifications('');\n    }, [ eventLogFilters.filters ]);\n\n    return (\n        <>\n            <PageHeader>\n                <Split>\n                    <SplitItem isFilled>\n                        <PageHeaderTitle title={ Messages.pages.notifications.eventLog.title } />\n                        <TextContent className={ subtitleClassName }>\n                            <Text>{ Messages.pages.notifications.eventLog.subtitle }</Text>\n                        </TextContent>\n                    </SplitItem>\n                    <SplitItem>\n                        <Link component={ ButtonLink } to={ eventNotificationPageUrl } >\n                            { Messages.pages.notifications.eventLog.viewNotifications }\n                        </Link>\n                    </SplitItem>\n                </Split>\n            </PageHeader>\n            <Main>\n                <EventLogToolbar\n                    { ...eventLogFilters }\n                    bundleOptions={ bundles }\n                    applicationOptions={ applications }\n                    dateFilter={ dateFilter }\n                    setDateFilter={ setDateFilter }\n                    count={ events.count }\n                    perPageChanged={ eventsPage.changeItemsPerPage }\n                    pageChanged={ eventsPage.changePage }\n                    perPage={ eventsPage.page.size }\n                    page={ eventsPage.page.index }\n                    pageCount={ events.data.length }\n                    retentionDays={ RETENTION_DAYS }\n                    period={ period }\n                    setPeriod={ setPeriod }\n                >\n                    <EventLogTable\n                        events={ events.data }\n                        loading={ eventsQuery.loading }\n                        onSort={ onSort }\n                        sortColumn={ sortColumn }\n                        sortDirection={ sortDirection }\n                    />\n                </EventLogToolbar>\n            </Main>\n        </>\n    );\n};\n","export const emptyImmutableArray = Object.freeze([]);\nexport const emptyImmutableObject = Object.freeze({});\n","interface HasId<ID> {\n    id: ID\n}\n\nexport const findByKey = <T, KEY extends keyof T>(val: T[KEY], key: KEY) => (value: T) => value[key] === val;\nexport const findById = <T extends HasId<T['id']>>(id: T['id']) => findByKey<T, 'id'>(id, 'id');\n","import {\n    Chip, ChipGroup,\n    OptionsMenu,\n    OptionsMenuItem,\n    OptionsMenuToggle,\n    Split,\n    SplitItem\n} from '@patternfly/react-core';\nimport { BellSlashIcon } from '@patternfly/react-icons';\nimport { TableText } from '@patternfly/react-table';\nimport { global_palette_black_400, global_palette_black_700, global_spacer_sm } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroupContent } from '../../../pages/Notifications/List/useBehaviorGroupContent';\nimport { BehaviorGroup, NotificationBehaviorGroup } from '../../../types/Notification';\nimport { findById } from '../../../utils/Find';\nimport { emptyImmutableObject } from '../../../utils/Immutable';\n\nconst grayFontClassName = style({\n    color: global_palette_black_700.value\n});\n\nconst noBehaviorGroupsClassName = style({\n    textAlign: 'left'\n});\n\nconst bellClassName = style({\n    marginRight: global_spacer_sm.value\n});\n\ninterface BehaviorGroupCellProps {\n    id: string;\n    notification: NotificationBehaviorGroup;\n    behaviorGroupContent: BehaviorGroupContent;\n    selected: ReadonlyArray<BehaviorGroup>;\n    onSelect?: (notification: NotificationBehaviorGroup, behaviorGroup: BehaviorGroup, linkBehavior: boolean) => void;\n    isEditMode: boolean;\n}\n\ninterface BehaviorGroupChip {\n    behaviorGroup: BehaviorGroup;\n    notification: BehaviorGroupCellProps['notification'];\n    onSelect?: BehaviorGroupCellProps['onSelect'];\n}\n\nconst BehaviorGroupChip: React.FunctionComponent<BehaviorGroupChip> = props => {\n    const unlink = React.useCallback(() => {\n        const onSelect = props.onSelect;\n        if (onSelect) {\n            onSelect(props.notification, props.behaviorGroup, false);\n        }\n    }, [ props.onSelect, props.behaviorGroup, props.notification ]);\n\n    return <Chip onClick={ unlink }>\n        { props.behaviorGroup.displayName }\n    </Chip>;\n};\n\nexport const BehaviorGroupCell: React.FunctionComponent<BehaviorGroupCellProps> = props => {\n\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const onSelected = React.useCallback((event?: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent) => {\n        const dataset = (event?.currentTarget?.firstChild as HTMLElement)?.dataset ?? emptyImmutableObject;\n        const onSelect = props.onSelect;\n        if (!props.behaviorGroupContent.isLoading && !props.behaviorGroupContent.hasError && onSelect) {\n            if (dataset.behaviorGroupId) {\n                const found = props.behaviorGroupContent.content.find(findById(dataset.behaviorGroupId));\n                if (found) {\n                    const isSelected = !!props.selected.find(findById(found.id));\n                    onSelect(props.notification, found, !isSelected);\n                }\n            }\n        }\n    }, [ props.onSelect, props.behaviorGroupContent, props.notification, props.selected ]);\n\n    const items = React.useMemo(() => {\n        if (props.behaviorGroupContent.isLoading || props.behaviorGroupContent.hasError) {\n            return [\n                <OptionsMenuItem key=\"is-loading\" isDisabled>Loading</OptionsMenuItem>\n            ];\n        }\n\n        if (props.behaviorGroupContent.content.length === 0) {\n            return [\n                <OptionsMenuItem key=\"empty\" isDisabled>\n                    <span className={ noBehaviorGroupsClassName }>\n                        You have no behavior groups. <br />\n                        Create a new group by clicking on the <br />\n                        &apos;Create new group&apos; button above.\n                    </span>\n                </OptionsMenuItem>\n            ];\n        }\n\n        return props.behaviorGroupContent.content.map(bg => {\n            const selected = !!props.selected.find(findById(bg.id));\n\n            return (\n                <OptionsMenuItem\n                    key={ bg.id }\n                    onSelect={ onSelected }\n                    data-behavior-group-id={ bg.id }\n                    isSelected={ selected }\n                >\n                    { bg.displayName }\n                </OptionsMenuItem>\n            );\n        });\n    }, [ props.behaviorGroupContent, props.selected, onSelected ]);\n\n    const toggle = React.useMemo(() => {\n        return (\n            <OptionsMenuToggle onToggle={ setOpen } toggleTemplate={ (\n                props.selected.length === 0 ? (\n                    <span className={ grayFontClassName }>Select behavior group</span>\n                ) : (\n                    <ChipGroup>\n                        { props.selected.map(value => (\n                            <BehaviorGroupChip\n                                key={ value.id }\n                                behaviorGroup={ value }\n                                notification={ props.notification }\n                                onSelect={ props.onSelect }\n                            />\n                        )) }\n                    </ChipGroup>\n                )\n            ) } />\n        );\n    }, [ props.selected, props.notification, props.onSelect ]);\n\n    const readonlyText = React.useMemo(() => {\n        if (props.selected.length === 0) {\n            return <Split>\n                <SplitItem className={ bellClassName }><BellSlashIcon color={ global_palette_black_400.value } /></SplitItem>\n                <SplitItem>Mute</SplitItem>\n            </Split>;\n        }\n\n        return props.selected.map(v => v.displayName).join(', ');\n    }, [ props.selected ]);\n\n    if (!props.isEditMode) {\n        return <TableText wrapModifier=\"truncate\"> { readonlyText } </TableText>;\n    }\n\n    return <OptionsMenu id={ props.id } direction=\"down\" menuItems={ items } toggle={ toggle } isOpen={ isOpen } menuAppendTo={ document.body } />;\n};\n","import { Button, ButtonVariant, Skeleton } from '@patternfly/react-core';\nimport { CheckIcon, CloseIcon, PencilAltIcon } from '@patternfly/react-icons';\nimport { cellWidth, IActions, ICell, IRowData, Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { global_active_color_100, global_disabled_color_100, global_palette_black_600 } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroupContent } from '../../pages/Notifications/List/useBehaviorGroupContent';\nimport { BehaviorGroupNotificationRow } from '../../pages/Notifications/List/useBehaviorGroupNotificationRows';\nimport { BehaviorGroup, NotificationBehaviorGroup, UUID } from '../../types/Notification';\nimport { emptyImmutableArray } from '../../utils/Immutable';\nimport { ouia } from '../Ouia';\nimport { BehaviorGroupCell } from './Table/BehaviorGroupCell';\n\ntype OnNotificationIdHandler = (notificationId: UUID) => void;\nexport type OnBehaviorGroupLinkUpdated = (notification: NotificationBehaviorGroup, behaviorGroup: BehaviorGroup, isLinked: boolean) => void;\n\nexport interface NotificationsBehaviorGroupTableProps {\n    behaviorGroupContent: BehaviorGroupContent;\n    notifications: Array<BehaviorGroupNotificationRow>;\n    onBehaviorGroupLinkUpdated: OnBehaviorGroupLinkUpdated;\n    onStartEditing?: OnNotificationIdHandler;\n    onFinishEditing?: OnNotificationIdHandler;\n    onCancelEditing?: OnNotificationIdHandler;\n}\n\nconst actionButtonClassName = style({\n    float: 'right'\n});\n\ntype Callbacks = {\n    onStartEditing: OnNotificationIdHandler;\n    onFinishEditing:  OnNotificationIdHandler;\n    onCancelEditing: OnNotificationIdHandler;\n    onBehaviorGroupLinkUpdated: OnBehaviorGroupLinkUpdated;\n};\n\nconst toTableRows = (\n    notifications: Array<BehaviorGroupNotificationRow>,\n    behaviorGroupContent: BehaviorGroupContent,\n    callbacks?: Callbacks) => {\n    return notifications.map((notification => ({\n        id: notification.id,\n        key: notification.id,\n        notification,\n        cells: [\n            {\n                title: <span>{ notification.eventTypeDisplayName }</span>\n            },\n            {\n                title: <span>{ notification.applicationDisplayName }</span>\n            },\n            {\n                title: notification.loadingActionStatus === 'loading' ?\n                    <Skeleton width=\"90%\" /> :\n                    <span>\n                        <BehaviorGroupCell\n                            id={ `behavior-group-cell-${notification.id}` }\n                            notification={ notification }\n                            behaviorGroupContent={ behaviorGroupContent }\n                            selected={ notification.behaviors ?? emptyImmutableArray }\n                            onSelect={ callbacks?.onBehaviorGroupLinkUpdated }\n                            isEditMode={ notification.isEditMode }\n                        />\n                    </span>\n            }\n        ]\n    })));\n};\n\nconst cells: Array<ICell> = [\n    {\n        title: 'Event',\n        transforms: [],\n        cellFormatters: []\n    },\n    {\n        title: 'Application',\n        transforms: []\n    },\n    {\n        title: 'Behavior',\n        transforms: [ cellWidth(35) ]\n    }\n];\n\n// This will actually silence lots of warning we are having in the console about unwanted elements.\nconst EmptySpan: React.FunctionComponent<any> = _props => <span />;\nconst emptySpanProducer = () => <EmptySpan />;\n\nexport const NotificationsBehaviorGroupTable = ouia<NotificationsBehaviorGroupTableProps>(props => {\n\n    const callbacks: Callbacks | undefined = React.useMemo(() => {\n\n        if (props.onStartEditing && props.onFinishEditing && props.onCancelEditing) {\n            return {\n                onStartEditing: props.onStartEditing,\n                onFinishEditing: props.onFinishEditing,\n                onCancelEditing: props.onCancelEditing,\n                onBehaviorGroupLinkUpdated: props.onBehaviorGroupLinkUpdated\n            };\n        }\n\n        return undefined;\n    }, [ props.onStartEditing, props.onFinishEditing, props.onCancelEditing, props.onBehaviorGroupLinkUpdated ]);\n\n    const rows = React.useMemo(() => {\n        return toTableRows(props.notifications, props.behaviorGroupContent, callbacks);\n    }, [ props.notifications, props.behaviorGroupContent, callbacks ]);\n\n    const actionResolver = React.useCallback((rowData: IRowData): IActions => {\n        const notification: BehaviorGroupNotificationRow = rowData.notification;\n\n        const isDisabled = notification.loadingActionStatus !== 'done';\n\n        if (!notification.isEditMode) {\n            return [\n                {\n                    key: 'edit',\n                    className: actionButtonClassName,\n                    title: <Button aria-label=\"edit\" variant={ ButtonVariant.plain } isDisabled={ isDisabled }>\n                        <PencilAltIcon />\n                    </Button>,\n                    isOutsideDropdown: true,\n                    onClick: () => callbacks?.onStartEditing(notification.id),\n                    isDisabled: isDisabled || !callbacks\n                }\n            ];\n        }\n\n        return [\n            {\n                key: 'done',\n                className: actionButtonClassName,\n                title: <Button aria-label=\"done\" variant={ ButtonVariant.plain } isDisabled={ isDisabled }>\n                    <CheckIcon color={ isDisabled ? global_disabled_color_100.value : global_active_color_100.value } />\n                </Button>,\n                isOutsideDropdown: true,\n                onClick: () => callbacks?.onFinishEditing(notification.id),\n                isDisabled: isDisabled || !callbacks\n            },\n            {\n                key: 'cancel',\n                className: actionButtonClassName,\n                title: <Button aria-label=\"cancel\" variant={ ButtonVariant.plain } isDisabled={ isDisabled }>\n                    <CloseIcon color={ isDisabled ? global_disabled_color_100.value : global_palette_black_600.value } />\n                </Button>,\n                isOutsideDropdown: true,\n                onClick: () => callbacks?.onCancelEditing(notification.id),\n                isDisabled: isDisabled || !callbacks\n            }\n        ];\n    }, [ callbacks ]);\n\n    return (\n        <Table\n            aria-label=\"Notifications\"\n            rows={ rows }\n            cells={ cells }\n            variant={ TableVariant.compact }\n            actionResolver={ actionResolver }\n            actionsToggle={ emptySpanProducer as any }\n        >\n            <TableHeader />\n            <TableBody />\n        </Table>\n    );\n}, 'Notifications/Table');\n","import { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../utils/getOuiaProps';\n\nexport const ouia = <P extends any>(Component: React.FunctionComponent<P>, type: string): React.FunctionComponent<OuiaComponentProps & P> => {\n\n    const Wrapped: React.FunctionComponent<OuiaComponentProps & P> = props => {\n        return (\n            <div { ...getOuiaProps(type, props) }>\n                <Component { ...props } />\n            </div>\n        );\n    };\n\n    Wrapped.displayName = `Ouia(${Component.displayName ?? Component.name})`;\n\n    return Wrapped;\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum NotificationFilterColumn {\n    NAME = 'name',\n    APPLICATION = 'application',\n    ACTION = 'action'\n}\n\nexport type NotificationFilters = Filters<typeof NotificationFilterColumn>;\nexport type SetNotificationFilters = SetFilters<typeof NotificationFilterColumn>;\nexport type ClearNotificationFilters = ClearFilters<typeof NotificationFilterColumn>;\n","export enum GroupByEnum {\n    Application = 'application',\n    None = 'none'\n}\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport camelcase from 'camelcase';\nimport * as React from 'react';\n\nimport { GroupByEnum } from '../Types';\n\nexport interface GroupByProps {\n    groupBy: (selected: GroupByEnum) => void;\n    selected: GroupByEnum;\n}\n\nexport const GroupBy: React.FunctionComponent<GroupByProps> = (props) => {\n    const items = [\n        <DropdownItem data-group-by={ GroupByEnum.Application } key=\"application\">Application</DropdownItem>,\n        <DropdownItem data-group-by={ GroupByEnum.None } key=\"none\">None</DropdownItem>\n    ];\n\n    const [ isOpen, setOpen ] = React.useState<boolean>(false);\n\n    const onSelect = React.useCallback((event) => {\n        const groupBy = props.groupBy;\n        const selected = props.selected;\n\n        if (event.target.dataset.groupBy !== selected) {\n            switch (event.target.dataset.groupBy) {\n                case GroupByEnum.Application:\n                    groupBy(GroupByEnum.Application);\n                    break;\n                case GroupByEnum.None:\n                    groupBy(GroupByEnum.None);\n                    break;\n            }\n        }\n\n        setOpen(false);\n    }, [ props.groupBy, props.selected ]);\n\n    const onToggle = React.useCallback((shouldBeOpen) => {\n        setOpen(shouldBeOpen);\n    }, [ setOpen ]);\n\n    const content = React.useMemo(() => {\n        return `Group by: ${camelcase(props.selected, {\n            pascalCase: true\n        })}`;\n    }, [ props.selected ]);\n\n    return (\n        <Dropdown\n            onSelect={ onSelect }\n            isOpen={ isOpen }\n            toggle={ <DropdownToggle\n                id=\"group-by-dropdown-toggle\"\n                toggleIndicator={ CaretDownIcon }\n                onToggle={ onToggle }\n            >\n                { content }\n            </DropdownToggle> }\n            dropdownItems={ items }\n        />\n    );\n};\n","import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ExporterType,\n    getInsights,\n    OptionalColumnsMetada,\n    OuiaComponentProps,\n    useInsightsEnvironmentFlag,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\n\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { isStagingOrProd, stagingAndProd } from '../../types/Environments';\nimport { Facet } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport {\n    ClearNotificationFilters,\n    NotificationFilterColumn,\n    NotificationFilters,\n    SetNotificationFilters\n} from './Filter';\nimport { GroupBy } from './Table/GroupBy';\nimport { GroupByEnum } from './Types';\n\ninterface NotificationsToolbarProps extends OuiaComponentProps {\n    filters: NotificationFilters;\n    setFilters: SetNotificationFilters;\n    clearFilter: ClearNotificationFilters;\n\n    appFilterOptions: Array<Facet>;\n\n    groupBy?: GroupByEnum;\n    onGroupBySelected?: (selected: GroupByEnum) => void;\n\n    onExport: (type: ExporterType) => void;\n}\n\nexport const NotificationsToolbar: React.FunctionComponent<NotificationsToolbarProps> = (props) => {\n\n    const insights = getInsights();\n    const filterMetadata = useMemo<OptionalColumnsMetada<typeof NotificationFilterColumn>>(() => {\n\n        const appFilterItems = props.appFilterOptions.map(a => ({\n            value: a.displayName,\n            label: <> {a.displayName}</>\n        }));\n\n        return {\n            [NotificationFilterColumn.NAME]: isStagingOrProd(insights) ? undefined : {\n                label: 'Event type',\n                placeholder: 'Filter by event type'\n            },\n            [NotificationFilterColumn.APPLICATION]: {\n                label: 'Application',\n                placeholder: 'Filter by application',\n                options: {\n                    exclusive: false,\n                    default: [] as any,\n                    items: appFilterItems\n                }\n            },\n            [NotificationFilterColumn.ACTION]: isStagingOrProd(insights) ? undefined : {\n                label: 'Action',\n                placeholder: 'Filter by action'\n            }\n        };\n    }, [ props.appFilterOptions, insights ]);\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        NotificationFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilter,\n        filterMetadata\n    );\n\n    const exportConfigInternal = useTableExportConfig(props.onExport);\n\n    const filterConfig = primaryToolbarFilterConfig.filterConfig;\n    const activeFiltersConfig = primaryToolbarFilterConfig.activeFiltersConfig;\n\n    const exportConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingAndProd,\n        undefined,\n        useCallback(() => exportConfigInternal, [ exportConfigInternal ])\n    );\n\n    return (\n        <div { ...getOuiaProps('Notifications/DualToolbar', props) }>\n            <PrimaryToolbar\n                filterConfig={ filterConfig }\n                activeFiltersConfig={ activeFiltersConfig }\n                dedicatedAction={ (props.groupBy && props.onGroupBySelected) ?\n                    <GroupBy selected={ props.groupBy } groupBy={ props.onGroupBySelected } /> :\n                    undefined }\n                exportConfig={ exportConfig }\n            />\n            { props.children }\n            <PrimaryToolbar />\n        </div>\n    );\n};\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Schemas } from '../generated/OpenapiIntegrations';\nimport { Operations } from '../generated/OpenapiNotifications';\nimport { toNotifications } from '../types/adapters/NotificationAdapter';\n\nexport const listNotificationsActionCreator = (pager?: Page) => {\n    const query = (pager ?? Page.defaultPage()).toQuery();\n    return Operations.NotificationServiceGetEventTypes.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        applicationIds: query.filterApplicationId as unknown as Array<Schemas.UUID>,\n        bundleId: query.filterBundleId as unknown as string\n    });\n};\n\nconst decoder = validationResponseTransformer((payload: Operations.NotificationServiceGetEventTypes.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'eventTypesArray',\n            200,\n            toNotifications(payload.value),\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useListNotifications = (pager?: Page) => useTransformQueryResponse(\n    useQuery(listNotificationsActionCreator(pager)),\n    decoder\n);\n","export default __webpack_public_path__ + \"fonts/WebhookIcon.svg\";","import { SVGIconProps } from '@patternfly/react-icons/dist/js/createIcon';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport icon from './WebhookIcon.svg';\nconst className = style({\n    verticalAlign: '-0.125em',\n    width: '1em',\n    height: '1em'\n});\n\nexport const WebhookIcon: React.FunctionComponent<SVGIconProps> = () => {\n    return (\n        <img alt=\"Webhook\" className={ className } src={ icon } />\n    );\n};\n","import { Spinner } from '@patternfly/react-core';\nimport { EnvelopeIcon } from '@patternfly/react-icons';\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { Messages } from '../../properties/Messages';\nimport { Action, NotificationType } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { WebhookIcon } from '../Icons/WebhookIcon';\n\nexport interface ActionComponentText extends OuiaComponentProps{\n    isDefault: boolean;\n    action: Action | undefined;\n    loading?: boolean;\n    hasError?: boolean;\n}\n\ninterface ActionTypeToIconProps {\n    actionType: NotificationType;\n}\n\nconst marginLeftClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst grayFontClassName = style({\n    color: '#888'\n});\n\nconst ActionTypeToIcon: React.FunctionComponent<ActionTypeToIconProps> = (props) => {\n    switch (props.actionType) {\n        case NotificationType.DRAWER:\n            return <BellIcon />;\n        case NotificationType.EMAIL_SUBSCRIPTION:\n            return <EnvelopeIcon />;\n        case NotificationType.INTEGRATION:\n            return <WebhookIcon />;\n        default:\n            assertNever(props.actionType);\n    }\n};\n\nconst ActionComponentWrapper: React.FunctionComponent<ActionComponentText> = (props) => (\n    <div { ...getOuiaProps('Notifications/ActionComponent', props) }>\n        { props.children }\n    </div>\n);\n\nexport const ActionComponent: React.FunctionComponent<ActionComponentText> = (props) => {\n\n    if (props.loading) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <Spinner size=\"md\" />\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (props.hasError) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span>Error loading actions</span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (props.isDefault) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span>Default behavior</span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (!props.action) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span className={ grayFontClassName }>\n                    <div>No actions.</div>\n                    <div>Users will not be notified.</div>\n                </span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    return (\n        <ActionComponentWrapper { ...props }>\n            <ActionTypeToIcon actionType={ props.action.type } />\n            <span className={ marginLeftClassName }>{ Messages.components.notifications.types[props.action.type] }</span>\n            { props.action.type === NotificationType.INTEGRATION && (\n                <span>: { Messages.components.integrations.integrationType[props.action.integration.type] }</span>\n            ) }\n        </ActionComponentWrapper>\n    );\n};\n","import { Label, Tooltip } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { Action, NotificationType } from '../../types/Notification';\n\ninterface RecipientProps {\n    action: Action;\n    hasOutline?: boolean;\n}\n\nconst disabledLabelClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nexport const Recipient: React.FunctionComponent<RecipientProps> = (props) => {\n    if (props.action.type === NotificationType.INTEGRATION) {\n        return (\n            <>\n                <span>{ props.action.integration.name }</span>\n                { !props.action.integration.isEnabled && (\n                    <>\n                        <Tooltip content=\"This integration has been disabled. This action wil not fire until it is enabled.\" position=\"bottom\">\n                            <Label variant={ props.hasOutline ? 'outline' : 'filled' } className={ disabledLabelClassName }>Disabled</Label>\n                        </Tooltip>\n                    </>\n                )}\n            </>\n        );\n    }\n\n    return <span>{ props.action.recipient.map(r => r.displayName).join(', ') }</span>;\n};\n","import {\n    Card,\n    CardActions,\n    CardBody,\n    CardHeader,\n    CardHeaderMain,\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    Grid,\n    GridItem,\n    KebabToggle,\n    Skeleton,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { c_form__label_FontSize } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { ActionComponent } from '../ActionComponent';\nimport { Recipient } from '../Recipient';\n\nconst cardClassName = style({\n    width: 450,\n    height: '100%'\n});\n\nconst contentTitleStyle = {\n    fontSize: c_form__label_FontSize.value\n};\n\nexport interface BehaviorGroupProps extends OuiaComponentProps {\n    behaviorGroup: BehaviorGroup;\n    onEdit?: (behaviorGroup: BehaviorGroup) => void;\n    onDelete?: (behaviorGroup: BehaviorGroup) => void;\n}\n\nexport interface BehaviorGroupCardLayout {\n    title: React.ReactNode;\n    dropdownItems?: Array<React.ReactNode>;\n    contents: Array<{\n        key: string;\n        action: React.ReactNode;\n        recipient: React.ReactNode;\n    }>;\n}\n\nconst BehaviorGroupCardLayout: React.FunctionComponent<BehaviorGroupCardLayout> = props => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const switchOpen = React.useCallback(() => setOpen(prev => !prev), [ setOpen ]);\n\n    return (\n        <Card isFlat className={ cardClassName }>\n            <CardHeader>\n                <CardHeaderMain><TextContent><Text component={ TextVariants.h4 }> { props.title } </Text></TextContent></CardHeaderMain>\n                <CardActions>\n                    <Dropdown\n                        onSelect={ switchOpen }\n                        toggle={ <KebabToggle onToggle={ setOpen } isDisabled={ !props.dropdownItems } /> }\n                        isOpen={ isOpen }\n                        isPlain\n                        dropdownItems={ props.dropdownItems }\n                        position={ DropdownPosition.right }\n                    />\n                </CardActions>\n            </CardHeader>\n            <CardBody>\n                <Grid hasGutter>\n                    <GridItem span={ 6 }>\n                        <TextContent>\n                            <Text component={ TextVariants.h5 } style={ contentTitleStyle }>Action</Text>\n                        </TextContent>\n                    </GridItem>\n                    <GridItem span={ 6 }>\n                        <TextContent>\n                            <Text component={ TextVariants.h5 } style={ contentTitleStyle }>Recipient</Text>\n                        </TextContent>\n                    </GridItem>\n                    { props.contents.map(content => (\n                        <React.Fragment key={ content.key }>\n                            <GridItem span={ 6 }>\n                                { content.action }\n                            </GridItem>\n                            <GridItem span={ 6 }>\n                                { content.recipient }\n                            </GridItem>\n                        </React.Fragment>\n                    )) }\n                </Grid>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport const BehaviorGroupCard: React.FunctionComponent<BehaviorGroupProps> = props => {\n    const onClickEdit = React.useCallback(() => {\n        const onEdit = props.onEdit;\n        if (onEdit) {\n            onEdit(props.behaviorGroup);\n        }\n    }, [ props.behaviorGroup, props.onEdit ]);\n\n    const onClickDelete = React.useCallback(() => {\n        const onDelete = props.onDelete;\n        if (onDelete) {\n            onDelete(props.behaviorGroup);\n        }\n    }, [ props.behaviorGroup, props.onDelete ]);\n\n    const dropdownItems = React.useMemo(() => [\n        <DropdownItem key=\"on-edit\" onClick={ onClickEdit } isDisabled={ !onClickEdit } > Edit </DropdownItem>,\n        <DropdownItem key=\"on-delete\" onClick={ onClickDelete } isDisabled={ !onClickDelete }> Delete </DropdownItem>\n    ], [ onClickEdit, onClickDelete ]);\n\n    return (\n        <BehaviorGroupCardLayout\n            title={ props.behaviorGroup.displayName }\n            dropdownItems={ dropdownItems }\n            contents={ props.behaviorGroup.actions.map((action, index) => ({\n                key: `${index}-${action.type}`,\n                recipient: <Recipient action={ action } />,\n                action: <ActionComponent isDefault={ false } action={ action } />\n            })) }\n        />\n    );\n};\n\nexport const BehaviorGroupCardSkeleton: React.FunctionComponent = () => {\n    const contentWidth = '150px';\n\n    return (\n        <BehaviorGroupCardLayout\n            title={ <Skeleton width=\"300px\" /> }\n            contents={ [\n                {\n                    key: 'skeleton-1',\n                    action: <Skeleton width={ contentWidth } />,\n                    recipient: <Skeleton width={ contentWidth } />\n                },\n                {\n                    key: 'skeleton-2',\n                    action: <Skeleton width={ contentWidth } />,\n                    recipient: <Skeleton width={ contentWidth } />\n                },\n                {\n                    key: 'skeleton-3',\n                    action: <Skeleton width={ contentWidth } />,\n                    recipient: <Skeleton width={ contentWidth } />\n                }\n            ] }\n        />\n    );\n};\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { useMeasure } from 'react-use';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { BehaviorGroupCard, BehaviorGroupCardSkeleton } from './BehaviorGroupCard';\n\nconst cardsWrapperClassName = style({\n    overflow: 'auto'\n});\n\nconst cardWrapperClassName = style({\n    paddingBottom: global_spacer_md.var\n});\n\ninterface BehaviorGroupCardListProps {\n    onEdit?: (behaviorGroup: BehaviorGroup) => void;\n    onDelete?: (behaviorGroup: BehaviorGroup) => void;\n    behaviorGroups: ReadonlyArray<BehaviorGroup>;\n}\n\ninterface BehaviorGroupCardListLayoutProps {\n    contents: Array<{\n        key: string;\n        element: React.ReactNode;\n    }>;\n}\n\nconst BehaviorGroupCardListLayout: React.FunctionComponent<BehaviorGroupCardListLayoutProps> = props => {\n\n    const [ measureRef, measuredSizing ] = useMeasure<HTMLDivElement>();\n    const container = React.useRef<HTMLDivElement>();\n    const ref = React.useCallback(refContainer => {\n        container.current = refContainer;\n        measureRef(refContainer);\n    }, [ container, measureRef ]);\n\n    React.useEffect(() => {\n        if (container.current?.firstChild?.firstChild) {\n            const element = container.current.firstChild as HTMLElement;\n            const height = (element.firstChild as HTMLElement).getBoundingClientRect().height;\n            element.style['max-height'] = `${height}px`;\n        }\n    }, [ measuredSizing ]);\n\n    return (\n        <div ref={ ref } data-testid=\"ref-card-list-container\">\n            <Flex\n                alignItems={ { default: 'alignItemsStretch' } }\n                alignContent={ { default: 'alignContentSpaceBetween' } }\n                className={ cardsWrapperClassName }\n                data-testid=\"card-list-container\"\n            >\n                { props.contents.map(content => (\n                    <FlexItem key={ content.key } className={ cardWrapperClassName }>\n                        { content.element }\n                    </FlexItem>\n                ))}\n            </Flex>\n        </div>\n    );\n};\n\nexport const BehaviorGroupCardList: React.FunctionComponent<BehaviorGroupCardListProps> = props => {\n\n    return (\n        <BehaviorGroupCardListLayout\n            contents={ props.behaviorGroups.map(behaviorGroup => ({\n                key: behaviorGroup.id,\n                element: <BehaviorGroupCard\n                    behaviorGroup={ behaviorGroup }\n                    onEdit={ props.onEdit }\n                    onDelete={ props.onDelete }\n                />\n            })) }\n        />\n    );\n};\n\nexport const BehaviorGroupCardListSkeleton: React.FunctionComponent = () => {\n    return (\n        <BehaviorGroupCardListLayout\n            contents={ [\n                {\n                    key: 'skeleton-1',\n                    element: <BehaviorGroupCardSkeleton />\n                },\n                {\n                    key: 'skeleton-2',\n                    element: <BehaviorGroupCardSkeleton />\n                },\n                {\n                    key: 'skeleton-3',\n                    element: <BehaviorGroupCardSkeleton />\n                }\n            ] }\n        />\n    );\n};\n","import {\n    ButtonVariant,\n    Checkbox,\n    ExpandableSection,\n    List,\n    ListItem,\n    Skeleton,\n    Stack,\n    StackItem\n} from '@patternfly/react-core';\nimport { ActionModalProps, DeleteModal, DeleteModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { useOnDeleteWrapper } from '../../../hooks/useOnDeleteWrapper';\nimport { OnDelete } from '../../../types/Callbacks';\nimport { BehaviorGroup, Notification } from '../../../types/Notification';\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onDelete';\n\ninterface BehaviorGroupDeleteModalProps extends Omit<DeleteModalProps, UsedProps> {\n    behaviorGroup: BehaviorGroup;\n    onDelete: OnDelete<BehaviorGroup>;\n    conflictingNotifications: Array<Notification>;\n}\n\ntype BehaviorGroupDeleteModalSkeletonProps = Pick<ActionModalProps, 'onClose'>;\n\nexport const BehaviorGroupDeleteModal: React.FunctionComponent<BehaviorGroupDeleteModalProps> = props => {\n    const onDelete = useOnDeleteWrapper(props.onDelete, props.behaviorGroup);\n\n    const cancelButtonTitle = React.useMemo(\n        () => props.conflictingNotifications.length === 0 ? 'Cancel' : 'Close',\n        [ props.conflictingNotifications ]\n    );\n\n    const cancelButtonVariant = React.useMemo(\n        () => props.conflictingNotifications.length === 0 ? ButtonVariant.link : ButtonVariant.secondary,\n        [ props.conflictingNotifications ]\n    );\n\n    const [ ackDelete, setAckDelete ] = React.useState(false);\n\n    const content = React.useMemo(() => {\n        if (props.conflictingNotifications.length === 0) {\n            return (\n                <Stack hasGutter>\n                    <StackItem>\n                        Action and recipient pairings assigned in <b>{ props.behaviorGroup.displayName }</b> will lost. You\n                        will no longer be able to assign this behavior group to events.\n                    </StackItem>\n                    <StackItem>\n                        <Checkbox\n                            id=\"checkbox-delete-i-acknowledge\"\n                            label=\"I acknowledge that this action cannot be undone\"\n                            onChange={ setAckDelete }\n                            isChecked={ ackDelete }\n                        />\n                    </StackItem>\n                </Stack>\n            );\n        } else {\n            const events = props.conflictingNotifications;\n\n            return (\n                <Stack hasGutter>\n                    <StackItem>\n                        <b>{ props.behaviorGroup.displayName }</b> is associated to { events.length } events.\n                        Please remove the behavior group from these events in order  to continue.\n                    </StackItem>\n                    <StackItem>\n                        <ExpandableSection\n                            toggleText={ `View ${ events.length } event${ events.length === 0 ? '' : 's' }` }\n                        >\n                            <List>\n                                { events.map(event =>\n                                    (<ListItem key={ event.id }>{ `${event.applicationDisplayName} - ${event.eventTypeDisplayName}` }</ListItem>)\n                                ) }\n                            </List>\n                        </ExpandableSection>\n                    </StackItem>\n                </Stack>\n            );\n        }\n    }, [ props.conflictingNotifications, props.behaviorGroup, ackDelete, setAckDelete ]);\n\n    return (\n        <DeleteModal\n            isOpen={ true }\n            isDeleting={ props.isDeleting }\n            title=\"Delete behavior group\"\n            content={ content }\n            onClose={ props.onClose }\n            onDelete={ onDelete }\n            error={ props.error }\n            titleIconVariant=\"warning\"\n            actionButtonDisabled={ !ackDelete }\n            actionButtonHidden={ props.conflictingNotifications.length > 0 }\n            cancelButtonTitle={ cancelButtonTitle }\n            cancelButtonVariant={ cancelButtonVariant }\n        />\n    );\n};\n\nconst onDelete = () => false;\n\nexport const BehaviorGroupDeleteModalSkeleton: React.FunctionComponent<BehaviorGroupDeleteModalSkeletonProps> = props => {\n    return (\n        <DeleteModal\n            isOpen={ true }\n            title=\"Delete behavior group\"\n            actionButtonDisabled={ true }\n            titleIconVariant=\"warning\"\n            content={ <Stack hasGutter>\n                <StackItem><Skeleton width=\"500px\" /></StackItem>\n                <StackItem><Skeleton width=\"500px\" /></StackItem>\n            </Stack> }\n            onClose={ props.onClose }\n            isDeleting={ false }\n            onDelete={ onDelete }\n        />\n    );\n};\n","import { useCallback } from 'react';\n\nimport { OnDelete } from '../types/Callbacks';\n\nexport const useOnDeleteWrapper = <T>(onDelete: OnDelete<T>, toDelete: T) => {\n    return useCallback(() => {\n        return  onDelete(toDelete);\n    }, [ onDelete, toDelete ]);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { UUID } from '../../types/Notification';\n\nconst deleteBehaviorGroupAction = (id: UUID) => {\n    return Operations.NotificationServiceDeleteBehaviorGroup.actionCreator({\n        id\n    });\n};\n\nexport const useDeleteBehaviorGroupMutation = () => useMutation(deleteBehaviorGroupAction);\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toNotifications } from '../../types/adapters/NotificationAdapter';\nimport { UUID } from '../../types/Notification';\n\nconst getAffectedNotificationsByBehaviorGroupAction = (id: UUID) => {\n    return Operations.NotificationServiceGetEventTypesAffectedByRemovalOfBehaviorGroup.actionCreator({\n        behaviorGroupId: id\n    });\n};\n\nconst defaultNotificationsDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceGetEventTypesAffectedByRemovalOfBehaviorGroup.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'Notifications',\n                200,\n                toNotifications(payload.value),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetAffectedNotificationsByBehaviorGroupQuery = (id: UUID) =>\n    useTransformQueryResponse(\n        useQuery(getAffectedNotificationsByBehaviorGroupAction(id)),\n        defaultNotificationsDecoder\n    );\n","import { addDangerNotification, addSuccessNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useEffect } from 'react';\n\nimport {\n    BehaviorGroupDeleteModal,\n    BehaviorGroupDeleteModalSkeleton\n} from '../../../components/Notifications/BehaviorGroup/BehaviorGroupDeleteModal';\nimport { useDeleteBehaviorGroupMutation } from '../../../services/Notifications/DeleteBehaviorGroup';\nimport { useGetAffectedNotificationsByBehaviorGroupQuery } from '../../../services/Notifications/GetAffectedNotificationsByBehaviorGroup';\nimport { BehaviorGroup } from '../../../types/Notification';\n\nexport interface DeleteBehaviorGroupPageProps {\n    behaviorGroup: BehaviorGroup;\n    onClose: (deleted: boolean) => void;\n}\n\nexport const DeleteBehaviorGroupPage: React.FunctionComponent<DeleteBehaviorGroupPageProps> = props => {\n\n    const deleteBehaviorGroup = useDeleteBehaviorGroupMutation();\n    const affected = useGetAffectedNotificationsByBehaviorGroupQuery(props.behaviorGroup.id);\n\n    const onDelete = React.useCallback(async (behaviorGroup: BehaviorGroup) => {\n        const mutate = deleteBehaviorGroup.mutate;\n        const response = await mutate(behaviorGroup.id);\n\n        if (response.payload?.status === 200) {\n            addSuccessNotification(\n                'Behavior group deleted',\n                <>\n                    Group <b>{ behaviorGroup.displayName }</b> deleted successfully.\n                </>\n            );\n            return true;\n        }\n\n        addDangerNotification(\n            'Behavior group failed to be deleted',\n            <>\n                Failed to delete group <b> { behaviorGroup.displayName }</b>.\n                <br />\n                Please try again.\n            </>\n        );\n\n        return false;\n    }, [ deleteBehaviorGroup.mutate ]);\n\n    useEffect(() => {\n        const payload = affected.payload;\n        const onClose = props.onClose;\n        if (payload && payload.status !== 200) {\n            addDangerNotification(\n                'Associated events failed to load ',\n                <>\n                    Failed to load associated events for group <b> { props.behaviorGroup.displayName }</b>.\n                    <br />\n                    Please try again.\n                </>\n            );\n\n            onClose(false);\n        }\n    }, [ affected.payload, props.behaviorGroup, props.onClose ]);\n\n    if (affected.loading) {\n        return <BehaviorGroupDeleteModalSkeleton\n            onClose={ props.onClose }\n        />;\n    }\n\n    if (affected.payload?.status !== 200) {\n        return null;\n    }\n\n    return <BehaviorGroupDeleteModal\n        onDelete={ onDelete }\n        isDeleting={ deleteBehaviorGroup.loading }\n        onClose={ props.onClose }\n        behaviorGroup={ props.behaviorGroup }\n        conflictingNotifications={ affected.payload.value }\n    />;\n};\n","import * as Yup from 'yup';\n\nimport { NotificationType } from '../../types/Notification';\n\nconst ActionIntegration = Yup.object({\n    type: Yup.mixed().oneOf([ NotificationType.INTEGRATION ]).required(),\n    integration: Yup.object({\n        id: Yup.string().required()\n    }).required(),\n    integrationId: Yup.string().min(1)\n});\n\nconst ActionNotify = Yup.object({\n    type: Yup.mixed().oneOf([ NotificationType.EMAIL_SUBSCRIPTION /*, NotificationType.DRAWER */ ]).required(),\n    recipient: Yup.array(Yup.object()).min(1),\n    integrationId: Yup.string().min(0)\n});\n\ntype ActionsType = Yup.TypeOf<typeof ActionIntegration> | Yup.TypeOf<typeof ActionNotify>;\n\nexport const ActionsArray = Yup.array(Yup.lazy(obj => {\n    if (obj && (obj as any).hasOwnProperty('type')) {\n        if ((obj as any).type === NotificationType.INTEGRATION) {\n            return ActionIntegration;\n        }\n    }\n\n    return ActionNotify;\n})).test('no-repeated', '${path} can\\'t contain repeated actions', (value: Array<ActionsType>  | undefined, context) => {\n    const errors: Array<ReturnType<Yup.TestContext['createError']>> = [];\n\n    let foundEmail = false;\n    const integrationIds: Array<string> = [];\n\n    if (!value) {\n        return true;\n    }\n\n    for (let i = 0; i < value.length; ++i) {\n        const action = value[i];\n        const integrationId = action.integrationId;\n        if (action.type === NotificationType.EMAIL_SUBSCRIPTION) {\n            if (foundEmail) {\n                errors.push(context.createError({\n                    message: 'Only 1 send email action is allowed',\n                    path: `actions.${i}`\n                }));\n            }\n\n            foundEmail = true;\n        } else if (integrationId) {\n            if (integrationIds.includes(integrationId)) {\n                errors.push(context.createError({\n                    message: 'Integration already used in the group, please select other',\n                    path: `actions.${i}`\n                }));\n            } else {\n                integrationIds.push(integrationId);\n            }\n        }\n    }\n\n    if (errors.length === 0) {\n        return true;\n    }\n\n    return {\n        ...context.createError(),\n        inner: errors\n    };\n});\n\nexport const WithActions = Yup.object({\n    actions: ActionsArray\n});\n\nexport const BehaviorGroupSchema = Yup.object({\n    displayName: Yup.string().required('You must specify a name for the behavior group'),\n    actions: ActionsArray\n});\n","import { createContext, useContext } from 'react';\n\nimport { UserIntegrationType } from '../../types/Integration';\nimport { IntegrationRef } from '../../types/Notification';\nimport { Recipient } from '../../types/Recipient';\n\nexport type GetIntegrations = (type: UserIntegrationType, search?: string) => Promise<ReadonlyArray<IntegrationRef>>;\nexport type GetNotificationRecipients = (filter?: string) => Promise<ReadonlyArray<Recipient>>;\n\nexport interface RecipientContext {\n    getIntegrations: GetIntegrations,\n    getNotificationRecipients: GetNotificationRecipients\n}\n\nconst RecipientContext = createContext<RecipientContext>({\n    getIntegrations: async () => {\n        throw new Error('No IntegrationContext found');\n    },\n    getNotificationRecipients: async () => {\n        throw new Error('No RecipientContext found');\n    }\n});\n\nexport const useRecipientContext = () => useContext(RecipientContext);\nexport const RecipientContextProvider = RecipientContext.Provider;\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { Recipient } from '../../../types/Recipient';\n\nexport class RecipientOption implements SelectOptionObject {\n    readonly recipient: Recipient;\n\n    constructor(recipient: Recipient) {\n        this.recipient = recipient;\n    }\n\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof RecipientOption) {\n            return this.recipient.equals(selectOption.recipient);\n        }\n\n        return false;\n    }\n\n    toString(): string {\n        return this.recipient.displayName;\n    }\n}\n","import { SelectOption } from '@patternfly/react-core';\nimport assertNever from 'assert-never';\nimport * as React from 'react';\n\nimport { Recipient } from '../../../types/Recipient';\nimport { RecipientOption } from './RecipientOption';\nimport { ReducerState } from './useTypeaheadReducer';\n\nconst mapper = (r: Recipient) =>\n    <SelectOption key={ r.getKey() } value={ new RecipientOption(r) } />;\n\nexport const useRecipientOptionMemo = (state: ReducerState<Recipient>) => {\n    return React.useMemo(() => {\n        if (state.show === 'default') {\n            if (state.loadingDefault) {\n                return [ <SelectOption\n                    key=\"loading-option\"\n                    isNoResultsOption={ true }\n                    value=\"Loading...\"\n                /> ];\n            } else {\n                return state.defaultValues.map(mapper);\n            }\n        } else if (state.show === 'filter') {\n            if (state.loadingFilter) {\n                return [ <SelectOption\n                    key=\"loading-option\"\n                    isNoResultsOption={ true }\n                    value=\"Loading...\"\n                /> ];\n            } else {\n                return state.filterValues.map(mapper);\n            }\n        }\n\n        assertNever(state.show);\n    }, [ state ]);\n};\n","import assertNever from 'assert-never';\nimport { Reducer, useCallback, useMemo, useReducer } from 'react';\n\nexport interface ReducerState<T> {\n    filterValues: ReadonlyArray<T>;\n    defaultValues: ReadonlyArray<T>;\n    show: 'default' | 'filter';\n    loadingFilter: boolean;\n    loadingDefault: boolean;\n    lastSearch: string;\n}\n\nenum ReducerActionType {\n    LOAD_FILTER_VALUE,\n    SET_FILTER_VALUE,\n    USE_DEFAULTS,\n    SET_DEFAULTS\n}\n\ntype ReducerAction<T> = {\n    type: ReducerActionType.USE_DEFAULTS;\n} | {\n    type: ReducerActionType.LOAD_FILTER_VALUE;\n    search: string;\n} | {\n    type: ReducerActionType.SET_FILTER_VALUE;\n    search: string;\n    values: ReadonlyArray<T>;\n} | {\n    type: ReducerActionType.SET_DEFAULTS;\n    values: ReadonlyArray<T>;\n}\n\nconst reducerFunction = <T>(state: ReducerState<T>, action: ReducerAction<T>): ReducerState<T> => {\n    switch (action.type) {\n        case ReducerActionType.SET_FILTER_VALUE:\n            if (action.search === state.lastSearch) {\n                if (action.values === state.filterValues) {\n                    return state;\n                }\n\n                return {\n                    ...state,\n                    loadingFilter: false,\n                    filterValues: action.values\n                };\n            }\n\n            return state;\n        case ReducerActionType.LOAD_FILTER_VALUE:\n            if (action.search !== state.lastSearch || state.show !== 'filter') {\n                return {\n                    ...state,\n                    loadingFilter: true,\n                    filterValues: [],\n                    lastSearch: action.search,\n                    show: 'filter'\n                };\n            }\n\n            return state;\n        case ReducerActionType.USE_DEFAULTS:\n            if (state.show !== 'default') {\n                return {\n                    ...state,\n                    show: 'default'\n                };\n            }\n\n            return state;\n        case ReducerActionType.SET_DEFAULTS:\n            return {\n                ...state,\n                defaultValues: action.values,\n                loadingDefault: false\n            };\n        default:\n            assertNever(action);\n    }\n};\n\nexport const useTypeaheadReducer = <T>() => {\n    const [ state, dispatch ] = useReducer<Reducer<ReducerState<T>, ReducerAction<T>>>(reducerFunction, {\n        filterValues: [],\n        defaultValues: [],\n        show: 'default',\n        loadingFilter: false,\n        loadingDefault: true,\n        lastSearch: ''\n    } as ReducerState<T>);\n\n    const setFilterValue = useCallback((search: string, values: ReadonlyArray<T>) => dispatch({\n        type: ReducerActionType.SET_FILTER_VALUE,\n        values,\n        search\n    }), [ dispatch ]);\n\n    const loadFilterValue = useCallback((search: string) => dispatch({\n        type: ReducerActionType.LOAD_FILTER_VALUE,\n        search\n    }), [ dispatch ]);\n\n    const setDefaults = useCallback((values: ReadonlyArray<T>) => dispatch({\n        type: ReducerActionType.SET_DEFAULTS,\n        values\n    }), [ dispatch ]);\n\n    const useDefaults = useCallback(() => dispatch({\n        type: ReducerActionType.USE_DEFAULTS\n    }), [ dispatch ]);\n\n    const dispatchers = useMemo(() => ({\n        setFilterValue,\n        loadFilterValue,\n        setDefaults,\n        useDefaults\n    }), [ setFilterValue, loadFilterValue, setDefaults, useDefaults ]);\n\n    return [ state, dispatchers ] as [ typeof state, typeof dispatchers ];\n};\n","import { Select, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { Messages } from '../../../properties/Messages';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationRef } from '../../../types/Notification';\nimport { IntegrationRecipient } from '../../../types/Recipient';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { useRecipientContext } from '../RecipientContext';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface IntegrationRecipientTypeaheadProps extends OuiaComponentProps {\n    selected: Partial<IntegrationRef> | undefined;\n    integrationType: UserIntegrationType;\n    isDisabled?: boolean;\n    onSelected: (recipientOption: RecipientOption) => void;\n    onOpenChange?: (isOpen: boolean) => void;\n}\n\nexport const IntegrationRecipientTypeahead: React.FunctionComponent<IntegrationRecipientTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n    const prevOpen = usePrevious(isOpen);\n    const { getIntegrations } = useRecipientContext();\n\n    const [ state, dispatchers ] = useTypeaheadReducer<IntegrationRecipient>();\n\n    const toggle = React.useCallback((isOpen: boolean) => {\n        setOpen(isOpen);\n    }, [ setOpen ]);\n\n    React.useEffect(() => {\n        const onOpenChange = props.onOpenChange;\n        if (prevOpen !== undefined && prevOpen !== isOpen) {\n            onOpenChange && onOpenChange(isOpen);\n        }\n    }, [ prevOpen, isOpen, props.onOpenChange ]);\n\n    React.useEffect(() => {\n        getIntegrations(props.integrationType, '').then(integrations => dispatchers.setDefaults(integrations.map(i => new IntegrationRecipient(i))));\n    }, [ getIntegrations, props.integrationType, dispatchers ]);\n\n    React.useEffect(() => {\n        if (state.loadingFilter) {\n            getIntegrations(props.integrationType, state.lastSearch).then(integrations => dispatchers.setFilterValue(\n                state.lastSearch,\n                integrations.map(i => new IntegrationRecipient(i))\n            ));\n        }\n    }, [ getIntegrations, props.integrationType, state.loadingFilter, state.lastSearch, dispatchers ]);\n\n    const options = useRecipientOptionMemo(state);\n\n    const onFilter = React.useCallback((e: React.ChangeEvent<HTMLInputElement> | null) => {\n        // Ignore filter calls with null event\n        if (e === null) {\n            return options;\n        }\n\n        const search = e.target.value?.trim();\n        if (search === '') {\n            dispatchers.useDefaults();\n        } else {\n            dispatchers.loadFilterValue(search);\n        }\n\n        return options;\n    }, [ dispatchers, options ]);\n\n    const selection = React.useMemo(() => {\n        const sel = props.selected;\n        if (sel === undefined || sel.name === undefined || sel.id === undefined || sel.type === undefined) {\n            return undefined;\n        }\n\n        return new RecipientOption(new IntegrationRecipient(sel as IntegrationRef));\n    }, [ props.selected ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const integrationSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n            integrationSelected(value);\n            setOpen(false);\n        }\n    }, [ props.onSelected ]);\n\n    const chooseText = `Choose ${Messages.components.integrations.integrationType[props.integrationType].toLowerCase()}`;\n\n    return (\n        <div { ...getOuiaProps('IntegrationRecipientTypeahead', props) }>\n            <Select\n                variant={ SelectVariant.typeahead }\n                typeAheadAriaLabel={ chooseText }\n                placeholderText={ chooseText }\n                selections={ selection }\n                onSelect={ onSelect }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onFilter={ onFilter }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n            >\n                { options }\n            </Select>\n        </div>\n    );\n};\n","import { Select, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { NotificationRecipient, Recipient } from '../../../types/Recipient';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { useRecipientContext } from '../RecipientContext';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface RecipientTypeaheadProps extends OuiaComponentProps {\n    selected: ReadonlyArray<NotificationRecipient>;\n    onSelected: (value: RecipientOption) => void;\n    isDisabled?: boolean;\n    onClear: () => void;\n    onOpenChange?: (isOpen: boolean) => void;\n}\n\nexport const RecipientTypeahead: React.FunctionComponent<RecipientTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n    const [ state, dispatchers ] = useTypeaheadReducer<Recipient>();\n    const prevOpen = usePrevious(isOpen);\n    const { getNotificationRecipients } = useRecipientContext();\n\n    React.useEffect(() => {\n        getNotificationRecipients('').then(recipients => dispatchers.setDefaults(recipients));\n    }, [ getNotificationRecipients, dispatchers ]);\n\n    React.useEffect(() => {\n        if (state.loadingFilter) {\n            getNotificationRecipients(state.lastSearch).then(recipients => dispatchers.setFilterValue(\n                state.lastSearch,\n                recipients\n            ));\n        }\n    }, [ getNotificationRecipients, state.loadingFilter, state.lastSearch, dispatchers ]);\n\n    const toggle = React.useCallback((isOpen: boolean) => {\n        setOpen(isOpen);\n    }, [ setOpen ]);\n\n    React.useEffect(() => {\n        const onOpenChange = props.onOpenChange;\n        if (prevOpen !== undefined && prevOpen !== isOpen) {\n            onOpenChange && onOpenChange(isOpen);\n        }\n    }, [ prevOpen, isOpen, props.onOpenChange ]);\n\n    const options = useRecipientOptionMemo(state);\n\n    const onFilter = React.useCallback((e: React.ChangeEvent<HTMLInputElement> | null) => {\n        // Ignore filter calls with null event\n        if (e === null) {\n            return options;\n        }\n\n        const search = e.target.value?.trim();\n        if (search === '') {\n            dispatchers.useDefaults();\n        } else {\n            dispatchers.loadFilterValue(search);\n        }\n\n        return options;\n    }, [ dispatchers, options ]);\n\n    const selection = React.useMemo(() => {\n        const sel = props.selected;\n        if (sel === undefined) {\n            return undefined;\n        }\n\n        return (sel as ReadonlyArray<NotificationRecipient>).map(s => new RecipientOption(s));\n\n    }, [ props.selected ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const onSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n            onSelected(value);\n        }\n    }, [ props.onSelected ]);\n\n    return (\n        <div { ...getOuiaProps('RecipientTypeahead', props) }>\n            <Select\n                variant={ SelectVariant.typeaheadMulti }\n                typeAheadAriaLabel=\"Select the recipients\"\n                selections={ selection }\n                onSelect={ onSelect }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onFilter={ onFilter }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n                onClear={ props.onClear }\n            >\n                { options }\n            </Select>\n        </div>\n    );\n};\n","import { FormHelperText, Select, SelectVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nimport { IntegrationType } from '../../../types/Integration';\nimport { Action, NotificationType } from '../../../types/Notification';\nimport { UseBehaviorGroupActionHandlers } from '../BehaviorGroup/useBehaviorGroupActionHandlers';\nimport { IntegrationRecipientTypeahead } from '../Form/IntegrationRecipientTypeahead';\nimport { RecipientTypeahead } from '../Form/RecipientTypeahead';\n\ninterface RecipientFormProps {\n    action?: Action;\n    integrationSelected: ReturnType<UseBehaviorGroupActionHandlers['handleIntegrationSelected']>;\n    recipientSelected: ReturnType<UseBehaviorGroupActionHandlers['handleRecipientSelected']>;\n    recipientOnClear: ReturnType<UseBehaviorGroupActionHandlers['handleRecipientOnClear']>;\n    onOpenChange?: (isOpen: boolean) => void;\n    error?: string;\n}\n\nconst dummyOnToggle = () => false;\n\nexport const RecipientForm: React.FunctionComponent<RecipientFormProps> = props => {\n    let recipient: React.ReactNode;\n\n    if (!props.action) {\n        recipient = (\n            <div><Select variant={ SelectVariant.typeahead } isDisabled onToggle={ dummyOnToggle } isOpen={ false } /></div>\n        );\n    } else if (props.action.type === NotificationType.INTEGRATION) {\n        recipient = (\n            <IntegrationRecipientTypeahead\n                onSelected={ props.integrationSelected }\n                integrationType={ props.action.integration?.type ?? IntegrationType.WEBHOOK }\n                selected={ props.action.integration }\n                onOpenChange={ props.onOpenChange }\n            />\n        );\n    } else {\n        recipient = (\n            <RecipientTypeahead\n                onSelected={ props.recipientSelected }\n                selected={ props.action.recipient }\n                onClear={ props.recipientOnClear }\n                onOpenChange={ props.onOpenChange }\n            />\n        );\n    }\n\n    return (\n        <>\n            { recipient }\n            { props.error && (\n                <FormHelperText isError icon={ <ExclamationCircleIcon /> } isHidden={ !props.error }>\n                    { props.error }\n                </FormHelperText>\n            ) }\n        </>\n    );\n};\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { Messages } from '../../../properties/Messages';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { NotificationType } from '../../../types/Notification';\n\ntype ActionTypeOrIntegration = {\n    kind: 'integration';\n    type: UserIntegrationType;\n} | {\n    kind: 'notification';\n    type: NotificationType;\n}\n\nexport class ActionOption implements SelectOptionObject {\n    readonly integrationType: UserIntegrationType | undefined;\n    readonly notificationType: NotificationType;\n\n    constructor(type: ActionTypeOrIntegration) {\n        if (type.kind === 'integration') {\n            this.notificationType = NotificationType.INTEGRATION;\n            this.integrationType = type.type;\n        } else {\n            this.notificationType = type.type;\n            this.integrationType = undefined;\n        }\n    }\n\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof ActionOption) {\n            return selectOption.notificationType === this.notificationType && selectOption.integrationType === this.integrationType;\n        }\n\n        return false;\n    }\n\n    toString(): string {\n        const actionName = Messages.components.notifications.types[this.notificationType];\n        if (this.integrationType) {\n            const integrationName = Messages.components.integrations.integrationType[this.integrationType];\n            return `${actionName}: ${integrationName}`;\n        }\n\n        return actionName;\n    }\n}\n","import { Select, SelectOption, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { getInsights, OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { isStagingOrProd } from '../../../types/Environments';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { Action, NotificationType } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ActionOption } from './ActionOption';\n\nconst getSelectOptions = (\n    availableNotificationTypes: ReadonlyArray<NotificationType>,\n    availableIntegrationTypes: ReadonlyArray<UserIntegrationType>,\n    selectedNotifications: ReadonlyArray<NotificationType>) => [\n    ...availableNotificationTypes\n    .filter(type => !selectedNotifications.includes(type))\n    .map(type => new ActionOption({\n        kind: 'notification',\n        type\n    })),\n    ...availableIntegrationTypes.map(type => new ActionOption({\n        kind: 'integration',\n        type\n    }))\n];\n\nexport interface ActionTypeaheadProps extends OuiaComponentProps {\n    selectedNotifications: ReadonlyArray<NotificationType>;\n    action?: Action;\n    isDisabled?: boolean;\n    onSelected: (actionOption: ActionOption) => void;\n}\n\nexport const ActionTypeahead: React.FunctionComponent<ActionTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const toggle = React.useCallback((isExpanded: boolean) => {\n        setOpen(isExpanded);\n    }, [ setOpen ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const actionSelected = props.onSelected;\n        if (value instanceof ActionOption) {\n            actionSelected(value);\n            setOpen(false);\n        }\n\n    }, [ props.onSelected, setOpen ]);\n\n    const selectedOption = React.useMemo(() => {\n        if (!props.action) {\n            return undefined;\n        }\n\n        if (props.action.type === NotificationType.INTEGRATION) {\n            return new ActionOption({\n                kind: 'integration',\n                type: props.action.integration.type\n            });\n        }\n\n        return new ActionOption({\n            kind: 'notification',\n            type: props.action.type\n        });\n    }, [ props.action ]);\n\n    const showAsProd = isStagingOrProd(getInsights());\n\n    const selectableOptions = React.useMemo(() => {\n        const notificationTypes = showAsProd ?\n            [ NotificationType.EMAIL_SUBSCRIPTION ]\n            : [ NotificationType.EMAIL_SUBSCRIPTION, NotificationType.DRAWER ];\n        const integrationTypes = showAsProd ?\n            [ UserIntegrationType.WEBHOOK ]\n            : [ UserIntegrationType.WEBHOOK, UserIntegrationType.CAMEL ];\n\n        return getSelectOptions(notificationTypes, integrationTypes, props.selectedNotifications)\n        .map(o => <SelectOption key={ o.toString() } value={ o } />);\n    }, [ showAsProd, props.selectedNotifications ]);\n\n    return (\n        <div { ...getOuiaProps('ActionTypeahead', props) } >\n            <Select\n                variant={ SelectVariant.typeahead }\n                typeAheadAriaLabel=\"Select action\"\n                aria-label=\"Select action\"\n                placeholderText=\"Select action\"\n                selections={ selectedOption }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onSelect={ onSelect }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n            >\n                { selectableOptions }\n            </Select>\n        </div>\n    );\n};\n","import { Button, ButtonVariant, GridItem } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n    cellWidth,\n    IActions,\n    ICell,\n    IRow,\n    IRowData,\n    Table,\n    TableBody,\n    TableHeader,\n    TableVariant } from '@patternfly/react-table';\nimport { important } from 'csx';\nimport { FieldArrayRenderProps, FormikProps } from 'formik';\nimport produce, { castDraft, Draft } from 'immer';\nimport * as React from 'react';\nimport { DeepPartial } from 'ts-essentials';\nimport { cssRaw, style } from 'typestyle';\n\nimport { Action, BehaviorGroup, NewBehaviorGroup, NotificationType } from '../../../types/Notification';\nimport { RecipientForm } from '../EditableActionRow/RecipientForm';\nimport { ActionTypeahead } from '../Form/ActionTypeahead';\nimport {\n    SetActionUpdater,\n    UseBehaviorGroupActionHandlers,\n    useBehaviorGroupActionHandlers\n} from './useBehaviorGroupActionHandlers';\n\ncssRaw(`\n    @media only screen and (max-width: 768px) {\n        .pf-c-select .pf-c-select__toggle-typeahead {\n            --pf-c-select__toggle-typeahead--FlexBasis: 0;\n        }\n    }\n`);\n\nexport type BehaviorGroupFormTableProps =\n    FieldArrayRenderProps & {\n    form: FormikProps<FormType>;\n}\n\ntype FormType = DeepPartial<BehaviorGroup | NewBehaviorGroup>;\n\nconst tableHeaderClassName = style({\n    $nest: {\n        '& tr': {\n            borderBottom: important(0)\n        },\n        '& th:first-child': {\n            paddingLeft: important(0)\n        },\n        '& th:last-child, & td:last-child': {\n            paddingRight: important(0)\n        }\n    }\n});\n\nconst tableBodyClassName = style({\n    $nest: {\n        '& td:first-child': {\n            paddingLeft: important(0)\n        },\n        '& td:last-child': {\n            paddingRight: important(0)\n        }\n    }\n});\n\nconst alignLeftClassName = style({\n    textAlign: 'left',\n    paddingLeft: 0\n});\n\nconst cells: Array<ICell> = [\n    {\n        title: 'Actions',\n        transforms: [ cellWidth(50) ]\n    },\n    {\n        title: 'Recipient'\n    }\n];\n\nconst toTableRows = (\n    actions: ReadonlyArray<Action | undefined>,\n    errors: any,\n    touched: any,\n    selectedNotifications: ReadonlyArray<NotificationType>,\n    rowHandlers: UseBehaviorGroupActionHandlers,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n): Array<IRow> => {\n    return actions.map((action, index) => {\n        let error: string | undefined = undefined;\n        let isTouched = false;\n        let path;\n\n        if (action?.type === NotificationType.INTEGRATION) {\n            path = `actions.${index}.integration`;\n        } else {\n            path = `actions.${index}.recipient`;\n        }\n\n        if (action?.type === NotificationType.INTEGRATION) {\n            if (touched[index]?.integration) {\n                isTouched = true;\n            }\n\n            if (isTouched && errors[index]?.integration) {\n                error = 'Select a recipient for this integration.';\n            }\n        }\n\n        if (!error && isTouched) {\n            setFieldTouched(path, false, false);\n        }\n\n        return {\n            id: index,\n            key: index,\n            cells: [\n                {\n                    title: <ActionTypeahead\n                        selectedNotifications={ selectedNotifications }\n                        action={ action }\n                        onSelected={ rowHandlers.handleActionSelected(index) }\n                    />\n                },\n                {\n                    title: <RecipientForm\n                        action={ action }\n                        integrationSelected={ rowHandlers.handleIntegrationSelected(index) }\n                        recipientSelected={ rowHandlers.handleRecipientSelected(index) }\n                        recipientOnClear={ rowHandlers.handleRecipientOnClear(index) }\n                        error={ error }\n                        onOpenChange={ isOpen => {\n                            if (!isOpen) {\n                                setFieldTouched(path, true, false);\n                            }\n                        } }\n                    />\n                }\n            ]\n        };\n    });\n};\n\nconst emptySpan = () => <span />;\n\nexport const BehaviorGroupFormActionsTable: React.FunctionComponent<BehaviorGroupFormTableProps> = (props) => {\n\n    const { values, setValues, isSubmitting, errors, touched, setFieldTouched } = props.form;\n    const actions = React.useMemo<ReadonlyArray<Action | undefined>>(() => values.actions ?? [] as ReadonlyArray<Action>, [ values ]);\n    const touchedActions = React.useMemo(() => touched?.actions ?? [], [ touched ]);\n    const errorActions = React.useMemo(() => errors?.actions ?? [], [ errors ]);\n\n    const selectedNotifications = React.useMemo(\n        () => new Array(...new Set<NotificationType>(\n            (actions.filter(a => a) as ReadonlyArray<Action>).map(a => a.type)\n        )) as ReadonlyArray<NotificationType>,\n        [ actions ]\n    );\n\n    const setValueDispatch = React.useCallback((updater: SetActionUpdater) => {\n        setValues(produce(prev => {\n            const form = (prev as Draft<FormType>);\n            if (updater instanceof Function) {\n                form.actions = castDraft(updater(form.actions as ReadonlyArray<DeepPartial<Action>>));\n            } else {\n                form.actions = castDraft(updater);\n            }\n        }), false);\n    }, [ setValues ]);\n\n    const addAction = React.useCallback(() => {\n        const push = props.push;\n        push(undefined);\n    }, [ props.push ]);\n\n    React.useEffect(() => {\n        if (actions.length === 0) {\n            addAction();\n        }\n    }, [ actions, addAction ]);\n\n    const rowHandlers = useBehaviorGroupActionHandlers(setValueDispatch);\n\n    const rows = React.useMemo(\n        () => toTableRows(actions, errorActions, touchedActions, selectedNotifications, rowHandlers, setFieldTouched),\n        [ actions, errorActions, touchedActions, selectedNotifications, rowHandlers, setFieldTouched ]\n    );\n\n    const actionResolver = React.useCallback((rowData: IRowData): IActions => {\n        const handleRemove = props.handleRemove;\n        if (rows.length > 1) {\n            return [\n                {\n                    key: 'delete',\n                    title: <Button aria-label=\"delete-action\" variant={ ButtonVariant.plain }>\n                        <MinusCircleIcon />\n                    </Button>,\n                    isOutsideDropdown: true,\n                    onClick: handleRemove(rowData.id)\n                }\n            ];\n        }\n\n        return [];\n    }, [ rows, props.handleRemove ]);\n\n    return (\n        <>\n            <Table\n                aria-label=\"behavior-group-actions-form\"\n                rows={ rows }\n                cells={ cells }\n                actionResolver={ actionResolver }\n                actionsToggle={ emptySpan as any }\n                borders={ false }\n                variant={ TableVariant.compact }\n            >\n                <TableHeader className={ tableHeaderClassName } />\n                <TableBody className={ tableBodyClassName } />\n            </Table>\n            <GridItem span={ 12 }>\n                <Button\n                    className={ alignLeftClassName }\n                    variant={ ButtonVariant.link }\n                    icon={ <PlusCircleIcon /> }\n                    onClick={ addAction }\n                    isDisabled={ isSubmitting }\n                >\n                    Add action\n                </Button>\n            </GridItem>\n        </>\n    );\n};\n","import produce from 'immer';\nimport { SetStateAction, useCallback } from 'react';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Action, ActionIntegration, ActionNotify, NotificationType } from '../../../types/Notification';\nimport { IntegrationRecipient, NotificationRecipient } from '../../../types/Recipient';\nimport { ActionOption } from '../Form/ActionOption';\nimport { RecipientOption } from '../Form/RecipientOption';\n\nexport interface UseBehaviorGroupActionHandlers {\n    handleActionSelected: (index: number) => (value: ActionOption) => void;\n    handleIntegrationSelected: (index: number) => (value: RecipientOption) => void;\n    handleRecipientSelected: (index: number) => (value: RecipientOption) => void;\n    handleRecipientOnClear: (index: number) => () => void;\n}\n\nexport type SetActionUpdater = SetStateAction<ReadonlyArray<DeepPartial<Action>>>;\n\nexport const useBehaviorGroupActionHandlers = (\n    setActions: (updater: SetActionUpdater) => void\n): UseBehaviorGroupActionHandlers => {\n\n    const handleActionSelected = useCallback((index: number) => (value: ActionOption) => {\n        setActions(produce(prev => {\n            if (!prev[index]) {\n                prev[index] = {};\n            }\n\n            const row = prev[index];\n            row.type = value.notificationType;\n            if (value.integrationType) {\n                const rowAsIntegration = row as DeepPartial<ActionIntegration>;\n                rowAsIntegration.integration = {\n                    type: value.integrationType\n                };\n            } else {\n                const rowAsNotification = row as DeepPartial<ActionNotify>;\n                rowAsNotification.recipient = [];\n            }\n        }));\n    }, [ setActions ]);\n\n    const handleIntegrationSelected = useCallback((index: number) => (value: RecipientOption) => {\n        setActions(produce(prev => {\n            if (value.recipient instanceof IntegrationRecipient) {\n                const rowAsIntegration = prev[index] as DeepPartial<ActionIntegration>;\n                rowAsIntegration.integration = value.recipient.integration;\n            }\n        }));\n    }, [ setActions ]);\n\n    const handleRecipientSelected = useCallback((index: number) => (value: RecipientOption) => {\n        setActions(produce(prev => {\n            const row = prev[index];\n            if (row.type !== NotificationType.INTEGRATION) {\n                const rowAsNotification = row as DeepPartial<ActionNotify>;\n                if (rowAsNotification.recipient) {\n                    const index = rowAsNotification.recipient.findIndex(r => value.recipient.equals(r as NotificationRecipient));\n                    if (index === -1) {\n                        rowAsNotification.recipient = [ ...rowAsNotification.recipient, value.recipient ];\n                    } else {\n                        rowAsNotification.recipient = rowAsNotification.recipient.filter((_, i) => i !== index);\n                    }\n                }\n            }\n        }));\n    }, [ setActions ]);\n\n    const handleRecipientOnClear = useCallback((index: number) => () => {\n        setActions(produce(prev => {\n            const row = prev[index];\n            if (row.type !== NotificationType.INTEGRATION) {\n                const rowAsNotification = row as DeepPartial<ActionNotify>;\n                rowAsNotification.recipient = [];\n            }\n        }));\n    }, [ setActions ]);\n\n    return {\n        handleActionSelected,\n        handleIntegrationSelected,\n        handleRecipientSelected,\n        handleRecipientOnClear\n    };\n};\n","import { Form, Grid, GridItem } from '@patternfly/react-core';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nimport { FormTextInput, OuiaComponentProps, ouiaIdConcat } from '@redhat-cloud-services/insights-common-typescript';\nimport { FieldArray } from 'formik';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { BehaviorGroupFormActionsTable } from './BehaviorGroupFormActionsTable';\n\nexport interface EditBehaviorGroupProps extends OuiaComponentProps {\n    behaviorGroup?: Partial<BehaviorGroup>;\n}\n\nconst subtitleClassName = style({\n    paddingBottom: global_spacer_md.var\n});\n\nexport const EditBehaviorGroupForm: React.FunctionComponent<EditBehaviorGroupProps> = props => {\n\n    return (\n        <div { ... getOuiaProps('Notifications/BehaviorGroupForm', props) }>\n            <div className={ subtitleClassName }>Enter a name and add actions for your new group.</div>\n            <Form>\n                <Grid hasGutter>\n                    <GridItem span={ 12 }>\n                        <FormTextInput\n                            ouiaId={ ouiaIdConcat(props.ouiaId, 'group-name') }\n                            label=\"Group name\"\n                            name=\"displayName\"\n                            id=\"group-name\"\n                        />\n                    </GridItem>\n                    <FieldArray name=\"actions\">\n                        { helpers => (\n                            <>\n                                <BehaviorGroupFormActionsTable\n                                    { ...helpers }\n                                />\n                            </>\n                        ) }\n                    </FieldArray>\n                </Grid>\n            </Form>\n        </div>\n    );\n};\n","import { ModalVariant } from '@patternfly/react-core';\nimport { SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { BehaviorGroupSchema } from '../../../schemas/Integrations/Notifications';\nimport { BehaviorGroup, DefaultNotificationBehavior, Notification } from '../../../types/Notification';\nimport { EditBehaviorGroupForm } from './BehaviorGroupForm';\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\nexport type BehaviorGroupSaveModalProps = Omit<SaveModalProps, UsedProps> & {\n    data?: Partial<BehaviorGroup>;\n    onSave: (behaviorGroup: BehaviorGroup) => boolean | Promise<boolean>;\n};\n\ninterface InternalProps {\n    onClose: (saved: boolean) => void;\n    data: BehaviorGroupSaveModalProps['data'];\n}\n\nconst InternalBehaviorGroupSaveModal: React.FunctionComponent<InternalProps> = props => {\n    const title =  `${props.data ? 'Create new' : 'Edit'} behavior group`;\n\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<Notification | DefaultNotificationBehavior>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            content={ <EditBehaviorGroupForm\n                behaviorGroup={ props.data }\n            /> }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            isOpen={ true }\n            title={ title }\n            onClose={ props.onClose }\n            variant={ ModalVariant.large }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const BehaviorGroupSaveModal: React.FunctionComponent<BehaviorGroupSaveModalProps> = props => {\n    const onSubmit = React.useCallback(async (data: Partial<BehaviorGroup>) => {\n        const onClose = props.onClose;\n        const onSave = props.onSave;\n\n        const saved = await onSave(data as BehaviorGroup);\n\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onClose, props.onSave ]);\n\n    return (\n        <Formik<Partial<BehaviorGroup>>\n            initialValues={ props.data ?? { } }\n            validationSchema={ BehaviorGroupSchema }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalBehaviorGroupSaveModal\n                onClose={ props.onClose }\n                data={ props.data }\n            />\n        </Formik>\n    );\n};\n","import { NotificationRecipient } from '../../types/Recipient';\nimport { GetNotificationRecipients } from './RecipientContext';\n\nconst all: ReadonlyArray<NotificationRecipient> = [\n    new NotificationRecipient(undefined, false),\n    new NotificationRecipient(undefined, true)\n];\n\nconst getRecipients = async (search?: string) => {\n    if (search) {\n        const lowerCaseSearch = search.toLowerCase();\n        return all.filter(r => r.displayName.toLowerCase().includes(lowerCaseSearch));\n    }\n\n    return all;\n};\n\nexport const useGetRecipients = (): GetNotificationRecipients => {\n    return getRecipients;\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toBehaviorGroup, toShallowBehaviorGroupRequest } from '../../types/adapters/BehaviorGroupAdapter';\nimport { BehaviorGroup, NewBehaviorGroup } from '../../types/Notification';\n\ntype Payload = Operations.NotificationServiceCreateBehaviorGroup.Payload\n    | Operations.NotificationServiceUpdateBehaviorGroup.Payload;\n\nconst decoder = validationResponseTransformer(\n    (payload: Payload) => {\n        if (payload.type === 'BehaviorGroup') {\n            return validatedResponse(\n                'BehaviorGroup',\n                payload.status,\n                toBehaviorGroup(payload.value),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nconst saveBehaviorGroupActionCreator =  (behaviorGroup: BehaviorGroup | NewBehaviorGroup) => {\n    if (behaviorGroup.id === undefined) {\n        return Operations.NotificationServiceCreateBehaviorGroup.actionCreator({\n            body: toShallowBehaviorGroupRequest(behaviorGroup)\n        });\n    }\n\n    return Operations.NotificationServiceUpdateBehaviorGroup.actionCreator({\n        id: behaviorGroup.id,\n        body: toShallowBehaviorGroupRequest(behaviorGroup)\n    });\n};\n\nexport const useSaveBehaviorGroupMutation = () => useTransformQueryResponse(\n    useMutation(saveBehaviorGroupActionCreator),\n    decoder\n);\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { UUID } from '../../types/Notification';\n\ntype UpdateBehaviorGroupActionsParams = {\n    behaviorGroupId: UUID;\n    endpointIds: Array<UUID>;\n}\n\nconst updateBehaviorGroupActionsActionCreator =  (params: UpdateBehaviorGroupActionsParams) => {\n    return Operations.NotificationServiceUpdateBehaviorGroupActions.actionCreator({\n        behaviorGroupId: params.behaviorGroupId,\n        body: params.endpointIds\n    });\n};\n\nexport const useUpdateBehaviorGroupActionsMutation = () => useMutation(updateBehaviorGroupActionsActionCreator);\n","import { addDangerNotification, addSuccessNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport produce from 'immer';\nimport isEqual from 'lodash/isEqual';\nimport uniqWith from 'lodash/uniqWith';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport { BehaviorGroupSaveModal } from '../../../components/Notifications/BehaviorGroup/BehaviorGroupSaveModal';\nimport { RecipientContextProvider } from '../../../components/Notifications/RecipientContext';\nimport { useGetIntegrations } from '../../../components/Notifications/useGetIntegrations';\nimport { useGetRecipients } from '../../../components/Notifications/useGetRecipients';\nimport { getDefaultSystemEndpointAction } from '../../../services/Integrations/GetDefaultSystemEndpoint';\nimport { useSaveBehaviorGroupMutation } from '../../../services/Notifications/SaveBehaviorGroup';\nimport { useUpdateBehaviorGroupActionsMutation } from '../../../services/Notifications/UpdateBehaviorGroupActions';\nimport { toSystemProperties } from '../../../types/adapters/NotificationAdapter';\nimport {\n    BehaviorGroup, isActionIntegration, isActionNotify,\n    NewBehaviorGroup,\n    NotificationType,\n    SystemProperties,\n    UUID\n} from '../../../types/Notification';\n\ninterface EditBehaviorGroupPageProps {\n    behaviorGroup?: Partial<BehaviorGroup>;\n    onClose: (saved: boolean) => void;\n}\n\nconst needsSaving = (original: Partial<BehaviorGroup> | undefined, updated: BehaviorGroup | NewBehaviorGroup) => {\n    return original?.id === undefined || original.displayName !== updated.displayName;\n};\n\nexport const EditBehaviorGroupPage: React.FunctionComponent<EditBehaviorGroupPageProps> = props => {\n    const getRecipients = useGetRecipients();\n    const getIntegrations = useGetIntegrations();\n\n    const actionsContextValue = React.useMemo(() => ({\n        getIntegrations,\n        getNotificationRecipients: getRecipients\n    }), [ getIntegrations, getRecipients ]);\n\n    const saveBehaviorGroupMutation = useSaveBehaviorGroupMutation();\n    const updateBehaviorGroupActionsMutation = useUpdateBehaviorGroupActionsMutation();\n    const { query } = useContext(ClientContext);\n    const [ fetchingIntegrations, setFetchingIntegrations ] = React.useState<boolean>(false);\n\n    const onSave = React.useCallback(async (data: BehaviorGroup | NewBehaviorGroup) => {\n        const updateBehaviorGroupActions = updateBehaviorGroupActionsMutation.mutate;\n        const saveBehaviorGroup = saveBehaviorGroupMutation.mutate;\n\n        return (needsSaving(props.behaviorGroup, data) ?\n            saveBehaviorGroup(data).then(value => {\n                if (value.payload?.type === 'BehaviorGroup') {\n                    return value.payload.value.id;\n                } else if (value.payload?.status === 200) {\n                    return data.id;\n                }\n\n                throw new Error('Behavior group wasn\\'t saved');\n            }) : Promise.resolve(data.id)).then(behaviorGroupId => {\n\n            // Determine what system Integrations we need to fetch\n            const toFetch: ReadonlyArray<SystemProperties> = uniqWith(\n                ([] as Array<SystemProperties>)\n                .concat(...data.actions.filter(isActionNotify)\n                .map(action => produce(action, draft => {\n                    draft.recipient = draft.recipient.filter(r => !r.integrationId);\n                }))\n                .map(action => toSystemProperties(action))),\n                isEqual\n            );\n\n            if (toFetch.find(props => props.type !== NotificationType.EMAIL_SUBSCRIPTION)) {\n                throw new Error('Only email subscriptions are created when assigning behavior groups');\n            }\n\n            if (toFetch.length > 0) {\n                setFetchingIntegrations(true);\n            }\n\n            return Promise.all(\n                toFetch.map(systemProps => query(getDefaultSystemEndpointAction(systemProps))\n                .then(result => result.payload?.type === 'Endpoint' ? result.payload.value.id : undefined)\n                )\n            ).then(newIds => {\n                const endpointsToAdd = [\n                    // fetched\n                    ...newIds as UUID[],\n                    // integrations\n                    ...data.actions.filter(isActionIntegration).map(action => action.integration.id),\n                    // Existing actions with id\n                    ...data.actions.filter(isActionNotify).map(a => a.recipient).flat().map(r => r.integrationId).filter(r => r) as UUID[]\n                ];\n\n                return updateBehaviorGroupActions({\n                    behaviorGroupId: behaviorGroupId as UUID,\n                    endpointIds: endpointsToAdd\n                });\n            });\n        }).then(value => {\n            if (value.payload?.status === 200) {\n                if (data.id === undefined) {\n                    addSuccessNotification(\n                        'New behavior group created',\n                        <>\n                            Group <b> { data.displayName } </b> created successfully.\n                        </>\n                    );\n                } else {\n                    addSuccessNotification(\n                        'Behavior group saved',\n                        <>\n                            Group <b> { data.displayName } </b> was saved successfully.\n                        </>\n                    );\n                }\n\n                return true;\n            }\n\n            if (data.id === undefined) {\n                addDangerNotification(\n                    'Behavior group failed to be created',\n                    <>\n                        Failed to create group <b> { data.displayName }</b>.\n                        <br />\n                        Please try again.\n                    </>\n                );\n            } else {\n                addDangerNotification(\n                    'Behavior group failed to save',\n                    <>\n                        Failed to save group <b> { data.displayName }</b>.\n                        <br />\n                        Please try again.\n                    </>\n                );\n            }\n\n            return false;\n        }).catch(err => {\n            console.error('Error saving behavior groups', err);\n            throw err;\n        });\n    }, [ saveBehaviorGroupMutation.mutate, updateBehaviorGroupActionsMutation.mutate, props.behaviorGroup, query ]);\n\n    const isSaving = React.useMemo(() => {\n        return fetchingIntegrations || saveBehaviorGroupMutation.loading || updateBehaviorGroupActionsMutation.loading;\n    }, [ fetchingIntegrations, saveBehaviorGroupMutation.loading, updateBehaviorGroupActionsMutation.loading ]);\n\n    return (\n        <RecipientContextProvider value={ actionsContextValue }>\n            <BehaviorGroupSaveModal\n                data={ props.behaviorGroup }\n                isSaving={ isSaving }\n                onClose={ props.onClose }\n                onSave={ onSave }\n            />\n        </RecipientContextProvider>\n    );\n};\n","import { Filter, Operator, Page } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport { listIntegrationIntegrationDecoder, listIntegrationsActionCreator } from '../../services/useListIntegrations';\nimport { UserIntegrationType } from '../../types/Integration';\nimport { IntegrationRef } from '../../types/Notification';\nimport { GetIntegrations } from './RecipientContext';\n\nexport const useGetIntegrations = (): GetIntegrations => {\n    const { query } = useContext(ClientContext);\n\n    return React.useCallback(async (type: UserIntegrationType, _search?: string) => {\n        return query(listIntegrationsActionCreator(\n            Page.of(\n                1,\n                20,\n                new Filter()\n                .and('type', Operator.EQUAL, type)\n            )\n        )).then(response => {\n            let integrations: ReadonlyArray<IntegrationRef> = [];\n            const payload = response.payload ? listIntegrationIntegrationDecoder(response.payload) : undefined;\n\n            if (payload?.type === 'IntegrationPage') {\n                integrations = payload.value.data;\n            }\n\n            return integrations;\n        });\n    }, [ query ]);\n};\n","import assertNever from 'assert-never';\n\nimport { Operations } from '../../generated/OpenapiIntegrations';\nimport { NotificationType, SystemProperties } from '../../types/Notification';\n\nexport const getDefaultSystemEndpointAction = (systemProperties: SystemProperties) => {\n    if (systemProperties.type === NotificationType.EMAIL_SUBSCRIPTION) {\n        return Operations.EndpointServiceGetOrCreateEmailSubscriptionEndpoint.actionCreator({\n            body: {\n                only_admins: systemProperties.props.onlyAdmins\n            }\n        });\n    }\n\n    assertNever(systemProperties.type);\n};\n","import {\n    Badge,\n    Button, ButtonProps,\n    ButtonVariant,\n    ExpandableSection,\n    ExpandableSectionToggle,\n    SearchInput, Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title, Tooltip\n} from '@patternfly/react-core';\nimport { global_BackgroundColor_100, global_palette_black_1000, global_spacer_lg } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { useAppContext } from '../../../app/AppContext';\nimport {\n    BehaviorGroupCardList,\n    BehaviorGroupCardListSkeleton\n} from '../../../components/Notifications/BehaviorGroup/BehaviorGroupCardList';\nimport { useDeleteModalReducer } from '../../../hooks/useDeleteModalReducer';\nimport {\n    useFormModalReducer } from '../../../hooks/useFormModalReducer';\nimport { BehaviorGroup, UUID } from '../../../types/Notification';\nimport { emptyImmutableArray } from '../../../utils/Immutable';\nimport { DeleteBehaviorGroupPage } from '../Form/DeleteBehaviorGroupPage';\nimport { EditBehaviorGroupPage } from '../Form/EditBehaviorGroupPage';\nimport { BehaviorGroupContent } from './useBehaviorGroupContent';\n\nconst expandableSectionClassName = {\n    backgroundColor: global_BackgroundColor_100.var,\n    paddingLeft: global_spacer_lg.var,\n    paddingRight: global_spacer_lg.var\n};\n\nconst sectionClassName = style(\n    expandableSectionClassName,\n    {\n        paddingBottom: global_spacer_lg.var\n    }\n);\n\nconst sectionTitleClassName = style(\n    expandableSectionClassName,\n    {\n        paddingTop: global_spacer_lg.var\n    }\n);\n\nconst titleClassName = style({\n    marginTop: '-0.15em',\n    color: global_palette_black_1000.var\n});\n\nconst emptyAddButtonClassName = style({\n    marginTop: '-0.2em'\n});\n\ninterface BehaviorGroupSectionProps {\n    bundleId: UUID;\n    behaviorGroupContent: BehaviorGroupContent;\n}\n\ntype BehaviorGroupAddButtonProps = Pick<ButtonProps, 'className' | 'onClick' | 'isDisabled' | 'component'>;\n\nconst BehaviorGroupAddButton: React.FunctionComponent<BehaviorGroupAddButtonProps> = props => {\n    const { isDisabled, ...buttonProps } = props;\n    const { isOrgAdmin } = useAppContext();\n\n    const button = <Button\n        { ...buttonProps }\n        isAriaDisabled={ isDisabled }\n        variant={ ButtonVariant.primary }\n    >\n        Create new group\n    </Button>;\n\n    if (isDisabled) {\n        const content = isOrgAdmin ?\n            'You need the Notifications administrator role to perform this action' :\n            'You do not have permissions to perform this action. Contact your org admin for more information';\n        return <Tooltip content={ content }>\n            { button }\n        </Tooltip>;\n    }\n\n    return button;\n};\n\nexport const BehaviorGroupsSection: React.FunctionComponent<BehaviorGroupSectionProps> = props => {\n\n    const [ isExpanded, setExpanded ] = React.useState(true);\n    const [ filter, setFilter ] = React.useState<string>('');\n    const { rbac } = useAppContext();\n\n    const filteredBehaviors = React.useMemo(() => {\n        if (!props.behaviorGroupContent.isLoading && !props.behaviorGroupContent.hasError) {\n            const lowerCaseFilter = filter.toLowerCase();\n            return props.behaviorGroupContent.content.filter(bg => bg.displayName.toLowerCase().includes(lowerCaseFilter));\n        }\n\n        return emptyImmutableArray;\n    }, [ filter, props.behaviorGroupContent ]);\n\n    const [ editModalState, editModalActions ] = useFormModalReducer<BehaviorGroup>();\n    const [ deleteModalState, deleteModalActions ] = useDeleteModalReducer<BehaviorGroup>();\n\n    const createGroup = React.useCallback((event) => {\n        event.stopPropagation();\n        editModalActions.create({\n            bundleId: props.bundleId\n        });\n    }, [ editModalActions, props.bundleId ]);\n\n    const onCloseModal = React.useCallback((saved: boolean) => {\n        const reload = props.behaviorGroupContent.reload;\n        if (saved) {\n            reload();\n        }\n\n        editModalActions.reset();\n    }, [ editModalActions, props.behaviorGroupContent.reload ]);\n\n    const onEdit = React.useCallback((behaviorGroup: BehaviorGroup) => {\n        editModalActions.edit(behaviorGroup);\n    }, [ editModalActions ]);\n\n    const onDelete = React.useCallback((behaviorGroup: BehaviorGroup) => {\n        deleteModalActions.delete(behaviorGroup);\n    }, [ deleteModalActions ]);\n\n    const onCloseDelete = React.useCallback((deleted: boolean) => {\n        const reload = props.behaviorGroupContent.reload;\n        if (deleted) {\n            reload();\n        }\n\n        deleteModalActions.reset();\n    }, [ deleteModalActions, props.behaviorGroupContent.reload ]);\n\n    const onClearFilter = React.useCallback(() => {\n        setFilter('');\n    }, [ setFilter ]);\n\n    const contentId = 'behavior-group-section-content';\n\n    return (\n        <div>\n            <div className={ sectionTitleClassName }>\n                <ExpandableSectionToggle\n                    isExpanded={ isExpanded }\n                    onToggle={ setExpanded }\n                    contentId={ contentId }\n                    direction=\"down\"\n                >\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Title className={ titleClassName } headingLevel=\"h2\">Behavior groups</Title>\n                        </SplitItem>\n                        <SplitItem>\n                            { (!props.behaviorGroupContent.isLoading && !props.behaviorGroupContent.hasError) && (\n                                props.behaviorGroupContent.content.length > 0 ?\n                                    <Badge isRead>{ props.behaviorGroupContent.content.length }</Badge> :\n                                    <BehaviorGroupAddButton\n                                        className={ emptyAddButtonClassName }\n                                        component='a'\n                                        onClick={ createGroup }\n                                        isDisabled={ !rbac.canWriteNotifications }\n                                    />\n                            ) }\n                        </SplitItem>\n                    </Split>\n                </ExpandableSectionToggle>\n            </div>\n            <ExpandableSection\n                className={ sectionClassName }\n                contentId={ contentId }\n                isExpanded={ isExpanded }\n                onToggle={ setExpanded }\n                isDetached\n            >\n                <Stack hasGutter>\n                    <StackItem>\n                        Configure default actions for notifications recipients. Keep in mind that users will be able\n                        to change settings for all entitled events in User Preferences. You can prevent users from\n                        changing assigned actions by locking action / recipient pairings when creating or editing\n                        behavior groups.\n                    </StackItem>\n                    { (props.behaviorGroupContent.isLoading ||\n                        props.behaviorGroupContent.hasError ||\n                        props.behaviorGroupContent.content.length > 0) && (\n                        <>\n                            <StackItem>\n                                <Split hasGutter>\n                                    <SplitItem>\n                                        <SearchInput\n                                            value={ filter }\n                                            onChange={ setFilter }\n                                            onClear={ onClearFilter }\n                                            type=\"text\"\n                                            aria-label=\"Search by name\"\n                                            placeholder=\"Search by name\"\n                                            isDisabled={ props.behaviorGroupContent.isLoading }\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <BehaviorGroupAddButton\n                                            isDisabled={ props.behaviorGroupContent.isLoading || !rbac.canWriteNotifications }\n                                            onClick={ createGroup }\n                                        />\n                                    </SplitItem>\n                                </Split>\n                            </StackItem>\n                            <StackItem>\n                                { props.behaviorGroupContent.isLoading ? (\n                                    <BehaviorGroupCardListSkeleton />\n                                ) : props.behaviorGroupContent.hasError ? (\n                                    <div>Error loading behavior groups</div>\n                                ) : (\n                                    <BehaviorGroupCardList\n                                        onEdit={ rbac.canWriteNotifications ? onEdit : undefined }\n                                        onDelete={ rbac.canWriteNotifications ? onDelete : undefined }\n                                        behaviorGroups={ filteredBehaviors }\n                                    />\n                                ) }\n                            </StackItem>\n                        </>\n                    ) }\n                </Stack>\n                { editModalState.isOpen && (\n                    <EditBehaviorGroupPage\n                        behaviorGroup={ editModalState.template }\n                        onClose={ onCloseModal }\n                    />\n                )}\n                { deleteModalState.isOpen && (\n                    <DeleteBehaviorGroupPage\n                        behaviorGroup={ deleteModalState.data }\n                        onClose={ onCloseDelete }\n                    />\n                ) }\n            </ExpandableSection>\n        </div>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toBehaviorGroup } from '../../types/adapters/BehaviorGroupAdapter';\nimport { UUID } from '../../types/Notification';\n\nconst behaviorGroupDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceFindBehaviorGroupsByBundleId.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'BehaviorGroups',\n                200,\n                payload.value.map(toBehaviorGroup),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetBehaviorGroups = (bundleId: UUID) => {\n    return useTransformQueryResponse(\n        useQuery(Operations.NotificationServiceFindBehaviorGroupsByBundleId.actionCreator({\n            bundleId\n        })),\n        behaviorGroupDecoder\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { UUID } from '../../types/Notification';\n\nexport const getBehaviorGroupByNotificationDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceGetLinkedBehaviorGroups.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'BehaviorGroupId',\n                200,\n                payload.value.map(value => value.id),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const getBehaviorGroupByNotificationAction = (notificationId: UUID) =>\n    Operations.NotificationServiceGetLinkedBehaviorGroups.actionCreator({\n        eventTypeId: notificationId\n    });\n\nexport const useGetBehaviorGroupByNotification = (notificationId: UUID) => {\n    return useTransformQueryResponse(\n        useQuery(getBehaviorGroupByNotificationAction(notificationId)),\n        getBehaviorGroupByNotificationDecoder\n    );\n};\n","import { Operations } from '../../generated/OpenapiNotifications';\nimport { UUID } from '../../types/Notification';\nimport NotificationServiceUpdateEventTypeBehaviors = Operations.NotificationServiceUpdateEventTypeBehaviors;\n\nexport const linkBehaviorGroupAction = (notificationId: UUID, behaviorGroupIds: Array<UUID>) => {\n    return NotificationServiceUpdateEventTypeBehaviors.actionCreator({\n        body: behaviorGroupIds,\n        eventTypeId: notificationId\n    });\n};\n","import { addDangerNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport produce, { castDraft } from 'immer';\nimport pLimit from 'p-limit';\nimport * as React from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { usePrevious } from 'react-use';\n\nimport { getBehaviorGroupByNotificationAction } from '../../../services/Notifications/GetBehaviorGroupByNotificationId';\nimport { linkBehaviorGroupAction } from '../../../services/Notifications/LinkBehaviorGroup';\nimport { toBehaviorGroup } from '../../../types/adapters/BehaviorGroupAdapter';\nimport { BehaviorGroup, Notification, NotificationBehaviorGroup, UUID } from '../../../types/Notification';\nimport { findById } from '../../../utils/Find';\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport type BehaviorGroupNotificationRow = NotificationBehaviorGroup & {\n    readonly loadingActionStatus: 'loading' | 'done' | 'error';\n    readonly behaviors: ReadonlyArray<BehaviorGroup>;\n} & (\n    {\n        readonly isEditMode: false;\n    } |\n    {\n        readonly isEditMode: true;\n        readonly oldBehaviors: ReadonlyArray<BehaviorGroup>;\n    }\n);\n\nconst getNotification = <T extends ReadonlyArray<BehaviorGroupNotificationRow>>(\n    rows: T,\n    notificationId: UUID): T[number] => {\n    const notification = rows.find(findById(notificationId));\n    if (!notification) {\n        throw new Error('Notification not found in rows');\n    }\n\n    return notification;\n};\n\nexport const useBehaviorGroupNotificationRows = (notifications: Array<Notification>) => {\n    const [ notificationRows, setNotificationRows ] = React.useState<Array<BehaviorGroupNotificationRow>>([]);\n    const prevNotificationInput = usePrevious(notifications);\n    const { query } = React.useContext(ClientContext);\n    const [ limit ] = React.useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const removeBehaviorGroup = React.useCallback((notificationId: UUID, behaviorGroupId: UUID) => {\n        setNotificationRows(produce(draft => {\n            const notification = getNotification(draft, notificationId);\n            const index = notification.behaviors.findIndex(findById(behaviorGroupId));\n            if (index === -1) {\n                throw new Error('Behavior group not found in rows');\n            }\n\n            notification.behaviors.splice(index, 1);\n        }));\n    }, [ setNotificationRows ]);\n\n    const updateBehaviorGroups = React.useCallback((behaviorGroups: ReadonlyArray<BehaviorGroup>) => {\n        setNotificationRows(produce(draft => {\n            for (const content of draft) {\n                content.behaviors = castDraft(content.behaviors.map(ob => behaviorGroups.find(nb => nb.id === ob.id) || ob));\n            }\n        }));\n    }, [ setNotificationRows ]);\n\n    const updateBehaviorGroupLink = React.useCallback((notificationId: UUID, behaviorGroup: BehaviorGroup, linkBehavior: boolean) => {\n        if (linkBehavior) {\n            setNotificationRows(produce(draft => {\n                const notification = getNotification(draft, notificationId);\n                notification.behaviors.push({\n                    ...castDraft(behaviorGroup)\n                });\n            }));\n        } else {\n            removeBehaviorGroup(notificationId, behaviorGroup.id);\n        }\n    }, [ removeBehaviorGroup, setNotificationRows ]);\n\n    const setEditMode = React.useCallback(async (notificationId: UUID, command: 'edit' | 'finish' | 'cancel') => {\n\n        if (command === 'finish') {\n            const notification = getNotification(notificationRows, notificationId);\n            if (notification.isEditMode) {\n                setNotificationRows(produce(draft => {\n                    const draftNotification = getNotification(draft, notificationId);\n                    draftNotification.loadingActionStatus = 'loading';\n                }));\n\n                const response = await query(linkBehaviorGroupAction(notificationId, notification.behaviors.map(b => b.id)));\n                if (response.payload?.status === 200) {\n                    setNotificationRows(produce(draft => {\n                        const draftNotification = getNotification(draft, notificationId);\n                        draftNotification.isEditMode = false;\n                        draftNotification.loadingActionStatus = 'done';\n                    }));\n                } else {\n                    addDangerNotification(\n                        'Saving behavior',\n                        <>\n                            There was an error saving the behavior\n                             of <b>{notification.applicationDisplayName} - {notification.eventTypeDisplayName}</b>.\n                        </>\n                    );\n                    setNotificationRows(produce(draft => {\n                        const draftNotification = getNotification(draft, notificationId);\n                        draftNotification.isEditMode = true;\n                        draftNotification.loadingActionStatus = 'done';\n                    }));\n                }\n            }\n        } else {\n            setNotificationRows(produce(draft => {\n                const notification = getNotification(draft, notificationId);\n\n                if (notification.isEditMode && command === 'cancel') {\n                    notification.behaviors = notification.oldBehaviors;\n                }\n\n                notification.isEditMode = command === 'edit';\n                if (notification.isEditMode) {\n                    notification.oldBehaviors = notification.behaviors;\n                }\n            }));\n        }\n    }, [ setNotificationRows, notificationRows, query ]);\n\n    const startEditMode = React.useCallback((notificationId: UUID) => {\n        setEditMode(notificationId, 'edit');\n    }, [ setEditMode ]);\n\n    const finishEditMode = React.useCallback((notificationId: UUID) => {\n        setEditMode(notificationId, 'finish');\n    }, [ setEditMode ]);\n\n    const cancelEditMode = React.useCallback((notificationId: UUID) => {\n        setEditMode(notificationId, 'cancel');\n    }, [ setEditMode ]);\n\n    React.useEffect(() => {\n        if (notifications !== prevNotificationInput) {\n            setNotificationRows(_prev => notifications.map(notification => ({\n                ...notification,\n                loadingActionStatus: 'loading',\n                behaviors: [],\n                isEditMode: false\n            })));\n\n            if (notifications) {\n                limit.clearQueue();\n\n                notifications.map(notification => notification.id).forEach(notificationId => {\n                    limit(() => query(getBehaviorGroupByNotificationAction(notificationId))).then(response => {\n                        setNotificationRows(produce(draft => {\n                            const draftNotification = getNotification(draft, notificationId);\n                            if (response.payload?.status === 200) {\n                                draftNotification.loadingActionStatus = 'done';\n                                draftNotification.behaviors = response.payload.value.map(toBehaviorGroup).map(bg => ({\n                                    ...bg,\n                                    isLoading: false,\n                                    actions: castDraft(bg.actions)\n                                }));\n                            } else {\n                                draftNotification.loadingActionStatus = 'error';\n                                draftNotification.behaviors = [];\n                            }\n                        }));\n                    });\n                });\n            }\n        }\n\n    }, [ notifications, limit, query, prevNotificationInput, setNotificationRows ]);\n\n    return {\n        rows: notificationRows,\n        updateBehaviorGroupLink,\n        updateBehaviorGroups,\n        startEditMode,\n        finishEditMode,\n        cancelEditMode\n    };\n};\n","import { global_spacer_xl } from '@patternfly/react-tokens';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { ExporterType } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { useAppContext } from '../../../app/AppContext';\nimport { NotificationsBehaviorGroupTable } from '../../../components/Notifications/NotificationsBehaviorGroupTable';\nimport { NotificationsToolbar } from '../../../components/Notifications/Toolbar';\nimport { useListNotifications } from '../../../services/useListNotifications';\nimport { BehaviorGroup, Facet, NotificationBehaviorGroup, UUID } from '../../../types/Notification';\nimport { BehaviorGroupsSection } from './BehaviorGroupsSection';\nimport { useBehaviorGroupContent } from './useBehaviorGroupContent';\nimport { useBehaviorGroupNotificationRows } from './useBehaviorGroupNotificationRows';\nimport { useNotificationFilter } from './useNotificationFilter';\nimport { useNotificationPage } from './useNotificationPage';\n\ninterface BundlePageBehaviorGroupContentProps {\n    applications: Array<Facet>;\n    bundle: Facet;\n}\n\nconst behaviorGroupSectionClassName = style({\n    marginBottom: global_spacer_xl.var\n});\n\nconst emptyArray = [];\n\nexport const BundlePageBehaviorGroupContent: React.FunctionComponent<BundlePageBehaviorGroupContentProps> = props => {\n\n    const notificationsFilter = useNotificationFilter(props.applications.map(a => a.displayName.toString()));\n    const behaviorGroupContent = useBehaviorGroupContent(props.bundle.id);\n\n    const { rbac } = useAppContext();\n\n    const onExport = React.useCallback((type: ExporterType) => {\n        console.log('Export to', type);\n    }, []);\n\n    const notificationPage = useNotificationPage(notificationsFilter.debouncedFilters, props.bundle, props.applications, 10);\n    const useNotifications = useListNotifications(notificationPage.page);\n    const {\n        rows: notificationRows,\n        updateBehaviorGroupLink,\n        startEditMode,\n        finishEditMode,\n        cancelEditMode,\n        updateBehaviorGroups\n    } = useBehaviorGroupNotificationRows(\n        useNotifications.payload?.type === 'eventTypesArray' ? useNotifications.payload.value : emptyArray\n    );\n\n    const behaviorGroups = !behaviorGroupContent.isLoading && !behaviorGroupContent.hasError ? behaviorGroupContent.content : undefined;\n\n    React.useEffect(() => {\n        if (behaviorGroups) {\n            updateBehaviorGroups(behaviorGroups);\n        }\n    }, [ behaviorGroups, updateBehaviorGroups ]);\n\n    const onBehaviorGroupLinkUpdated = React.useCallback((\n        notification: NotificationBehaviorGroup,\n        behaviorGroup: BehaviorGroup,\n        isLinked: boolean) => {\n        if (behaviorGroup) {\n            updateBehaviorGroupLink(notification.id, behaviorGroup, isLinked);\n        }\n    }, [ updateBehaviorGroupLink ]);\n\n    const onStartEditing = React.useCallback((notificationId: UUID) => {\n        startEditMode(notificationId);\n    }, [ startEditMode ]);\n\n    const onFinishEditing = React.useCallback((notificationId: UUID) => {\n        finishEditMode(notificationId);\n    }, [ finishEditMode ]);\n\n    const onCancelEditing = React.useCallback((notificationId: UUID) => {\n        cancelEditMode(notificationId);\n    }, [ cancelEditMode ]);\n\n    return (\n        <Section>\n            <div className={ behaviorGroupSectionClassName }>\n                <BehaviorGroupsSection\n                    bundleId={ props.bundle.id }\n                    behaviorGroupContent={ behaviorGroupContent }\n                />\n            </div>\n            <NotificationsToolbar\n                filters={ notificationsFilter.filters }\n                setFilters={ notificationsFilter.setFilters }\n                clearFilter={ notificationsFilter.clearFilter }\n                appFilterOptions={ props.applications }\n                onExport={ onExport }\n            >\n                <NotificationsBehaviorGroupTable\n                    notifications={ notificationRows }\n                    behaviorGroupContent={ behaviorGroupContent }\n                    onBehaviorGroupLinkUpdated={ onBehaviorGroupLinkUpdated }\n                    onStartEditing={ rbac.canWriteNotifications ? onStartEditing : undefined }\n                    onFinishEditing={ rbac.canWriteNotifications ? onFinishEditing : undefined }\n                    onCancelEditing={ rbac.canWriteNotifications ? onCancelEditing : undefined }\n                />\n            </NotificationsToolbar>\n        </Section>\n    );\n};\n","import { useFilters, useUrlStateMultipleOptions, useUrlStateString } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { useMemo } from 'react';\n\nimport { NotificationFilterColumn } from '../../../components/Notifications/Filter';\n\nconst DEBOUNCE_MS = 250;\n\nexport const useNotificationFilter = (initialAppOptions: Array<string>, debounce = DEBOUNCE_MS) => {\n    const useStateFactory = useMemo(() => {\n        const useUrlStateName = (defaultValue?: string) => useUrlStateString('name', defaultValue);\n        const useUrlStateApplication = (defaultValue?: Array<string>) => useUrlStateMultipleOptions(\n            'app',\n            initialAppOptions,\n            defaultValue\n        );\n        const useUrlStateAction = (defaultValue?: string) => useUrlStateString('action', defaultValue);\n\n        const useStateFactoryInternal = (column: NotificationFilterColumn) => {\n            switch (column) {\n                case NotificationFilterColumn.NAME:\n                    return useUrlStateName;\n                case NotificationFilterColumn.ACTION:\n                    return useUrlStateAction;\n                case NotificationFilterColumn.APPLICATION:\n                    return useUrlStateApplication;\n                default:\n                    assertNever(column);\n            }\n        };\n\n        return useStateFactoryInternal;\n        // This is an init param, so it doesn't need to recompute on change.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return useFilters(NotificationFilterColumn, debounce, useStateFactory);\n};\n","import * as React from 'react';\n\nimport { useGetBehaviorGroups } from '../../../services/Notifications/GetBehaviorGroups';\nimport { BehaviorGroup, UUID } from '../../../types/Notification';\n\nexport type BehaviorGroupContent = {\n    isLoading: true;\n    reload: () => void;\n} | {\n    isLoading: false;\n    hasError: true;\n    error: string;\n    reload: () => void;\n} | {\n    isLoading: false;\n    hasError: false;\n    content: ReadonlyArray<BehaviorGroup>;\n    reload: () => void;\n}\n\nexport const useBehaviorGroupContent = (bundleId: UUID) => {\n    const behaviorGroups = useGetBehaviorGroups(bundleId);\n\n    return React.useMemo<BehaviorGroupContent>(() => {\n        const payload = behaviorGroups.payload;\n        const error = behaviorGroups.errorObject;\n        const loading = behaviorGroups.loading;\n        const reload = behaviorGroups.query;\n\n        if (loading) {\n            return {\n                isLoading: true,\n                reload\n            };\n        }\n\n        if (payload?.status === 200) {\n            return {\n                isLoading: false,\n                hasError: false,\n                content: payload.value,\n                reload\n            };\n        }\n\n        return {\n            isLoading: false,\n            hasError: true,\n            error: error.toString(),\n            reload\n        };\n\n    }, [ behaviorGroups.payload, behaviorGroups.loading, behaviorGroups.errorObject, behaviorGroups.query ]);\n};\n","import { arrayValue, Filter, Operator, Page, Sort } from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { NotificationFilterColumn, NotificationFilters } from '../../../components/Notifications/Filter';\nimport { Facet } from '../../../types/Notification';\n\nexport interface UseNotificationPageReturn {\n    page: Page;\n    changePage: (page: number) => void;\n    changeItemsPerPage: (perPage: number) =>  void;\n}\n\nexport const useNotificationPage = (\n    filters: NotificationFilters,\n    bundle: Facet,\n    appFilterOptions: Array<Facet>,\n    defaultPerPage: number,\n    sort?: Sort): UseNotificationPageReturn => {\n    const [ currentPage, setCurrentPage ] = useState<number>(1);\n    const [ itemsPerPage, setItemsPerPage ] = useState<number>(defaultPerPage);\n\n    useEffect(() => setCurrentPage(1), [ setCurrentPage, filters ]);\n\n    const page = useMemo(() => {\n        const filter = new Filter();\n\n        const appFilter = filters[NotificationFilterColumn.APPLICATION];\n\n        if (appFilter) {\n            const appIds: Array<string> = [];\n            for (const appName of arrayValue(appFilter)) {\n                const filterOption = appFilterOptions.find(a => a.displayName === appName);\n                if (filterOption) {\n                    appIds.push(filterOption.id);\n                }\n            }\n\n            filter.and('applicationId', Operator.EQUAL, appIds);\n        }\n\n        filter.and('bundleId', Operator.EQUAL, bundle.id);\n\n        return Page.of(currentPage, itemsPerPage, filter, sort);\n    }, [ currentPage, itemsPerPage, sort, filters, appFilterOptions, bundle ]);\n\n    const changePage = useCallback((page: number) => setCurrentPage(page), [ setCurrentPage ]);\n    const changeItemsPerPage = useCallback((perPage: number) => {\n        setCurrentPage(1);\n        setItemsPerPage(perPage);\n    }, [ setCurrentPage ]);\n\n    return {\n        page,\n        changePage,\n        changeItemsPerPage\n    };\n};\n","import { Split, SplitItem } from '@patternfly/react-core';\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport {\n    getInsights,\n    InsightsEnvDetector,\n    RenderIfFalse\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { default as React } from 'react';\nimport { Link } from 'react-router-dom';\nimport { style } from 'typestyle';\n\nimport { ButtonLink } from '../../../components/ButtonLink';\nimport { Messages } from '../../../properties/Messages';\nimport { linkTo } from '../../../Routes';\nimport { stagingAndProdStable } from '../../../types/Environments';\nimport { Facet } from '../../../types/Notification';\nimport { BundlePageBehaviorGroupContent } from './BundlePageBehaviorGroupContent';\n\ninterface NotificationListBundlePageProps {\n    bundle: Facet;\n    applications: Array<Facet>;\n}\n\nconst displayInlineClassName = style({\n    display: 'inline'\n});\n\nexport const NotificationListBundlePage: React.FunctionComponent<NotificationListBundlePageProps> = (props) => {\n\n    const pageHeaderTitleProps = {\n        className: displayInlineClassName,\n        title: Messages.pages.notifications.list.title\n    };\n\n    const eventLogPageUrl = React.useMemo(() => linkTo.eventLog(props.bundle.name), [ props.bundle.name ]);\n\n    return (\n        <>\n            <PageHeader>\n                <Split>\n                    <SplitItem isFilled><PageHeaderTitle { ...pageHeaderTitleProps } /></SplitItem>\n                    <SplitItem>\n                        <InsightsEnvDetector insights={ getInsights() } onEnvironment={ stagingAndProdStable }>\n                            <RenderIfFalse>\n                                <Link component={ ButtonLink } to={ eventLogPageUrl } >{ Messages.pages.notifications.list.viewHistory }</Link>\n                            </RenderIfFalse>\n                        </InsightsEnvDetector>\n                    </SplitItem>\n                </Split>\n            </PageHeader>\n            <Main>\n                <BundlePageBehaviorGroupContent applications={ props.applications } bundle={ props.bundle } />\n            </Main>\n        </>\n    );\n};\n","import { AppSkeleton } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { defaultBundleName, RedirectToDefaultBundle } from '../../../components/RedirectToDefaultBundle';\nimport { useGetApplicationsLazy } from '../../../services/Notifications/GetApplications';\nimport { useGetBundles } from '../../../services/Notifications/GetBundles';\nimport { Facet } from '../../../types/Notification';\nimport { NotificationListBundlePage } from './BundlePage';\n\ninterface NotificationListPageParams {\n    bundleName: string;\n}\n\nenum BundleStatus {\n    LOADING,\n    NOT_FOUND,\n    FAILED_TO_LOAD\n}\n\nconst isBundleStatus = (bundle: Facet | BundleStatus): bundle is BundleStatus => typeof bundle === 'number';\n\nexport const NotificationsListPage: React.FunctionComponent = () => {\n\n    const params = useParams<NotificationListPageParams>();\n\n    const getBundles = useGetBundles();\n    const getApplications = useGetApplicationsLazy();\n\n    const bundle: Facet | BundleStatus = useMemo(() => {\n        if (getBundles.payload?.status === 200) {\n            return getBundles.payload.value.find(b => b.name === params.bundleName) ?? BundleStatus.NOT_FOUND;\n        } else if (getBundles.payload) {\n            return BundleStatus.FAILED_TO_LOAD;\n        }\n\n        return BundleStatus.LOADING;\n    }, [ getBundles.payload, params.bundleName ]);\n\n    React.useEffect(() => {\n        const query = getApplications.query;\n        if (!isBundleStatus(bundle)) {\n            query(bundle.name);\n        }\n    }, [ bundle, getApplications.query ]);\n\n    const applications: Array<Facet> | null | undefined = useMemo(\n        () => {\n            if (getApplications.payload) {\n                return getApplications.payload.status === 200 ? getApplications.payload.value : null;\n            }\n\n            return undefined;\n        },\n        [ getApplications.payload ]\n    );\n\n    if (bundle === BundleStatus.NOT_FOUND) {\n        if (params.bundleName === defaultBundleName) {\n            throw new Error('Default bundle information not found');\n        }\n\n        return <RedirectToDefaultBundle />;\n    }\n\n    if (bundle === BundleStatus.FAILED_TO_LOAD) {\n        throw new Error('Unable to load bundle information');\n    }\n\n    if (applications === null) {\n        throw new Error('Unable to load application facets');\n    }\n\n    if (bundle === BundleStatus.LOADING || !applications) {\n        return (\n            <AppSkeleton />\n        );\n    }\n\n    return (\n        <NotificationListBundlePage\n            bundle={ bundle }\n            applications={ applications }\n        />\n    );\n};\n","import { getInsights } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { matchPath, Route, RouteProps, Switch, useHistory } from 'react-router';\n\nimport { RedirectToDefaultBundle } from './components/RedirectToDefaultBundle';\nimport { ErrorPage } from './pages/Error/Page';\nimport { ConnectedIntegrationsListPage } from './pages/Integrations/List/Page';\nimport { EventLogPage } from './pages/Notifications/EventLog/EventLogPage';\nimport { NotificationsListPage } from './pages/Notifications/List/Page';\nimport { getBaseName } from './utils/Basename';\n\ninterface Path {\n    path: string;\n    component: React.ComponentType;\n}\n\nexport const linkTo = {\n    integrations: () => '/integrations',\n    notifications: (bundle: string) => `/notifications/${bundle}`,\n    eventLog: (bundle?: string) => `/notifications/eventlog${bundle ? `?bundle=${bundle}` : ''}`\n};\n\nconst EmptyPage: React.FunctionComponent = () => null;\n\nconst pathRoutes: Path[] = [\n    {\n        path: '/',\n        component: EmptyPage\n    },\n    {\n        path: linkTo.integrations(),\n        component: ConnectedIntegrationsListPage\n    },\n    {\n        path: linkTo.eventLog(),\n        component: EventLogPage\n    },\n    {\n        path: linkTo.notifications(':bundleName'),\n        component: NotificationsListPage\n    }\n];\n\ntype InsightsRouteProps = RouteProps;\n\nconst InsightsRoute: React.FunctionComponent<InsightsRouteProps> = (props: InsightsRouteProps) => {\n    return (\n        <ErrorPage>\n            <Route { ...props } />\n        </ErrorPage>\n    );\n};\n\nexport const Routes: React.FunctionComponent = () => {\n    const insights = getInsights();\n    const history = useHistory();\n\n    useEffect(() => {\n        const on = insights.chrome.on;\n        if (on) {\n            return on('APP_NAVIGATION', event => {\n                const pathname = event.domEvent.href;\n                const base = getBaseName(pathname);\n                const relative = pathname.substr(base.length);\n\n                for (const route of pathRoutes) {\n                    if (matchPath(relative, {\n                        path: route.path,\n                        exact: true\n                    })) {\n                        if (history.location.pathname !== relative) {\n                            history.replace(relative);\n                        }\n\n                        break;\n                    }\n                }\n\n            });\n        }\n    }, [ insights.chrome.on, history ]);\n\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <InsightsRoute\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                    exact={ true }\n                />\n            ))}\n            <RedirectToDefaultBundle />\n        </Switch>\n    );\n};\n","import {\n    useFilters,\n    useUrlStateMultipleOptions,\n    useUrlStateString\n} from '@redhat-cloud-services/insights-common-typescript';\nimport assertNever from 'assert-never';\nimport { useMemo } from 'react';\n\nimport { EventLogFilterColumn } from '../../../components/Notifications/EventLog/EventLogFilter';\n\nconst DEBOUNCE_MS = 250;\n\nexport const useEventLogFilter = (debounce = DEBOUNCE_MS) => {\n    const useStateFactory = useMemo(() => {\n\n        const useApplication = () => useUrlStateMultipleOptions('application');\n        const useBundle = () => useUrlStateMultipleOptions('bundle');\n        const useEvent = () => useUrlStateString('event');\n\n        return (column: EventLogFilterColumn) => {\n            switch (column) {\n                case EventLogFilterColumn.APPLICATION:\n                    return useApplication;\n                case EventLogFilterColumn.BUNDLE:\n                    return useBundle;\n                case EventLogFilterColumn.EVENT:\n                    return useEvent;\n                default:\n                    assertNever(column);\n            }\n        };\n    }, []);\n\n    return useFilters(EventLogFilterColumn, debounce, useStateFactory);\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    only_admins: boolean;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'MAINTENANCE' | 'UP';\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'MAINTENANCE', 'UP' ]);\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n}\n\nexport namespace Operations {\n  // GET /api/notifications/v1.0/status\n  export namespace StatusServiceGetCurrentStatus {\n    export type Payload =\n      | ValidatedResponse<'CurrentStatus', 200, Schemas.CurrentStatus>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/notifications/v1.0/status';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.CurrentStatus, 'CurrentStatus', 200)\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import { fromUtc } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { Server, ServerStatus } from '../Server';\n\nexport const toServer = (currentStatus: Schemas.CurrentStatus): Server => {\n    if (currentStatus.status === Schemas.Status.Enum.MAINTENANCE) {\n        return {\n            status: ServerStatus.MAINTENANCE,\n            from: fromUtc(currentStatus.start_time ? new Date(currentStatus.start_time) : new Date()),\n            to: fromUtc(currentStatus.end_time ? new Date(currentStatus.end_time) : new Date())\n        };\n    }\n\n    return {\n        status: ServerStatus.RUNNING\n    };\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiPrivate';\nimport { toServer } from '../types/adapters/ServerAdapter';\n\nconst adapter = validationResponseTransformer((payload: Operations.StatusServiceGetCurrentStatus.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'ServerStatus',\n            200,\n            toServer(payload.value),\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useGetServerStatus = () => {\n    return useTransformQueryResponse(\n        useQuery(Operations.StatusServiceGetCurrentStatus.actionCreator()),\n        adapter\n    );\n};\n","import './App.scss';\n\nimport { Maintenance, NotAuthorized } from '@redhat-cloud-services/frontend-components';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications';\nimport { AppSkeleton, toUtc } from '@redhat-cloud-services/insights-common-typescript';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\n\nimport Config from '../config/Config';\nimport messages from '../properties/DefinedMessages';\nimport { Routes } from '../Routes';\nimport { ServerStatus } from '../types/Server';\nimport { getSubApp } from '../utils/Basename';\nimport { AppContext } from './AppContext';\nimport { useApp } from './useApp';\n\nconst utcFormat = 'HH:mm';\nconst regularFormat = 'hh:mma';\nconst timezoneFormat = 'O';\n\nconst App: React.ComponentType = () => {\n    const intl = useIntl();\n    const { rbac, server, isOrgAdmin } = useApp();\n    const location = useLocation();\n\n    const serviceName = React.useMemo(() => {\n        switch (getSubApp(location.pathname)) {\n            case Config.integrations.subAppId:\n                return intl.formatMessage(messages.integrations);\n            case Config.notifications.subAppId:\n                return intl.formatMessage(messages.notifications);\n            default:\n                return '';\n        }\n    }, [ intl, location.pathname ]);\n\n    const hasReadPermissions = React.useMemo(() => {\n        const appId = getSubApp(location.pathname);\n        switch (appId) {\n            case Config.integrations.subAppId:\n                return rbac?.canReadIntegrationsEndpoints;\n            case Config.notifications.subAppId:\n                return rbac?.canReadNotifications;\n        }\n\n        return false;\n    }, [ rbac, location.pathname ]);\n\n    if (!rbac || !server) {\n        return (\n            <AppSkeleton />\n        );\n    }\n\n    if (server.status === ServerStatus.MAINTENANCE) {\n\n        const utcStartTime = format(toUtc(server.from), utcFormat);\n        const utcEndTime = format(toUtc(server.to), utcFormat);\n        const startTime = format(server.from, regularFormat);\n        const endTime = format(server.to, regularFormat);\n        const timezone = format(server.to, timezoneFormat);\n\n        return <Maintenance\n            utcStartTime={ utcStartTime }\n            utcEndTime={ utcEndTime }\n            startTime={ startTime }\n            endTime={ endTime }\n            timeZone={ timezone }\n        />;\n    }\n\n    return (\n        <AppContext.Provider value={ {\n            rbac,\n            server,\n            isOrgAdmin: !!isOrgAdmin\n        } }>\n            { hasReadPermissions ? (\n                <>\n                    <NotificationsPortal />\n                    <Routes />\n                </>\n            ) : (\n                <NotAuthorized serviceName={ serviceName } />\n            ) }\n        </AppContext.Provider>\n    );\n};\n\nexport default App;\n","import { fetchRBAC, Rbac, waitForInsights } from '@redhat-cloud-services/insights-common-typescript';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Config from '../config/Config';\nimport { useGetServerStatus } from '../services/GetServerStatus';\nimport { Server } from '../types/Server';\nimport { AppContext } from './AppContext';\n\nexport const useApp = (): Partial<AppContext> => {\n\n    const history = useHistory();\n    const serverStatus = useGetServerStatus();\n    const [ rbac, setRbac ] = useState<Rbac>();\n    const [ server, setServer ] = useState<Server>();\n    const [ isOrgAdmin, setOrgAdmin ] = useState<boolean>(false);\n\n    useEffect(() => {\n        waitForInsights().then((insights) => {\n            insights.chrome.init();\n            const appId = insights.chrome.getApp();\n            switch (appId) {\n                case Config.notifications.subAppId:\n                    document.title = Config.notifications.title;\n                    break;\n                case Config.integrations.subAppId:\n                    document.title = Config.integrations.title;\n                    break;\n            }\n\n            insights.chrome.identifyApp(appId);\n        });\n    }, [ history ]);\n\n    useEffect(() => {\n        if (serverStatus.payload?.type === 'ServerStatus') {\n            setServer(serverStatus.payload.value);\n        }\n    }, [ serverStatus.payload ]);\n\n    useEffect(() => {\n        waitForInsights().then(insights => {\n            insights.chrome.auth.getUser().then(user => {\n                setOrgAdmin(user.identity.user.is_org_admin);\n                fetchRBAC(`${Config.notifications.subAppId},${Config.integrations.subAppId}`).then(setRbac);\n            });\n        });\n    }, []);\n\n    return {\n        rbac: rbac ? {\n            canWriteNotifications: rbac.hasPermission('notifications', 'notifications', 'write'),\n            canReadNotifications: rbac.hasPermission('notifications', 'notifications', 'read'),\n            canWriteIntegrationsEndpoints: rbac.hasPermission('integrations', 'endpoints', 'write'),\n            canReadIntegrationsEndpoints: rbac.hasPermission('integrations', 'endpoints', 'read')\n        } : undefined,\n        isOrgAdmin,\n        server\n    };\n};\n","import { getType } from 'typesafe-actions';\n\nimport { NotificationAppAction } from '../actions/NotificationAppAction';\nimport { SavedNotificationScopeActions } from '../actions/SavedNotificationScopeAction';\nimport { SavedNotificationScopeState, Status } from '../types/SavedNotificationScopeTypes';\n\nexport const INITIAL_STATE: SavedNotificationScopeState = null;\n\nexport const SavedNotificationScopeReducer = (\n    state: SavedNotificationScopeState = INITIAL_STATE,\n    action: NotificationAppAction): SavedNotificationScopeState => {\n    switch (action.type) {\n        case getType(SavedNotificationScopeActions.setIntegration):\n            return {\n                integration: action.payload,\n                status: Status.DONE\n            };\n        case getType(SavedNotificationScopeActions.start):\n            if (!state) {\n                return state;\n            }\n\n            return {\n                ...state,\n                status: Status.LOADING\n            };\n        case getType(SavedNotificationScopeActions.finish):\n            if (!state) {\n                return state;\n            }\n\n            return {\n                integration: { ...state.integration, isEnabled: action.payload },\n                status: Status.DONE\n            };\n        case getType(SavedNotificationScopeActions.unset):\n            return null;\n        default:\n            return state;\n    }\n};\n","import { initStore, restoreStore } from '@redhat-cloud-services/insights-common-typescript';\nimport { Middleware } from 'redux';\n\nimport { INITIAL_STATE as SNS_INITIAL_STATE, SavedNotificationScopeReducer } from './reducers/SavedNotificationScopeReducer';\nimport { NotificationAppState } from './types/NotificationAppState';\n\nexport const createStore = (...middleware: Middleware[]) => {\n    return initStore(\n        {\n            savedNotificationScope: SNS_INITIAL_STATE\n        } as NotificationAppState,\n        {\n            savedNotificationScope: SavedNotificationScopeReducer\n        },\n        ...middleware);\n};\n\nexport const resetStore = () => restoreStore();\n","import { ActionType, createAction } from 'typesafe-actions';\n\nimport { IntegrationRef } from '../../types/Notification';\n\nexport enum SavedNotificationScopeKeys {\n    SET_INTEGRATION = 'SET_INTEGRATION',\n    START = 'START',\n    FINISH = 'FINISH',\n    UNSET = 'UNSET'\n}\n\nexport const SavedNotificationScopeActions = {\n    setIntegration: createAction(SavedNotificationScopeKeys.SET_INTEGRATION)<IntegrationRef>(),\n    start: createAction(SavedNotificationScopeKeys.START)(),\n    finish: createAction(SavedNotificationScopeKeys.FINISH)<boolean>(),\n    unset: createAction(SavedNotificationScopeKeys.UNSET)()\n};\n\nexport type SavedNotificationScopeAction = ActionType<typeof SavedNotificationScopeActions>;\n","import { IntegrationRef } from '../../types/Notification';\n\nexport enum Status {\n    LOADING,\n    DONE\n}\n\nexport type SavedNotificationScopeState = {\n    integration: IntegrationRef;\n    status: Status;\n} | null;\n","// This is a custom getBaseName that doesn't add the appId\n// The reason is that this 'app' is in 2 menus (integrations and notifications), so is easier to just add that into our\n// paths for easier navigation.\nexport const getBaseName = (pathname: string) => {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n};\n\nexport const getSubApp = (pathname: string) => {\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        return pathName[1];\n    }\n\n    return pathName[0];\n};\n"],"sourceRoot":""}
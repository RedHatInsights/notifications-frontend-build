{"version":3,"file":"js/7474.99544e70a5cd788eb7f4.js","mappings":"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","sources":["webpack:///./src/app/IntegrationsApp.tsx","webpack:///./src/IntegrationsEntry.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts"],"sourcesContent":["\nimport './App.scss';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { NotificationsPortal } from '../components/Store/NotificationsPortal';\nimport IntegrationsList from '../pages/Integrations/List/List';\nimport { AppContext } from './AppContext';\nimport { RbacGroupContextProvider } from './rbac/RbacGroupContextProvider';\nimport { useApp } from './useApp';\n\nconst IntegrationsApp: React.ComponentType = () => {\n\n    const { rbac, server, isOrgAdmin } = useApp();\n\n    return (rbac && server) ?\n        <AppContext.Provider value={ {\n            rbac,\n            server,\n            isOrgAdmin: !!isOrgAdmin\n        } }>\n            <RbacGroupContextProvider>\n                <NotificationsPortal />\n                <IntegrationsList />\n            </RbacGroupContextProvider>\n        </AppContext.Provider>\n        :\n        <Bullseye>\n            <Spinner size='xl' />\n        </Bullseye>\n    ;\n};\n\nexport default IntegrationsApp;\n","import { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport {\n    createFetchingClient,\n    getInsights\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\n\nimport messages from '../locales/data.json';\nimport IntegrationsApp from './app/IntegrationsApp';\nimport { AppEntryProps } from './AppEntry';\nimport { getNotificationsRegistry } from './store/Store';\n\nenableMapSet();\n\nconst IntegrationsEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n\n    const client = React.useMemo(() => createFetchingClient(getInsights, {\n        responseInterceptors: [ validateSchemaResponseInterceptor ]\n    }), []);\n\n    const store = React.useMemo(() => {\n        const registry = props.logger ? getNotificationsRegistry(props.logger) : getNotificationsRegistry();\n        return registry.getStore();\n    }, [ props.logger ]);\n\n    return (\n        <IntlProvider locale={ navigator.language.slice(0, 2) } messages={ messages } onError={ console.log }>\n            <Provider store={ store }>\n                <ClientContextProvider client={ client }>\n                    <IntegrationsApp />\n                </ClientContextProvider>\n            </Provider>\n        </IntlProvider>\n    );\n};\n\nexport default IntegrationsEntry;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n    id: UUID;\n    applicationDisplayName: string;\n    eventTypeDisplayName: string;\n}\n\nexport interface Notification extends EventType {\n    actions?: Array<Action>;\n    useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n    readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<UserIntegration, 'id' | 'name' | 'type' | 'isEnabled'>\n\nexport interface DefaultNotificationBehavior {\n    actions: Array<Action>;\n}\n\nexport interface ActionBase {\n    type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n    type: NotificationType.INTEGRATION;\n    integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n    type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n    recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n    action.type === NotificationType.EMAIL_SUBSCRIPTION || action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (action: Action): action is ActionIntegration =>\n    action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n    EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n    DRAWER = 'DRAWER',\n    INTEGRATION = 'INTEGRATION'\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n    readonly id: UUID;\n    readonly actions: ReadonlyArray<Action>;\n    readonly events: ReadonlyArray<EventType>;\n    readonly bundleId: UUID,\n    readonly displayName: string;\n    readonly bundleName?: string;\n    readonly isDefault: boolean;\n}\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> & Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<BehaviorGroup | NewBehaviorGroup, 'isDefault'>;\n\nexport type EmailSystemProperties = {\n    type: NotificationType.EMAIL_SUBSCRIPTION;\n    props: {\n        onlyAdmins: boolean;\n        ignorePreferences: false;\n        groupId: undefined | UUID;\n    }\n}\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n    props: {\n        onlyAdmins: boolean;\n        groupId: undefined | UUID;\n        ignorePreferences: false;\n    }\n}\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(properties: SystemProperties): properties is EmailSystemProperties {\n    return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(properties: SystemProperties): properties is DrawerSystemProperties {\n    return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (actions: ReadonlyArray<Action | undefined>): Array<UUID | undefined> => {\n    return actions.map(action => {\n        if (action === undefined) {\n            return [ undefined ];\n        }\n\n        if (action.type === NotificationType.INTEGRATION) {\n            return [ action.integration.id ];\n        } else {\n            return action.recipient.map(r => r.integrationId);\n        }\n    }).flat();\n};\n\nexport const areActionsEqual = (actions1: ReadonlyArray<Action | undefined>, actions2: ReadonlyArray<Action | undefined>): boolean => {\n    if (actions1.length !== actions2.length) {\n        return false;\n    }\n\n    const integrations1 = getIntegrationIds(actions1);\n    const integrations2 = getIntegrationIds(actions2);\n\n    if (integrations1.length !== integrations2.length) {\n        return false;\n    }\n\n    // Order matters here, no sorting.\n    return integrations1.every((val, index) => val === integrations2[index]);\n};\n\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    CamelIntegrationType,\n    Integration,\n    IntegrationAnsible,\n    IntegrationBase,\n    IntegrationCamel,\n    IntegrationDrawer,\n    IntegrationEmailSubscription,\n    IntegrationHttp,\n    IntegrationType, isCamelType,\n    NewIntegration,\n    ServerIntegrationRequest,\n    ServerIntegrationResponse\n} from '../Integration';\n\ninterface ExternalCompositeTyped {\n    type: string;\n    sub_type?: string | null;\n}\n\nexport const getIntegrationType = (serverIntegration: ExternalCompositeTyped): IntegrationType => {\n    for (const integration of Object.values(IntegrationType)) {\n        if (serverIntegration.sub_type) {\n            if (integration === `${serverIntegration.type}:${serverIntegration.sub_type}`) {\n                return integration as IntegrationType;\n            }\n        } else if (integration === serverIntegration.type) {\n            return integration as IntegrationType;\n        }\n    }\n\n    throw new Error(`Unexpected type: ${serverIntegration.type} with subtype: ${serverIntegration.sub_type}`);\n};\n\nconst getEndpointType = (type: IntegrationType): { type: Schemas.EndpointType, subType?: string } => {\n    const splitType = type.split(':', 2);\n    return {\n        type: splitType[0] as Schemas.EndpointType,\n        subType: splitType.length === 2 ? splitType[1] : undefined\n    };\n};\n\ntype NotNullType = {\n    <T>(value: T | undefined | null): T | undefined;\n    <T>(value: T | undefined | null, defaultValue: T): T;\n}\n\nconst notNull: NotNullType = <T>(value: T | undefined | null, defaultValue?: T): T | undefined => value === null ? defaultValue : value;\nconst toSecretToken = (secretToken: string | undefined | null): string | undefined => secretToken === '' ? undefined : notNull(secretToken);\n\nconst toIntegrationWebhook = (\n    integrationBase: IntegrationBase<IntegrationType.WEBHOOK>,\n    properties?: Schemas.WebhookProperties): IntegrationHttp => ({\n    ...integrationBase,\n    url: properties?.url ?? '',\n    sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n    secretToken: toSecretToken(properties?.secret_token),\n    method: properties?.method ?? Schemas.HttpType.Enum.GET\n});\n\nconst toIntegrationAnsible = (\n    integrationBase: IntegrationBase<IntegrationType.ANSIBLE>,\n    properties?: Schemas.WebhookProperties): IntegrationAnsible => ({\n    ...integrationBase,\n    url: properties?.url ?? '',\n    sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n    secretToken: toSecretToken(properties?.secret_token),\n    method: properties?.method ?? Schemas.HttpType.Enum.POST\n});\n\nconst toIntegrationCamel = (\n    integrationBase: IntegrationBase<CamelIntegrationType>,\n    properties?: Schemas.CamelProperties): IntegrationCamel => ({\n    ...integrationBase,\n    url: properties?.url ?? '',\n    sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n    secretToken: toSecretToken(properties?.secret_token),\n    basicAuth: properties?.basic_authentication === null ?\n        undefined\n        :\n        {\n            user: notNull(properties?.basic_authentication?.username, ''),\n            pass: notNull(properties?.basic_authentication?.password, '')\n        },\n    extras: notNull(properties?.extras)\n});\n\nconst toIntegrationEmail = (\n    integrationBase: IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n    properties: Schemas.EmailSubscriptionProperties): IntegrationEmailSubscription => ({\n    ...integrationBase,\n    ignorePreferences: properties.ignore_preferences,\n    groupId: properties.group_id === null ? undefined : properties.group_id,\n    onlyAdmin: properties.only_admins\n});\n\nconst toIntegrationDrawer = (\n    integrationBase: IntegrationBase<IntegrationType.DRAWER>, properties: Schemas.DrawerProperties): IntegrationDrawer => ({\n    ...integrationBase,\n    ignorePreferences: properties.ignore_preferences,\n    groupId: properties.group_id === null ? undefined : properties.group_id,\n    onlyAdmin: properties.only_admins\n});\n\nexport const toIntegration = (serverIntegration: ServerIntegrationResponse): Integration => {\n\n    const integrationBase: IntegrationBase<IntegrationType> = {\n        id: serverIntegration.id || '',\n        name: serverIntegration.name || '',\n        isEnabled: !!serverIntegration.enabled,\n        type: getIntegrationType(serverIntegration),\n        status: serverIntegration.status ?? 'UNKNOWN',\n        serverErrors: serverIntegration.server_errors ?? 0\n    };\n\n    if (isCamelType(integrationBase.type)) {\n        return toIntegrationCamel(\n            integrationBase as IntegrationBase<CamelIntegrationType>,\n            serverIntegration.properties as Schemas.CamelProperties\n        );\n    }\n\n    switch (integrationBase.type) {\n        case IntegrationType.WEBHOOK:\n            return toIntegrationWebhook(\n                integrationBase as IntegrationBase<IntegrationType.WEBHOOK>,\n                serverIntegration.properties as Schemas.WebhookProperties\n            );\n        case IntegrationType.ANSIBLE:\n            return toIntegrationAnsible(\n                integrationBase as IntegrationBase<IntegrationType.ANSIBLE>,\n                serverIntegration.properties as Schemas.WebhookProperties\n            );\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return toIntegrationEmail(\n                integrationBase as IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n                serverIntegration.properties as Schemas.EmailSubscriptionProperties\n            );\n        case IntegrationType.DRAWER:\n            return toIntegrationDrawer(\n                  integrationBase as IntegrationBase<IntegrationType.DRAWER>,\n                  serverIntegration.properties as Schemas.DrawerProperties\n            );\n        default:\n            assertNever(integrationBase.type);\n    }\n};\n\nexport const toIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<Integration> => {\n    return serverIntegrations\n    .map(toIntegration);\n};\n\ntype ServerIntegrationProperties =\n  Schemas.EmailSubscriptionProperties |\n  Schemas.WebhookProperties |\n  Schemas.CamelProperties |\n  Schemas.DrawerProperties;\n\nexport const toIntegrationProperties = (integration: Integration | NewIntegration): ServerIntegrationProperties => {\n\n    const type = integration.type;\n\n    if (isCamelType(type)) {\n        const integrationCamel: IntegrationCamel = integration as IntegrationCamel;\n        return {\n            url: integrationCamel.url,\n            disable_ssl_verification: !integrationCamel.sslVerificationEnabled,\n            secret_token: toSecretToken(integrationCamel.secretToken),\n            basic_authentication: integrationCamel.basicAuth ? {\n                username: integrationCamel.basicAuth.user,\n                password: integrationCamel.basicAuth.pass\n            } : undefined,\n            extras: integrationCamel.extras\n        };\n    }\n\n    switch (type) {\n        case IntegrationType.WEBHOOK:\n            const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n            return {\n                url: integrationHttp.url,\n                method: integrationHttp.method,\n                disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n                secret_token: toSecretToken(integrationHttp.secretToken)\n            };\n        case IntegrationType.ANSIBLE:\n            const integrationAnsible = integration as IntegrationAnsible;\n            return {\n                url: integrationAnsible.url,\n                disable_ssl_verification: !integrationAnsible.sslVerificationEnabled,\n                secret_token: toSecretToken(integrationAnsible.secretToken),\n                method: integrationAnsible.method\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            const integrationEmail: IntegrationEmailSubscription = integration as IntegrationEmailSubscription;\n            return {\n                only_admins: integrationEmail.onlyAdmin,\n                group_id: integrationEmail.groupId,\n                ignore_preferences: integrationEmail.ignorePreferences\n            };\n        case IntegrationType.DRAWER:\n            const integrationDrawer: IntegrationDrawer = integration as IntegrationDrawer;\n            return {\n                only_admins: integrationDrawer.onlyAdmin,\n                group_id: integrationDrawer.groupId,\n                ignore_preferences: integrationDrawer.ignorePreferences\n            };\n        default:\n            assertNever(type);\n    }\n};\n\nexport const toServerIntegrationRequest =\n    (integration: Integration | NewIntegration): ServerIntegrationRequest => {\n        const { type, subType } = getEndpointType(integration.type);\n        return {\n            id: integration.id,\n            name: integration.name,\n            enabled: integration.isEnabled,\n            type,\n            sub_type: subType,\n            description: '',\n            properties: toIntegrationProperties(integration)\n        };\n    };\n"],"names":["rbac","server","isOrgAdmin","useApp","AppContext","value","RbacGroupContextProvider","NotificationsPortal","Bullseye","Spinner","size","props","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","Provider","ClientContextProvider","isActionNotify","action","type","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","properties","isDrawerSystemProperties","getIntegrationIds","actions","map","undefined","integration","id","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","getIntegrationType","serverIntegration","Object","values","sub_type","Error","notNull","defaultValue","toSecretToken","secretToken","toIntegration","integrationBase","name","isEnabled","enabled","status","serverErrors","server_errors","url","sslVerificationEnabled","disable_ssl_verification","secret_token","basicAuth","basic_authentication","user","username","pass","password","extras","toIntegrationCamel","method","toIntegrationWebhook","toIntegrationAnsible","ignorePreferences","ignore_preferences","groupId","group_id","onlyAdmin","only_admins","toIntegrationDrawer","toIntegrations","serverIntegrations","toIntegrationProperties","integrationCamel","integrationHttp","integrationAnsible","integrationEmail","integrationDrawer","toServerIntegrationRequest","subType","splitType","split","getEndpointType","description"],"sourceRoot":""}
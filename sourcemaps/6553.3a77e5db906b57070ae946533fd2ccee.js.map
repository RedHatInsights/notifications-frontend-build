{"version":3,"file":"js/6553.5af75a6da1681731d998.js","mappings":"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","sources":["webpack:///./src/AppEntry.tsx","webpack:///./src/bootstrap.tsx","webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/generated/OpenapiNotifications.ts","webpack:///./src/types/Notification.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts","webpack:///./src/utils/AlertUtils.ts"],"sourcesContent":["import IntlProvider from '@redhat-cloud-services/frontend-components-translations/Provider';\nimport {\n  createFetchingClient,\n  getInsights,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\nimport * as Redux from 'redux';\n\nimport messages from '../locales/data.json';\nimport App from './app/App';\nimport { getNotificationsRegistry } from './store/Store';\n\nexport interface AppEntryProps {\n  logger?: Redux.Middleware;\n}\n\nenableMapSet();\n\nconst AppEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n  const client = React.useMemo(\n    () =>\n      createFetchingClient(getInsights, {\n        responseInterceptors: [validateSchemaResponseInterceptor],\n      }),\n    []\n  );\n\n  const store = React.useMemo(() => {\n    const registry = props.logger\n      ? getNotificationsRegistry(props.logger)\n      : getNotificationsRegistry();\n    return registry.getStore();\n  }, [props.logger]);\n\n  return (\n    <IntlProvider\n      locale={navigator.language.slice(0, 2)}\n      messages={messages}\n      onError={console.log}\n    >\n      <Provider store={store}>\n        <ClientContextProvider client={client}>\n          <App />\n        </ClientContextProvider>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nexport default AppEntry;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport AppEntry from './AppEntry';\n\nReactDOM.render(<AppEntry />, document.getElementById('root'));\n","import {\n  AlertActionLink,\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  Radio,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  TimePicker,\n  Title,\n} from '@patternfly/react-core';\nimport { Alert } from '@patternfly/react-core';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useGetTimePreference } from '../../services/Notifications/GetTimePreference';\nimport { useUpdateTimePreference } from '../../services/Notifications/SaveTimePreference';\nimport { useNotification } from '../../utils/AlertUtils';\n\nconst dropDownClassName = style({\n  width: '280px',\n});\n\nconst alertClassName = style({\n  marginTop: '12px',\n});\n\ninterface TimeConfigState {\n  utcTime: string;\n  baseCustomTime: string;\n  timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n  const [showCustomSelect, setShowCustomSelect] = React.useState(false);\n  const [timeSelect, setTimeSelect] = React.useState<TimeConfigState>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const getTimePreference = useGetTimePreference();\n  const saveTimePreference = useUpdateTimePreference();\n  const { addSuccessNotification, addDangerNotification } = useNotification();\n\n  const timePref = useMemo(() => {\n    if (getTimePreference.status === 200) {\n      return getTimePreference.payload?.value as string;\n    }\n\n    return undefined;\n  }, [getTimePreference.payload?.value, getTimePreference.status]);\n\n  // Set the time preference value once we load it from the server\n  useEffect(() => {\n    if (timePref) {\n      setTimeSelect({\n        baseCustomTime: timePref,\n        utcTime: timePref,\n        timezoneText: undefined,\n      });\n      setShowCustomSelect(timePref !== '00:00:00');\n    }\n  }, [timePref]);\n\n  const handleRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(false);\n    setTimeSelect({\n      utcTime: '00:00',\n      baseCustomTime: '00:00',\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const dropdownItems = timezones.map((tz) => (\n    // Abbr, value, offset, etc are not unique by themselves\n    <DropdownItem key={tz.text}>{tz.text}</DropdownItem>\n  ));\n\n  const handleCustomRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(true);\n  }, []);\n\n  const handleTimePrefSelect = React.useCallback((time) => {\n    setTimeSelect({\n      baseCustomTime: time,\n      utcTime: time,\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const handleTimezoneChange = React.useCallback(\n    (event?: React.SyntheticEvent<HTMLDivElement>) => {\n      if (event?.target) {\n        const target = event.target;\n        const textContent = (target as HTMLElement).textContent;\n        const targetTimezone = timezones.find((t) => t.text === textContent);\n        if (targetTimezone) {\n          setTimeSelect((prev) => {\n            if (prev?.baseCustomTime) {\n              const pieces = prev.baseCustomTime\n                .split(':')\n                .map((t) => parseInt(t));\n              const date = new Date();\n              date.setUTCHours(pieces[0], pieces[1]);\n              // Going from UTC to the timezone\n              const zonedDate = addHours(date, -targetTimezone.offset);\n              const utcHours = zonedDate\n                .getUTCHours()\n                .toString()\n                .padStart(2, '0');\n              const utcMinutes = zonedDate\n                .getUTCMinutes()\n                .toString()\n                .padStart(2, '0');\n\n              return {\n                ...prev,\n                utcTime: `${utcHours}:${utcMinutes}`,\n                timezoneText: targetTimezone.text,\n              };\n            }\n\n            return prev;\n          });\n        }\n      }\n\n      setIsOpen(false);\n    },\n    []\n  );\n\n  const handleButtonSave = React.useCallback(() => {\n    if (timeSelect) {\n      const mutate = saveTimePreference.mutate;\n      mutate({\n        body: timeSelect.utcTime,\n      }).then((response) => {\n        if (response.status === 204) {\n          addSuccessNotification('Action settings saved', '');\n        } else {\n          addDangerNotification('Failed to save action settings', '');\n        }\n      });\n    }\n\n    setIsModalOpen(false);\n  }, [\n    addDangerNotification,\n    addSuccessNotification,\n    saveTimePreference.mutate,\n    timeSelect,\n  ]);\n\n  const isLoading = saveTimePreference.loading || getTimePreference.loading;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const timeconfigTitle = () => {\n    return `Any daily digest emails you've opted into will be sent at ${\n      timePref ? timePref : '00:00'\n    } UTC`;\n  };\n\n  return (\n    <>\n      <Alert\n        className={alertClassName}\n        isInline\n        title={timeconfigTitle()}\n        actionLinks={\n          <AlertActionLink onClick={handleModalToggle} ouiaId=\"TimeConfigModal\">\n            Edit time settings\n          </AlertActionLink>\n        }\n      />\n      <Modal\n        className=\"pf-v5-u-pl-xl\"\n        variant={ModalVariant.small}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isLoading={isLoading}\n            isDisabled={isLoading}\n            onClick={handleButtonSave}\n          >\n            {isLoading ? 'Loading' : 'Save'}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n        ouiaId=\"TimeConfigModal\"\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h2\">Action settings</Title>\n          </StackItem>\n          <StackItem>\n            <Text component={TextVariants.p}>Daily digest email receipt</Text>\n            <HelperText>\n              <HelperTextItem variant=\"indeterminate\">\n                Schedule the time at which to send your account&apos;s daily\n                digest email. All times will be converted to UTC after saving.\n              </HelperTextItem>\n            </HelperText>\n          </StackItem>\n        </Stack>\n        <br></br>\n        <Split>\n          <SplitItem isFilled>\n            <Stack hasGutter>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={!showCustomSelect}\n                    onChange={handleRadioSelect}\n                    id=\"settings-time-config\"\n                    label=\"Default time\"\n                    value=\"Default\"\n                    description=\"00:00 UTC\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={showCustomSelect}\n                    onChange={handleCustomRadioSelect}\n                    id=\"settings-time-config-custom\"\n                    label=\"Custom time\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              {showCustomSelect && (\n                <>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time</Text>\n                    <TimePicker\n                      onChange={handleTimePrefSelect}\n                      time={timeSelect?.baseCustomTime}\n                      width=\"263px\"\n                      stepMinutes={15}\n                      placeholder=\"00:00\"\n                      is24Hour\n                    />\n                  </StackItem>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time zone</Text>\n                    <Dropdown\n                      className={dropDownClassName}\n                      toggle={\n                        <DropdownToggle\n                          isOpen={isOpen}\n                          id=\"timezone\"\n                          onToggle={() => setIsOpen(!isOpen)}\n                        >\n                          {timeSelect?.timezoneText ??\n                            '(UTC-00:00) Universal Time'}\n                        </DropdownToggle>\n                      }\n                      isOpen={isOpen}\n                      onSelect={handleTimezoneChange}\n                      menuAppendTo={() => document.body}\n                      dropdownItems={dropdownItems}\n                    ></Dropdown>\n                  </StackItem>\n                </>\n              )}\n            </Stack>\n          </SplitItem>\n        </Split>\n      </Modal>\n    </>\n  );\n};\n\nexport default TimeConfigComponent;\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const AddAccessRequest = zodSchemaAddAccessRequest();\n  export type AddAccessRequest = {\n    application_id?: UUID | undefined | null;\n    role?: string | undefined | null;\n  };\n\n  export const AddApplicationRequest = zodSchemaAddApplicationRequest();\n  export type AddApplicationRequest = {\n    bundle_id: UUID;\n    display_name: string;\n    name: string;\n    owner_role?: string | undefined | null;\n  };\n\n  export const AggregationEmailTemplate = zodSchemaAggregationEmailTemplate();\n  export type AggregationEmailTemplate = {\n    application?: Application | undefined | null;\n    application_id?: UUID | undefined | null;\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: LocalDateTime | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    subscription_type: EmailSubscriptionType;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: LocalDateTime | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const Application1 = zodSchemaApplication1();\n  export type Application1 = {\n    display_name: string;\n    id: UUID;\n  };\n\n  export const ApplicationSettingsValue = zodSchemaApplicationSettingsValue();\n  export type ApplicationSettingsValue = {\n    hasForcedEmail?: boolean | undefined | null;\n    notifications?:\n      | {\n          [x: string]: boolean;\n        }\n      | undefined\n      | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    behaviors?: Array<EventTypeBehavior> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: LocalDateTime | undefined | null;\n    default_behavior?: boolean | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: LocalDateTime | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: LocalDateTime | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const BundleSettingsValue = zodSchemaBundleSettingsValue();\n  export type BundleSettingsValue = {\n    applications?:\n      | {\n          [x: string]: ApplicationSettingsValue;\n        }\n      | undefined\n      | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const CreateBehaviorGroupRequest =\n    zodSchemaCreateBehaviorGroupRequest();\n  export type CreateBehaviorGroupRequest = {\n    bundle_id?: UUID | undefined | null;\n    bundle_name?: string | undefined | null;\n    bundle_uuid_or_bundle_name_valid?: boolean | undefined | null;\n    display_name: string;\n    endpoint_ids?: Array<string> | undefined | null;\n    event_type_ids?: Array<string> | undefined | null;\n  };\n\n  export const CreateBehaviorGroupResponse =\n    zodSchemaCreateBehaviorGroupResponse();\n  export type CreateBehaviorGroupResponse = {\n    bundle_id: UUID;\n    created: LocalDateTime;\n    display_name: string;\n    endpoints: Array<string>;\n    event_types: Array<string>;\n    id: UUID;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: LocalDateTime | undefined | null;\n    start_time?: LocalDateTime | undefined | null;\n    status: Status;\n  };\n\n  export const DuplicateNameMigrationReport =\n    zodSchemaDuplicateNameMigrationReport();\n  export type DuplicateNameMigrationReport = {\n    updatedBehaviorGroups?: number | undefined | null;\n    updatedIntegrations?: number | undefined | null;\n  };\n\n  export const DrawerSubscriptionProperties = zodSchemaDrawerSubscriptionProperties();\n  export type DrawerSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    only_admins: boolean;\n    ignore_preferences: boolean;\n  }\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'INSTANT' | 'DAILY';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: LocalDateTime | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties | DrawerSubscriptionProperties)\n      | undefined\n      | null;\n    server_errors?: number | undefined | null;\n    status?: EndpointStatus | undefined | null;\n    sub_type?: string | undefined | null;\n    type: EndpointType;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointStatus = zodSchemaEndpointStatus();\n  export type EndpointStatus =\n    | 'READY'\n    | 'UNKNOWN'\n    | 'NEW'\n    | 'PROVISIONING'\n    | 'DELETING'\n    | 'FAILED';\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'camel'\n    | 'ansible'\n    | 'drawer';\n\n  export const Environment = zodSchemaEnvironment();\n  export type Environment = 'PROD' | 'STAGE' | 'EPHEMERAL' | 'LOCAL_SERVER';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: LocalDateTime;\n    event_type: string;\n    id: UUID;\n    payload?: string | undefined | null;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_id?: UUID | undefined | null;\n    endpoint_sub_type?: string | undefined | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    status: EventLogEntryActionStatus;\n  };\n\n  export const EventLogEntryActionStatus = zodSchemaEventLogEntryActionStatus();\n  export type EventLogEntryActionStatus =\n    | 'SENT'\n    | 'SUCCESS'\n    | 'PROCESSING'\n    | 'FAILED'\n    | 'UNKNOWN';\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    fully_qualified_name?: string | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const EventTypeBehavior = zodSchemaEventTypeBehavior();\n  export type EventTypeBehavior = {\n    created?: LocalDateTime | undefined | null;\n    event_type?: EventType | undefined | null;\n    id?: EventTypeBehaviorId | undefined | null;\n  };\n\n  export const EventTypeBehaviorId = zodSchemaEventTypeBehaviorId();\n  export type EventTypeBehaviorId = {\n    behaviorGroupId: UUID;\n    eventTypeId: UUID;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    children?: Array<Facet> | undefined | null;\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const InstantEmailTemplate = zodSchemaInstantEmailTemplate();\n  export type InstantEmailTemplate = {\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: LocalDateTime | undefined | null;\n    event_type?: EventType | undefined | null;\n    event_type_id?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const InternalApplicationUserPermission =\n    zodSchemaInternalApplicationUserPermission();\n  export type InternalApplicationUserPermission = {\n    application_display_name: string;\n    application_id: UUID;\n    role: string;\n  };\n\n  export const InternalRoleAccess = zodSchemaInternalRoleAccess();\n  export type InternalRoleAccess = {\n    application_id: UUID;\n    id?: UUID | undefined | null;\n    role: string;\n  };\n\n  export const InternalUserPermissions = zodSchemaInternalUserPermissions();\n  export type InternalUserPermissions = {\n    applications: Array<Application1>;\n    is_admin: boolean;\n    roles: Array<string>;\n  };\n\n  export const LocalDate = zodSchemaLocalDate();\n  export type LocalDate = string;\n\n  export const LocalDateTime = zodSchemaLocalDateTime();\n  export type LocalDateTime = string;\n\n  export const LocalTime = zodSchemaLocalTime();\n  export type LocalTime = string;\n\n  export const MessageValidationResponse = zodSchemaMessageValidationResponse();\n  export type MessageValidationResponse = {\n    errors: {\n      [x: string]: Array<string>;\n    };\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: LocalDateTime | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    endpointSubType?: string | undefined | null;\n    endpointType?: EndpointType | undefined | null;\n    id?: UUID | undefined | null;\n    invocationTime: number;\n    status: NotificationStatus;\n  };\n\n  export const NotificationStatus = zodSchemaNotificationStatus();\n  export type NotificationStatus =\n    | 'FAILED_INTERNAL'\n    | 'FAILED_EXTERNAL'\n    | 'PROCESSING'\n    | 'SENT'\n    | 'SUCCESS';\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const PageEventType = zodSchemaPageEventType();\n  export type PageEventType = {\n    data: Array<EventType>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    payload: string;\n    template: Array<string>;\n  };\n\n  export const RequestDefaultBehaviorGroupPropertyList =\n    zodSchemaRequestDefaultBehaviorGroupPropertyList();\n  export type RequestDefaultBehaviorGroupPropertyList = {\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    only_admins: boolean;\n  };\n\n  export const ServerInfo = zodSchemaServerInfo();\n  export type ServerInfo = {\n    environment?: Environment | undefined | null;\n  };\n\n  export const SettingsValues = zodSchemaSettingsValues();\n  export type SettingsValues = {\n    bundles?:\n      | {\n          [x: string]: BundleSettingsValue;\n        }\n      | undefined\n      | null;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'UP' | 'MAINTENANCE';\n\n  export const Template = zodSchemaTemplate();\n  export type Template = {\n    created?: LocalDateTime | undefined | null;\n    data: string;\n    description: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const TriggerDailyDigestRequest = zodSchemaTriggerDailyDigestRequest();\n  export type TriggerDailyDigestRequest = {\n    application_name: string;\n    bundle_name: string;\n    end?: LocalDateTime | undefined | null;\n    org_id: string;\n    start?: LocalDateTime | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UpdateBehaviorGroupRequest =\n    zodSchemaUpdateBehaviorGroupRequest();\n  export type UpdateBehaviorGroupRequest = {\n    display_name?: string | undefined | null;\n    display_name_not_null_and_blank?: boolean | undefined | null;\n    endpoint_ids?: Array<string> | undefined | null;\n    event_type_ids?: Array<string> | undefined | null;\n  };\n\n  export const UserConfigPreferences = zodSchemaUserConfigPreferences();\n  export type UserConfigPreferences = {\n    daily_email?: boolean | undefined | null;\n    instant_email?: boolean | undefined | null;\n  };\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaAddAccessRequest() {\n      return z\n      .object({\n          application_id: zodSchemaUUID().optional().nullable(),\n          role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAddApplicationRequest() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          display_name: z.string(),\n          name: z.string(),\n          owner_role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAggregationEmailTemplate() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID().optional().nullable(),\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          subscription_type: zodSchemaEmailSubscriptionType(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication1() {\n      return z\n      .object({\n          display_name: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplicationSettingsValue() {\n      return z\n      .object({\n          hasForcedEmail: z.boolean().optional().nullable(),\n          notifications: z.record(z.boolean()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          behaviors: z.array(zodSchemaEventTypeBehavior()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          default_behavior: z.boolean().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundleSettingsValue() {\n      return z\n      .object({\n          applications: z\n          .record(zodSchemaApplicationSettingsValue())\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCreateBehaviorGroupRequest() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID().optional().nullable(),\n          bundle_name: z.string().optional().nullable(),\n          bundle_uuid_or_bundle_name_valid: z.boolean().optional().nullable(),\n          display_name: z.string(),\n          endpoint_ids: z.array(z.string()).optional().nullable(),\n          event_type_ids: z.array(z.string()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCreateBehaviorGroupResponse() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime(),\n          display_name: z.string(),\n          endpoints: z.array(z.string()),\n          event_types: z.array(z.string()),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: zodSchemaLocalDateTime().optional().nullable(),\n          start_time: zodSchemaLocalDateTime().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaDuplicateNameMigrationReport() {\n      return z\n      .object({\n          updatedBehaviorGroups: z.number().int().optional().nullable(),\n          updatedIntegrations: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaDrawerSubscriptionProperties() {\n    return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'INSTANT', 'DAILY' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          server_errors: z.number().int().optional().nullable(),\n          status: zodSchemaEndpointStatus().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          type: zodSchemaEndpointType(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointStatus() {\n      return z.enum([\n          'READY',\n          'UNKNOWN',\n          'NEW',\n          'PROVISIONING',\n          'DELETING',\n          'FAILED'\n      ]);\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'camel', 'ansible', 'drawer' ]);\n  }\n\n  function zodSchemaEnvironment() {\n      return z.enum([ 'PROD', 'STAGE', 'EPHEMERAL', 'LOCAL_SERVER' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: zodSchemaLocalDateTime(),\n          event_type: z.string(),\n          id: zodSchemaUUID(),\n          payload: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_id: zodSchemaUUID().optional().nullable(),\n          endpoint_sub_type: z.string().optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          status: zodSchemaEventLogEntryActionStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryActionStatus() {\n      return z.enum([ 'SENT', 'SUCCESS', 'PROCESSING', 'FAILED', 'UNKNOWN' ]);\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          fully_qualified_name: z.string().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventTypeBehavior() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          event_type: zodSchemaEventType().optional().nullable(),\n          id: zodSchemaEventTypeBehaviorId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventTypeBehaviorId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          eventTypeId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          children: z\n          .array(z.lazy(() => zodSchemaFacet()))\n          .optional()\n          .nullable(),\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaInstantEmailTemplate() {\n      return z\n      .object({\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          event_type: zodSchemaEventType().optional().nullable(),\n          event_type_id: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalApplicationUserPermission() {\n      return z\n      .object({\n          application_display_name: z.string(),\n          application_id: zodSchemaUUID(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalRoleAccess() {\n      return z\n      .object({\n          application_id: zodSchemaUUID(),\n          id: zodSchemaUUID().optional().nullable(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalUserPermissions() {\n      return z\n      .object({\n          applications: z.array(zodSchemaApplication1()),\n          is_admin: z.boolean(),\n          roles: z.array(z.string())\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLocalDate() {\n      return z.string();\n  }\n\n  function zodSchemaLocalDateTime() {\n      return z.string();\n  }\n\n  function zodSchemaLocalTime() {\n      return z.string();\n  }\n\n  function zodSchemaMessageValidationResponse() {\n      return z\n      .object({\n          errors: z.record(z.array(z.string()))\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          endpointSubType: z.string().optional().nullable(),\n          endpointType: zodSchemaEndpointType().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationTime: z.number().int(),\n          status: zodSchemaNotificationStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationStatus() {\n      return z.enum([\n          'FAILED_INTERNAL',\n          'FAILED_EXTERNAL',\n          'PROCESSING',\n          'SENT',\n          'SUCCESS'\n      ]);\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventType() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventType()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          payload: z.string(),\n          template: z.array(z.string())\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestDefaultBehaviorGroupPropertyList() {\n      return z\n      .object({\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaServerInfo() {\n      return z\n      .object({\n          environment: zodSchemaEnvironment().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaSettingsValues() {\n      return z\n      .object({\n          bundles: z.record(zodSchemaBundleSettingsValue()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'UP', 'MAINTENANCE' ]);\n  }\n\n  function zodSchemaTemplate() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          data: z.string(),\n          description: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaTriggerDailyDigestRequest() {\n      return z\n      .object({\n          application_name: z.string(),\n          bundle_name: z.string(),\n          end: zodSchemaLocalDateTime().optional().nullable(),\n          org_id: z.string(),\n          start: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUpdateBehaviorGroupRequest() {\n      return z\n      .object({\n          display_name: z.string().optional().nullable(),\n          display_name_not_null_and_blank: z.boolean().optional().nullable(),\n          endpoint_ids: z.array(z.string()).optional().nullable(),\n          event_type_ids: z.array(z.string()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUserConfigPreferences() {\n      return z\n      .object({\n          daily_email: z.boolean().optional().nullable(),\n          instant_email: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // POST /notifications/behaviorGroups\n  // Create a behavior group - assigning actions and linking to event types as requested\n  export namespace NotificationResourceCreateBehaviorGroup {\n    const Response400 = z.string();\n    type Response400 = string;\n    export interface Params {\n      body: Schemas.CreateBehaviorGroupRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'CreateBehaviorGroupResponse',\n          200,\n          Schemas.CreateBehaviorGroupResponse\n        >\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/behaviorGroups';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.CreateBehaviorGroupResponse,\n                    'CreateBehaviorGroupResponse',\n                    200\n                ),\n                new ValidateRule(Response400, 'unknown', 400),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/behaviorGroups/affectedByRemovalOfEndpoint/{endpointId}\n  // Retrieve the behavior groups affected by the removal of an endpoint.\n  export namespace NotificationResourceGetBehaviorGroupsAffectedByRemovalOfEndpoint {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/affectedByRemovalOfEndpoint/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/behaviorGroups/{behaviorGroupId}/actions\n  // Update the list of actions of a behavior group.\n  export namespace NotificationResourceUpdateBehaviorGroupActions {\n    const Body = z.array(z.string());\n    type Body = Array<string>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{behaviorGroupId}/actions'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/behaviorGroups/{id}\n  // Update a behavior group.\n  export namespace NotificationResourceUpdateBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    const Response400 = z.string();\n    type Response400 = string;\n    const Response404 = z.string();\n    type Response404 = string;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.UpdateBehaviorGroupRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', 404, Response404>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Response400, 'unknown', 400),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403),\n                new ValidateRule(Response404, 'unknown', 404)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/behaviorGroups/{id}\n  // Delete a behavior group.\n  export namespace NotificationResourceDeleteBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleId}/behaviorGroups\n  // Retrieve the behavior groups of a bundle.\n  export namespace NotificationResourceFindBehaviorGroupsByBundleId {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleId}/behaviorGroups'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleName}\n  // Retrieve the bundle by name\n  export namespace NotificationResourceGetBundleByName {\n    const BundleName = z.string();\n    type BundleName = string;\n    export interface Params {\n      bundleName: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleName}'.replace(\n            '{bundleName}',\n            params.bundleName.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleName}/applications/{applicationName}\n  // Retrieve the application by name of a given bundle name\n  export namespace NotificationResourceGetApplicationByNameAndBundleName {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application', 200, Schemas.Application>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleName}/applications/{applicationName}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application, 'Application', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleName}/applications/{applicationName}/eventTypes/{eventTypeName}\n  // Retrieve the event type by name of a given bundle name and application name\n  export namespace NotificationResourceGetEventTypesByNameAndBundleAndApplicationName {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const EventTypeName = z.string();\n    type EventTypeName = string;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      eventTypeName: EventTypeName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EventType', 200, Schemas.EventType>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleName}/applications/{applicationName}/eventTypes/{eventTypeName}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString())\n        .replace('{eventTypeName}', params.eventTypeName.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.EventType, 'EventType', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes\n  // Retrieve all event types. The returned list can be filtered by bundle or application.\n  export namespace NotificationResourceGetEventTypes {\n    const ApplicationIds = z.array(z.string());\n    type ApplicationIds = Array<string>;\n    const EventTypeName = z.string();\n    type EventTypeName = string;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    export interface Params {\n      applicationIds?: ApplicationIds;\n      bundleId?: Schemas.UUID;\n      eventTypeName?: EventTypeName;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'PageEventType', 200, Schemas.PageEventType>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes';\n        const query = {} as Record<string, any>;\n        if (params.applicationIds !== undefined) {\n            query.applicationIds = params.applicationIds;\n        }\n\n        if (params.bundleId !== undefined) {\n            query.bundleId = params.bundleId;\n        }\n\n        if (params.eventTypeName !== undefined) {\n            query.eventTypeName = params.eventTypeName;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.PageEventType, 'PageEventType', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}\n  // Retrieve the event types affected by the removal of a behavior group.\n  export namespace NotificationResourceGetEventTypesAffectedByRemovalOfBehaviorGroup {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/{eventTypeId}/behaviorGroups\n  // Retrieve the behavior groups linked to an event type.\n  export namespace NotificationResourceGetLinkedBehaviorGroups {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/eventTypes/{eventTypeId}/behaviorGroups\n  // Update the list of behavior groups of an event type.\n  export namespace NotificationResourceUpdateEventTypeBehaviors {\n    const Body = z.array(z.string());\n    type Body = Array<string>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/eventTypes/{eventTypeId}/behaviorGroups/{behaviorGroupId}\n  // Delete a behavior group from the given event type.\n  export namespace NotificationResourceDeleteBehaviorGroupFromEventType {\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups/{behaviorGroupId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/eventTypes/{eventTypeUuid}/behaviorGroups/{behaviorGroupUuid}\n  // Add a behavior group to the given event type.\n  export namespace NotificationResourceAppendBehaviorGroupToEventType {\n    export interface Params {\n      behaviorGroupUuid: Schemas.UUID;\n      eventTypeUuid: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeUuid}/behaviorGroups/{behaviorGroupUuid}'\n        .replace(\n            '{behaviorGroupUuid}',\n            params.behaviorGroupUuid.toString()\n        )\n        .replace('{eventTypeUuid}', params.eventTypeUuid.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/events\n  // Retrieve the event log entries.\n  export namespace EventResourceGetEvents {\n    const AppIds = z.array(z.string());\n    type AppIds = Array<string>;\n    const BundleIds = z.array(z.string());\n    type BundleIds = Array<string>;\n    const EndpointTypes = z.array(z.string());\n    type EndpointTypes = Array<string>;\n    const EventTypeDisplayName = z.string();\n    type EventTypeDisplayName = string;\n    const IncludeActions = z.boolean();\n    type IncludeActions = boolean;\n    const IncludeDetails = z.boolean();\n    type IncludeDetails = boolean;\n    const IncludePayload = z.boolean();\n    type IncludePayload = boolean;\n    const InvocationResults = z.array(z.boolean());\n    type InvocationResults = Array<boolean>;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Status = z.array(Schemas.EventLogEntryActionStatus);\n    type Status = Array<Schemas.EventLogEntryActionStatus>;\n    export interface Params {\n      appIds?: AppIds;\n      bundleIds?: BundleIds;\n      endDate?: Schemas.LocalDate;\n      endpointTypes?: EndpointTypes;\n      eventTypeDisplayName?: EventTypeDisplayName;\n      includeActions?: IncludeActions;\n      includeDetails?: IncludeDetails;\n      includePayload?: IncludePayload;\n      invocationResults?: InvocationResults;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n      startDate?: Schemas.LocalDate;\n      status?: Status;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'PageEventLogEntry', 200, Schemas.PageEventLogEntry>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/events';\n        const query = {} as Record<string, any>;\n        if (params.appIds !== undefined) {\n            query.appIds = params.appIds;\n        }\n\n        if (params.bundleIds !== undefined) {\n            query.bundleIds = params.bundleIds;\n        }\n\n        if (params.endDate !== undefined) {\n            query.endDate = params.endDate;\n        }\n\n        if (params.endpointTypes !== undefined) {\n            query.endpointTypes = params.endpointTypes;\n        }\n\n        if (params.eventTypeDisplayName !== undefined) {\n            query.eventTypeDisplayName = params.eventTypeDisplayName;\n        }\n\n        if (params.includeActions !== undefined) {\n            query.includeActions = params.includeActions;\n        }\n\n        if (params.includeDetails !== undefined) {\n            query.includeDetails = params.includeDetails;\n        }\n\n        if (params.includePayload !== undefined) {\n            query.includePayload = params.includePayload;\n        }\n\n        if (params.invocationResults !== undefined) {\n            query.invocationResults = params.invocationResults;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        if (params.startDate !== undefined) {\n            query.startDate = params.startDate;\n        }\n\n        if (params.status !== undefined) {\n            query.status = params.status;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.PageEventLogEntry,\n                    'PageEventLogEntry',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/applications\n  // Return a thin list of configured applications. This can be used to configure a filter in the UI\n  export namespace NotificationResourceGetApplicationsFacets {\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export interface Params {\n      bundleName?: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/applications';\n        const query = {} as Record<string, any>;\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/bundles\n  // Return a thin list of configured bundles. This can be used to configure a filter in the UI\n  export namespace NotificationResourceGetBundleFacets {\n    const IncludeApplications = z.boolean();\n    type IncludeApplications = boolean;\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export interface Params {\n      includeApplications?: IncludeApplications;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/bundles';\n        const query = {} as Record<string, any>;\n        if (params.includeApplications !== undefined) {\n            query.includeApplications = params.includeApplications;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /org-config/daily-digest/time-preference\n  export namespace OrgConfigResourceGetDailyDigestTimePreference {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/org-config/daily-digest/time-preference';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /org-config/daily-digest/time-preference\n  // Save the daily digest UTC time preference. To cover all time zones conversion to UTC, the accepted minute values are 00, 15, 30 and 45.\n  export namespace OrgConfigResourceSaveDailyDigestTimePreference {\n    export interface Params {\n      body: Schemas.LocalTime;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/org-config/daily-digest/time-preference';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /user-config/notification-preference\n  export namespace UserConfigResourceGetSettingsSchema {\n    const BundleName = z.string();\n    type BundleName = string;\n    export interface Params {\n      bundleName?: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/user-config/notification-preference';\n        const query = {} as Record<string, any>;\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /user-config/notification-preference\n  export namespace UserConfigResourceSaveSettings {\n    export interface Params {\n      body: Schemas.SettingsValues;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/user-config/notification-preference';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /user-config/notification-preference/{bundleName}/{applicationName}\n  export namespace UserConfigResourceGetPreferences {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'UserConfigPreferences',\n          200,\n          Schemas.UserConfigPreferences\n        >\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/user-config/notification-preference/{bundleName}/{applicationName}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.UserConfigPreferences,\n                    'UserConfigPreferences',\n                    200\n                )\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n  id: UUID;\n  applicationDisplayName: string;\n  eventTypeDisplayName: string;\n}\n\nexport interface Notification extends EventType {\n  actions?: Array<Action>;\n  useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<\n  UserIntegration,\n  'id' | 'name' | 'type' | 'isEnabled'\n>;\n\nexport interface DefaultNotificationBehavior {\n  actions: Array<Action>;\n}\n\nexport interface ActionBase {\n  type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n  type: NotificationType.INTEGRATION;\n  integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n  type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n  recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n  action.type === NotificationType.EMAIL_SUBSCRIPTION ||\n  action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (\n  action: Action\n): action is ActionIntegration => action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n  EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n  DRAWER = 'DRAWER',\n  INTEGRATION = 'INTEGRATION',\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n  readonly id: UUID;\n  readonly actions: ReadonlyArray<Action>;\n  readonly events: ReadonlyArray<EventType>;\n  readonly bundleId: UUID;\n  readonly displayName: string;\n  readonly bundleName?: string;\n  readonly isDefault: boolean;\n};\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> &\n  Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<\n  BehaviorGroup | NewBehaviorGroup,\n  'isDefault'\n>;\n\nexport type EmailSystemProperties = {\n  type: NotificationType.EMAIL_SUBSCRIPTION;\n  props: {\n    onlyAdmins: boolean;\n    ignorePreferences: false;\n    groupId: undefined | UUID;\n  };\n};\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n  props: {\n    onlyAdmins: boolean;\n    groupId: undefined | UUID;\n    ignorePreferences: false;\n  };\n};\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(\n  properties: SystemProperties\n): properties is EmailSystemProperties {\n  return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(\n  properties: SystemProperties\n): properties is DrawerSystemProperties {\n  return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (\n  actions: ReadonlyArray<Action | undefined>\n): Array<UUID | undefined> => {\n  return actions\n    .map((action) => {\n      if (action === undefined) {\n        return [undefined];\n      }\n\n      if (action.type === NotificationType.INTEGRATION) {\n        return [action.integration.id];\n      } else {\n        return action.recipient.map((r) => r.integrationId);\n      }\n    })\n    .flat();\n};\n\nexport const areActionsEqual = (\n  actions1: ReadonlyArray<Action | undefined>,\n  actions2: ReadonlyArray<Action | undefined>\n): boolean => {\n  if (actions1.length !== actions2.length) {\n    return false;\n  }\n\n  const integrations1 = getIntegrationIds(actions1);\n  const integrations2 = getIntegrationIds(actions2);\n\n  if (integrations1.length !== integrations2.length) {\n    return false;\n  }\n\n  // Order matters here, no sorting.\n  return integrations1.every((val, index) => val === integrations2[index]);\n};\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n  CamelIntegrationType,\n  Integration,\n  IntegrationAnsible,\n  IntegrationBase,\n  IntegrationCamel,\n  IntegrationDrawer,\n  IntegrationEmailSubscription,\n  IntegrationHttp,\n  IntegrationType,\n  NewIntegration,\n  ServerIntegrationRequest,\n  ServerIntegrationResponse,\n  isCamelType,\n} from '../Integration';\n\ninterface ExternalCompositeTyped {\n  type: string;\n  sub_type?: string | null;\n}\n\nexport const getIntegrationType = (\n  serverIntegration: ExternalCompositeTyped\n): IntegrationType => {\n  for (const integration of Object.values(IntegrationType)) {\n    if (serverIntegration.sub_type) {\n      if (\n        integration ===\n        `${serverIntegration.type}:${serverIntegration.sub_type}`\n      ) {\n        return integration as IntegrationType;\n      }\n    } else if (integration === serverIntegration.type) {\n      return integration as IntegrationType;\n    }\n  }\n\n  throw new Error(\n    `Unexpected type: ${serverIntegration.type} with subtype: ${serverIntegration.sub_type}`\n  );\n};\n\nconst getEndpointType = (\n  type: IntegrationType\n): { type: Schemas.EndpointType; subType?: string } => {\n  const splitType = type.split(':', 2);\n  return {\n    type: splitType[0] as Schemas.EndpointType,\n    subType: splitType.length === 2 ? splitType[1] : undefined,\n  };\n};\n\ntype NotNullType = {\n  <T>(value: T | undefined | null): T | undefined;\n  <T>(value: T | undefined | null, defaultValue: T): T;\n};\n\nconst notNull: NotNullType = <T>(\n  value: T | undefined | null,\n  defaultValue?: T\n): T | undefined => (value === null ? defaultValue : value);\nconst toSecretToken = (\n  secretToken: string | undefined | null\n): string | undefined =>\n  secretToken === '' ? undefined : notNull(secretToken);\n\nconst toIntegrationWebhook = (\n  integrationBase: IntegrationBase<IntegrationType.WEBHOOK>,\n  properties?: Schemas.WebhookProperties\n): IntegrationHttp => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.GET,\n});\n\nconst toIntegrationAnsible = (\n  integrationBase: IntegrationBase<IntegrationType.ANSIBLE>,\n  properties?: Schemas.WebhookProperties\n): IntegrationAnsible => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.POST,\n});\n\nconst toIntegrationCamel = (\n  integrationBase: IntegrationBase<CamelIntegrationType>,\n  properties?: Schemas.CamelProperties\n): IntegrationCamel => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  basicAuth:\n    properties?.basic_authentication === null\n      ? undefined\n      : {\n          user: notNull(properties?.basic_authentication?.username, ''),\n          pass: notNull(properties?.basic_authentication?.password, ''),\n        },\n  extras: notNull(properties?.extras),\n});\n\nconst toIntegrationEmail = (\n  integrationBase: IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n  properties: Schemas.EmailSubscriptionProperties\n): IntegrationEmailSubscription => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nconst toIntegrationDrawer = (\n  integrationBase: IntegrationBase<IntegrationType.DRAWER>,\n  properties: Schemas.DrawerProperties\n): IntegrationDrawer => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nexport const toIntegration = (\n  serverIntegration: ServerIntegrationResponse\n): Integration => {\n  const integrationBase: IntegrationBase<IntegrationType> = {\n    id: serverIntegration.id || '',\n    name: serverIntegration.name || '',\n    isEnabled: !!serverIntegration.enabled,\n    type: getIntegrationType(serverIntegration),\n    status: serverIntegration.status ?? 'UNKNOWN',\n    serverErrors: serverIntegration.server_errors ?? 0,\n  };\n\n  if (isCamelType(integrationBase.type)) {\n    return toIntegrationCamel(\n      integrationBase as IntegrationBase<CamelIntegrationType>,\n      serverIntegration.properties as Schemas.CamelProperties\n    );\n  }\n\n  switch (integrationBase.type) {\n    case IntegrationType.WEBHOOK:\n      return toIntegrationWebhook(\n        integrationBase as IntegrationBase<IntegrationType.WEBHOOK>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.ANSIBLE:\n      return toIntegrationAnsible(\n        integrationBase as IntegrationBase<IntegrationType.ANSIBLE>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.EMAIL_SUBSCRIPTION:\n      return toIntegrationEmail(\n        integrationBase as IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n        serverIntegration.properties as Schemas.EmailSubscriptionProperties\n      );\n    case IntegrationType.DRAWER:\n      return toIntegrationDrawer(\n        integrationBase as IntegrationBase<IntegrationType.DRAWER>,\n        serverIntegration.properties as Schemas.DrawerProperties\n      );\n    default:\n      assertNever(integrationBase.type);\n  }\n};\n\nexport const toIntegrations = (\n  serverIntegrations: Array<ServerIntegrationResponse>\n): Array<Integration> => {\n  return serverIntegrations.map(toIntegration);\n};\n\ntype ServerIntegrationProperties =\n  | Schemas.EmailSubscriptionProperties\n  | Schemas.WebhookProperties\n  | Schemas.CamelProperties\n  | Schemas.DrawerProperties;\n\nexport const toIntegrationProperties = (\n  integration: Integration | NewIntegration\n): ServerIntegrationProperties => {\n  const type = integration.type;\n\n  if (isCamelType(type)) {\n    const integrationCamel: IntegrationCamel = integration as IntegrationCamel;\n    return {\n      url: integrationCamel.url,\n      disable_ssl_verification: !integrationCamel.sslVerificationEnabled,\n      secret_token: toSecretToken(integrationCamel.secretToken),\n      basic_authentication: integrationCamel.basicAuth\n        ? {\n            username: integrationCamel.basicAuth.user,\n            password: integrationCamel.basicAuth.pass,\n          }\n        : undefined,\n      extras: integrationCamel.extras,\n    };\n  }\n\n  switch (type) {\n    case IntegrationType.WEBHOOK: {\n      const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n      return {\n        url: integrationHttp.url,\n        method: integrationHttp.method,\n        disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationHttp.secretToken),\n      };\n    }\n    case IntegrationType.ANSIBLE: {\n      const integrationAnsible = integration as IntegrationAnsible;\n      return {\n        url: integrationAnsible.url,\n        disable_ssl_verification: !integrationAnsible.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationAnsible.secretToken),\n        method: integrationAnsible.method,\n      };\n    }\n    case IntegrationType.EMAIL_SUBSCRIPTION: {\n      const integrationEmail: IntegrationEmailSubscription =\n        integration as IntegrationEmailSubscription;\n      return {\n        only_admins: integrationEmail.onlyAdmin,\n        group_id: integrationEmail.groupId,\n        ignore_preferences: integrationEmail.ignorePreferences,\n      };\n    }\n    case IntegrationType.DRAWER: {\n      const integrationDrawer: IntegrationDrawer =\n        integration as IntegrationDrawer;\n      return {\n        only_admins: integrationDrawer.onlyAdmin,\n        group_id: integrationDrawer.groupId,\n        ignore_preferences: integrationDrawer.ignorePreferences,\n      };\n    }\n    default:\n      assertNever(type);\n  }\n};\n\nexport const toServerIntegrationRequest = (\n  integration: Integration | NewIntegration\n): ServerIntegrationRequest => {\n  const { type, subType } = getEndpointType(integration.type);\n  return {\n    id: integration.id,\n    name: integration.name,\n    enabled: integration.isEnabled,\n    type,\n    sub_type: subType,\n    description: '',\n    properties: toIntegrationProperties(integration),\n  };\n};\n","import { AlertProps } from '@patternfly/react-core';\nimport { addNotification as createNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { clearNotifications as createClearNotificationsAction } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport type NotificationType = AlertProps['variant'];\ntype ExplicitNotificationFunction = (\n  title: string,\n  description: React.ReactNode,\n  dismissable?: boolean\n) => void;\n\n// Todo: Create a PR over frontend-components with a similar hook\nexport const useNotification = () => {\n  const dispatch = useDispatch();\n  return useMemo(() => {\n    const addNotification = (\n      variant: NotificationType,\n      title: string,\n      description: React.ReactNode,\n      dismissable?: boolean\n    ) =>\n      dispatch(\n        createNotificationAction({\n          variant,\n          title,\n          description,\n          dismissable,\n        })\n      );\n\n    const addSuccessNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('success', ...args);\n    const addDangerNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('danger', ...args);\n    const addInfoNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('info', ...args);\n    const addWarningNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('warning', ...args);\n    const addDefaultNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('default', ...args);\n    const clearNotifications = () => dispatch(createClearNotificationsAction());\n\n    return {\n      addNotification,\n      addSuccessNotification,\n      addDangerNotification,\n      addInfoNotification,\n      addWarningNotification,\n      addDefaultNotification,\n      clearNotifications,\n    };\n  }, [dispatch]);\n};\n"],"names":["props","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","Provider","ClientContextProvider","App","document","getElementById","dropDownClassName","style","width","alertClassName","marginTop","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","getTimePreference","saveTimePreference","addSuccessNotification","addDangerNotification","timePref","useMemo","status","payload","value","useEffect","baseCustomTime","utcTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","dropdownItems","tz","DropdownItem","key","text","handleCustomRadioSelect","handleTimePrefSelect","time","handleTimezoneChange","event","target","textContent","targetTimezone","t","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","mutate","body","then","response","isLoading","loading","handleModalToggle","Alert","className","isInline","title","actionLinks","AlertActionLink","onClick","ouiaId","Modal","variant","ModalVariant","onClose","actions","Button","type","isDisabled","Stack","hasGutter","StackItem","Title","headingLevel","Text","component","TextVariants","HelperText","HelperTextItem","Split","SplitItem","isFilled","Skeleton","Radio","isChecked","onChange","id","label","description","name","TimePicker","stepMinutes","placeholder","is24Hour","Dropdown","toggle","DropdownToggle","onToggle","onSelect","menuAppendTo","Schemas","Operations","zodSchemaApplication","bundle_id","zodSchemaUUID","created","zodSchemaLocalDateTime","optional","nullable","display_name","updated","nonstrict","zodSchemaApplication1","zodSchemaApplicationSettingsValue","hasForcedEmail","notifications","zodSchemaBasicAuthentication","password","username","zodSchemaBehaviorGroupAction","endpoint","zodSchemaEndpoint","zodSchemaBehaviorGroupActionId","behaviorGroupId","endpointId","zodSchemaBundle","zodSchemaBundleSettingsValue","applications","zodSchemaCamelProperties","basic_authentication","disable_ssl_verification","extras","secret_token","url","zodSchemaEmailSubscriptionProperties","group_id","ignore_preferences","only_admins","zodSchemaEmailSubscriptionType","enabled","properties","zodSchemaWebhookProperties","server_errors","int","zodSchemaEndpointStatus","sub_type","zodSchemaEndpointType","zodSchemaEnvironment","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","application","bundle","event_type","details","endpoint_id","endpoint_sub_type","endpoint_type","zodSchemaEventLogEntryActionStatus","zodSchemaEventType","application_id","fully_qualified_name","zodSchemaEventTypeBehavior","zodSchemaEventTypeBehaviorId","eventTypeId","zodSchemaHttpType","zodSchemaMeta","count","zodSchemaNotificationStatus","zodSchemaStatus","zodSchemaTemplate","data","method","AddAccessRequest","role","AddApplicationRequest","owner_role","AggregationEmailTemplate","body_template","body_template_id","subject_template","subject_template_id","subscription_type","Application","Application1","ApplicationSettingsValue","BasicAuthentication","BehaviorGroup","behaviors","default_behavior","BehaviorGroupAction","BehaviorGroupActionId","Bundle","BundleSettingsValue","CamelProperties","CreateBehaviorGroupRequest","bundle_name","bundle_uuid_or_bundle_name_valid","endpoint_ids","event_type_ids","CreateBehaviorGroupResponse","endpoints","event_types","CurrentStatus","end_time","start_time","DuplicateNameMigrationReport","updatedBehaviorGroups","updatedIntegrations","DrawerSubscriptionProperties","EmailSubscriptionProperties","EmailSubscriptionType","Endpoint","EndpointPage","links","meta","EndpointProperties","EndpointStatus","EndpointType","Environment","EventLogEntry","EventLogEntryAction","EventLogEntryActionStatus","EventType","EventTypeBehavior","EventTypeBehaviorId","Facet","zodSchemaFacet","children","displayName","HttpType","InstantEmailTemplate","event_type_id","InternalApplicationUserPermission","application_display_name","InternalRoleAccess","InternalUserPermissions","is_admin","roles","LocalDate","LocalDateTime","LocalTime","MessageValidationResponse","errors","Meta","NotificationHistory","endpointSubType","endpointType","invocationTime","NotificationStatus","PageEventLogEntry","PageEventType","RenderEmailTemplateRequest","template","RequestDefaultBehaviorGroupPropertyList","RequestEmailSubscriptionProperties","ServerInfo","environment","SettingsValues","bundles","Status","Template","TriggerDailyDigestRequest","application_name","end","org_id","start","UUID","UpdateBehaviorGroupRequest","display_name_not_null_and_blank","UserConfigPreferences","daily_email","instant_email","WebhookProperties","__Empty","max","NotificationResourceCreateBehaviorGroup","NotificationResourceGetBehaviorGroupsAffectedByRemovalOfEndpoint","NotificationResourceUpdateBehaviorGroupActions","NotificationResourceUpdateBehaviorGroup","NotificationResourceDeleteBehaviorGroup","NotificationResourceFindBehaviorGroupsByBundleId","NotificationResourceGetBundleByName","NotificationResourceGetApplicationByNameAndBundleName","NotificationResourceGetEventTypesByNameAndBundleAndApplicationName","NotificationResourceGetEventTypes","NotificationResourceGetEventTypesAffectedByRemovalOfBehaviorGroup","NotificationResourceGetLinkedBehaviorGroups","NotificationResourceUpdateEventTypeBehaviors","NotificationResourceDeleteBehaviorGroupFromEventType","NotificationResourceAppendBehaviorGroupToEventType","EventResourceGetEvents","NotificationResourceGetApplicationsFacets","NotificationResourceGetBundleFacets","OrgConfigResourceGetDailyDigestTimePreference","OrgConfigResourceSaveDailyDigestTimePreference","UserConfigResourceGetSettingsSchema","UserConfigResourceSaveSettings","UserConfigResourceGetPreferences","Response400","actionCreator","params","actionBuilder","queryParams","config","rules","ValidateRule","build","Response200","path","replace","Response404","bundleId","bundleName","applicationName","eventTypeName","query","applicationIds","limit","pageNumber","sortBy","sort_by","behaviorGroupUuid","eventTypeUuid","appIds","bundleIds","endDate","endpointTypes","eventTypeDisplayName","includeActions","includeDetails","includePayload","invocationResults","startDate","includeApplications","isActionNotify","action","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","isDrawerSystemProperties","getIntegrationIds","integration","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","getIntegrationType","serverIntegration","Object","values","Error","notNull","defaultValue","toSecretToken","secretToken","toIntegration","integrationBase","isEnabled","serverErrors","sslVerificationEnabled","basicAuth","user","pass","toIntegrationCamel","toIntegrationWebhook","toIntegrationAnsible","ignorePreferences","groupId","onlyAdmin","toIntegrationDrawer","toIntegrations","serverIntegrations","toIntegrationProperties","integrationCamel","integrationHttp","integrationAnsible","integrationEmail","integrationDrawer","toServerIntegrationRequest","subType","splitType","getEndpointType","useNotification","dispatch","useDispatch","addNotification","dismissable","args","addInfoNotification","addWarningNotification","addDefaultNotification","clearNotifications"],"sourceRoot":""}
{"version":3,"file":"js/2970.3624d9428811896f279a.js","mappings":"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","sources":["webpack:///./src/services/Notifications/GetBundles.ts","webpack:///./src/components/Store/Main.tsx","webpack:///./src/components/NotAuthorized.tsx","webpack:///./src/components/CheckReadPermissions.tsx","webpack:///./src/pages/Integrations/List/Page.tsx","webpack:///./src/pages/Integrations/SplunkSetup/Constants.ts","webpack:///./src/pages/Integrations/SplunkSetup/SplunkSetupFinished.tsx","webpack:///./src/services/useListNotifications.ts","webpack:///./src/services/Notifications/GetBehaviorGroupByNotificationId.ts","webpack:///./src/services/Notifications/LinkBehaviorGroup.ts","webpack:///./src/services/Notifications/SaveBehaviorGroup.ts","webpack:///./src/services/Notifications/UpdateBehaviorGroupActions.ts","webpack:///./src/pages/Integrations/SplunkSetup/useSplunkSetup.tsx","webpack:///./src/services/GetEventTypes.ts","webpack:///./src/pages/Integrations/SplunkSetup/SplunkSetupForm.tsx","webpack:///./src/pages/Integrations/SplunkSetup/SplunkSetupPage.tsx","webpack:///./src/components/ButtonLink.tsx","webpack:///./src/components/Notifications/EventLog/EventLogDateFilter.tsx","webpack:///./src/components/Notifications/NotificationStatus.tsx","webpack:///./src/components/Notifications/EventLog/ActionsHelpPopover.tsx","webpack:///./src/components/Notifications/EventLog/EventLogActionPopoverContent.tsx","webpack:///./src/components/Notifications/EventLog/EventLogTable.tsx","webpack:///./src/hooks/useNotifications.ts","webpack:///./src/components/Notifications/EventLog/EventLogFilter.ts","webpack:///./src/utils/Arrays.ts","webpack:///./src/components/Notifications/EventLog/EventLogTreeFilter.tsx","webpack:///./src/components/Notifications/EventLog/EventLogToolbar.tsx","webpack:///./src/components/Notifications/EventLog/usePrimaryToolbarFilterConfigWrapper.tsx","webpack:///./src/components/PageHeader.tsx","webpack:///./src/types/adapters/NotificationEventAdapter.ts","webpack:///./src/services/EventLog/GetNotificationEvents.ts","webpack:///./src/services/Integrations/GetEndpoint.ts","webpack:///./src/pages/Notifications/EventLog/useFilterBuilder.ts","webpack:///./src/pages/Notifications/EventLog/EventLogPage.tsx","webpack:///./src/pages/Notifications/EventLog/useEventLogFilter.ts","webpack:///./src/app/AppSkeleton.tsx","webpack:///./src/services/Notifications/GetApplications.ts","webpack:///./src/components/Notifications/TabComponent.tsx","webpack:///./src/types/SortDirection.ts","webpack:///./src/utils/Immutable.ts","webpack:///./src/components/Notifications/EmptyTableState.tsx","webpack:///./src/utils/Find.ts","webpack:///./src/components/Notifications/Table/BehaviorGroupCell.tsx","webpack:///./src/components/Notifications/NotificationsBehaviorGroupTable.tsx","webpack:///./src/components/Ouia.tsx","webpack:///./src/components/Notifications/Filter.ts","webpack:///./src/components/Notifications/Toolbar.tsx","webpack:///./src/pages/Notifications/hooks/useEventTypesPage.ts","webpack:///./src/pages/Notifications/List/useNotificationFilter.ts","webpack:///./src/pages/Notifications/hooks/useEventTypesFilterBuilder.ts","webpack:///./src/components/Icons/WebhookIcon.tsx","webpack:///./src/components/Notifications/ActionComponent.tsx","webpack:///./src/components/Notifications/Rbac/GroupNotFound.tsx","webpack:///./src/components/Notifications/Recipient.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupActionsSummary.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupCard.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupCardList.tsx","webpack:///./src/components/Notifications/BehaviorGroup/Wizard/BehaviorGroupWizardFooter.tsx","webpack:///./src/components/Notifications/BehaviorGroup/Wizard/BehaviorGroupWizard.tsx","webpack:///./src/components/Notifications/RecipientContext.ts","webpack:///./src/pages/Notifications/BehaviorGroupWizard/useSaveBehaviorGroup.tsx","webpack:///./src/components/Notifications/Form/RecipientOption.ts","webpack:///./src/components/Notifications/Form/useRecipientOptionMemo.tsx","webpack:///./src/components/Notifications/Form/useTypeaheadReducer.ts","webpack:///./src/components/Notifications/Form/IntegrationRecipientTypeahead.tsx","webpack:///./src/components/Notifications/Form/RecipientTypeahead.tsx","webpack:///./src/components/Notifications/EditableActionRow/RecipientForm.tsx","webpack:///./src/components/Notifications/Form/ActionOption.ts","webpack:///./src/components/Notifications/Form/ActionTypeahead.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupFormActionsTable.tsx","webpack:///./src/components/Notifications/BehaviorGroup/useBehaviorGroupActionHandlers.ts","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupForm.tsx","webpack:///./src/schemas/Integrations/Notifications.ts","webpack:///./src/pages/Notifications/BehaviorGroupWizard/Steps/ActionAndRecipientsStep.tsx","webpack:///./src/components/Notifications/BehaviorGroup/Wizard/SelectableEventTypeTable.tsx","webpack:///./src/pages/Notifications/BehaviorGroupWizard/Steps/AssociateEventTypesStep.tsx","webpack:///./src/pages/Notifications/BehaviorGroupWizard/Steps/BasicInformationStep.tsx","webpack:///./src/pages/Notifications/BehaviorGroupWizard/Steps/ReviewStep.tsx","webpack:///./src/pages/Notifications/BehaviorGroupWizard/BehaviorGroupWizardPage.tsx","webpack:///./src/services/Integrations/GetDefaultSystemEndpoint.ts","webpack:///./src/pages/Notifications/BehaviorGroupWizard/useSteps.ts","webpack:///./src/components/Notifications/useGetRecipients.ts","webpack:///./src/components/Notifications/useGetIntegrations.ts","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupDeleteModal.tsx","webpack:///./src/hooks/useOnDeleteWrapper.ts","webpack:///./src/services/Notifications/DeleteBehaviorGroup.ts","webpack:///./src/services/Notifications/GetAffectedNotificationsByBehaviorGroup.ts","webpack:///./src/pages/Notifications/Form/DeleteBehaviorGroupPage.tsx","webpack:///./src/pages/Notifications/List/BehaviorGroupsSection.tsx","webpack:///./src/services/Notifications/GetBehaviorGroups.ts","webpack:///./src/pages/Notifications/List/useBehaviorGroupNotificationRows.tsx","webpack:///./src/pages/Notifications/List/BundlePageBehaviorGroupContent.tsx","webpack:///./src/pages/Notifications/List/useBehaviorGroupContent.ts","webpack:///./src/pages/Notifications/List/BundlePage.tsx","webpack:///./src/pages/Notifications/List/Page.tsx","webpack:///./src/components/Notifications/NotificationsLog/NotificationsLogDateFilter.tsx","webpack:///./src/components/Notifications/NotificationsLog/NotificationsLogEmptyState.tsx","webpack:///./src/components/Notifications/NotificationsLog/NotificationsLogTable.tsx","webpack:///./src/components/Notifications/NotificationsLog/NotificationsLogToolbar.tsx","webpack:///./src/pages/Notifications/NotificationsLog/Page.tsx","webpack:///./src/pages/Notifications/Overview/CustomDataListItem.tsx","webpack:///./src/pages/Notifications/Overview/Page.tsx","webpack:///./src/Routes.tsx","webpack:///./src/app/App.tsx","webpack:///./src/services/Notifications/GetTimePreference.ts","webpack:///./src/services/Notifications/SaveTimePreference.ts"],"sourcesContent":["import { useQuery } from 'react-fetching-library';\n\nimport { Operations, Schemas } from '../../generated/OpenapiNotifications';\n\nconst getBundlesAction = (includeApplications: boolean) =>\n  Operations.NotificationResourceGetBundleFacets.actionCreator({\n    includeApplications,\n  });\n\nexport const useGetBundles = (\n  includeApplications?: boolean,\n  initFetch = true\n) => useQuery(getBundlesAction(!!includeApplications), initFetch);\n\nexport const useGetBundleByName = () => {\n  const { query } = useGetBundles(false, false); // includeApplications = false, initFetch = false\n  return async (bundleName: string) => {\n    const response = await query();\n    const payload =\n      response.payload as Operations.NotificationResourceGetApplicationsFacets.Payload;\n    if (response.errorObject) {\n      throw response.errorObject;\n    }\n\n    if (response.error || !payload) {\n      throw new Error(`Unable to retrieve bundles, status ${payload.status}`);\n    }\n\n    const value = payload.value as Schemas.Bundle[];\n    return value.find((bundle) => bundle.name === bundleName);\n  };\n};\n","// Wrapper for the Main component to manually inject the store\n// This is just a workaround, as the component is not (apparently) loading the store properly\n\nimport { Main as M } from '@redhat-cloud-services/frontend-components/Main';\nimport { InternalMainProps } from '@redhat-cloud-services/frontend-components/Main/Main';\nimport * as React from 'react';\nimport { useStore } from 'react-redux';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst AnyMain = M as any;\n\nexport const Main: React.FunctionComponent<InternalMainProps> = (props) => {\n  const store = useStore();\n  return <AnyMain store={store} {...props} />;\n};\n","import { Split, SplitItem, StackItem } from '@patternfly/react-core';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PageHeaderTitle from '@redhat-cloud-services/frontend-components/PageHeader/PageHeaderTitle';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { localUrl } from '@redhat-cloud-services/insights-common-typescript';\nimport { default as React, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport Config from '../config/Config';\nimport messages from '../properties/DefinedMessages';\nimport { linkTo } from '../Routes';\nimport { useGetBundles } from '../services/Notifications/GetBundles';\nimport { Facet } from '../types/Notification';\nimport { Main } from './Store/Main';\n\nconst eventLogService = 'Event Log';\n\nexport const NotAuthorizedPage: React.FunctionComponent = () => {\n  const chrome = useChrome();\n  const { bundleName } = useParams<Record<string, string | undefined>>();\n  const getBundles = useGetBundles();\n  const bundles: Facet | undefined = useMemo(() => {\n    if (getBundles.payload?.status === 200) {\n      return getBundles.payload.value.find((b) => b.name === bundleName);\n    }\n  }, [bundleName, getBundles.payload?.status, getBundles.payload?.value]);\n\n  const location = useLocation();\n  const intl = useIntl();\n\n  const userPreferences = (\n    <a href={localUrl(`/user-preferences/notifications/`, chrome.isBeta())}>\n      {' '}\n      User Preferences\n    </a>\n  );\n  const myUserAccess = (\n    <a\n      href={localUrl(`/settings/my-user-access?bundle=rhel }`, chrome.isBeta())}\n    >\n      {' '}\n      My User Access{' '}\n    </a>\n  );\n\n  const serviceName = React.useMemo(() => {\n    switch (chrome.getApp()) {\n      case Config.integrations.subAppId:\n        return intl.formatMessage(messages.integrations);\n      case Config.notifications.subAppId:\n        if (location.pathname === linkTo.eventLog()) {\n          return eventLogService;\n        }\n\n        return intl.formatMessage(messages.notifications);\n      default:\n        return '';\n    }\n  }, [intl, location.pathname, chrome]);\n\n  const pageHeaderTitleProps = {\n    paddingBottom: '8px',\n  };\n\n  const title = React.useMemo(() => {\n    if (serviceName === 'Notifications' && bundles) {\n      return `${serviceName} | ${bundles?.displayName}`;\n    } else {\n      return `${serviceName}`;\n    }\n  }, [bundles, serviceName]);\n\n  const description = React.useMemo(() => {\n    if (serviceName === 'Notifications') {\n      return (\n        <span>\n          This service allows you to configure which notifications different\n          users within your organization will be entitled to receiving. To do\n          this, create behavior groups and apply them to different events. Users\n          will be able to opt-in or out of receiving authorized event\n          notifications in their\n          {\n            <a\n              href={localUrl(\n                `/user-preferences/notifications/`,\n                chrome.isBeta()\n              )}\n            >\n              {' '}\n              User Preferences\n            </a>\n          }\n          .\n        </span>\n      );\n    } else {\n      return <span></span>;\n    }\n  }, [serviceName, chrome]);\n\n  return (\n    <>\n      <PageHeader>\n        <Split>\n          <SplitItem isFilled>\n            <PageHeaderTitle title={title} {...pageHeaderTitleProps}>\n              {' '}\n            </PageHeaderTitle>\n            <StackItem>{description}</StackItem>\n          </SplitItem>\n        </Split>\n      </PageHeader>\n      <Main>\n        <NotAuthorized\n          description={\n            <>\n              {' '}\n              Contact your organization administrator for more information or\n              visit\n              {myUserAccess} to learn more about your permissions. To manage\n              your notifications, go to your {userPreferences}.\n            </>\n          }\n          serviceName={serviceName}\n        />\n      </Main>\n    </>\n  );\n};\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { useAppContext } from '../app/AppContext';\nimport Config from '../config/Config';\nimport { linkTo } from '../Routes';\nimport { NotAuthorizedPage } from './NotAuthorized';\n\nexport const CheckReadPermissions: React.FunctionComponent = (props) => {\n  const chrome = useChrome();\n  const { rbac } = useAppContext();\n  const location = useLocation();\n\n  const hasReadPermissions = React.useMemo(() => {\n    const appId = chrome.getApp();\n    switch (appId) {\n      case Config.integrations.subAppId:\n        return rbac?.canReadIntegrationsEndpoints;\n      case Config.notifications.subAppId:\n        if (location.pathname === linkTo.eventLog()) {\n          return rbac?.canReadEvents;\n        }\n\n        return rbac?.canReadNotifications;\n    }\n\n    return false;\n  }, [rbac, location, chrome]);\n  return <>{!hasReadPermissions ? <NotAuthorizedPage /> : props.children}</>;\n};\n","import { Button, Split, SplitItem } from '@patternfly/react-core';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PageHeaderTitle from '@redhat-cloud-services/frontend-components/PageHeader/PageHeaderTitle';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Main } from '../../../components/Store/Main';\nimport { Messages } from '../../../properties/Messages';\nimport { linkTo } from '../../../Routes';\nimport IntegrationsList from './List';\n\nexport const IntegrationsListPage: React.FunctionComponent = () => {\n  const { updateDocumentTitle, getBundle } = useChrome();\n\n  updateDocumentTitle?.('Integrations');\n\n  const notificationsOverhaul = useFlag('platform.notifications.overhaul');\n\n  return (\n    <Section className=\"pf-c-page__main-section pf-m-light\">\n      <PageHeader>\n        <Split>\n          <SplitItem isFilled>\n            <PageHeaderTitle title={Messages.pages.integrations.list.title} />\n          </SplitItem>\n          {!notificationsOverhaul && (\n            <SplitItem>\n              <Button\n                variant=\"secondary\"\n                component={() => (\n                  <Link\n                    to={`/${getBundle()}/notifications${linkTo.eventLog()}`}\n                  />\n                )}\n              >\n                {' '}\n                View event log{' '}\n              </Button>\n            </SplitItem>\n          )}\n        </Split>\n      </PageHeader>\n      <Main>\n        <IntegrationsList />\n      </Main>\n    </Section>\n  );\n};\n","// Constatns, like link to docs and cases\n\nimport { Messages } from '../../../properties/Messages';\n\nexport const DOCUMENTATION_URL = Messages.pages.splunk.page.helpUrl;\nexport const SPLUNK_CLOUD_HEC_DOC =\n  'https://docs.splunk.com/Documentation/SplunkCloud/latest/Data/' +\n  'UsetheHTTPEventCollector#Send_data_to_HTTP_Event_Collector';\nexport const OPEN_CASE_URL =\n  'https://access.redhat.com/support/cases/#/case/new/open-case/describe-issue' +\n  '?intcmp=hp|a|a3|case&caseCreate=true&product=Red%20Hat%20Insights' +\n  '&version=Red%20Hat%20Insights';\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n} from '@patternfly/react-icons';\nimport React from 'react';\n\nimport { DOCUMENTATION_URL, OPEN_CASE_URL } from './Constants';\n\ninterface SplunkSetupFinishedProps {\n  isSuccess: boolean;\n  error: Error | undefined;\n}\n\nexport const SplunkSetupFinished: React.FunctionComponent<SplunkSetupFinishedProps> =\n  ({ isSuccess, error }) =>\n    isSuccess ? (\n      <SplunkSetupFinishedSuccess />\n    ) : (\n      <SplunkSetupFinishedFailure error={error} />\n    );\n\nexport const SplunkSetupFinishedSuccess: React.FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon\n      icon={CheckCircleIcon}\n      color=\"var(--pf-global--success-color--100)\"\n    />\n    <Title headingLevel=\"h4\" size=\"lg\">\n      Splunk integration in Insights completed\n    </Title>\n    <EmptyStateBody>\n      Splunk integration in Insights was completed. To confirm these changes,{' '}\n      <strong>go back to Splunk application</strong>.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const SplunkSetupFinishedFailure: React.FunctionComponent<{\n  error: Error | undefined;\n}> = ({ error }) => (\n  <EmptyState>\n    <EmptyStateIcon\n      icon={ExclamationCircleIcon}\n      color=\"var(--pf-global--danger-color--100)\"\n    />\n    <Title headingLevel=\"h4\" size=\"lg\">\n      Configuration failed\n    </Title>\n    <EmptyStateBody>\n      <p className=\"pf-u-mb-md\">\n        There was a problem processing the request. Please try again. If the\n        problem persists, contact Red Hat support by opening the ticket.\n      </p>\n      {error && <p>{`${error}`}</p>}\n    </EmptyStateBody>\n    <Button\n      variant=\"primary\"\n      component=\"a\"\n      href={OPEN_CASE_URL}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Open a Red Hat Support ticket\n    </Button>\n    <EmptyStateSecondaryActions>\n      <Button\n        variant=\"link\"\n        component=\"a\"\n        href={DOCUMENTATION_URL}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Go to documentation\n      </Button>\n    </EmptyStateSecondaryActions>\n  </EmptyState>\n);\n","import {\n  Page,\n  useTransformQueryResponse,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport {\n  validatedResponse,\n  validationResponseTransformer,\n} from 'openapi2typescript';\nimport { useParameterizedQuery, useQuery } from 'react-fetching-library';\n\nimport { Schemas } from '../generated/OpenapiIntegrations';\nimport { Operations } from '../generated/OpenapiNotifications';\nimport { toNotifications } from '../types/adapters/NotificationAdapter';\n\nexport const listNotificationsActionCreator = (pager?: Page) => {\n  const query = (pager ?? Page.defaultPage()).toQuery();\n  return Operations.NotificationResourceGetEventTypes.actionCreator({\n    limit: +query.limit,\n    offset: +query.offset,\n    applicationIds: query.filterApplicationId as unknown as Array<Schemas.UUID>,\n    eventTypeName: query.filterEventFilterName as unknown as string,\n    bundleId: query.filterBundleId as unknown as string,\n    sortBy: `${query.sortColumn}:${query.sortDirection}`,\n  });\n};\n\nconst decoder = validationResponseTransformer(\n  (payload: Operations.NotificationResourceGetEventTypes.Payload) => {\n    if (payload.status === 200) {\n      return validatedResponse(\n        'eventTypesArray',\n        200,\n        {\n          ...payload.value,\n          data: toNotifications(payload.value.data),\n        },\n        payload.errors\n      );\n    }\n\n    return payload;\n  }\n);\n\nexport const useListNotifications = (pager?: Page) =>\n  useTransformQueryResponse(\n    useQuery(listNotificationsActionCreator(pager)),\n    decoder\n  );\n\nexport const useParameterizedListNotifications = () =>\n  useTransformQueryResponse(\n    useParameterizedQuery(listNotificationsActionCreator),\n    decoder\n  );\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport {\n  validatedResponse,\n  validationResponseTransformer,\n} from 'openapi2typescript';\nimport { useClient, useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { UUID } from '../../types/Notification';\n\nexport const getBehaviorGroupByNotificationDecoder =\n  validationResponseTransformer(\n    (\n      payload: Operations.NotificationResourceGetLinkedBehaviorGroups.Payload\n    ) => {\n      if (payload.status === 200) {\n        return validatedResponse(\n          'BehaviorGroupId',\n          200,\n          payload.value.map((value) => value.id),\n          payload.errors\n        );\n      }\n\n      return payload;\n    }\n  );\n\nexport const getBehaviorGroupByNotificationAction = (notificationId: UUID) =>\n  Operations.NotificationResourceGetLinkedBehaviorGroups.actionCreator({\n    eventTypeId: notificationId,\n  });\n\nexport const useGetBehaviorGroupByNotification = (notificationId: UUID) => {\n  return useTransformQueryResponse(\n    useQuery(getBehaviorGroupByNotificationAction(notificationId)),\n    getBehaviorGroupByNotificationDecoder\n  );\n};\n\nexport const useGetAnyBehaviorGroupByNotification = () => {\n  const client = useClient();\n  return async (notificationId: UUID) => {\n    const { errorObject, payload } = await client.query(\n      getBehaviorGroupByNotificationAction(notificationId)\n    );\n    if (errorObject) {\n      throw errorObject;\n    }\n\n    return getBehaviorGroupByNotificationDecoder(\n      payload as Operations.NotificationResourceGetLinkedBehaviorGroups.Payload\n    );\n  };\n};\n","import { Operations } from '../../generated/OpenapiNotifications';\nimport { UUID } from '../../types/Notification';\nimport NotificationServiceUpdateEventTypeBehaviors = Operations.NotificationResourceUpdateEventTypeBehaviors;\n\nexport const linkBehaviorGroupAction = (\n  notificationId: UUID,\n  behaviorGroupIds: Array<UUID>\n) => {\n  return NotificationServiceUpdateEventTypeBehaviors.actionCreator({\n    body: behaviorGroupIds,\n    eventTypeId: notificationId,\n  });\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport {\n  validatedResponse,\n  validationResponseTransformer,\n} from 'openapi2typescript';\nimport { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { BehaviorGroup, UUID } from '../../types/Notification';\n\ntype Payload =\n  | Operations.NotificationResourceCreateBehaviorGroup.Payload\n  | Operations.NotificationResourceUpdateBehaviorGroup.Payload;\n\nexport type SaveBehaviorGroupRequest = {\n  eventTypesIds?: Array<UUID>;\n  endpointIds?: Array<UUID>;\n} & (\n  | {\n      // Update request\n      id: UUID;\n      displayName?: string;\n    }\n  | {\n      // Create request\n      bundleId: UUID;\n      displayName: string;\n    }\n);\n\nconst decoder = validationResponseTransformer((payload: Payload) => {\n  if (payload.type === 'CreateBehaviorGroupResponse') {\n    const behaviorGroup: BehaviorGroup = {\n      id: payload.value.id,\n      displayName: payload.value.display_name,\n      bundleId: payload.value.bundle_id,\n      isDefault: false,\n      bundleName: undefined,\n      actions: [], // can't get the actions from only the ids,\n      events: [], // can't get the eventTypes from only the ids,\n    };\n    return validatedResponse(\n      'BehaviorGroup',\n      payload.status,\n      behaviorGroup,\n      payload.errors\n    );\n  }\n\n  return payload;\n});\n\nconst saveBehaviorGroupActionCreator = (\n  behaviorGroup: SaveBehaviorGroupRequest\n) => {\n  if ('id' in behaviorGroup) {\n    return Operations.NotificationResourceUpdateBehaviorGroup.actionCreator({\n      id: behaviorGroup.id,\n      body: {\n        display_name: behaviorGroup.displayName,\n        endpoint_ids: behaviorGroup.endpointIds,\n        event_type_ids: behaviorGroup.eventTypesIds,\n      },\n    });\n  }\n\n  return Operations.NotificationResourceCreateBehaviorGroup.actionCreator({\n    body: {\n      bundle_id: behaviorGroup.bundleId,\n      display_name: behaviorGroup.displayName,\n      endpoint_ids: behaviorGroup.endpointIds,\n      event_type_ids: behaviorGroup.eventTypesIds,\n    },\n  });\n};\n\nexport const useSaveBehaviorGroupMutation = () =>\n  useTransformQueryResponse(\n    useMutation(saveBehaviorGroupActionCreator),\n    decoder\n  );\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { UUID } from '../../types/Notification';\n\ntype UpdateBehaviorGroupActionsParams = {\n  behaviorGroupId: UUID;\n  endpointIds: Array<UUID>;\n};\n\nconst updateBehaviorGroupActionsActionCreator = (\n  params: UpdateBehaviorGroupActionsParams\n) => {\n  return Operations.NotificationResourceUpdateBehaviorGroupActions.actionCreator(\n    {\n      behaviorGroupId: params.behaviorGroupId,\n      body: params.endpointIds,\n    }\n  );\n};\n\nexport const useUpdateBehaviorGroupActionsMutation = () =>\n  useMutation(updateBehaviorGroupActionsActionCreator);\n","/*\nSteps:\n\n1) [POST] Create Integrations under /api/integrations/v1.0/endpoints with the payload:\n{\n    \"name\": \"Splunk Automation\",\n    \"enabled\": true,\n    \"type\": \"camel\",\n    \"sub_type\": \"splunk\",\n    \"description\": \"\",\n    \"properties\": {\n        \"url\": \"http://decd-187-3-186-244.ngrok.io\",\n        \"disable_ssl_verification\": false,\n        \"secret_token\": \"MYHEC_TOKEN\",\n        \"basic_authentication\": {},\n        \"extras\": {}\n    }\n}\n\n2) Create behavior group under /api/notifications/v1.0/notifications/behaviorGroups with the payload:\n\n{\n  \"bundle_id\":\"35fd787b-a345-4fe8-a135-7773de15905e\",\n  \"display_name\":\"Splunk-automation\"\n}\n\n3) [POST] Update behavior group under api/notifications/v1.0/notifications/behaviorGroups/{BEHAVIOR_GROUP_ID}/actions with the payload:\n\n  [\"8d8dca57-1834-48dd-b6ac-265c949c5e60\"] <<-- Id of the integration\n\n4) [PUT] Update eventType under /api/notifications/v1.0/notifications/eventTypes/{EVENT_TYPE_UUID}/behaviorGroups with the payload:\n\n[\"ff59b502-da25-4297-bd88-6934ad0e0d63\"] <<- Behavior group ID\n*/\n\nimport { useClient } from 'react-fetching-library';\n\nimport { useGetAllEventTypes } from '../../../services/GetEventTypes';\nimport { useGetAnyBehaviorGroupByNotification } from '../../../services/Notifications/GetBehaviorGroupByNotificationId';\nimport { useGetBundleByName } from '../../../services/Notifications/GetBundles';\nimport { linkBehaviorGroupAction } from '../../../services/Notifications/LinkBehaviorGroup';\nimport { useSaveBehaviorGroupMutation } from '../../../services/Notifications/SaveBehaviorGroup';\nimport { useUpdateBehaviorGroupActionsMutation } from '../../../services/Notifications/UpdateBehaviorGroupActions';\nimport { useSaveIntegrationMutation } from '../../../services/useSaveIntegration';\nimport {\n  Integration,\n  IntegrationCamel,\n  IntegrationType,\n  NewIntegrationTemplate,\n} from '../../../types/Integration';\nimport {\n  BehaviorGroup,\n  BehaviorGroupRequest,\n  UUID,\n} from '../../../types/Notification';\n\nexport const SPLUNK_GROUP_NAME = 'SPLUNK_INTEGRATION';\nexport const SPLUNK_INTEGRATION_NAME = 'SPLUNK_AUTOMATION';\nexport const SPLUNK_BEHAVIOR_GROUP_NAME = 'SPLUNK_AUTOMATION_GROUP';\nexport const BUNDLE_NAME = 'rhel';\n\ninterface SplunkEventsDef {\n  [Identifier: string]: string | string[];\n}\n\nconst DEFAULT_SPLUNK_EVENTS: SplunkEventsDef = {\n  advisor: '*',\n  policies: '*',\n  drift: '*',\n  compliance: '*',\n  'malware-detection': '*',\n  patch: '*',\n  vulnerability: '*',\n};\n\nexport const useSplunkSetup = () => {\n  const createSplunkIntegration = useCreateSplunkIntegration();\n  const createSplunkBehaviorGroup = useCreateSplunkBehaviorGroup();\n  const updateSplunkBehaviorActions = useUpdateSplunkBehaviorActions();\n  const attachEvents = useAttachEventsToSplunk();\n\n  return async ({ hecToken, splunkServerHostName }, onProgress) => {\n    const integrationName = SPLUNK_INTEGRATION_NAME;\n    const behaviorGroupName = SPLUNK_BEHAVIOR_GROUP_NAME;\n    const bundleName = BUNDLE_NAME;\n    const events = DEFAULT_SPLUNK_EVENTS;\n\n    onProgress(`Creating Integration ${integrationName}...`);\n    const integration = await createSplunkIntegration({\n      integrationName,\n      hecToken,\n      splunkServerHostName,\n    });\n    onProgress(' OK', 'pf-u-success-color-200');\n\n    onProgress(`\\nCreating Behavior Group ${behaviorGroupName}...`);\n    const behaviorGroup = await createSplunkBehaviorGroup({\n      behaviorGroupName,\n      bundleName,\n    });\n    onProgress(' OK', 'pf-u-success-color-200');\n\n    onProgress(\n      '\\nAssociating integration as an action for the behavior group...'\n    );\n    await updateSplunkBehaviorActions(behaviorGroup, integration);\n\n    onProgress(' OK', 'pf-u-success-color-200');\n    onProgress('\\n\\nAssociating events to the behavior group:\\n');\n\n    await attachEvents(behaviorGroup, events, onProgress);\n  };\n};\n\nconst useCreateSplunkIntegration = () => {\n  const { mutate } = useSaveIntegrationMutation();\n  return async ({\n    integrationName,\n    splunkServerHostName,\n    hecToken,\n  }): Promise<Integration | undefined> => {\n    const newIntegration: NewIntegrationTemplate<IntegrationCamel> = {\n      type: IntegrationType.SPLUNK,\n      name: integrationName,\n      url: splunkServerHostName,\n      secretToken: hecToken,\n      isEnabled: true,\n      sslVerificationEnabled: true,\n    };\n\n    const { payload, error, errorObject } = await mutate(newIntegration);\n    if (errorObject) {\n      throw errorObject;\n    }\n\n    if (error) {\n      throw new Error(`Error when creating integration ${integrationName}`);\n    }\n\n    return payload?.value as Integration;\n  };\n};\n\nconst useCreateSplunkBehaviorGroup = () => {\n  const { mutate } = useSaveBehaviorGroupMutation();\n  const getBundleByName = useGetBundleByName();\n\n  return async ({ behaviorGroupName, bundleName }): Promise<BehaviorGroup> => {\n    const bundle = await getBundleByName(bundleName);\n    if (!bundle) {\n      throw new Error(`Unable to find bundle ${bundleName}`);\n    }\n\n    const behaviorGroup: BehaviorGroupRequest = {\n      bundleId: bundle.id as UUID,\n      displayName: behaviorGroupName,\n      actions: [], // ignored\n      events: [], // ignored\n    };\n\n    const { payload, error, errorObject } = await mutate(behaviorGroup);\n    if (errorObject) {\n      throw errorObject;\n    }\n\n    if (error) {\n      throw new Error(\n        `Error when creating behavior group ${behaviorGroupName}`\n      );\n    }\n\n    return payload?.value as BehaviorGroup;\n  };\n};\n\nconst useUpdateSplunkBehaviorActions = () => {\n  const { mutate } = useUpdateBehaviorGroupActionsMutation();\n  return async (behaviorGroup, integration) => {\n    const endpointIds = behaviorGroup.actions || [];\n    endpointIds.push(integration.id);\n\n    const params = {\n      behaviorGroupId: behaviorGroup.id,\n      endpointIds,\n    };\n    const { payload, error, errorObject } = await mutate(params);\n    if (errorObject) {\n      throw errorObject;\n    }\n\n    if (error) {\n      throw new Error(\n        `Error when linking behavior group ${behaviorGroup.id}` +\n          ` with integration ${integration.id}`\n      );\n    }\n\n    return payload?.value;\n  };\n};\n\nconst useAttachEventsToSplunk = () => {\n  const getAllEventTypes = useGetAllEventTypes();\n  const client = useClient();\n  const getAnyBehaviorGroupByNotification =\n    useGetAnyBehaviorGroupByNotification();\n\n  const appendActionToNotification = async (eventType, behaviorGroup) => {\n    const existingActions = await getAnyBehaviorGroupByNotification(\n      eventType.id as UUID\n    );\n    const existingActionIds = existingActions.value as UUID[];\n    const newActionIds = [...existingActionIds, behaviorGroup.id];\n\n    const { payload, errorObject, error } = await client.query(\n      linkBehaviorGroupAction(eventType.id, newActionIds)\n    );\n    if (errorObject) {\n      throw errorObject;\n    }\n\n    if (error) {\n      throw new Error(`Unsuccessful linking of event type ${eventType.id}`);\n    }\n\n    return payload;\n  };\n\n  return async (behaviorGroup, events, onProgress) => {\n    const eventTypes = await getAllEventTypes();\n\n    const selectedEventTypes = eventTypes.filter((eventType) => {\n      if (!eventType?.application) {\n        return false;\n      }\n\n      if (eventType.application.bundle_id !== behaviorGroup.bundleId) {\n        return false;\n      }\n\n      const expectEvents = events[eventType.application.name];\n      if (\n        !expectEvents ||\n        (expectEvents !== '*' && !expectEvents.includes(eventType.name))\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    for (const eventType of selectedEventTypes) {\n      onProgress(\n        `  ${eventType.application?.display_name} - ${eventType.display_name}...`\n      );\n      try {\n        await appendActionToNotification(eventType, behaviorGroup);\n        onProgress(' ASSOCIATED\\n', 'pf-u-success-color-200');\n      } catch (error) {\n        onProgress(' ERROR!\\n', 'pf-u-danger-color-200');\n        console.log(error);\n      }\n    }\n  };\n};\n","import {\n  Direction,\n  Page,\n  Sort,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { useClient } from 'react-fetching-library';\n\nimport { Schemas } from '../generated/OpenapiNotifications';\nimport { listNotificationsActionCreator } from './useListNotifications';\n\nexport const useGetAllEventTypes = () => {\n  const { query } = useClient();\n  const fetchPage = async (page?: Page): Promise<Schemas.EventType[]> => {\n    if (!page) {\n      page = Page.defaultPage().withSort(\n        Sort.by('application', Direction.ASCENDING)\n      );\n    }\n\n    const { errorObject, payload } = await query(\n      listNotificationsActionCreator(page)\n    );\n    if (errorObject) {\n      throw errorObject;\n    }\n\n    if (payload?.type === 'PageEventType') {\n      const events = payload?.value?.data as Schemas.EventType[];\n      if (events.length === 0) {\n        return [];\n      }\n\n      return [...events, ...(await fetchPage(page.nextPage()))];\n    }\n\n    throw new Error(`Unknow payload type for eventTypes ${payload?.type}`);\n  };\n\n  return fetchPage;\n};\n","import {\n  ActionGroup,\n  Button,\n  CodeBlock,\n  CodeBlockCode,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n  ListVariant,\n  Popover,\n  ProgressStepProps,\n  TextInput,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  HelpIcon,\n} from '@patternfly/react-icons';\nimport { addDangerNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { string } from 'yup';\n\nimport {\n  DOCUMENTATION_URL,\n  OPEN_CASE_URL,\n  SPLUNK_CLOUD_HEC_DOC,\n} from './Constants';\nimport { useSplunkSetup } from './useSplunkSetup';\n\ninterface SplunkSetupFormProps {\n  setStep: Dispatch<SetStateAction<number>>;\n  stepIsInProgress: boolean;\n  setStepIsInProgress: Dispatch<SetStateAction<boolean>>;\n  stepVariant: ProgressStepProps['variant'];\n  setStepVariant: Dispatch<SetStateAction<ProgressStepProps['variant']>>;\n  hecToken: string;\n  setHecToken: Dispatch<SetStateAction<string>>;\n  splunkServerHostName: string;\n  setHostName: Dispatch<SetStateAction<string>>;\n  automationLogs: React.ReactChild[];\n  setAutomationLogs: Dispatch<SetStateAction<React.ReactChild[]>>;\n  setError: Dispatch<SetStateAction<Error | undefined>>;\n}\n\nconst SplunkURLSchema = string()\n  .url()\n  .test('has-no-path', 'URL contains path or parameters', (url) => {\n    let urlObj;\n    try {\n      urlObj = new URL(url as string);\n    } catch {\n      return false;\n    }\n\n    return (\n      (urlObj.pathname === '/' || urlObj.pathname === '') &&\n      urlObj.search === ''\n    );\n  });\n\nexport const SplunkSetupForm: React.FunctionComponent<SplunkSetupFormProps> = ({\n  setStep,\n  stepIsInProgress,\n  setStepIsInProgress,\n  stepVariant,\n  setStepVariant,\n  hecToken,\n  setHecToken,\n  splunkServerHostName,\n  setHostName,\n  automationLogs,\n  setAutomationLogs,\n  setError,\n}) => {\n  const startSplunkAutomation = useSplunkSetup();\n  const [isDisabled, setIsDisabled] = useState<boolean>(true);\n  const [validatedServerHostname, setValidatedServerHostname] =\n    useState<ValidatedOptions>(ValidatedOptions.default);\n  const [validatedHecToken, setValidatedHecToken] = useState<ValidatedOptions>(\n    ValidatedOptions.default\n  );\n\n  const onHostnameChange = async (value) => {\n    setHostName(value);\n    if (value === '') {\n      setValidatedServerHostname(ValidatedOptions.default);\n    } else {\n      const isValid = await SplunkURLSchema.isValid(value);\n      setValidatedServerHostname(\n        isValid ? ValidatedOptions.success : ValidatedOptions.error\n      );\n    }\n  };\n\n  const onHecTokenChange = async (value) => {\n    setHecToken(value);\n    if (value === '') {\n      setValidatedHecToken(ValidatedOptions.default);\n    } else {\n      const isValid = await string().uuid().isValid(value);\n      setValidatedHecToken(\n        isValid ? ValidatedOptions.success : ValidatedOptions.error\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (\n      [validatedServerHostname, validatedHecToken].every(\n        (v) => v === ValidatedOptions.success\n      )\n    ) {\n      setIsDisabled(false);\n    } else {\n      setIsDisabled(true);\n    }\n  }, [validatedServerHostname, validatedHecToken]);\n\n  const onProgress = (message, className?) => {\n    let newLog = message;\n    if (className) {\n      newLog = <span className={className}>{message}</span>;\n    }\n\n    setAutomationLogs((prevLogs) => [...prevLogs, newLog]);\n  };\n\n  const onStart = async () => {\n    setStepIsInProgress(true);\n    setAutomationLogs([]);\n\n    try {\n      await startSplunkAutomation(\n        { hecToken, splunkServerHostName },\n        onProgress\n      );\n    } catch (error) {\n      onProgress(`\\n${error}`, 'pf-u-danger-color-200');\n      setStepIsInProgress(false);\n      setStepVariant('danger');\n\n      addDangerNotification(\n        'Configuration failed',\n        <SplunkSetupFailedToast />,\n        true\n      );\n      setError(error as Error);\n      return;\n    }\n\n    setIsDisabled(false);\n    setStepIsInProgress(false);\n    setStepVariant('success');\n    onProgress('\\nDONE!', 'pf-u-success-color-200');\n  };\n\n  const onFinish = () => {\n    setStep((prevStep) => prevStep + 1);\n  };\n\n  return (\n    <Grid>\n      <GridItem span={6}>\n        <Form className=\"pf-u-mr-md\">\n          <FormGroup\n            label=\"Splunk HEC URL\"\n            labelIcon={\n              <Popover\n                headerContent={\n                  <div>\n                    The server <b>hostname/IP Address</b> and <b>port</b> of\n                    your splunk HTTP Event Collector\n                  </div>\n                }\n                bodyContent={\n                  <div>\n                    For Splunk Enterprise the port is by default 8088.\n                    <br />\n                    For Splunk Cloud Platform see{' '}\n                    <a\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      href={SPLUNK_CLOUD_HEC_DOC}\n                    >\n                      documentation\n                    </a>\n                    .\n                  </div>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"splunk-server-hostname\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n            isRequired\n            fieldId=\"splunk-server-hostname\"\n            helperTextInvalid=\"Invalid URL. Example: https://hostname:8088\"\n            validated={validatedServerHostname}\n          >\n            <TextInput\n              isRequired\n              type=\"text\"\n              id=\"splunk-server-hostname\"\n              name=\"splunk-server-hostname\"\n              aria-describedby=\"splunk-server-hostname-helper\"\n              value={splunkServerHostName}\n              validated={validatedServerHostname}\n              onChange={onHostnameChange}\n            />\n          </FormGroup>\n          <FormGroup\n            label=\"Splunk HEC Token\"\n            fieldId=\"splunk-hec-token\"\n            isRequired\n            helperTextInvalid=\"Invalid HEC token. Example: 123e4567-e89b-12d3-a456-426614174000\"\n            validated={validatedHecToken}\n          >\n            <TextInput\n              isRequired\n              type=\"text\"\n              id=\"splunk-hec-token\"\n              name=\"splunk-hec-token\"\n              aria-describedby=\"splunk-hec-token-helper\"\n              validated={validatedHecToken}\n              value={hecToken}\n              onChange={onHecTokenChange}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <SplunkAutomationButton\n              {...{\n                onStart,\n                onFinish,\n                stepIsInProgress,\n                stepVariant,\n                isDisabled,\n              }}\n            />\n          </ActionGroup>\n        </Form>\n      </GridItem>\n\n      <GridItem span={6}>\n        <CodeBlock>\n          <CodeBlockCode>{automationLogs}</CodeBlockCode>\n        </CodeBlock>\n      </GridItem>\n    </Grid>\n  );\n};\n\nconst SplunkAutomationButton = ({\n  onStart,\n  onFinish,\n  stepIsInProgress,\n  stepVariant,\n  isDisabled,\n}) => {\n  if (stepIsInProgress) {\n    return (\n      <Button variant=\"primary\" isLoading={true}>\n        Configuration in progress\n      </Button>\n    );\n  } else if (stepVariant === 'success' || stepVariant === 'danger') {\n    return (\n      <Button variant=\"primary\" onClick={onFinish}>\n        {stepVariant === 'success' ? (\n          <CheckCircleIcon />\n        ) : (\n          <ExclamationCircleIcon />\n        )}{' '}\n        Next: Review\n      </Button>\n    );\n  } else {\n    return (\n      <Button variant=\"primary\" isDisabled={isDisabled} onClick={onStart}>\n        Run Configuration\n      </Button>\n    );\n  }\n};\n\nconst SplunkSetupFailedToast = () => (\n  <>\n    <p className=\"pf-u-mb-md\">\n      There was a problem processing the request. Please try again. If the\n      problem persists, contact Red Hat support by opening the ticket.\n    </p>\n    <List variant={ListVariant.inline}>\n      <ListItem>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={OPEN_CASE_URL}>\n          Open a Red Hat Support ticket\n        </a>\n      </ListItem>\n      <ListItem>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={DOCUMENTATION_URL}>\n          Go to documentation\n        </a>\n      </ListItem>\n    </List>\n  </>\n);\n","import {\n  Button,\n  Card,\n  CardBody,\n  Divider,\n  Popover,\n  ProgressStep,\n  ProgressStepProps,\n  ProgressStepper,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport {\n  ExternalLinkSquareAltIcon,\n  HelpIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PageHeaderTitle from '@redhat-cloud-services/frontend-components/PageHeader/PageHeaderTitle';\nimport React, { useState } from 'react';\n\nimport { Main } from '../../../components/Store/Main';\nimport { Messages } from '../../../properties/Messages';\nimport { DOCUMENTATION_URL } from './Constants';\nimport { SplunkSetupFinished } from './SplunkSetupFinished';\nimport { SplunkSetupForm } from './SplunkSetupForm';\n\nconst SplunkSetupTitle: React.FunctionComponent = () => (\n  <>\n    <PageHeaderTitle\n      title={\n        <>\n          {Messages.pages.splunk.page.title}\n          <Popover\n            bodyContent={Messages.pages.splunk.page.help}\n            footerContent={\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={DOCUMENTATION_URL}\n              >\n                Learn more <ExternalLinkSquareAltIcon />\n              </a>\n            }\n          >\n            <Button\n              variant=\"plain\"\n              aria-label=\"Help description\"\n              className=\"title-help-label\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        </>\n      }\n    />\n    {Messages.pages.splunk.page.description}\n  </>\n);\n\nexport const SplunkSetupPage: React.FunctionComponent = () => {\n  const [step, setStep] = useState(2);\n  const [stepIsInProgress, setStepIsInProgress] = useState(false);\n  const [stepVariant, setStepVariant] =\n    useState<ProgressStepProps['variant']>('info');\n\n  const [hecToken, setHecToken] = useState('');\n  const [splunkServerHostName, setHostName] = useState('');\n  const [automationLogs, setAutomationLogs] = useState<React.ReactChild[]>([\n    `Logs from the automation would appear here\\n`,\n  ]);\n  const [error, setError] = useState<Error | undefined>();\n\n  return (\n    <>\n      <PageHeader>\n        <SplunkSetupTitle />\n      </PageHeader>\n      <Main>\n        <Card>\n          <CardBody>\n            <Split hasGutter>\n              <SplitItem>\n                <ProgressStepper isVertical>\n                  <ProgressStep\n                    isCurrent={step === 1}\n                    variant=\"success\"\n                    description=\"Create Index and HEC\"\n                    id=\"step1-splunk-app-step\"\n                    titleId=\"step1-splunk-app-step\"\n                    aria-label=\"completed Splunk app step (step 1)\"\n                  >\n                    Step 1\n                  </ProgressStep>\n                  <ProgressStep\n                    isCurrent={step === 2}\n                    icon={\n                      step === 2 && stepIsInProgress ? (\n                        <InProgressIcon />\n                      ) : undefined\n                    }\n                    variant={step < 2 ? 'info' : stepVariant}\n                    description=\"Configure Splunk integration in Insights\"\n                    id=\"step2-setup-step\"\n                    titleId=\"step2-setup-step\"\n                    aria-label=\"setup step (step 2)\"\n                  >\n                    Step 2\n                  </ProgressStep>\n                  <ProgressStep\n                    isCurrent={step === 3}\n                    variant={step < 3 ? 'pending' : stepVariant}\n                    description=\"Review\"\n                    id=\"step3-review-step\"\n                    titleId=\"step3-review-step\"\n                    aria-label=\"review step (step 3)\"\n                  >\n                    Step 3\n                  </ProgressStep>\n                </ProgressStepper>\n              </SplitItem>\n              <Divider isVertical />\n              <SplitItem isFilled>\n                {step === 2 && (\n                  <SplunkSetupForm\n                    {...{\n                      setStep,\n                      stepIsInProgress,\n                      setStepIsInProgress,\n                      stepVariant,\n                      setStepVariant,\n                      hecToken,\n                      setHecToken,\n                      splunkServerHostName,\n                      setHostName,\n                      automationLogs,\n                      setAutomationLogs,\n                      setError,\n                    }}\n                  />\n                )}\n                {step === 3 && (\n                  <SplunkSetupFinished\n                    isSuccess={stepVariant === 'success'}\n                    error={error}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n          </CardBody>\n        </Card>\n      </Main>\n    </>\n  );\n};\n","import { Button, ButtonProps } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport * as React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\ntype ButtonLinkProps = ButtonProps & Omit<LinkProps, 'component'>;\n\nexport const ButtonLink: React.FunctionComponent<ButtonLinkProps> = ({\n  to,\n  ...props\n}) => {\n  const { getBundle } = useChrome();\n  return (\n    <Link to={`/${getBundle()}/notifications${to}`}>\n      <Button {...props}>{props.children}</Button>\n    </Link>\n  );\n};\n","import {\n  DatePicker,\n  DatePickerRef,\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  Split,\n  SplitItem,\n  TextInputProps,\n} from '@patternfly/react-core';\nimport { important } from 'csx';\nimport { add, format, isAfter, isBefore, min, parseISO } from 'date-fns';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { Dispatch, useRef } from 'react';\nimport { SetStateAction } from 'react';\nimport { style } from 'typestyle';\n\nimport { EventPeriod } from '../../../types/Event';\n\nexport enum EventLogDateFilterValue {\n  TODAY = 'today',\n  YESTERDAY = 'yesterday',\n  LAST_7 = 'last_7',\n  LAST_14 = 'last_14',\n  CUSTOM = 'custom',\n}\n\nconst labels: Record<EventLogDateFilterValue, string> = {\n  [EventLogDateFilterValue.TODAY]: 'Today',\n  [EventLogDateFilterValue.YESTERDAY]: 'Yesterday',\n  [EventLogDateFilterValue.LAST_7]: 'Last 7 days',\n  [EventLogDateFilterValue.LAST_14]: 'Last 14 days',\n  [EventLogDateFilterValue.CUSTOM]: 'Custom',\n};\n\nconst datePickerClassName = style({\n  backgroundColor: important('white'),\n  cursor: 'pointer',\n  $nest: {\n    '&::placeholder': {\n      color: important('black'),\n    },\n    '&:hover': {\n      borderBottomColor: 'var(--pf-v5-global--active-color--100)',\n    },\n  },\n});\n\nclass EventLogSelectObject implements SelectOptionObject {\n  readonly value: EventLogDateFilterValue;\n\n  constructor(value: EventLogDateFilterValue) {\n    this.value = value;\n  }\n\n  toString(): string {\n    return labels[this.value];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  compareTo(selectOption: any): boolean {\n    if (selectOption instanceof EventLogSelectObject) {\n      return selectOption.value === this.value;\n    }\n\n    return false;\n  }\n}\n\nconst dateInputProps: TextInputProps = {\n  isReadOnly: true,\n  className: datePickerClassName,\n};\n\ninterface CustomDateFilterProps {\n  retentionDays: number;\n  period: EventPeriod;\n  setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n}\n\nconst CustomDateFilter: React.FunctionComponent<CustomDateFilterProps> = (\n  props\n) => {\n  const maxDate = React.useMemo(() => new Date(), []);\n  const minDate = React.useMemo(\n    () =>\n      add(maxDate, {\n        days: -14,\n      }),\n    [maxDate]\n  );\n\n  const startRangeValidators = React.useMemo(\n    () => [\n      (date) => {\n        if (isBefore(date, minDate)) {\n          return 'Date is before the retention policy';\n        } else if (isAfter(date, maxDate)) {\n          return 'Date is after today';\n        } else if (props.period[1] && isAfter(date, props.period[1])) {\n          return 'Start date must be before end date';\n        }\n\n        return '';\n      },\n    ],\n    [minDate, maxDate, props.period]\n  );\n\n  const endRangeValidators = React.useMemo(\n    () => [\n      (date) => {\n        if (isBefore(date, minDate)) {\n          return 'Date is before the retention policy';\n        } else if (isAfter(date, maxDate)) {\n          return 'Date is after today';\n        } else if (props.period[0] && isBefore(date, props.period[0])) {\n          return 'End date must be after start date';\n        }\n\n        return '';\n      },\n    ],\n    [minDate, maxDate, props.period]\n  );\n\n  const setStartDate = React.useCallback(\n    (start: string) => {\n      const setPeriod = props.setPeriod;\n      const startDate = parseISO(start);\n      setPeriod(\n        produce((draft) => {\n          draft[0] = startDate;\n          if (!draft[1]) {\n            draft[1] = min([add(startDate, { days: 1 }), maxDate]);\n          }\n        })\n      );\n    },\n    [props.setPeriod, maxDate]\n  );\n\n  const setEndDate = React.useCallback(\n    (end: string) => {\n      const setPeriod = props.setPeriod;\n      setPeriod(\n        produce((draft) => {\n          draft[1] = parseISO(end);\n        })\n      );\n    },\n    [props.setPeriod]\n  );\n\n  const startValue: string | undefined = React.useMemo(\n    () => (props.period[0] ? format(props.period[0], 'yyyy-MM-dd') : undefined),\n    [props.period]\n  );\n  const endValue: string | undefined = React.useMemo(\n    () => (props.period[1] ? format(props.period[1], 'yyyy-MM-dd') : undefined),\n    [props.period]\n  );\n\n  const startDateRef = useRef<DatePickerRef>(null);\n  const endDateRef = useRef<DatePickerRef>(null);\n\n  const onClickStartDateInput = React.useCallback(() => {\n    startDateRef.current?.setCalendarOpen(true);\n  }, [startDateRef]);\n\n  const onClickEndDateInput = React.useCallback(() => {\n    endDateRef.current?.setCalendarOpen(true);\n  }, [endDateRef]);\n\n  const startDateInputProps = React.useMemo<TextInputProps>(\n    () => ({\n      ...dateInputProps,\n      onClick: onClickStartDateInput,\n    }),\n    [onClickStartDateInput]\n  );\n\n  const endDateInputProps = React.useMemo<TextInputProps>(\n    () => ({\n      ...dateInputProps,\n      onClick: onClickEndDateInput,\n    }),\n    [onClickEndDateInput]\n  );\n\n  return (\n    <Split>\n      <SplitItem>\n        <DatePicker\n          placeholder=\"Start\"\n          inputProps={startDateInputProps}\n          validators={startRangeValidators}\n          onChange={setStartDate}\n          value={startValue}\n          ref={startDateRef}\n        />\n      </SplitItem>\n      <SplitItem className=\"pf-v5-u-align-self-center pf-v5-u-px-sm pf-v5-u-color-300\">\n        to\n      </SplitItem>\n      <SplitItem>\n        <DatePicker\n          placeholder=\"End\"\n          inputProps={endDateInputProps}\n          validators={endRangeValidators}\n          onChange={setEndDate}\n          value={endValue}\n          ref={endDateRef}\n        />\n      </SplitItem>\n    </Split>\n  );\n};\n\nexport interface EventLogDateFilterProps {\n  value: EventLogDateFilterValue;\n  setValue: (value: EventLogDateFilterValue) => void;\n  retentionDays: number;\n  period: EventPeriod;\n  setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n}\n\nexport const EventLogDateFilter: React.FunctionComponent<EventLogDateFilterProps> =\n  (props) => {\n    const options = React.useMemo(\n      () =>\n        Object.values(EventLogDateFilterValue).map((v) => (\n          <SelectOption key={v} value={new EventLogSelectObject(v)} />\n        )),\n      []\n    );\n    const [isOpen, setOpen] = React.useState(false);\n    const onToggle = React.useCallback(\n      () => setOpen((prev) => !prev),\n      [setOpen]\n    );\n    const value = React.useMemo(\n      () => new EventLogSelectObject(props.value),\n      [props.value]\n    );\n    const onSelect = React.useCallback(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (_e: any, selectObject: SelectOptionObject | string) => {\n        const setValue = props.setValue;\n        if (selectObject instanceof EventLogSelectObject) {\n          setValue(selectObject.value);\n          setOpen(false);\n        }\n      },\n      [props.setValue]\n    );\n\n    return (\n      <Split>\n        <SplitItem>\n          <Select\n            isOpen={isOpen}\n            variant={SelectVariant.single}\n            onToggle={onToggle}\n            selections={value}\n            onSelect={onSelect}\n          >\n            {options}\n          </Select>\n        </SplitItem>\n        {props.value === EventLogDateFilterValue.CUSTOM && (\n          <SplitItem>\n            <CustomDateFilter\n              period={props.period}\n              setPeriod={props.setPeriod}\n              retentionDays={props.retentionDays}\n            />\n          </SplitItem>\n        )}\n      </Split>\n    );\n  };\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  InProgressIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\nimport {\n  c_alert_m_warning__icon_Color,\n  global_danger_color_100,\n  global_success_color_100,\n} from '@patternfly/react-tokens';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { Status } from '../Status/Status';\n\ninterface NotificationStatusProps {\n  status: Schemas.EventLogEntryActionStatus;\n}\n\nexport const NotificationStatus: React.FunctionComponent<NotificationStatusProps> =\n  (props) => {\n    switch (props.status) {\n      case 'FAILED':\n        return <NotificationStatusFailed />;\n      case 'PROCESSING':\n        return <NotificationStatusProcessing />;\n      case 'SENT':\n        return <NotificationStatusSent />;\n      case 'SUCCESS':\n        return <NotificationStatusSuccess />;\n      case 'UNKNOWN':\n        return <NotificationStatusUnknown />;\n      default:\n        assertNever(props.status);\n    }\n  };\n\nexport const NotificationStatusFailed: React.FunctionComponent = () => (\n  <Status text=\"Failure\">\n    <ExclamationCircleIcon\n      data-testid=\"fail-icon\"\n      color={global_danger_color_100.value}\n    />\n  </Status>\n);\n\nexport const NotificationStatusUnknown: React.FunctionComponent = () => (\n  <Status text=\"Unknown\">\n    <UnknownIcon data-testid=\"unknown-icon\" />\n  </Status>\n);\n\nexport const NotificationStatusProcessing: React.FunctionComponent = () => (\n  <Status text=\"Processing\">\n    <InProgressIcon data-testid=\"in-progress-icon\" />\n  </Status>\n);\n\nexport const NotificationStatusSent: React.FunctionComponent = () => (\n  <Status text=\"Sent\">\n    <CheckCircleIcon\n      data-testid=\"success-icon\"\n      color={global_success_color_100.value}\n    />\n  </Status>\n);\n\nexport const NotificationStatusSuccess: React.FunctionComponent = () => (\n  <Status text=\"Success\">\n    <CheckCircleIcon\n      data-testid=\"success-icon\"\n      color={global_success_color_100.value}\n    />\n  </Status>\n);\n\nexport const NotificationStatusWarning: React.FunctionComponent = () => (\n  <Status text=\"Warning\">\n    <ExclamationTriangleIcon color={c_alert_m_warning__icon_Color.value} />\n  </Status>\n);\n","import * as React from 'react';\n\nimport { TableHelpPopover } from '../../TableHelpPopover/TableHelpPopover';\nimport {\n  NotificationStatusFailed,\n  NotificationStatusProcessing,\n  NotificationStatusSent,\n  NotificationStatusSuccess,\n  NotificationStatusWarning,\n} from '../NotificationStatus';\n\nconst tableData: ReadonlyArray<[React.ReactNode, React.ReactNode]> = [\n  [\n    <NotificationStatusSuccess key=\"status-success\" />,\n    'The notification was executed successfully',\n  ],\n  [\n    <NotificationStatusSent key=\"status-sent\" />,\n    'The notification was sent for processing - but there is no way to assert if it was executed successfully',\n  ],\n  [\n    <NotificationStatusWarning key=\"status-warning\" />,\n    'The notification was executed successfully after some retries',\n  ],\n  [\n    <NotificationStatusProcessing key=\"status-processing\" />,\n    'The notification was sent for processing and is awaiting an outcome result',\n  ],\n  [\n    <NotificationStatusFailed key=\"status-failed-externally\" />,\n    'An unexpected error occurred while processing the notification',\n  ],\n];\n\nexport const ActionsHelpPopover: React.FunctionComponent<unknown> = (props) => (\n  <TableHelpPopover title=\"Action status meaning\" tableBody={tableData}>\n    <>{props.children}</>\n  </TableHelpPopover>\n);\n","import { Skeleton, Tooltip } from '@patternfly/react-core';\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport assertNever from 'assert-never';\nimport { important } from 'csx';\nimport * as React from 'react';\nimport { useAsync } from 'react-use';\nimport { style } from 'typestyle';\n\nimport Config from '../../../config/Config';\nimport {\n  NotificationEventAction,\n  NotificationEventStatus,\n} from '../../../types/Event';\nimport {\n  GetIntegrationRecipient,\n  IntegrationType,\n} from '../../../types/Integration';\nimport {\n  NotificationStatusFailed,\n  NotificationStatusProcessing,\n  NotificationStatusSent,\n  NotificationStatusSuccess,\n  NotificationStatusUnknown,\n  NotificationStatusWarning,\n} from '../NotificationStatus';\n\nconst headerClass = style({\n  minWidth: important('90px'),\n});\n\ninterface EventLogActionPopoverContentProps {\n  action: NotificationEventAction;\n  getIntegrationRecipient: GetIntegrationRecipient;\n}\n\nconst toDisplayStatus = (status: NotificationEventStatus) => {\n  switch (status.last) {\n    case 'SUCCESS':\n      if (status.isDegraded) {\n        return <NotificationStatusWarning />;\n      }\n\n      return <NotificationStatusSuccess />;\n    case 'SENT':\n      return <NotificationStatusSent />;\n    case 'PROCESSING':\n      return <NotificationStatusProcessing />;\n    case 'FAILED':\n      return <NotificationStatusFailed />;\n    case 'UNKNOWN':\n      return <NotificationStatusUnknown />;\n    default:\n      assertNever(status.last);\n  }\n};\n\nconst succeeded = (action: NotificationEventAction) => {\n  if (action.endpointType === IntegrationType.EMAIL_SUBSCRIPTION) {\n    return 'emails sent';\n  }\n\n  return 'succeeded';\n};\n\nconst failed = (action: NotificationEventAction) => {\n  if (action.endpointType === IntegrationType.EMAIL_SUBSCRIPTION) {\n    return 'emails failed';\n  }\n\n  return 'failed';\n};\n\nexport const EventLogActionPopoverContent: React.FunctionComponent<EventLogActionPopoverContentProps> =\n  (props) => {\n    const {\n      action: { id },\n      getIntegrationRecipient,\n    } = props;\n    const recipient = useAsync(\n      async () => id && getIntegrationRecipient(id),\n      [id, getIntegrationRecipient]\n    );\n\n    return (\n      <TableComposable\n        borders={false}\n        variant={TableVariant.compact}\n        isStickyHeader={true}\n      >\n        <Thead>\n          <Tr>\n            <Th className={headerClass}>Action</Th>\n            <Th className={headerClass}>Recipient</Th>\n            <Th className={headerClass}>Status</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr>\n            <Td>\n              {Config.integrations.types[props.action.endpointType].action}\n            </Td>\n            <Td>\n              {id ? (\n                recipient.loading ? (\n                  <Skeleton width=\"150px\" />\n                ) : (\n                  recipient.value\n                )\n              ) : (\n                <Tooltip content=\"The integration no longer exists, it could have been deleted.\">\n                  <span>Unknown integration</span>\n                </Tooltip>\n              )}\n            </Td>\n            <Td>\n              <div>{toDisplayStatus(props.action.status)}</div>\n              {props.action.successCount > 1 && (\n                <div className=\"pf-v5-u-color-300\">\n                  {props.action.successCount} {succeeded(props.action)}{' '}\n                </div>\n              )}\n              {props.action.errorCount > 1 && (\n                <div className=\"pf-v5-u-color-300\">\n                  {props.action.errorCount} {failed(props.action)}{' '}\n                </div>\n              )}\n            </Td>\n          </Tr>\n        </Tbody>\n      </TableComposable>\n    );\n  };\n","import {\n  Button,\n  ButtonVariant,\n  EmptyStateVariant,\n  Label,\n  LabelGroup,\n  LabelProps,\n  Popover,\n  Skeleton,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  HelpIcon,\n  InProgressIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\nimport {\n  IExtraColumnData,\n  SortByDirection,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  ThProps,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport assertNever from 'assert-never';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport Config from '../../../config/Config';\nimport { Messages } from '../../../properties/Messages';\nimport {\n  NotificationEvent,\n  NotificationEventStatus,\n} from '../../../types/Event';\nimport { GetIntegrationRecipient } from '../../../types/Integration';\nimport { EmptyStateSearch } from '../../EmptyStateSearch';\nimport { ActionsHelpPopover } from './ActionsHelpPopover';\nimport { EventLogActionPopoverContent } from './EventLogActionPopoverContent';\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport interface EventLogTableProps {\n  events: ReadonlyArray<NotificationEvent>;\n  loading: boolean;\n  onSort: (column: EventLogTableColumns, direction: SortDirection) => void;\n  sortColumn: EventLogTableColumns;\n  sortDirection: SortDirection;\n  getIntegrationRecipient: GetIntegrationRecipient;\n}\n\nexport enum EventLogTableColumns {\n  EVENT,\n  SERVICE,\n  DATE,\n}\n\nconst labelClassName = style({\n  cursor: 'pointer',\n});\n\nexport const toLabelProps = (\n  actionStatus: NotificationEventStatus\n): Pick<LabelProps, 'color' | 'icon'> => {\n  switch (actionStatus.last) {\n    case 'FAILED':\n      return {\n        color: 'red',\n        icon: <ExclamationCircleIcon />,\n      };\n    case 'SENT':\n    case 'SUCCESS':\n      if (actionStatus.isDegraded) {\n        return {\n          color: 'orange',\n          icon: <ExclamationTriangleIcon />,\n        };\n      }\n\n      return {\n        color: 'green',\n        icon: <CheckCircleIcon />,\n      };\n    case 'PROCESSING':\n      return {\n        color: 'grey',\n        icon: <InProgressIcon />,\n      };\n    case 'UNKNOWN':\n      return {\n        color: 'grey',\n        icon: <UnknownIcon />,\n      };\n    default:\n      assertNever(actionStatus.last);\n  }\n};\n\nexport const EventLogTable: React.FunctionComponent<EventLogTableProps> = (\n  props\n) => {\n  const onSort = React.useCallback(\n    (\n      _event: React.MouseEvent,\n      columnIndex: number,\n      sortByDirection: SortByDirection,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _extraData: IExtraColumnData\n    ) => {\n      const externalOnSort = props.onSort;\n      externalOnSort(columnIndex, sortByDirection);\n    },\n    [props.onSort]\n  );\n\n  const sortOptions: Record<EventLogTableColumns, undefined | ThProps['sort']> =\n    React.useMemo(\n      () => ({\n        [EventLogTableColumns.EVENT]: undefined,\n        [EventLogTableColumns.SERVICE]: undefined,\n        [EventLogTableColumns.DATE]: {\n          sortBy: {\n            direction: props.sortDirection,\n            index: props.sortColumn,\n          },\n          columnIndex: EventLogTableColumns.DATE,\n          onSort,\n        },\n      }),\n      [props.sortColumn, props.sortDirection, onSort]\n    );\n\n  const rows = React.useMemo(() => {\n    const events = props.events;\n    if (props.loading) {\n      return [...Array(10)].map((_, i) => (\n        <Tr key={`loading-row-${i}`}>\n          <Td>\n            <Skeleton />\n          </Td>\n          <Td>\n            <Skeleton />\n          </Td>\n          <Td>\n            <Skeleton />\n          </Td>\n          <Td>\n            <Skeleton />\n          </Td>\n        </Tr>\n      ));\n    } else {\n      return events.map((e) => (\n        <Tr key={e.id}>\n          <Td>{e.event}</Td>\n          <Td>\n            {e.application} - {e.bundle}\n          </Td>\n          <Td>\n            {e.actions.length > 0 ? (\n              <LabelGroup>\n                {e.actions.map((a) => (\n                  <Popover\n                    key={a.id}\n                    hasAutoWidth\n                    bodyContent={\n                      <EventLogActionPopoverContent\n                        action={a}\n                        getIntegrationRecipient={props.getIntegrationRecipient}\n                      />\n                    }\n                  >\n                    <Label\n                      className={labelClassName}\n                      {...toLabelProps(a.status)}\n                    >\n                      {Config.integrations.types[a.endpointType].action}\n                    </Label>\n                  </Popover>\n                ))}\n              </LabelGroup>\n            ) : (\n              'No actions'\n            )}\n          </Td>\n          <Td>\n            <DateFormat type=\"exact\" date={e.date} />\n          </Td>\n        </Tr>\n      ));\n    }\n  }, [props.loading, props.events, props.getIntegrationRecipient]);\n\n  if (rows.length === 0) {\n    return (\n      <EmptyStateSearch\n        variant={EmptyStateVariant.full}\n        title={Messages.components.eventLog.table.notFound.title}\n        description={Messages.components.eventLog.table.notFound.description}\n      />\n    );\n  }\n\n  return (\n    <TableComposable isStickyHeader={true}>\n      <Thead>\n        <Tr>\n          <Th sort={sortOptions[EventLogTableColumns.EVENT]}>Event type</Th>\n          <Th sort={sortOptions[EventLogTableColumns.SERVICE]}>Service</Th>\n          <Th>\n            Action taken{' '}\n            <ActionsHelpPopover>\n              <Button variant={ButtonVariant.plain}>\n                <HelpIcon />\n              </Button>\n            </ActionsHelpPopover>\n          </Th>\n          <Th sort={sortOptions[EventLogTableColumns.DATE]}>Date and time</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{rows}</Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  getInsights,\n  getInsightsEnvironment,\n} from '@redhat-cloud-services/insights-common-typescript';\n\nimport { getNotificationActions } from '../config/Config';\nimport { NotificationType } from '../types/Notification';\n\nexport const useNotifications = (): ReadonlyArray<NotificationType> => {\n  const insights = getInsights();\n  const environment = getInsightsEnvironment(insights);\n\n  return getNotificationActions(environment);\n};\n","import {\n  ClearFilters,\n  Filters,\n  SetFilters,\n} from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum EventLogFilterColumn {\n  EVENT = 'event',\n  BUNDLE = 'bundle',\n  APPLICATION = 'application',\n  ACTION_TYPE = 'endpointTypes',\n  ACTION_STATUS = 'invocationResults',\n}\n\nexport type EventLogFilters = Filters<typeof EventLogFilterColumn>;\nexport type SetEventLogFilters = SetFilters<typeof EventLogFilterColumn>;\nexport type ClearEventLogFilters = ClearFilters<typeof EventLogFilterColumn>;\n","// Array utilities\n\nexport const intersect = <T>(\n  arr1: ReadonlyArray<T>,\n  arr2: ReadonlyArray<T>\n): Array<T> => arr1.filter((e) => arr2.includes(e));\nexport const diff = <T>(\n  arr: ReadonlyArray<T>,\n  minus: ReadonlyArray<T>\n): Array<T> => arr.filter((e) => !minus.includes(e));\n\nexport const areEqual = <T>(\n  arr1: ReadonlyArray<T>,\n  arr2: ReadonlyArray<T>,\n  noOrder?: boolean\n): boolean => {\n  if (!arr1 || !arr2) {\n    return false;\n  } else if (arr1 === arr2) {\n    return true;\n  } else if (arr1.length === arr2.length) {\n    return arr1.every((e, idx) => {\n      if (\n        (noOrder && arr2.includes(e)) ||\n        (!noOrder && arr1[idx] === arr2[idx])\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  } else {\n    return false;\n  }\n};\n","import {\n  Dropdown,\n  DropdownToggle,\n  TreeView,\n  TreeViewDataItem,\n} from '@patternfly/react-core';\nimport { TreeViewCheckProps } from '@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem';\nimport { AngleDownIcon } from '@patternfly/react-icons';\nimport produce from 'immer';\nimport React, { ChangeEvent } from 'react';\n\nimport { Schemas } from '../../../generated/OpenapiNotifications';\nimport { Modify } from '../../../types/Modify';\nimport { areEqual } from '../../../utils/Arrays';\nimport { EventLogCustomFilter } from './usePrimaryToolbarFilterConfigWrapper';\n\ninterface EventLogTreeFilterProps {\n  groups: readonly Schemas.Facet[];\n  placeholder: string;\n  filters: EventLogCustomFilter[];\n  updateFilters: React.Dispatch<React.SetStateAction<EventLogCustomFilter[]>>;\n}\n\ntype TreeNodeItem = Modify<\n  TreeViewDataItem,\n  {\n    id: string;\n    checkProps: TreeViewCheckProps;\n    children?: TreeNodeItem[] | undefined;\n  }\n>;\n\ninterface TreeNodeDict {\n  [key: string]: TreeNodeItem;\n}\n\nconst isChecked = (treeNode: TreeNodeItem) => {\n  return !!treeNode.checkProps.checked;\n};\n\nconst childChecked = (treeNode: TreeNodeItem): boolean => {\n  return treeNode.children\n    ? treeNode.children.some((child) => childChecked(child))\n    : isChecked(treeNode);\n};\n\nconst allChildrenChecked = (treeNode: TreeNodeItem): boolean => {\n  return treeNode.children\n    ? treeNode.children.every((child) => allChildrenChecked(child))\n    : isChecked(treeNode);\n};\n\nconst initTreeNodeById = (\n  groups: readonly Schemas.Facet[],\n  filters: EventLogCustomFilter[]\n) => {\n  const init: TreeNodeDict = {};\n  groups.forEach((group) => {\n    const currentFilter = filters.find(\n      (filter) => filter.bundleId === group.name\n    );\n    const currentFilterChipValues = currentFilter?.chips?.map(\n      (chip) => chip.value\n    );\n\n    const items = group.children as Schemas.Facet[];\n    const checkAll =\n      items.length !== 0\n        ? items.every((item) => currentFilterChipValues?.includes(item.name))\n        : false;\n    init[group.name] = {\n      id: group.name,\n      name: group.displayName,\n      checkProps: { checked: checkAll || (!currentFilter ? false : null) },\n      children:\n        items.length !== 0\n          ? items.map((item) => ({\n              id: item.name,\n              name: item.displayName,\n              checkProps: {\n                checked:\n                  checkAll || currentFilterChipValues?.includes(item.name),\n              },\n            }))\n          : undefined,\n    };\n  });\n\n  return init;\n};\n\nexport const EventLogTreeFilter: React.FunctionComponent<EventLogTreeFilterProps> =\n  (props) => {\n    const { groups, placeholder, filters, updateFilters } = props;\n\n    const initialize = React.useMemo(\n      () => initTreeNodeById(groups, filters),\n      [groups, filters]\n    );\n\n    const [treeNodeById, setTreeNodeById] =\n      React.useState<TreeNodeDict>(initialize);\n    const [isToggled, setIsToggled] = React.useState(false);\n\n    const treeDataArray = React.useMemo(\n      () => Object.values(treeNodeById),\n      [treeNodeById]\n    );\n\n    const [activeFilters, activeBundleIds] = React.useMemo(() => {\n      const bundleIds: string[] = [];\n\n      const activeParentFilters = treeDataArray.filter(\n        (treeNode) =>\n          treeNode.checkProps.checked || treeNode.checkProps.checked === null\n      );\n      const activeFilters = activeParentFilters.map((parentFilter) => {\n        bundleIds.push(parentFilter.id);\n        return {\n          bundleId: parentFilter.id,\n          category: parentFilter.name as string,\n          chips: parentFilter.children\n            ?.filter((childNode) => childNode.checkProps.checked)\n            .map((childFilter) => ({\n              name: childFilter.name as string,\n              value: childFilter.id,\n              isRead: true,\n            })) ?? [\n            {\n              name: parentFilter.name,\n              value: parentFilter.id,\n              isRead: true,\n            },\n          ],\n        } as EventLogCustomFilter;\n      });\n\n      return [activeFilters, bundleIds];\n    }, [treeDataArray]);\n\n    // Updates TreeView with changes made outside of the component (Network Requests returning && Delete/Clearing filters)\n    React.useEffect(() => {\n      if (groups.length !== 0) {\n        setTreeNodeById(\n          produce((prev) => {\n            if (Object.keys(prev).length === 0) {\n              return initialize;\n            } else if (filters.length === 0) {\n              return initialize;\n            } else {\n              filters.forEach((activeFilter) => {\n                const treeNode = prev[activeFilter.bundleId];\n                const activeChips = activeFilter.chips.map(\n                  (chip) => chip.value\n                );\n\n                treeNode.children?.forEach((childNode) => {\n                  childNode.checkProps.checked = activeChips.includes(\n                    childNode.id\n                  );\n                });\n\n                if (allChildrenChecked(treeNode)) {\n                  treeNode.checkProps.checked = true;\n                } else if (childChecked(treeNode)) {\n                  treeNode.checkProps.checked = null;\n                } else {\n                  treeNode.checkProps.checked = false;\n                }\n              });\n            }\n          })\n        );\n      }\n    }, [groups, filters, initialize]);\n\n    // Updates custom filters based on changes made inside TreeView component\n    React.useEffect(() => {\n      updateFilters(\n        produce((prev) => {\n          if (prev.length === 0 && activeFilters.length === 0) {\n            return prev;\n          } else if (prev.length !== 0 && activeFilters.length === 0) {\n            return [];\n          } else {\n            const prevBundles = prev.map((prevFilter) => prevFilter.bundleId);\n\n            const areBundlesEqual = areEqual(prevBundles, activeBundleIds);\n            const areFiltersEqual =\n              areBundlesEqual &&\n              activeFilters.every((entry, idx) => {\n                if (prev[idx]) {\n                  if (entry.bundleId === prev[idx].bundleId) {\n                    const prevChips = prev[idx].chips.map((chip) => chip.value);\n                    const currChips = entry.chips.map((chip) => chip.value);\n\n                    return areEqual(prevChips, currChips, true);\n                  }\n                }\n\n                return false;\n              });\n\n            return areFiltersEqual ? prev : activeFilters;\n          }\n        })\n      );\n    }, [activeFilters, activeBundleIds, updateFilters]);\n\n    const onCheck = (\n      event: ChangeEvent<HTMLInputElement>,\n      treeNode: TreeNodeItem,\n      parentNode: TreeNodeItem\n    ) => {\n      const checked = event.target.checked;\n      setTreeNodeById(\n        produce((prev) => {\n          if (parentNode) {\n            const children = prev[parentNode.id].children;\n            children?.some((childNode) => {\n              if (childNode.id === treeNode.id) {\n                childNode.checkProps.checked = checked;\n                return true;\n              }\n\n              return false;\n            });\n\n            if (allChildrenChecked(prev[parentNode.id])) {\n              prev[parentNode.id].checkProps.checked = true;\n            } else if (childChecked(prev[parentNode.id])) {\n              prev[parentNode.id].checkProps.checked = null;\n            } else {\n              prev[parentNode.id].checkProps.checked = checked;\n            }\n          } else {\n            prev[treeNode.id].checkProps.checked = checked;\n            prev[treeNode.id].children?.forEach(\n              (leafNode) => (leafNode.checkProps.checked = checked)\n            );\n          }\n        })\n      );\n    };\n\n    const onCheckWrapper = (\n      event: ChangeEvent<Element>,\n      treeNode: TreeViewDataItem,\n      parentNode: TreeViewDataItem\n    ) => {\n      onCheck(\n        event as ChangeEvent<HTMLInputElement>,\n        treeNode as TreeNodeItem,\n        parentNode as TreeNodeItem\n      );\n    };\n\n    return (\n      <Dropdown\n        toggle={\n          <DropdownToggle\n            onToggle={() => setIsToggled(!isToggled)}\n            toggleIndicator={AngleDownIcon}\n          >\n            {placeholder}\n          </DropdownToggle>\n        }\n        isOpen={isToggled}\n      >\n        <TreeView\n          data={treeDataArray}\n          hasChecks={true}\n          onCheck={onCheckWrapper}\n        />\n      </Dropdown>\n    );\n  };\n","import { PaginationProps, PaginationVariant } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { ConditionalFilterProps } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { FilterChipsProps } from '@redhat-cloud-services/frontend-components/FilterChips';\nimport {\n  ColumnsMetada,\n  OuiaComponentProps,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { Dispatch } from 'react';\nimport { SetStateAction } from 'react';\n\nimport Config from '../../../config/Config';\nimport { useIntegrations } from '../../../hooks/useIntegrations';\nimport { useNotifications } from '../../../hooks/useNotifications';\nimport { EventPeriod } from '../../../types/Event';\nimport { Facet, NotificationType } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport {\n  EventLogDateFilter,\n  EventLogDateFilterValue,\n} from './EventLogDateFilter';\nimport {\n  ClearEventLogFilters,\n  EventLogFilterColumn,\n  EventLogFilters,\n  SetEventLogFilters,\n} from './EventLogFilter';\nimport { usePrimaryToolbarFilterConfigWrapper } from './usePrimaryToolbarFilterConfigWrapper';\n\ninterface EventLogToolbarProps extends OuiaComponentProps {\n  filters: EventLogFilters;\n  setFilters: SetEventLogFilters;\n  clearFilter: ClearEventLogFilters;\n\n  bundleOptions: ReadonlyArray<Facet>;\n\n  pageCount: number;\n  count: number;\n  page: number;\n  perPage: number;\n  pageChanged: (page: number) => void;\n  perPageChanged: (page: number) => void;\n\n  dateFilter: EventLogDateFilterValue;\n  setDateFilter: (value: EventLogDateFilterValue) => void;\n\n  retentionDays: number;\n  period: EventPeriod;\n  setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n}\n\nconst notificationTypes: Record<NotificationType, { name: string }> = {\n  [NotificationType.EMAIL_SUBSCRIPTION]: {\n    name: 'Email',\n  },\n  [NotificationType.DRAWER]: {\n    name: 'Drawer',\n  },\n  [NotificationType.INTEGRATION]: {\n    name: 'Integration',\n  },\n};\n\nconst actionStatusMetadata = [\n  {\n    value: 'true',\n    chipValue: 'Success',\n    label: (\n      <span>\n        <CheckCircleIcon color=\"green\" /> Success\n      </span>\n    ),\n  },\n  {\n    value: 'false',\n    chipValue: 'Sent',\n    label: (\n      <span>\n        <CheckCircleIcon color=\"green\" /> Sent\n      </span>\n    ),\n  },\n  {\n    value: 'false',\n    chipValue: 'Warning',\n    label: (\n      <span>\n        <ExclamationTriangleIcon className=\"pf-v5-u-warning-color-100\" />{' '}\n        Warning{' '}\n      </span>\n    ),\n  },\n  {\n    value: 'false',\n    chipValue: 'Processing',\n    label: (\n      <span>\n        <InProgressIcon /> Processing{' '}\n      </span>\n    ),\n  },\n  {\n    value: 'false',\n    chipValue: 'Failure',\n    label: (\n      <span>\n        <ExclamationCircleIcon color=\"red\" /> Failure\n      </span>\n    ),\n  },\n];\n\nexport const EventLogToolbar: React.FunctionComponent<EventLogToolbarProps> = (\n  props\n) => {\n  const notifications = useNotifications();\n  const integrations = useIntegrations();\n\n  const actionTypeMetadata = React.useMemo(() => {\n    return notifications\n      .map((notification) => ({\n        value: notification.toUpperCase(),\n        chipValue: notificationTypes[notification].name,\n        label: notificationTypes[notification].name,\n      }))\n      .concat(\n        integrations.map((integration) => ({\n          value: integration.toUpperCase(),\n          chipValue: Config.integrations.types[integration].name,\n          label: Config.integrations.types[integration].name,\n        }))\n      );\n  }, [notifications, integrations]);\n\n  const filterMetadata = React.useMemo<\n    Partial<ColumnsMetada<typeof EventLogFilterColumn>>\n  >(() => {\n    return {\n      [EventLogFilterColumn.EVENT]: {\n        label: 'Event',\n        placeholder: 'Filter by event',\n      },\n      [EventLogFilterColumn.APPLICATION]: {\n        label: 'Application',\n        placeholder: 'Filter by application',\n      },\n      [EventLogFilterColumn.ACTION_TYPE]: {\n        label: 'Action Type',\n        placeholder: 'Filter by action type',\n        options: {\n          exclusive: false,\n          items: actionTypeMetadata,\n        },\n      },\n      [EventLogFilterColumn.ACTION_STATUS]: {\n        label: 'Action Status',\n        placeholder: 'Filter by action status',\n        options: {\n          exclusive: false,\n          items: actionStatusMetadata,\n        },\n      },\n    };\n  }, [actionTypeMetadata]);\n\n  const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfigWrapper(\n    props.bundleOptions,\n    props.filters,\n    props.setFilters,\n    props.clearFilter,\n    filterMetadata as ColumnsMetada<typeof EventLogFilterColumn>\n  );\n\n  const pageChanged = React.useCallback(\n    (_event: unknown, page: number) => {\n      const inner = props.pageChanged;\n      inner(page);\n    },\n    [props.pageChanged]\n  );\n\n  const perPageChanged = React.useCallback(\n    (_event: unknown, perPage: number) => {\n      const inner = props.perPageChanged;\n      inner(perPage);\n    },\n    [props.perPageChanged]\n  );\n\n  const topPaginationProps = React.useMemo<PaginationProps>(\n    () => ({\n      itemCount: props.count,\n      page: props.page,\n      perPage: props.perPage,\n      isCompact: true,\n      variant: PaginationVariant.top,\n      onSetPage: pageChanged,\n      onFirstClick: pageChanged,\n      onPreviousClick: pageChanged,\n      onNextClick: pageChanged,\n      onLastClick: pageChanged,\n      onPageInput: pageChanged,\n      onPerPageSelect: perPageChanged,\n    }),\n    [props.count, props.page, props.perPage, pageChanged, perPageChanged]\n  );\n\n  const bottomPaginationProps = React.useMemo<PaginationProps>(\n    () => ({\n      ...topPaginationProps,\n      isCompact: false,\n      variant: PaginationVariant.bottom,\n    }),\n    [topPaginationProps]\n  );\n\n  return (\n    <div {...getOuiaProps('Notifications/EventLog/DualToolbar', props)}>\n      <PrimaryToolbar\n        {...primaryToolbarFilterConfig}\n        filterConfig={\n          primaryToolbarFilterConfig.filterConfig as ConditionalFilterProps\n        }\n        activeFiltersConfig={\n          primaryToolbarFilterConfig.activeFiltersConfig as FilterChipsProps\n        }\n        dedicatedAction={\n          <EventLogDateFilter\n            value={props.dateFilter}\n            setValue={props.setDateFilter}\n            retentionDays={props.retentionDays}\n            setPeriod={props.setPeriod}\n            period={props.period}\n          />\n        }\n        pagination={topPaginationProps}\n      />\n      {props.children}\n      <PrimaryToolbar pagination={bottomPaginationProps} />\n    </div>\n  );\n};\n","import {\n  ColumnsMetada,\n  usePrimaryToolbarFilterConfig,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport produce from 'immer';\nimport React from 'react';\n\nimport { Schemas } from '../../../generated/OpenapiNotifications';\nimport { areEqual } from '../../../utils/Arrays';\nimport {\n  ClearEventLogFilters,\n  EventLogFilterColumn,\n  EventLogFilters,\n  SetEventLogFilters,\n} from './EventLogFilter';\nimport { EventLogTreeFilter } from './EventLogTreeFilter';\n\nexport interface EventLogCustomFilter {\n  bundleId: string;\n  category: string;\n  chips: Array<{ name: string; value: string; isRead: boolean }>;\n}\n\n// Wrapper hook that gets the PrimaryToolbarFilterConfig and adds a custom conditional filter using Dropdown/Tree components\n// usePrimaryToolbarFilterConfig only supports 3 filter types: checkbox, radio, and text, so this extends that\nexport const usePrimaryToolbarFilterConfigWrapper = (\n  bundles: readonly Schemas.Facet[],\n  filters: EventLogFilters,\n  setFilters: SetEventLogFilters,\n  clearFilter: ClearEventLogFilters,\n  metaData: ColumnsMetada<typeof EventLogFilterColumn>\n) => {\n  const [customFilters, setCustomFilters] = React.useState(\n    [] as EventLogCustomFilter[]\n  );\n  const toolbarConfig = usePrimaryToolbarFilterConfig(\n    EventLogFilterColumn,\n    filters,\n    setFilters,\n    clearFilter,\n    metaData\n  );\n\n  const defaultDelete = React.useMemo(\n    () => toolbarConfig.activeFiltersConfig.onDelete,\n    [toolbarConfig.activeFiltersConfig.onDelete]\n  );\n  const customDelete = React.useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event: any, rawFilterConfigs: EventLogCustomFilter[]) => {\n      const regularFilterConfigs: EventLogCustomFilter[] = [];\n      const customFilterConfigs: EventLogCustomFilter[] = [];\n      rawFilterConfigs.forEach((filterConfig) => {\n        if (filterConfig.bundleId) {\n          customFilterConfigs.push(filterConfig);\n        } else {\n          regularFilterConfigs.push(filterConfig);\n        }\n      });\n\n      defaultDelete(_event, regularFilterConfigs);\n\n      if (customFilterConfigs.length !== 0) {\n        setCustomFilters(\n          produce((prev) => {\n            const idxToRemove: number[] = [];\n            prev.forEach((activeFilter, idx) => {\n              customFilterConfigs.some((deleteFilter) => {\n                if (activeFilter.bundleId === deleteFilter.bundleId) {\n                  const deletedChipValues = deleteFilter.chips.map(\n                    (chip) => chip.value\n                  );\n                  activeFilter.chips = activeFilter.chips.filter(\n                    (chip) => !deletedChipValues.includes(chip.value)\n                  );\n\n                  if (activeFilter.chips.length === 0) {\n                    idxToRemove.push(idx);\n                  }\n\n                  return true;\n                }\n\n                return false;\n              });\n            });\n\n            idxToRemove.forEach((idx, adjusted) => {\n              prev.splice(idx - adjusted, 1);\n            });\n          })\n        );\n      }\n    },\n    [defaultDelete, setCustomFilters]\n  );\n\n  // Converts URL Query Params to Filter Obj\n  const mapToEventLogCustomFilter = React.useCallback(\n    (filters: EventLogFilters, bundles?: readonly Schemas.Facet[]) => {\n      const createCustomFilterObj = (\n        bundleName: string,\n        bundle: Schemas.Facet | undefined,\n        applications: Schemas.Facet[] | undefined | null\n      ) => {\n        const bundleDisplayName = bundle?.displayName;\n        const applicationChips = !bundle?.children\n          ? [\n              {\n                name: 'Loading',\n                value: bundleName,\n                isRead: true,\n              },\n            ]\n          : applications?.length !== 0\n          ? applications?.map((application) => ({\n              name: application.displayName,\n              value: application.name,\n              isRead: true,\n            }))\n          : [\n              {\n                name: bundle.displayName,\n                value: bundle.name,\n                isRead: true,\n              },\n            ];\n\n        return {\n          bundleId: bundleName,\n          category: bundleDisplayName || `${bundleName} Loading...`,\n          chips: applicationChips,\n        };\n      };\n\n      const applicationsByBundle: { [key: string]: string[] } = {};\n      (filters.application as string[])?.forEach((queryParam) => {\n        const nameSplit = queryParam.split('.');\n        const bundleName = nameSplit[0];\n        const application = nameSplit[1];\n\n        if (!applicationsByBundle[bundleName]) {\n          applicationsByBundle[bundleName] = [application];\n        } else {\n          applicationsByBundle[bundleName].push(application);\n        }\n      });\n\n      const partialBundleFilters = Object.keys(applicationsByBundle).map(\n        (bundleName) => {\n          const bundle = bundles?.find((bundle) => bundle.name === bundleName);\n          const applications = bundle?.children?.filter((application) =>\n            applicationsByBundle[bundleName].includes(application.name)\n          );\n          return createCustomFilterObj(bundleName, bundle, applications);\n        }\n      );\n\n      const completeBundleFilters =\n        (filters.bundle as string[])?.map((queryParam) => {\n          const bundle = bundles?.find((bundle) => bundle.name === queryParam);\n          return createCustomFilterObj(queryParam, bundle, bundle?.children);\n        }) || [];\n\n      return completeBundleFilters.concat(\n        partialBundleFilters\n      ) as EventLogCustomFilter[];\n    },\n    []\n  );\n\n  // Run ONLY twice\n  //     1st - setup loading placeholders for filters\n  //     2nd - render actual filter bundles/applications\n  React.useEffect(() => {\n    setCustomFilters(\n      mapToEventLogCustomFilter(\n        filters,\n        bundles.length !== 0 ? bundles : undefined\n      )\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [bundles, mapToEventLogCustomFilter]);\n\n  const applicationFilter = React.useMemo(() => {\n    return {\n      label: 'Application',\n      type: 'custom',\n      filterValues: {\n        children: (\n          <EventLogTreeFilter\n            groups={bundles}\n            placeholder={'Filter by Application'}\n            filters={customFilters}\n            updateFilters={setCustomFilters}\n          />\n        ),\n      },\n    } as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  }, [bundles, customFilters]);\n\n  const activeFiltersConfig = React.useMemo(() => {\n    const activeFilters = toolbarConfig.activeFiltersConfig\n      .filters as EventLogCustomFilter[];\n    const nonCustomFilters = activeFilters.filter(\n      (activeFilter) => activeFilter && !activeFilter.bundleId\n    );\n    return nonCustomFilters.concat(customFilters);\n  }, [customFilters, toolbarConfig.activeFiltersConfig.filters]);\n\n  // Update URL Query Params for Bundles\n  const bundleProducer = React.useMemo(() => {\n    return produce(filters.bundle, (prev) => {\n      if (bundles.length === 0) {\n        return;\n      }\n\n      const currBundleFilters: string[] = [];\n      bundles.forEach((bundle) => {\n        const addToQueryParam = customFilters.some((bundleFilter) => {\n          if (bundleFilter.bundleId === bundle.name) {\n            // Edge case: Bundle has no children (but it gets a chip for UI reasons)\n            if (\n              bundle.children?.length === 0 &&\n              bundleFilter.chips.length === 1\n            ) {\n              return true;\n            }\n\n            return bundle.children?.length === bundleFilter.chips.length;\n          }\n\n          return false;\n        });\n\n        if (addToQueryParam) {\n          currBundleFilters.push(bundle.name);\n        }\n      });\n\n      return areEqual(prev as string[], currBundleFilters, true)\n        ? prev\n        : currBundleFilters;\n    });\n  }, [bundles, filters.bundle, customFilters]);\n\n  // Update URL Query Params for Bundles\n  const applicationProducer = React.useMemo(() => {\n    return produce(filters.application, (prev) => {\n      if (bundles.length === 0) {\n        return;\n      }\n\n      const currApplicationFilters: string[] = [];\n      customFilters.forEach((customFilter) => {\n        const bundle = bundles.find(\n          (bundle) => bundle.name === customFilter.bundleId\n        ) as Schemas.Facet;\n        const chipValues = customFilter.chips?.map((chip) => chip.value) as\n          | string[]\n          | undefined;\n\n        // Only add applications to Query Params under 2 conditions\n        //     1. Bundle has children\n        //     2. Every application under the Bundle is not selected\n        if (\n          chipValues &&\n          bundle.children?.some(\n            (application) => !chipValues.includes(application.name)\n          )\n        ) {\n          chipValues.forEach((chipValue) => {\n            const applicationQueryParam = `${bundle.name}.${chipValue}`;\n            currApplicationFilters.push(applicationQueryParam);\n          });\n        }\n      });\n\n      return areEqual(prev as string[], currApplicationFilters, true)\n        ? prev\n        : currApplicationFilters;\n    });\n  }, [bundles, filters.application, customFilters]);\n\n  setFilters.bundle(bundleProducer);\n  setFilters.application(applicationProducer);\n\n  return produce(toolbarConfig, (prev) => {\n    prev.filterConfig.items[1] = applicationFilter;\n\n    prev.activeFiltersConfig.filters = activeFiltersConfig;\n    prev.activeFiltersConfig.onDelete = customDelete;\n  });\n};\n","import { Split, SplitItem, Text, TextContent } from '@patternfly/react-core';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nimport PageHeaderFC from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PageHeaderTitle from '@redhat-cloud-services/frontend-components/PageHeader/PageHeaderTitle';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\ninterface PageHeaderProps {\n  title: React.ReactNode | string;\n  subtitle: React.ReactNode | string;\n  action?: React.ReactNode;\n}\n\nconst subtitleClassName = style({\n  paddingTop: global_spacer_sm.value,\n});\n\nconst actionClassName = style({\n  marginLeft: global_spacer_3xl.value,\n});\n\nexport const PageHeader: React.FunctionComponent<PageHeaderProps> = (props) => {\n  return (\n    <PageHeaderFC className=\"pf-u-pb-md\">\n      <Split>\n        <SplitItem isFilled>\n          <PageHeaderTitle title={props.title} />\n          <TextContent className={subtitleClassName}>\n            <Text>{props.subtitle}</Text>\n          </TextContent>\n        </SplitItem>\n        {props.action && (\n          <SplitItem className={actionClassName}>{props.action}</SplitItem>\n        )}\n      </Split>\n    </PageHeaderFC>\n  );\n};\n","import { fromUtc } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { NotificationEvent, NotificationEventAction } from '../Event';\nimport { UUID } from '../Notification';\nimport { getIntegrationType } from './IntegrationAdapter';\n\ntype ServerEvent = Schemas.EventLogEntry;\n\nexport const toNotificationEvent = (\n  serverEvent: ServerEvent\n): NotificationEvent => ({\n  id: serverEvent.id,\n  bundle: serverEvent.bundle,\n  application: serverEvent.application,\n  event: serverEvent.event_type,\n  date: fromUtc(new Date(serverEvent.created)),\n  actions: sortEventActions(groupActions(serverEvent.actions)),\n});\n\nconst sortEventActions = (actions: Array<NotificationEventAction>) => {\n  return actions.sort((first, second) =>\n    first.endpointType.localeCompare(second.endpointType)\n  );\n};\n\nconst groupActions = (\n  actions: ServerEvent['actions']\n): Array<NotificationEventAction> => {\n  const actionsById: Record<UUID, NotificationEventAction> = {};\n  const actionsWithoutEndpoint: Array<NotificationEventAction> = [];\n\n  actions.forEach((action) => {\n    if (!action.endpoint_id) {\n      actionsWithoutEndpoint.push(initAction(action));\n      return;\n    }\n\n    if (!actionsById[action.endpoint_id]) {\n      actionsById[action.endpoint_id] = initAction(action);\n    } else {\n      const newAction = initAction(action);\n      const current = actionsById[action.endpoint_id];\n\n      if (isFailed(newAction.status.last)) {\n        current.status.isDegraded = true;\n      } else {\n        current.status.last = newAction.status.last;\n      }\n\n      current.errorCount += newAction.errorCount;\n      current.successCount += newAction.successCount;\n    }\n  });\n\n  return [...Object.values(actionsById), ...actionsWithoutEndpoint];\n};\n\nconst initAction = (\n  action: ServerEvent['actions'][number]\n): NotificationEventAction => ({\n  id: action.endpoint_id ?? undefined,\n  endpointType: getIntegrationType({\n    type: action.endpoint_type,\n    sub_type: action.endpoint_sub_type,\n  }),\n  status: {\n    last: action.status,\n    isDegraded: isFailed(action.status),\n  },\n  successCount: isFailed(action.status) ? 0 : 1,\n  errorCount: isFailed(action.status) ? 1 : 0,\n});\n\nconst isFailed = (status: ServerEvent['actions'][number]['status']): boolean =>\n  status === 'FAILED';\n","import {\n  Page,\n  useTransformQueryResponse,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport {\n  validatedResponse,\n  validationResponseTransformer,\n} from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toNotificationEvent } from '../../types/adapters/NotificationEventAdapter';\n\nconst eventDecoder = validationResponseTransformer(\n  (payload: Operations.EventResourceGetEvents.Payload) => {\n    if (payload.status === 200) {\n      return validatedResponse(\n        'Events',\n        200,\n        {\n          ...payload.value,\n          data: payload.value.data.map(toNotificationEvent),\n        },\n        payload.errors\n      );\n    }\n\n    return payload;\n  }\n);\n\nexport const useGetEvents = (page?: Page) => {\n  const query = (page ?? Page.defaultPage()).toQuery();\n  return useTransformQueryResponse(\n    useQuery(\n      Operations.EventResourceGetEvents.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        bundleIds: query.filterBundleIds as [],\n        appIds: query.filterAppIds as [],\n        invocationResults: query.filterInvocationResults as [],\n        endpointTypes: query.filterEndpointTypes as [],\n        startDate: query.filterStart as string,\n        endDate: query.filterEnd as string,\n        eventTypeDisplayName: query.filterEvent as string,\n        sortBy: `${query.sortColumn}:${query.sortDirection}`,\n        includeActions: true,\n      })\n    ),\n    eventDecoder\n  );\n};\n","import { Operations } from '../../generated/OpenapiIntegrations';\nimport { UUID } from '../../types/Notification';\n\nexport const getEndpointAction = (id: UUID) => {\n  return Operations.EndpointResourceGetEndpoint.actionCreator({\n    id,\n  });\n};\n","import {\n  Filter,\n  Operator,\n  toUtc,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { format, sub, toDate } from 'date-fns';\nimport { useCallback } from 'react';\n\nimport { EventLogDateFilterValue } from '../../../components/Notifications/EventLog/EventLogDateFilter';\nimport { EventLogFilters } from '../../../components/Notifications/EventLog/EventLogFilter';\nimport { EventPeriod } from '../../../types/Event';\nimport { Facet } from '../../../types/Notification';\n\nconst DATE_FORMAT = 'yyyy-MM-dd';\n\nexport const useFilterBuilder = (\n  bundles: ReadonlyArray<Facet>,\n  dateFilter: EventLogDateFilterValue,\n  period: EventPeriod\n) => {\n  return useCallback(\n    (filters?: EventLogFilters) => {\n      const filter = new Filter();\n      if (filters?.bundle) {\n        const selectedBundleNames = filters?.bundle;\n        const queryParams = bundles\n          .filter((b) => selectedBundleNames.includes(b.name))\n          .map((b) => b.id);\n        filter.and('bundleIds', Operator.EQUAL, queryParams);\n      }\n\n      if (filters?.application) {\n        const selectedAppNames = filters.application as string[];\n\n        const queryParams: string[] = [];\n        selectedAppNames.forEach((appName) => {\n          const nameSplit = appName.split('.');\n          const bundleName = nameSplit[0];\n          const applicationName = nameSplit[1];\n\n          const bundle = bundles.find((bundle) => bundle.name === bundleName);\n          if (bundle) {\n            const application = bundle.children?.find(\n              (application) => application.name === applicationName\n            );\n            if (application) {\n              queryParams.push(application.id);\n            }\n          }\n        });\n\n        filter.and('appIds', Operator.EQUAL, queryParams);\n      }\n\n      if (filters?.event) {\n        filter.and('event', Operator.EQUAL, filters.event);\n      }\n\n      if (filters?.invocationResults) {\n        filter.and(\n          'invocationResults',\n          Operator.EQUAL,\n          filters.invocationResults\n        );\n      }\n\n      if (filters?.endpointTypes) {\n        filter.and('endpointTypes', Operator.EQUAL, filters.endpointTypes);\n      }\n\n      let filterPeriod = [undefined, undefined] as [\n        Date | undefined,\n        Date | undefined\n      ];\n      const today = toUtc(new Date());\n\n      switch (dateFilter) {\n        case EventLogDateFilterValue.LAST_14:\n          filterPeriod = [\n            sub(toDate(today), {\n              days: 14,\n            }),\n            today,\n          ];\n          break;\n        case EventLogDateFilterValue.LAST_7:\n          filterPeriod = [\n            sub(toDate(today), {\n              days: 7,\n            }),\n            today,\n          ];\n          break;\n        case EventLogDateFilterValue.TODAY:\n          filterPeriod = [today, today];\n          break;\n        case EventLogDateFilterValue.YESTERDAY: {\n          const yesterday = sub(toDate(today), {\n            days: 1,\n          });\n          filterPeriod = [yesterday, yesterday];\n          break;\n        }\n        case EventLogDateFilterValue.CUSTOM:\n          filterPeriod = period;\n          break;\n      }\n\n      if (filterPeriod[0] && filterPeriod[1]) {\n        filter.and(\n          'start',\n          Operator.EQUAL,\n          format(filterPeriod[0], DATE_FORMAT)\n        );\n        filter.and('end', Operator.EQUAL, format(filterPeriod[1], DATE_FORMAT));\n      }\n\n      return filter;\n    },\n    [bundles, dateFilter, period]\n  );\n};\n","import { ButtonVariant } from '@patternfly/react-core';\nimport {\n  Direction,\n  Sort,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport assertNever from 'assert-never';\nimport * as React from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\n\nimport { useAppContext } from '../../../app/AppContext';\nimport { ButtonLink } from '../../../components/ButtonLink';\nimport { EventLogDateFilterValue } from '../../../components/Notifications/EventLog/EventLogDateFilter';\nimport { EventLogFilters } from '../../../components/Notifications/EventLog/EventLogFilter';\nimport {\n  EventLogTable,\n  EventLogTableColumns,\n  SortDirection,\n} from '../../../components/Notifications/EventLog/EventLogTable';\nimport { EventLogToolbar } from '../../../components/Notifications/EventLog/EventLogToolbar';\nimport { PageHeader } from '../../../components/PageHeader';\nimport { Main } from '../../../components/Store/Main';\nimport Config from '../../../config/Config';\nimport { Schemas } from '../../../generated/OpenapiIntegrations';\nimport { usePage } from '../../../hooks/usePage';\nimport { Messages } from '../../../properties/Messages';\nimport { linkTo } from '../../../Routes';\nimport { useGetEvents } from '../../../services/EventLog/GetNotificationEvents';\nimport { getEndpointAction } from '../../../services/Integrations/GetEndpoint';\nimport { useGetBundles } from '../../../services/Notifications/GetBundles';\nimport { EventPeriod } from '../../../types/Event';\nimport { UUID } from '../../../types/Notification';\nimport { useEventLogFilter } from './useEventLogFilter';\nimport { useFilterBuilder } from './useFilterBuilder';\n\nconst RETENTION_DAYS = 14;\n\nexport const EventLogPage: React.FunctionComponent = () => {\n  const notificationsOverhaul = useFlag('platform.notifications.overhaul');\n  const getEndpoint = useParameterizedQuery(getEndpointAction);\n  const { rbac } = useAppContext();\n\n  const getBundles = useGetBundles(true);\n  const bundles = React.useMemo(() => {\n    const payload = getBundles.payload;\n    if (payload?.status === 200) {\n      return payload.value;\n    }\n\n    return [];\n  }, [getBundles.payload]);\n\n  const [dateFilter, setDateFilter] = React.useState<EventLogDateFilterValue>(\n    EventLogDateFilterValue.LAST_14\n  );\n\n  const eventLogFilters = useEventLogFilter();\n\n  const [period, setPeriod] = React.useState<EventPeriod>([\n    undefined,\n    undefined,\n  ]);\n\n  const [sortDirection, setSortDirection] =\n    React.useState<SortDirection>('desc');\n  const [sortColumn, setSortColumn] = React.useState<EventLogTableColumns>(\n    EventLogTableColumns.DATE\n  );\n\n  const onSort = React.useCallback(\n    (column: EventLogTableColumns, direction: SortDirection) => {\n      setSortDirection(direction);\n      setSortColumn(column);\n    },\n    [setSortDirection, setSortColumn]\n  );\n\n  const filterBuilder = useFilterBuilder(bundles, dateFilter, period);\n\n  const sort: Sort = React.useMemo(() => {\n    const direction = sortDirection.toUpperCase() as Direction;\n    let column: string;\n    if (sortColumn === EventLogTableColumns.DATE) {\n      column = 'created';\n    } else {\n      throw new Error(`Invalid sorting index: ${sortColumn}`);\n    }\n\n    return Sort.by(column, direction);\n  }, [sortColumn, sortDirection]);\n\n  const eventsPage = usePage<EventLogFilters>(\n    Config.paging.defaultPerPage,\n    filterBuilder,\n    eventLogFilters.filters,\n    sort\n  );\n  const eventsQuery = useGetEvents(eventsPage.page);\n\n  const events = React.useMemo(() => {\n    if (eventsQuery.payload?.status === 200) {\n      return {\n        data: eventsQuery.payload.value.data,\n        count: eventsQuery.payload.value.meta.count,\n      };\n    }\n\n    return {\n      data: [],\n      count: 0,\n    };\n  }, [eventsQuery]);\n\n  const eventNotificationPageUrl = React.useMemo(() => {\n    const bundles = eventLogFilters.filters.bundle as Array<string> | undefined;\n    if (bundles && bundles.length > 0) {\n      return linkTo.notifications(bundles[0]);\n    }\n\n    return linkTo.notifications('');\n  }, [eventLogFilters.filters]);\n\n  const getIntegrationRecipient = React.useCallback(\n    async (id: UUID) => {\n      const query = getEndpoint.query;\n      const endpoint = await query(id);\n      if (endpoint.payload?.type === 'Endpoint') {\n        const type = endpoint.payload.value.type;\n        switch (type) {\n          case 'camel':\n          case 'webhook':\n          case 'ansible':\n            return endpoint.payload.value.name;\n          case 'email_subscription':\n          case 'drawer': {\n            const properties = endpoint.payload.value\n              .properties as Schemas.EmailSubscriptionProperties;\n            if (properties.only_admins) {\n              return 'Users: Admin';\n            }\n\n            return 'Users: All';\n          }\n          default:\n            assertNever(type);\n        }\n      }\n\n      return 'Error while loading';\n    },\n    [getEndpoint.query]\n  );\n\n  return (\n    <>\n      <PageHeader\n        title={Messages.pages.notifications.eventLog.title}\n        subtitle={Messages.pages.notifications.eventLog.subtitle}\n        action={\n          !notificationsOverhaul && (\n            <ButtonLink\n              isDisabled={!rbac.canReadEvents}\n              to={eventNotificationPageUrl}\n              variant={ButtonVariant.secondary}\n            >\n              {Messages.pages.notifications.eventLog.viewNotifications}\n            </ButtonLink>\n          )\n        }\n      />\n      <Main>\n        <EventLogToolbar\n          {...eventLogFilters}\n          bundleOptions={bundles}\n          dateFilter={dateFilter}\n          setDateFilter={setDateFilter}\n          count={events.count}\n          perPageChanged={eventsPage.changeItemsPerPage}\n          pageChanged={eventsPage.changePage}\n          perPage={eventsPage.page.size}\n          page={eventsPage.page.index}\n          pageCount={events.data.length}\n          retentionDays={RETENTION_DAYS}\n          period={period}\n          setPeriod={setPeriod}\n        >\n          <EventLogTable\n            events={events.data}\n            loading={eventsQuery.loading}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n            getIntegrationRecipient={getIntegrationRecipient}\n          />\n        </EventLogToolbar>\n      </Main>\n    </>\n  );\n};\n","import {\n  useFilters,\n  useUrlStateMultipleOptions,\n  useUrlStateString,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport assertNever from 'assert-never';\nimport { useMemo } from 'react';\n\nimport { EventLogFilterColumn } from '../../../components/Notifications/EventLog/EventLogFilter';\n\nconst DEBOUNCE_MS = 250;\n\nexport const useEventLogFilter = (debounce = DEBOUNCE_MS) => {\n  const useStateFactory = useMemo(() => {\n    const useApplication = () => useUrlStateMultipleOptions('application');\n    const useBundle = () => useUrlStateMultipleOptions('bundle');\n\n    const useActionType = () => useUrlStateMultipleOptions('endpointTypes');\n    const useActionStatus = () =>\n      useUrlStateMultipleOptions('invocationResults');\n\n    const useEvent = () => useUrlStateString('event');\n\n    return (column: EventLogFilterColumn) => {\n      switch (column) {\n        case EventLogFilterColumn.APPLICATION:\n          return useApplication;\n        case EventLogFilterColumn.BUNDLE:\n          return useBundle;\n        case EventLogFilterColumn.EVENT:\n          return useEvent;\n        case EventLogFilterColumn.ACTION_TYPE:\n          return useActionType;\n        case EventLogFilterColumn.ACTION_STATUS:\n          return useActionStatus;\n        default:\n          assertNever(column);\n      }\n    };\n  }, []);\n\n  return useFilters(EventLogFilterColumn, debounce, useStateFactory);\n};\n","import { Bullseye } from '@patternfly/react-core';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PageHeaderTitle from '@redhat-cloud-services/frontend-components/PageHeader/PageHeaderTitle';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport useOuia from '@redhat-cloud-services/frontend-components/Ouia/useOuia';\nimport * as React from 'react';\n\nimport { Main } from '../components/Store/Main';\n\nexport const AppSkeleton: React.FunctionComponent = () => {\n  const ouia = useOuia({\n    type: 'AppSkeleton',\n  });\n\n  return (\n    <div {...ouia}>\n      <PageHeader>\n        <div className=\"pf-c-content\">\n          <PageHeaderTitle title={<Skeleton size=\"sm\" />} />\n        </div>\n      </PageHeader>\n      <Main>\n        <Section>\n          <Bullseye>\n            <Spinner centered />\n          </Bullseye>\n        </Section>\n      </Main>\n    </div>\n  );\n};\n","import { useParameterizedQuery, useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const getApplicationsAction = (bundleName?: string) =>\n  Operations.NotificationResourceGetApplicationsFacets.actionCreator({\n    bundleName,\n  });\n\nexport const useGetApplicationsLazy = () =>\n  useParameterizedQuery(getApplicationsAction);\nexport const useGetApplications = (bundleName?: string) =>\n  useQuery(getApplicationsAction(bundleName));\n","import { Tabs } from '@patternfly/react-core';\nimport React from 'react';\n\ninterface MyTabComponentProps {\n  configuration: React.ReactNode;\n  settings: React.ReactNode;\n}\n\nexport const TabComponent: React.FunctionComponent<MyTabComponentProps> = (\n  props\n) => {\n  const [activeTabKey, setActiveTabKey] = React.useState(0);\n\n  const handleTabClick = React.useCallback((tabIndex) => {\n    setActiveTabKey(tabIndex);\n  }, []);\n\n  return (\n    <div className=\"pf-v5-u-background-color-100\">\n      <Tabs\n        className=\"pf-v5-u-pl-lg\"\n        defaultActiveKey={activeTabKey}\n        role=\"region\"\n        onClick={handleTabClick}\n      >\n        {props.children}\n      </Tabs>\n    </div>\n  );\n};\n","export enum SortDirection {\n  ASC = 'asc',\n  DESC = 'desc',\n}\n\nexport const sortDirectionFromString = (\n  sortDirection: string\n): SortDirection => {\n  const lowerCaseSortDirection = sortDirection.toLowerCase();\n  switch (lowerCaseSortDirection) {\n    case SortDirection.ASC:\n      return SortDirection.ASC;\n    case SortDirection.DESC:\n      return SortDirection.DESC;\n    default:\n      throw new Error(`Invalid sort direction ${sortDirection}`);\n  }\n};\n","export const emptyImmutableArray = Object.freeze([]);\nexport const emptyImmutableObject = Object.freeze({});\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst EmptyTableState = () => {\n  return (\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon className=\"pf-u-mb-xl\" icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        No results found\n      </Title>\n      <EmptyStateBody>\n        <TextContent>\n          <Text>\n            No notifications match your filter choices above. Try removing or\n            changing the filters to see results.\n          </Text>\n        </TextContent>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default EmptyTableState;\n","interface HasId<ID> {\n  id: ID;\n}\n\nexport const findByKey =\n  <T, KEY extends keyof T>(val: T[KEY], key: KEY) =>\n  (value: T) =>\n    value[key] === val;\nexport const findById = <T extends HasId<T['id']>>(id: T['id']) =>\n  findByKey<T, 'id'>(id, 'id');\n","import {\n  Chip,\n  ChipGroup,\n  Icon,\n  OptionsMenu,\n  OptionsMenuItem,\n  OptionsMenuToggle,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { BellSlashIcon, LockIcon } from '@patternfly/react-icons';\nimport { TableText } from '@patternfly/react-table';\nimport { join } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { BehaviorGroupContent } from '../../../pages/Notifications/List/useBehaviorGroupContent';\nimport {\n  BehaviorGroup,\n  NotificationBehaviorGroup,\n} from '../../../types/Notification';\nimport { findById } from '../../../utils/Find';\nimport { emptyImmutableObject } from '../../../utils/Immutable';\n\ninterface BehaviorGroupCellProps {\n  id: string;\n  notification: NotificationBehaviorGroup;\n  behaviorGroupContent: BehaviorGroupContent;\n  selected: ReadonlyArray<BehaviorGroup>;\n  onSelect?: (\n    notification: NotificationBehaviorGroup,\n    behaviorGroup: BehaviorGroup,\n    linkBehavior: boolean\n  ) => void;\n  isEditMode: boolean;\n}\n\ninterface BehaviorGroupChip {\n  behaviorGroup: BehaviorGroup;\n  notification: BehaviorGroupCellProps['notification'];\n  onSelect?: BehaviorGroupCellProps['onSelect'];\n}\n\nconst CommaSeparator: React.FunctionComponent = () => <span>, </span>;\n\nconst BehaviorGroupChip: React.FunctionComponent<BehaviorGroupChip> = (\n  props\n) => {\n  const unlink = React.useCallback(() => {\n    const onSelect = props.onSelect;\n    if (onSelect) {\n      onSelect(props.notification, props.behaviorGroup, false);\n    }\n  }, [props.onSelect, props.behaviorGroup, props.notification]);\n\n  return (\n    <Chip onClick={unlink} isReadOnly={props.behaviorGroup.isDefault}>\n      {props.behaviorGroup.displayName}\n    </Chip>\n  );\n};\n\nexport const BehaviorGroupCell: React.FunctionComponent<BehaviorGroupCellProps> =\n  (props) => {\n    const [isOpen, setOpen] = React.useState(false);\n\n    const onSelected = React.useCallback(\n      (event?: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent) => {\n        const dataset =\n          (event?.currentTarget?.firstChild as HTMLElement)?.dataset ??\n          emptyImmutableObject;\n        const onSelect = props.onSelect;\n        if (\n          !props.behaviorGroupContent.isLoading &&\n          !props.behaviorGroupContent.hasError &&\n          onSelect\n        ) {\n          if (dataset.behaviorGroupId) {\n            const found = props.behaviorGroupContent.content.find(\n              // eslint-disable-next-line testing-library/await-async-queries\n              findById(dataset.behaviorGroupId)\n            );\n            if (found) {\n              // eslint-disable-next-line testing-library/await-async-queries\n              const isSelected = !!props.selected.find(findById(found.id));\n              onSelect(props.notification, found, !isSelected);\n            }\n          }\n        }\n      },\n      [\n        props.onSelect,\n        props.behaviorGroupContent,\n        props.notification,\n        props.selected,\n      ]\n    );\n\n    const items = React.useMemo(() => {\n      if (\n        props.behaviorGroupContent.isLoading ||\n        props.behaviorGroupContent.hasError\n      ) {\n        return [\n          <OptionsMenuItem key=\"is-loading\" isDisabled>\n            Loading\n          </OptionsMenuItem>,\n        ];\n      }\n\n      if (props.behaviorGroupContent.content.length === 0) {\n        return [\n          <OptionsMenuItem key=\"empty\" isDisabled>\n            <span className=\"pf-v5-u-text-align-left\">\n              You have no behavior groups. <br />\n              Create a new group by clicking on the <br />\n              &apos;Create new group&apos; button above.\n            </span>\n          </OptionsMenuItem>,\n        ];\n      }\n\n      const behaviorGroups = [\n        ...props.selected.filter((b) => b.isDefault),\n        ...props.behaviorGroupContent.content.filter((b) => !b.isDefault),\n      ];\n      return behaviorGroups.map((bg) => {\n        // eslint-disable-next-line testing-library/await-async-queries\n        const selected = !!props.selected.find(findById(bg.id));\n\n        return (\n          <OptionsMenuItem\n            key={bg.id}\n            onSelect={onSelected}\n            data-behavior-group-id={bg.id}\n            isSelected={selected}\n            isDisabled={bg.isDefault}\n          >\n            {bg.isDefault && <LockIcon className=\"pf-v5-u-mr-sm\" />}{' '}\n            {bg.displayName}\n          </OptionsMenuItem>\n        );\n      });\n    }, [props.behaviorGroupContent, props.selected, onSelected]);\n\n    const sortedSelected = React.useMemo(\n      () => [\n        ...props.selected.filter((b) => b.isDefault),\n        ...props.selected.filter((b) => !b.isDefault),\n      ],\n      [props.selected]\n    );\n\n    const toggle = React.useMemo(() => {\n      return (\n        <OptionsMenuToggle\n          onToggle={setOpen}\n          toggleTemplate={\n            sortedSelected.length === 0 ? (\n              <span className=\"pf-v5-u-disabled-color-100\">\n                Select behavior group\n              </span>\n            ) : (\n              <ChipGroup>\n                {sortedSelected.map((value) => (\n                  <BehaviorGroupChip\n                    key={value.id}\n                    behaviorGroup={value}\n                    notification={props.notification}\n                    onSelect={props.onSelect}\n                  />\n                ))}\n              </ChipGroup>\n            )\n          }\n        />\n      );\n    }, [sortedSelected, props.notification, props.onSelect]);\n\n    const readonlyText = React.useMemo(() => {\n      if (sortedSelected.length === 0) {\n        return (\n          <span>\n            <Icon className=\"pf-v5-u-mr-sm pf-v5-u-disabled-color-100\" isInline>\n              <BellSlashIcon />\n            </Icon>\n            Mute\n          </span>\n        );\n      }\n\n      return join(\n        sortedSelected.map((b) => (\n          <React.Fragment key={b.id}>\n            {b.isDefault && (\n              <Tooltip\n                content={`${b.displayName} behavior is attached to this event and cannot be changed.\n                Add additional behavior groups to assign different actions or recipients.`}\n              >\n                <LockIcon className=\"pf-v5-u-mr-sm pf-v5-u-disabled-color-100\" />\n              </Tooltip>\n            )}{' '}\n            {b.displayName}\n          </React.Fragment>\n        )),\n        CommaSeparator\n      );\n    }, [sortedSelected]);\n\n    if (!props.isEditMode) {\n      return <TableText wrapModifier=\"truncate\"> {readonlyText} </TableText>;\n    }\n\n    return (\n      <OptionsMenu\n        id={props.id}\n        direction=\"down\"\n        menuItems={items}\n        toggle={toggle}\n        isOpen={isOpen}\n        menuAppendTo={document.body}\n      />\n    );\n  };\n","import { Button, ButtonVariant, Skeleton } from '@patternfly/react-core';\nimport { CheckIcon, CloseIcon, PencilAltIcon } from '@patternfly/react-icons';\nimport {\n  IExtraColumnData,\n  SortByDirection,\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  ThProps,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { TdActionsType } from '@patternfly/react-table/dist/esm/components/Table/base';\nimport {\n  global_active_color_100,\n  global_disabled_color_100,\n  global_palette_black_600,\n} from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroupContent } from '../../pages/Notifications/List/useBehaviorGroupContent';\nimport { BehaviorGroupNotificationRow } from '../../pages/Notifications/List/useBehaviorGroupNotificationRows';\nimport {\n  BehaviorGroup,\n  NotificationBehaviorGroup,\n  UUID,\n} from '../../types/Notification';\nimport {\n  SortDirection,\n  sortDirectionFromString,\n} from '../../types/SortDirection';\nimport { emptyImmutableArray } from '../../utils/Immutable';\nimport { ouia } from '../Ouia';\nimport EmptyTableState from './EmptyTableState';\nimport { BehaviorGroupCell } from './Table/BehaviorGroupCell';\n\ntype OnNotificationIdHandler = (notificationId: UUID) => void;\nexport type OnBehaviorGroupLinkUpdated = (\n  notification: NotificationBehaviorGroup,\n  behaviorGroup: BehaviorGroup,\n  isLinked: boolean\n) => void;\n\n// The value has to be the order on which the columns appear on the table\nexport enum NotificationsTableColumns {\n  EVENT,\n  APPLICATION,\n  BEHAVIOR,\n}\n\nexport interface NotificationsBehaviorGroupTableProps {\n  behaviorGroupContent: BehaviorGroupContent;\n  notifications: Array<BehaviorGroupNotificationRow>;\n  onBehaviorGroupLinkUpdated: OnBehaviorGroupLinkUpdated;\n  onStartEditing?: OnNotificationIdHandler;\n  onFinishEditing?: OnNotificationIdHandler;\n  onCancelEditing?: OnNotificationIdHandler;\n  sortBy: NotificationsTableColumns;\n  sortDirection: SortDirection;\n\n  onSort: (column: NotificationsTableColumns, direction: SortDirection) => void;\n}\n\nconst actionButtonClassName = style({\n  float: 'right',\n});\n\ntype Callbacks = {\n  onStartEditing: OnNotificationIdHandler;\n  onFinishEditing: OnNotificationIdHandler;\n  onCancelEditing: OnNotificationIdHandler;\n  onBehaviorGroupLinkUpdated: OnBehaviorGroupLinkUpdated;\n};\n\nconst HiddenActionsToggle = () => <React.Fragment />;\n\nconst getActions = (\n  notification: BehaviorGroupNotificationRow,\n  callbacks?: Callbacks\n): TdActionsType => {\n  const isDisabled = notification.loadingActionStatus !== 'done';\n\n  if (!notification.isEditMode) {\n    return {\n      actionsToggle: HiddenActionsToggle,\n      items: [\n        {\n          key: 'edit',\n          className: actionButtonClassName,\n          title: (\n            <Button\n              aria-label=\"edit\"\n              variant={ButtonVariant.plain}\n              isDisabled={isDisabled}\n            >\n              <PencilAltIcon />\n            </Button>\n          ),\n          isOutsideDropdown: true,\n          onClick: () => callbacks?.onStartEditing(notification.id),\n          isDisabled: isDisabled || !callbacks,\n        },\n      ],\n    };\n  }\n\n  return {\n    actionsToggle: HiddenActionsToggle,\n    items: [\n      {\n        key: 'done',\n        className: actionButtonClassName,\n        title: (\n          <Button\n            aria-label=\"done\"\n            variant={ButtonVariant.plain}\n            isDisabled={isDisabled}\n          >\n            <CheckIcon\n              color={\n                isDisabled\n                  ? global_disabled_color_100.value\n                  : global_active_color_100.value\n              }\n            />\n          </Button>\n        ),\n        isOutsideDropdown: true,\n        onClick: () => callbacks?.onFinishEditing(notification.id),\n        isDisabled: isDisabled || !callbacks,\n      },\n      {\n        key: 'cancel',\n        className: actionButtonClassName,\n        title: (\n          <Button\n            aria-label=\"cancel\"\n            variant={ButtonVariant.plain}\n            isDisabled={isDisabled}\n          >\n            <CloseIcon\n              color={\n                isDisabled\n                  ? global_disabled_color_100.value\n                  : global_palette_black_600.value\n              }\n            />\n          </Button>\n        ),\n        isOutsideDropdown: true,\n        onClick: () => callbacks?.onCancelEditing(notification.id),\n        isDisabled: isDisabled || !callbacks,\n      },\n    ],\n  };\n};\n\nexport const NotificationsBehaviorGroupTable =\n  ouia<NotificationsBehaviorGroupTableProps>((props) => {\n    const callbacks: Callbacks | undefined = React.useMemo(() => {\n      if (\n        props.onStartEditing &&\n        props.onFinishEditing &&\n        props.onCancelEditing\n      ) {\n        return {\n          onStartEditing: props.onStartEditing,\n          onFinishEditing: props.onFinishEditing,\n          onCancelEditing: props.onCancelEditing,\n          onBehaviorGroupLinkUpdated: props.onBehaviorGroupLinkUpdated,\n        };\n      }\n\n      return undefined;\n    }, [\n      props.onStartEditing,\n      props.onFinishEditing,\n      props.onCancelEditing,\n      props.onBehaviorGroupLinkUpdated,\n    ]);\n\n    const onSort = React.useCallback(\n      (\n        _event: React.MouseEvent,\n        columnIndex: number,\n        sortByDirection: SortByDirection,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        _extraData: IExtraColumnData\n      ) => {\n        const externalOnSort = props.onSort;\n        externalOnSort(columnIndex, sortDirectionFromString(sortByDirection));\n      },\n      [props.onSort]\n    );\n\n    const sortOptions: Record<\n      NotificationsTableColumns,\n      undefined | ThProps['sort']\n    > = React.useMemo(() => {\n      const sortBy = {\n        direction: props.sortDirection,\n        index: props.sortBy,\n      };\n\n      return {\n        [NotificationsTableColumns.EVENT]: {\n          sortBy,\n          columnIndex: NotificationsTableColumns.EVENT,\n          onSort,\n        },\n        [NotificationsTableColumns.APPLICATION]: {\n          sortBy,\n          columnIndex: NotificationsTableColumns.APPLICATION,\n          onSort,\n        },\n        [NotificationsTableColumns.BEHAVIOR]: undefined,\n      };\n    }, [props.sortDirection, props.sortBy, onSort]);\n\n    const rows = React.useMemo(() => {\n      const notifications = props.notifications;\n      const behaviorGroupContent = props.behaviorGroupContent;\n      return notifications.map((notification) => {\n        return (\n          <Tr key={notification.id}>\n            <Td>{notification.eventTypeDisplayName}</Td>\n            <Td>{notification.applicationDisplayName}</Td>\n            <Td>\n              {notification.loadingActionStatus === 'loading' ? (\n                <Skeleton width=\"90%\" />\n              ) : (\n                <BehaviorGroupCell\n                  id={`behavior-group-cell-${notification.id}`}\n                  notification={notification}\n                  behaviorGroupContent={behaviorGroupContent}\n                  selected={notification.behaviors ?? emptyImmutableArray}\n                  onSelect={callbacks?.onBehaviorGroupLinkUpdated}\n                  isEditMode={notification.isEditMode}\n                />\n              )}\n            </Td>\n            <Td actions={getActions(notification, callbacks)} />\n          </Tr>\n        );\n      });\n    }, [props.notifications, props.behaviorGroupContent, callbacks]);\n\n    return (\n      <TableComposable\n        aria-label=\"Notifications\"\n        isStickyHeader={true}\n        variant={TableVariant.compact}\n        id=\"configure-events-table\"\n      >\n        <Thead>\n          <Tr>\n            <Th sort={sortOptions[NotificationsTableColumns.EVENT]}>Event</Th>\n            <Th sort={sortOptions[NotificationsTableColumns.APPLICATION]}>\n              Application\n            </Th>\n            <Th\n              sort={sortOptions[NotificationsTableColumns.BEHAVIOR]}\n              width={35}\n            >\n              Behavior\n            </Th>\n            <Th />\n          </Tr>\n        </Thead>\n        <Tbody>\n          {props.notifications.length === 0 ? <EmptyTableState /> : rows}\n        </Tbody>\n      </TableComposable>\n    );\n  }, 'Notifications/Table');\n","import { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../utils/getOuiaProps';\n\nexport const ouia = <P,>(\n  Component: React.FunctionComponent<P>,\n  type: string\n): React.FunctionComponent<OuiaComponentProps & P> => {\n  const Wrapped: React.FunctionComponent<OuiaComponentProps & P> = (props) => {\n    return (\n      <div {...getOuiaProps(type, props)}>\n        <Component {...props} />\n      </div>\n    );\n  };\n\n  Wrapped.displayName = `Ouia(${Component.displayName ?? Component.name})`;\n\n  return Wrapped;\n};\n","import {\n  ClearFilters,\n  Filters,\n  SetFilters,\n} from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum NotificationFilterColumn {\n  NAME = 'name',\n  APPLICATION = 'application',\n  ACTION = 'action',\n}\n\nexport type NotificationFilters = Filters<typeof NotificationFilterColumn>;\nexport type SetNotificationFilters = SetFilters<\n  typeof NotificationFilterColumn\n>;\nexport type ClearNotificationFilters = ClearFilters<\n  typeof NotificationFilterColumn\n>;\n","import { PaginationProps, PaginationVariant } from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { ConditionalFilterProps } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { FilterChipsProps } from '@redhat-cloud-services/frontend-components/FilterChips';\nimport {\n  ExporterType,\n  OptionalColumnsMetada,\n  OuiaComponentProps,\n  getInsights,\n  useInsightsEnvironmentFlag,\n  usePrimaryToolbarFilterConfig,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\n\nimport { PageAdapter } from '../../hooks/usePage';\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { isExperimental, stagingAndProd } from '../../types/Environments';\nimport { Facet } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport {\n  ClearNotificationFilters,\n  NotificationFilterColumn,\n  NotificationFilters,\n  SetNotificationFilters,\n} from './Filter';\n\nexport enum SelectionCommand {\n  NONE,\n  PAGE,\n  ALL,\n}\n\nexport interface NotificationsToolbarProps extends OuiaComponentProps {\n  filters: NotificationFilters;\n  setFilters: SetNotificationFilters;\n  clearFilter: ClearNotificationFilters;\n  filterColumns?: ReadonlyArray<NotificationFilterColumn>;\n\n  appFilterOptions: ReadonlyArray<Facet>;\n\n  pageAdapter: PageAdapter;\n  count: number;\n\n  onExport?: (type: ExporterType) => void;\n\n  selectedCount?: number;\n  onSelectionChanged?: (command: SelectionCommand) => void;\n  bulkSelectionDisabled?: boolean;\n  pageCount?: number;\n}\n\nconst allFilterColumns = [\n  NotificationFilterColumn.NAME,\n  NotificationFilterColumn.APPLICATION,\n  NotificationFilterColumn.ACTION,\n];\n\nexport const NotificationsToolbar: React.FunctionComponent<NotificationsToolbarProps> =\n  (props) => {\n    const insights = getInsights();\n    const filterColumns = props.filterColumns ?? allFilterColumns;\n    const filterMetadata = useMemo<\n      OptionalColumnsMetada<typeof NotificationFilterColumn>\n    >(() => {\n      const appFilterItems = props.appFilterOptions.map((a) => ({\n        value: a.displayName,\n        label: <> {a.displayName}</>,\n      }));\n\n      return {\n        [NotificationFilterColumn.NAME]: filterColumns.includes(\n          NotificationFilterColumn.NAME\n        )\n          ? {\n              label: 'Event type',\n              placeholder: 'Filter by event type',\n            }\n          : undefined,\n        [NotificationFilterColumn.APPLICATION]: filterColumns.includes(\n          NotificationFilterColumn.APPLICATION\n        )\n          ? {\n              label: 'Application',\n              placeholder: 'Filter by application',\n              options: {\n                exclusive: false,\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                default: [] as any,\n                items: appFilterItems,\n              },\n            }\n          : undefined,\n        [NotificationFilterColumn.ACTION]:\n          filterColumns.includes(NotificationFilterColumn.ACTION) &&\n          isExperimental(insights)\n            ? {\n                label: 'Action',\n                placeholder: 'Filter by action',\n              }\n            : undefined,\n      };\n    }, [props.appFilterOptions, insights, filterColumns]);\n\n    const bulkSelectProps = React.useMemo(() => {\n      const onSelectionChanged = props.onSelectionChanged;\n      const count = props.count;\n      const pageAdapter = props.pageAdapter;\n      const selectedCount = props.selectedCount;\n      const pageSize = pageAdapter.page.size;\n      if (!onSelectionChanged) {\n        return undefined;\n      }\n\n      const selectAll = () => onSelectionChanged(SelectionCommand.ALL);\n      const selectNone = () => onSelectionChanged(SelectionCommand.NONE);\n\n      return {\n        count: selectedCount ?? 0,\n        items: [\n          {\n            title: 'Select none (0)',\n            onClick: selectNone,\n          },\n          {\n            title: `Select page (${props.pageCount ?? pageSize})`,\n            onClick: () => onSelectionChanged(SelectionCommand.PAGE),\n          },\n          {\n            title: `Select all (${count})`,\n            onClick: selectAll,\n          },\n        ],\n        checked: selectedCount !== 0 && selectedCount === count,\n        onSelect: (isSelected: boolean) =>\n          isSelected ? selectAll() : selectNone(),\n        isDisabled: props.bulkSelectionDisabled,\n      };\n    }, [\n      props.onSelectionChanged,\n      props.selectedCount,\n      props.pageAdapter,\n      props.count,\n      props.bulkSelectionDisabled,\n      props.pageCount,\n    ]);\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n      NotificationFilterColumn,\n      props.filters,\n      props.setFilters,\n      props.clearFilter,\n      filterMetadata\n    );\n\n    const exportConfigInternal = useTableExportConfig(props.onExport);\n\n    const filterConfig = primaryToolbarFilterConfig.filterConfig;\n    const activeFiltersConfig = primaryToolbarFilterConfig.activeFiltersConfig;\n\n    const exportConfig = useInsightsEnvironmentFlag(\n      getInsights(),\n      stagingAndProd,\n      undefined,\n      useCallback(() => exportConfigInternal, [exportConfigInternal])\n    );\n\n    const pageChanged = React.useCallback(\n      (_event: unknown, page: number) => {\n        const inner = props.pageAdapter.changePage;\n        inner(page);\n      },\n      [props.pageAdapter]\n    );\n\n    const perPageChanged = React.useCallback(\n      (_event: unknown, perPage: number) => {\n        const inner = props.pageAdapter.changeItemsPerPage;\n        inner(perPage);\n      },\n      [props.pageAdapter]\n    );\n\n    const topPaginationProps = React.useMemo<PaginationProps>(\n      () => ({\n        itemCount: props.count,\n        page: props.pageAdapter.page.index,\n        perPage: props.pageAdapter.page.size,\n        isCompact: true,\n        variant: PaginationVariant.top,\n        onSetPage: pageChanged,\n        onFirstClick: pageChanged,\n        onPreviousClick: pageChanged,\n        onNextClick: pageChanged,\n        onLastClick: pageChanged,\n        onPageInput: pageChanged,\n        onPerPageSelect: perPageChanged,\n      }),\n      [props.count, props.pageAdapter, pageChanged, perPageChanged]\n    );\n\n    const bottomPaginationProps = React.useMemo<PaginationProps>(\n      () => ({\n        ...topPaginationProps,\n        isCompact: false,\n        variant: PaginationVariant.bottom,\n      }),\n      [topPaginationProps]\n    );\n\n    return (\n      <div {...getOuiaProps('Notifications/DualToolbar', props)}>\n        <PrimaryToolbar\n          bulkSelect={bulkSelectProps}\n          filterConfig={filterConfig as ConditionalFilterProps}\n          activeFiltersConfig={activeFiltersConfig as FilterChipsProps}\n          exportConfig={exportConfig}\n          pagination={topPaginationProps}\n        />\n        {props.children}\n        <PrimaryToolbar pagination={bottomPaginationProps} />\n      </div>\n    );\n  };\n","import {\n  Direction,\n  Sort,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { NotificationsTableColumns } from '../../../components/Notifications/NotificationsBehaviorGroupTable';\nimport Config from '../../../config/Config';\nimport { usePage } from '../../../hooks/usePage';\nimport { Facet } from '../../../types/Notification';\nimport { SortDirection } from '../../../types/SortDirection';\nimport { useNotificationFilter } from '../List/useNotificationFilter';\nimport { useEventTypesFilterBuilder } from './useEventTypesFilterBuilder';\n\nexport const useEventTypesPage = (\n  bundle: Facet,\n  applications: ReadonlyArray<Facet>,\n  useUrlState: boolean\n) => {\n  const notificationsFilter = useNotificationFilter(\n    applications.map((a) => a.displayName.toString()),\n    useUrlState\n  );\n  const filterBuilder = useEventTypesFilterBuilder(bundle, applications);\n\n  const [sorting, setSorting] = React.useState<{\n    sortDirection: SortDirection;\n    sortBy: NotificationsTableColumns;\n  }>({\n    sortDirection: SortDirection.ASC,\n    sortBy: NotificationsTableColumns.APPLICATION,\n  });\n\n  const onSort = React.useCallback(\n    (column: NotificationsTableColumns, direction: SortDirection) => {\n      setSorting({\n        sortBy: column,\n        sortDirection: direction,\n      });\n    },\n    [setSorting]\n  );\n\n  const sort: Sort = React.useMemo(() => {\n    const direction = sorting.sortDirection.toUpperCase() as Direction;\n    let column: string;\n    switch (sorting.sortBy) {\n      case NotificationsTableColumns.APPLICATION:\n        column = 'application';\n        break;\n      case NotificationsTableColumns.EVENT:\n        column = 'display_name';\n        break;\n      default:\n        throw new Error(`Invalid sorting index: ${sorting.sortBy}`);\n    }\n\n    return Sort.by(column, direction);\n  }, [sorting]);\n\n  const notificationPage = usePage(\n    Config.paging.defaultPerPage,\n    filterBuilder,\n    notificationsFilter.filters,\n    sort\n  );\n\n  return {\n    pageController: notificationPage,\n    onSort,\n    sortBy: sorting.sortBy,\n    sortDirection: sorting.sortDirection,\n    filters: notificationsFilter.filters,\n    setFilters: notificationsFilter.setFilters,\n    clearFilters: notificationsFilter.clearFilter,\n  };\n};\n","import {\n  useFilters,\n  useUrlStateMultipleOptions,\n  useUrlStateString,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { useMemo, useState } from 'react';\n\nimport { NotificationFilterColumn } from '../../../components/Notifications/Filter';\n\nconst DEBOUNCE_MS = 250;\n\nexport const useNotificationFilter = (\n  initialAppOptions: Array<string>,\n  initUseUrlState: boolean,\n  debounce = DEBOUNCE_MS\n) => {\n  const useStateFactory = useMemo(() => {\n    const useUrlStateName = (defaultValue?: string) =>\n      useUrlStateString('name', defaultValue);\n    const useUrlStateApplication = (defaultValue?: Array<string>) =>\n      useUrlStateMultipleOptions('app', initialAppOptions, defaultValue);\n    const useUrlStateAction = (defaultValue?: string) =>\n      useUrlStateString('action', defaultValue);\n\n    return (column: NotificationFilterColumn) => {\n      switch (column) {\n        case NotificationFilterColumn.NAME:\n          return initUseUrlState ? useUrlStateName : useState;\n        case NotificationFilterColumn.ACTION:\n          return initUseUrlState ? useUrlStateAction : useState;\n        case NotificationFilterColumn.APPLICATION:\n          return initUseUrlState ? useUrlStateApplication : useState;\n        default:\n          assertNever(column);\n      }\n    };\n    // This is an init param, so it doesn't need to recompute on change.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return useFilters(NotificationFilterColumn, debounce, useStateFactory);\n};\n","import {\n  Filter,\n  Operator,\n  arrayValue,\n  stringValue,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback } from 'react';\n\nimport {\n  NotificationFilterColumn,\n  NotificationFilters,\n} from '../../../components/Notifications/Filter';\nimport { Facet } from '../../../types/Notification';\n\nexport const useEventTypesFilterBuilder = (\n  bundle: Facet,\n  appFilterOptions: ReadonlyArray<Facet>\n) => {\n  return useCallback(\n    (filters?: NotificationFilters) => {\n      const filter = new Filter();\n\n      const appFilter =\n        filters && filters[NotificationFilterColumn.APPLICATION];\n\n      if (appFilter) {\n        const appIds: Array<string> = [];\n        for (const appName of arrayValue(appFilter)) {\n          const filterOption = appFilterOptions.find(\n            (a) => a.displayName === appName\n          );\n          if (filterOption) {\n            appIds.push(filterOption.id);\n          }\n        }\n\n        filter.and('applicationId', Operator.EQUAL, appIds);\n      }\n\n      filter.and('bundleId', Operator.EQUAL, bundle.id);\n\n      const eventTypeFilter = filters && filters[NotificationFilterColumn.NAME];\n      if (eventTypeFilter) {\n        const eventTypeFilterName = stringValue(eventTypeFilter);\n        filter.and('eventFilterName', Operator.EQUAL, eventTypeFilterName);\n      }\n\n      return filter;\n    },\n    [bundle, appFilterOptions]\n  );\n};\n","import { SVGIconProps } from '@patternfly/react-icons/dist/js/createIcon';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport icon from './WebhookIcon.svg';\nconst className = style({\n  verticalAlign: '-0.125em',\n  width: '1em',\n  height: '1em',\n});\n\nexport const WebhookIcon: React.FunctionComponent<SVGIconProps> = () => {\n  return <img alt=\"Webhook\" className={className} src={icon} />;\n};\n","import { Spinner } from '@patternfly/react-core';\nimport { EnvelopeIcon } from '@patternfly/react-icons';\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\n\nimport Config from '../../config/Config';\nimport { Action, NotificationType } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { WebhookIcon } from '../Icons/WebhookIcon';\n\nexport interface ActionComponentText extends OuiaComponentProps {\n  action: Action | undefined;\n  loading?: boolean;\n  hasError?: boolean;\n}\n\ninterface ActionTypeToIconProps {\n  actionType: NotificationType;\n}\n\nconst ActionTypeToIcon: React.FunctionComponent<ActionTypeToIconProps> = (\n  props\n) => {\n  switch (props.actionType) {\n    case NotificationType.DRAWER:\n      return <BellIcon />;\n    case NotificationType.EMAIL_SUBSCRIPTION:\n      return <EnvelopeIcon />;\n    case NotificationType.INTEGRATION:\n      return <WebhookIcon />;\n    default:\n      assertNever(props.actionType);\n  }\n};\n\nconst ActionComponentWrapper: React.FunctionComponent<ActionComponentText> = (\n  props\n) => (\n  <div {...getOuiaProps('Notifications/ActionComponent', props)}>\n    {props.children}\n  </div>\n);\n\nexport const ActionComponent: React.FunctionComponent<ActionComponentText> = (\n  props\n) => {\n  if (props.loading) {\n    return (\n      <ActionComponentWrapper {...props}>\n        <Spinner size=\"md\" />\n      </ActionComponentWrapper>\n    );\n  }\n\n  if (props.hasError) {\n    return (\n      <ActionComponentWrapper {...props}>\n        <span>Error loading actions</span>\n      </ActionComponentWrapper>\n    );\n  }\n\n  if (!props.action) {\n    return (\n      <ActionComponentWrapper {...props}>\n        <span className=\"pf-v5-u-color-200\">\n          <div>No actions.</div>\n          <div>Users will not be notified.</div>\n        </span>\n      </ActionComponentWrapper>\n    );\n  }\n\n  return (\n    <ActionComponentWrapper {...props}>\n      <ActionTypeToIcon actionType={props.action.type} />\n      <span className=\"pf-v5-u-ml-sm\">\n        {Config.notifications.types[props.action.type].name}\n      </span>\n      {props.action.type === NotificationType.INTEGRATION && (\n        <span>\n          : {Config.integrations.types[props.action.integration.type].name}\n        </span>\n      )}\n    </ActionComponentWrapper>\n  );\n};\n","import { Label, LabelProps, Tooltip } from '@patternfly/react-core';\nimport * as React from 'react';\n\ninterface GroupNotFoundProps {\n  onClose?: LabelProps['onClose'];\n}\n\nexport const GroupNotFound: React.FunctionComponent<GroupNotFoundProps> = (\n  props\n) => {\n  const text = 'User Access group (Not found)';\n  return (\n    <Tooltip content=\"This User Access group was not found, and may have been deleted. Remove it from your behavior group to stop seeing it.\">\n      {props.onClose ? (\n        <Label variant=\"outline\" color=\"red\" onClose={props.onClose}>\n          {text}\n        </Label>\n      ) : (\n        <span className=\"pf-v5-u-color-300\"> {text} </span>\n      )}\n    </Tooltip>\n  );\n};\n","import { Skeleton, Tooltip } from '@patternfly/react-core';\nimport { BanIcon, LockIcon } from '@patternfly/react-icons';\n\nimport { join } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { Action, NotificationType } from '../../types/Notification';\nimport {\n  NotificationRbacGroupRecipient,\n  NotificationUserRecipient,\n} from '../../types/Recipient';\nimport { GroupNotFound } from './Rbac/GroupNotFound';\n\ninterface RecipientProps {\n  action: Action;\n  hasOutline?: boolean;\n}\n\nconst CommaSeparator = () => <span>, </span>;\n\nexport const Recipient: React.FunctionComponent<RecipientProps> = (props) => {\n  if (props.action.type === NotificationType.INTEGRATION) {\n    return (\n      <>\n        {!props.action.integration.isEnabled ? (\n          <span className=\"pf-v5-u-color-300\">\n            {' '}\n            {props.action.integration.name}\n            <Tooltip\n              content=\"This integration has been disabled. This action wil not fire until it is enabled.\"\n              position=\"bottom\"\n            >\n              <BanIcon className=\"pf-v5-u-color-300\" />\n            </Tooltip>\n          </span>\n        ) : (\n          props.action.integration.name\n        )}\n      </>\n    );\n  }\n\n  const users = props.action.recipient.filter(\n    (a) => a instanceof NotificationUserRecipient\n  ) as unknown as ReadonlyArray<NotificationUserRecipient>;\n\n  const groups = props.action.recipient.filter(\n    (a) => a instanceof NotificationRbacGroupRecipient\n  ) as unknown as ReadonlyArray<NotificationRbacGroupRecipient>;\n\n  return (\n    <span>\n      {users.length > 0 && (\n        <div>\n          Users:{' '}\n          {join(\n            users.map((u) => (\n              <>\n                {u.displayName}\n                {u.ignorePreferences && (\n                  <span>\n                    <Tooltip\n                      content=\"You may still receive forced notifications for this service\"\n                      position=\"bottom\"\n                    >\n                      <LockIcon className=\"pf-v5-u-ml-sm pf-v5-u-color-300\" />\n                    </Tooltip>\n                  </span>\n                )}{' '}\n              </>\n            )),\n            CommaSeparator\n          )}\n        </div>\n      )}\n      {groups.length > 0 && (\n        <div>\n          User Access Groups:{' '}\n          {join(\n            groups.map((g) => {\n              if (g.hasError) {\n                return <GroupNotFound key={g.groupId} />;\n              }\n\n              if (g.isLoading) {\n                return <Skeleton width=\"40px\" key={g.groupId} />;\n              }\n\n              return g.displayName;\n            }),\n            CommaSeparator\n          )}\n        </div>\n      )}\n    </span>\n  );\n};\n","import {\n  Grid,\n  GridItem,\n  Skeleton,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { Action } from '../../../types/Notification';\nimport { ActionComponent } from '../ActionComponent';\nimport { Recipient } from '../Recipient';\n\ninterface BehaviorGroupActionsSummaryProps {\n  actions?: ReadonlyArray<Action>;\n}\n\ntype BehaviorGroupActionSummaryImplProps =\n  Required<BehaviorGroupActionsSummaryProps>;\n\nconst skeletonActions = 3;\n\nconst BehaviorGroupActionsSummaryLayout: React.FunctionComponent = (props) => {\n  return (\n    <Grid>\n      <GridItem span={6}>\n        <TextContent>\n          <Text component={TextVariants.h6}>Action</Text>\n        </TextContent>\n      </GridItem>\n      <GridItem span={6}>\n        <TextContent>\n          <Text component={TextVariants.h6}>Recipient</Text>\n        </TextContent>\n      </GridItem>\n      {props.children}\n    </Grid>\n  );\n};\n\nconst BehaviorGroupActionsSummaryImpl: React.FunctionComponent<BehaviorGroupActionSummaryImplProps> =\n  (props) => {\n    return (\n      <BehaviorGroupActionsSummaryLayout>\n        {props.actions.map((action, index) => (\n          <React.Fragment key={`${index}-${action.type}`}>\n            <GridItem span={6}>\n              <ActionComponent action={action} />\n            </GridItem>\n            <GridItem className=\"pf-u-text-break-word\" span={6}>\n              <Recipient action={action} />\n            </GridItem>\n          </React.Fragment>\n        ))}\n      </BehaviorGroupActionsSummaryLayout>\n    );\n  };\n\nconst BehaviorGroupActionsSummarySkeleton: React.FunctionComponent = () => {\n  const contentWidth = '150px';\n\n  return (\n    <BehaviorGroupActionsSummaryLayout>\n      {[...Array(skeletonActions).values()].map((_unused, index) => (\n        <React.Fragment key={`skeleton-${index}`}>\n          <GridItem span={6}>\n            <Skeleton width={contentWidth} />\n          </GridItem>\n          <GridItem span={6}>\n            <Skeleton width={contentWidth} />\n          </GridItem>\n        </React.Fragment>\n      ))}\n    </BehaviorGroupActionsSummaryLayout>\n  );\n};\n\nexport const BehaviorGroupActionsSummary: React.FunctionComponent<BehaviorGroupActionsSummaryProps> =\n  (props) => {\n    if (props.actions) {\n      return <BehaviorGroupActionsSummaryImpl actions={props.actions} />;\n    }\n\n    return <BehaviorGroupActionsSummarySkeleton />;\n  };\n","import {\n  Card,\n  CardActions,\n  CardBody,\n  CardHeader,\n  CardHeaderMain,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Skeleton,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { MarkRequired } from 'ts-essentials';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { BehaviorGroupActionsSummary } from './BehaviorGroupActionsSummary';\n\nconst cardClassName = style({\n  width: 450,\n  height: '100%',\n});\n\nexport interface BehaviorGroupProps extends OuiaComponentProps {\n  behaviorGroup?: BehaviorGroup;\n  onEdit?: (behaviorGroup: BehaviorGroup) => void;\n  onDelete?: (behaviorGroup: BehaviorGroup) => void;\n}\n\ntype BehaviorGroupImplProps = MarkRequired<BehaviorGroupProps, 'behaviorGroup'>;\n\nexport interface BehaviorGroupCardLayout {\n  title: React.ReactNode;\n  dropdownItems?: Array<React.ReactNode>;\n  isDefaultBehavior?: boolean;\n}\n\nconst BehaviorGroupCardLayout: React.FunctionComponent<BehaviorGroupCardLayout> =\n  (props) => {\n    const [isOpen, setOpen] = React.useState(false);\n\n    const switchOpen = React.useCallback(\n      () => setOpen((prev) => !prev),\n      [setOpen]\n    );\n\n    return (\n      <Card isFlat className={cardClassName}>\n        <CardHeader>\n          <CardHeaderMain>\n            <Split>\n              <SplitItem>\n                {props.isDefaultBehavior && (\n                  <Tooltip\n                    position=\"top\"\n                    appendTo={() => document.body}\n                    // eslint-disable-next-line max-len\n                    content={\n                      <div>\n                        System required behavior group\n                        <br></br>\n                        <br></br>\n                        This group is system generated and can not be edited,\n                        deleted, or removed from being applied to an event\n                      </div>\n                    }\n                  >\n                    <LockIcon className=\"pf-v5-u-mr-sm\" />\n                  </Tooltip>\n                )}\n              </SplitItem>\n              <SplitItem>\n                <TextContent>\n                  <Text component={TextVariants.h4}> {props.title} </Text>\n                </TextContent>\n              </SplitItem>\n            </Split>\n          </CardHeaderMain>\n          <CardActions>\n            {!props.isDefaultBehavior && (\n              <Dropdown\n                onSelect={switchOpen}\n                toggle={\n                  <KebabToggle\n                    onToggle={setOpen}\n                    isDisabled={!props.dropdownItems}\n                  />\n                }\n                isOpen={isOpen}\n                isPlain\n                dropdownItems={props.dropdownItems}\n                position={DropdownPosition.right}\n                menuAppendTo={() => document.body}\n              />\n            )}\n          </CardActions>\n        </CardHeader>\n        <CardBody>{props.children}</CardBody>\n      </Card>\n    );\n  };\n\nconst BehaviorGroupCardImpl: React.FunctionComponent<BehaviorGroupImplProps> = (\n  props\n) => {\n  const onClickEdit = React.useCallback(() => {\n    const onEdit = props.onEdit;\n    if (onEdit) {\n      onEdit(props.behaviorGroup);\n    }\n  }, [props.behaviorGroup, props.onEdit]);\n\n  const onClickDelete = React.useCallback(() => {\n    const onDelete = props.onDelete;\n    if (onDelete) {\n      onDelete(props.behaviorGroup);\n    }\n  }, [props.behaviorGroup, props.onDelete]);\n\n  const dropdownItems = React.useMemo(\n    () => [\n      <DropdownItem\n        key=\"on-edit\"\n        onClick={onClickEdit}\n        isDisabled={!onClickEdit}\n      >\n        {' '}\n        Edit{' '}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"on-delete\"\n        onClick={onClickDelete}\n        isDisabled={!onClickDelete}\n      >\n        {' '}\n        Delete{' '}\n      </DropdownItem>,\n    ],\n    [onClickEdit, onClickDelete]\n  );\n\n  return (\n    <BehaviorGroupCardLayout\n      title={props.behaviorGroup.displayName}\n      dropdownItems={dropdownItems}\n      isDefaultBehavior={props.behaviorGroup.isDefault}\n    >\n      <BehaviorGroupActionsSummary actions={props.behaviorGroup.actions} />\n    </BehaviorGroupCardLayout>\n  );\n};\n\nconst BehaviorGroupCardSkeleton: React.FunctionComponent = () => {\n  return (\n    <BehaviorGroupCardLayout title={<Skeleton width=\"300px\" />}>\n      <BehaviorGroupActionsSummary />\n    </BehaviorGroupCardLayout>\n  );\n};\n\nexport const BehaviorGroupCard: React.FunctionComponent<BehaviorGroupProps> = (\n  props\n) => {\n  if (props.behaviorGroup) {\n    return (\n      <BehaviorGroupCardImpl {...props} behaviorGroup={props.behaviorGroup} />\n    );\n  }\n\n  return <BehaviorGroupCardSkeleton />;\n};\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { MarkRequired } from 'ts-essentials';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { BehaviorGroupCard } from './BehaviorGroupCard';\n\nconst cardsWrapperClassName = style({\n  overflow: 'auto',\n});\n\ninterface BehaviorGroupCardListProps {\n  onEdit?: (behaviorGroup: BehaviorGroup) => void;\n  onDelete?: (behaviorGroup: BehaviorGroup) => void;\n  behaviorGroups?: ReadonlyArray<BehaviorGroup>;\n}\n\ntype BehaviorGroupCardListImplProps = MarkRequired<\n  BehaviorGroupCardListProps,\n  'behaviorGroups'\n>;\n\nconst skeletonBehaviorGroupCount = 3;\n\nconst BehaviorGroupCardListLayout: React.FunctionComponent = (props) => {\n  return (\n    <div data-testid=\"ref-card-list-container\">\n      <Flex\n        alignItems={{ default: 'alignItemsStretch' }}\n        alignContent={{ default: 'alignContentSpaceBetween' }}\n        flexWrap={{ default: 'nowrap' }}\n        className={cardsWrapperClassName}\n        data-testid=\"card-list-container\"\n      >\n        {props.children}\n      </Flex>\n    </div>\n  );\n};\n\nconst BehaviorGroupaCrdListImpl: React.FunctionComponent<BehaviorGroupCardListImplProps> =\n  (props) => {\n    return (\n      <BehaviorGroupCardListLayout>\n        {props.behaviorGroups.map((behaviorGroup) => (\n          <FlexItem key={behaviorGroup.id} className=\"pf-v5-u-pb-md\">\n            <BehaviorGroupCard\n              behaviorGroup={behaviorGroup}\n              onEdit={props.onEdit}\n              onDelete={props.onDelete}\n            />\n          </FlexItem>\n        ))}\n      </BehaviorGroupCardListLayout>\n    );\n  };\n\nconst BehaviorGroupCardListSkeleton: React.FunctionComponent = () => {\n  return (\n    <BehaviorGroupCardListLayout>\n      {[...Array(skeletonBehaviorGroupCount).values()].map((_unused, index) => (\n        <FlexItem\n          key={`behavior-group-card-skeleton-${index}`}\n          className=\"pf-v5-u-pb-md\"\n        >\n          <BehaviorGroupCard />\n        </FlexItem>\n      ))}\n    </BehaviorGroupCardListLayout>\n  );\n};\n\nexport const BehaviorGroupCardList: React.FunctionComponent<BehaviorGroupCardListProps> =\n  (props) => {\n    if (props.behaviorGroups) {\n      return (\n        <BehaviorGroupaCrdListImpl\n          {...props}\n          behaviorGroups={props.behaviorGroups}\n        />\n      );\n    }\n\n    return <BehaviorGroupCardListSkeleton />;\n  };\n","import {\n  Button,\n  ButtonVariant,\n  Icon,\n  Spinner,\n  Split,\n  SplitItem,\n  WizardContext,\n  WizardFooter,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\nexport interface BehaviorGroupWizardFooterProps {\n  isLoading: boolean;\n  error?: string;\n  onNext: (goNext: () => void) => void;\n  onBack: (goBack: () => void) => void;\n}\n\nexport const BehaviorGroupWizardFooter: React.FunctionComponent<BehaviorGroupWizardFooterProps> =\n  (props) => {\n    const wizardContext = React.useContext(WizardContext);\n\n    const onNext = () => {\n      props.onNext(wizardContext.onNext);\n    };\n\n    const onBack = () => {\n      props.onBack(wizardContext.onBack);\n    };\n\n    return (\n      <WizardFooter>\n        <Button\n          variant={ButtonVariant.primary}\n          type=\"submit\"\n          onClick={onNext}\n          isDisabled={props.isLoading || !wizardContext.activeStep.enableNext}\n        >\n          {wizardContext.activeStep.nextButtonText ?? 'Next'}\n        </Button>\n        {!wizardContext.activeStep.hideBackButton && (\n          <Button\n            variant={ButtonVariant.secondary}\n            onClick={onBack}\n            isDisabled={wizardContext.activeStep.id === 0 || props.isLoading}\n          >\n            Back\n          </Button>\n        )}\n        {!wizardContext.activeStep.hideCancelButton && (\n          <Button\n            variant={ButtonVariant.link}\n            onClick={wizardContext.onClose}\n            isDisabled={props.isLoading}\n          >\n            Cancel\n          </Button>\n        )}\n        {props.isLoading ? (\n          <div className=\"pf-v5-u-mt-auto pf-v5-u-mb-md\">\n            <Spinner size=\"md\" />\n          </div>\n        ) : (\n          props.error && (\n            <Split>\n              <SplitItem>\n                <Icon status=\"danger\" className=\"pf-v5-u-mr-xs\">\n                  <ExclamationCircleIcon />\n                </Icon>\n              </SplitItem>\n              <SplitItem>{props.error}</SplitItem>\n            </Split>\n          )\n        )}\n      </WizardFooter>\n    );\n  };\n","import { Wizard } from '@patternfly/react-core';\nimport { Form, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { CreateBehaviorGroup } from '../../../../types/CreateBehaviorGroup';\nimport {\n  BehaviorGroupWizardFooter,\n  BehaviorGroupWizardFooterProps,\n} from './BehaviorGroupWizardFooter';\nimport { ExtendedWizardStep } from './ExtendedWizardStep';\n\ninterface BehaviorGroupWizardProps {\n  steps: Array<ExtendedWizardStep>;\n  onNext: BehaviorGroupWizardFooterProps['onNext'];\n  onBack: BehaviorGroupWizardFooterProps['onBack'];\n  onClose: () => void;\n  onSave: () => void;\n  onGoToStep: (stepId: number) => void;\n  loading: boolean;\n}\n\nexport const BehaviorGroupWizard: React.FunctionComponent<BehaviorGroupWizardProps> =\n  (props) => {\n    const { values } = useFormikContext<CreateBehaviorGroup>();\n    const title = (values.id ? 'Edit' : 'Create') + ' behavior group';\n\n    return (\n      <Form>\n        <Wizard\n          title={title}\n          steps={props.steps}\n          footer={\n            <BehaviorGroupWizardFooter\n              isLoading={props.loading}\n              onNext={props.onNext}\n              onBack={props.onBack}\n            />\n          }\n          isOpen={true}\n          startAtStep={1}\n          onGoToStep={(step) => props.onGoToStep((step.id as number) ?? 1)}\n          onClose={props.onClose}\n          onSave={props.onSave}\n        />\n      </Form>\n    );\n  };\n","import { createContext, useContext } from 'react';\n\nimport { UserIntegrationType } from '../../types/Integration';\nimport { IntegrationRef } from '../../types/Notification';\nimport { BaseNotificationRecipient } from '../../types/Recipient';\n\nexport type GetIntegrations = (\n  type: UserIntegrationType,\n  search?: string\n) => Promise<ReadonlyArray<IntegrationRef>>;\nexport type GetNotificationRecipients = () => Promise<\n  ReadonlyArray<BaseNotificationRecipient>\n>;\n\nexport interface RecipientContext {\n  getIntegrations: GetIntegrations;\n  getNotificationRecipients: GetNotificationRecipients;\n}\n\nconst RecipientContext = createContext<RecipientContext>({\n  getIntegrations: async () => {\n    throw new Error('No IntegrationContext found');\n  },\n  getNotificationRecipients: async () => {\n    throw new Error('No RecipientContext found');\n  },\n});\n\nexport const useRecipientContext = () => useContext(RecipientContext);\nexport const RecipientContextProvider = RecipientContext.Provider;\n","import produce from 'immer';\nimport { isEqual, uniqWith } from 'lodash';\nimport { useCallback, useContext, useMemo, useState } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport { getDefaultSystemEndpointAction } from '../../../services/Integrations/GetDefaultSystemEndpoint';\nimport {\n  SaveBehaviorGroupRequest,\n  useSaveBehaviorGroupMutation,\n} from '../../../services/Notifications/SaveBehaviorGroup';\nimport { toSystemProperties } from '../../../types/adapters/NotificationAdapter';\nimport {\n  BehaviorGroup,\n  BehaviorGroupRequest,\n  NotificationType,\n  SystemProperties,\n  UUID,\n  areActionsEqual,\n  isActionIntegration,\n  isActionNotify,\n} from '../../../types/Notification';\n\ninterface ActionToIdList {\n  (actions: BehaviorGroup['actions']): Array<UUID | undefined>;\n  (actions: BehaviorGroup['actions'], ids: Array<UUID>): Array<UUID>;\n}\n\nconst actionsToIdList: ActionToIdList = (\n  actions: BehaviorGroup['actions'],\n  ids?: Array<UUID>\n) => {\n  const remainingIds = ids ? ([...ids] as UUID[]) : undefined;\n  const endpointsToAdd = actions.reduce((toAdd, action) => {\n    if (isActionNotify(action)) {\n      action.recipient.forEach((recipient) => {\n        if (recipient.integrationId) {\n          toAdd.push(recipient.integrationId);\n        } else if (remainingIds === undefined) {\n          toAdd.push(undefined);\n        } else if (remainingIds.length > 0) {\n          toAdd.push(remainingIds.shift() as UUID);\n        } else {\n          throw new Error(\n            `No more ids remaining to assign: actions ${actions} newIds: ${ids}`\n          );\n        }\n      });\n    } else if (isActionIntegration(action)) {\n      toAdd.push(action.integration.id);\n    } else {\n      throw new Error(`Unknown action type: ${action}`);\n    }\n\n    return toAdd;\n  }, [] as Array<UUID | undefined>);\n\n  return endpointsToAdd as Array<UUID>;\n};\n\nexport enum SaveBehaviorGroupOperation {\n  CREATE,\n  UPDATE,\n}\n\nexport interface SaveBehaviorGroupResponse {\n  status: boolean;\n  operation: SaveBehaviorGroupOperation;\n}\n\nexport const useSaveBehaviorGroup = (\n  originalBehaviorGroup?: Partial<BehaviorGroup>\n) => {\n  const saveBehaviorGroupMutation = useSaveBehaviorGroupMutation();\n  const { query } = useContext(ClientContext);\n  const [fetchingIntegrations, setFetchingIntegrations] =\n    useState<boolean>(false);\n\n  const save = useCallback(\n    async (data: BehaviorGroupRequest): Promise<SaveBehaviorGroupResponse> => {\n      const mutate = saveBehaviorGroupMutation.mutate;\n      let needsSavingDisplayName = false;\n      let needsSavingActions = false;\n      let needsSavingEventTypes = false;\n\n      if (data.id === undefined) {\n        needsSavingDisplayName = true;\n        needsSavingActions = true;\n      }\n\n      if (data.displayName !== originalBehaviorGroup?.displayName) {\n        needsSavingDisplayName = true;\n      }\n\n      const originalEvents = [...(originalBehaviorGroup?.events ?? [])].sort();\n      const newEvents = [...(data.events ?? [])].sort();\n\n      if (\n        originalEvents.length !== newEvents.length ||\n        !originalEvents.every((value, index) => value === newEvents[index])\n      ) {\n        needsSavingEventTypes = true;\n      }\n\n      if (\n        !areActionsEqual(\n          originalBehaviorGroup?.actions ?? [],\n          data.actions ?? []\n        )\n      ) {\n        needsSavingActions = true;\n      }\n\n      const toFetch: ReadonlyArray<SystemProperties> = uniqWith(\n        ([] as Array<SystemProperties>).concat(\n          ...data.actions\n            .filter(isActionNotify)\n            .map((action) =>\n              produce(action, (draft) => {\n                draft.recipient = draft.recipient.filter(\n                  (r) => !r.integrationId\n                );\n              })\n            )\n            .map((action) => toSystemProperties(action))\n        ),\n        isEqual\n      );\n\n      if (\n        toFetch.find(\n          (props) =>\n            ![\n              NotificationType.EMAIL_SUBSCRIPTION,\n              NotificationType.DRAWER,\n            ].includes(props.type)\n        )\n      ) {\n        throw new Error(\n          'Only email and drawer subscriptions are created when assigning behavior groups'\n        );\n      }\n\n      if (toFetch.length > 0) {\n        setFetchingIntegrations(true);\n      }\n\n      const enpointIds = await Promise.all(\n        toFetch.map((systemProps) =>\n          query(getDefaultSystemEndpointAction(systemProps)).then((result) =>\n            result.payload?.type === 'Endpoint'\n              ? result.payload.value.id\n              : undefined\n          )\n        )\n      ).then((newIds) => {\n        if (newIds.includes(undefined)) {\n          throw new Error(\n            'Unexpected ids were returned when querying for system endpoints'\n          );\n        }\n\n        // We want to preserve the order\n        const remainingIds = [...newIds] as UUID[];\n        return actionsToIdList(data.actions, remainingIds);\n      });\n\n      const request: SaveBehaviorGroupRequest = {\n        ...data,\n        // cast, but it's OK - needsSavingDisplayName is always true when creating a new bg.\n        displayName: needsSavingDisplayName\n          ? data.displayName\n          : (undefined as unknown as string),\n        endpointIds: needsSavingActions ? enpointIds : undefined,\n        eventTypesIds: needsSavingEventTypes\n          ? data.events.map((e) => e.id)\n          : undefined,\n      };\n\n      if (\n        !needsSavingDisplayName &&\n        !needsSavingActions &&\n        !needsSavingEventTypes\n      ) {\n        return {\n          operation:\n            data.id === undefined\n              ? SaveBehaviorGroupOperation.CREATE\n              : SaveBehaviorGroupOperation.UPDATE,\n          status: true,\n        };\n      }\n\n      return mutate(request)\n        .then((value) => {\n          return {\n            operation:\n              data.id === undefined\n                ? SaveBehaviorGroupOperation.CREATE\n                : SaveBehaviorGroupOperation.UPDATE,\n            status: value.payload?.status === 200,\n          };\n        })\n        .catch(() => {\n          return {\n            operation:\n              data.id === undefined\n                ? SaveBehaviorGroupOperation.CREATE\n                : SaveBehaviorGroupOperation.UPDATE,\n            status: false,\n          };\n        });\n    },\n    [saveBehaviorGroupMutation.mutate, query, originalBehaviorGroup]\n  );\n\n  const isSaving = useMemo(() => {\n    return saveBehaviorGroupMutation.loading || fetchingIntegrations;\n  }, [saveBehaviorGroupMutation.loading, fetchingIntegrations]);\n\n  return {\n    save,\n    isSaving,\n  };\n};\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { Recipient } from '../../../types/Recipient';\n\nexport class RecipientOption implements SelectOptionObject {\n  readonly recipient: Recipient;\n\n  constructor(recipient: Recipient) {\n    this.recipient = recipient;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  compareTo(selectOption: any): boolean {\n    if (selectOption instanceof RecipientOption) {\n      return this.recipient.equals(selectOption.recipient);\n    }\n\n    return false;\n  }\n\n  toString(): string {\n    return this.recipient.displayName;\n  }\n}\n","import { SelectOption, Skeleton } from '@patternfly/react-core';\nimport assertNever from 'assert-never';\nimport * as React from 'react';\n\nimport { Recipient } from '../../../types/Recipient';\nimport { ReducerState } from './useTypeaheadReducer';\n\ntype Mapper<R> = (recipients: ReadonlyArray<R>) => React.ReactElement[];\ntype LoadingMapper = () => React.ReactElement[];\n\nconst getOptions = <R extends Recipient>(\n  values: ReadonlyArray<R>,\n  mapper: Mapper<R>,\n  isLoading: boolean,\n  loadingMapper?: LoadingMapper\n) => {\n  if (isLoading) {\n    return loadingMapper\n      ? loadingMapper()\n      : [\n          <SelectOption key=\"loading-option\" isNoResultsOption={true}>\n            <Skeleton width=\"100%\" />\n          </SelectOption>,\n        ];\n  }\n\n  return mapper(values);\n};\n\nexport const useRecipientOptionMemo = <R extends Recipient>(\n  state: ReducerState<R>,\n  mapper: Mapper<R>,\n  loadingMapper?: LoadingMapper\n) => {\n  return React.useMemo(() => {\n    if (state.show === 'default') {\n      return getOptions(\n        state.defaultValues,\n        mapper,\n        state.loadingDefault,\n        loadingMapper\n      );\n    } else if (state.show === 'filter') {\n      return getOptions(\n        state.filterValues,\n        mapper,\n        state.loadingFilter,\n        loadingMapper\n      );\n    }\n\n    assertNever(state.show);\n  }, [state, mapper, loadingMapper]);\n};\n","import assertNever from 'assert-never';\nimport produce, { castDraft } from 'immer';\nimport { Reducer, useCallback, useMemo, useReducer, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nexport interface ReducerState<T> {\n  filterValues: ReadonlyArray<T>;\n  defaultValues: ReadonlyArray<T>;\n  show: 'default' | 'filter';\n  loadingFilter: boolean;\n  loadingDefault: boolean;\n  lastSearch: string;\n}\n\nenum ReducerActionType {\n  LOAD_FILTER_VALUE,\n  SET_FILTER_VALUE,\n  USE_DEFAULTS,\n  SET_DEFAULTS,\n}\n\ntype ReducerAction<T> =\n  | {\n      type: ReducerActionType.USE_DEFAULTS;\n    }\n  | {\n      type: ReducerActionType.LOAD_FILTER_VALUE;\n      search: string;\n    }\n  | {\n      type: ReducerActionType.SET_FILTER_VALUE;\n      search: string;\n      values: ReadonlyArray<T>;\n    }\n  | {\n      type: ReducerActionType.SET_DEFAULTS;\n      values: ReadonlyArray<T>;\n    };\n\nconst reducerFunction = <T>(\n  state: ReducerState<T>,\n  action: ReducerAction<T>\n): ReducerState<T> => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case ReducerActionType.SET_FILTER_VALUE:\n        if (action.search === state.lastSearch) {\n          if (action.values !== draft.filterValues) {\n            draft.loadingFilter = false;\n            draft.filterValues = castDraft(action.values);\n          }\n        }\n\n        break;\n      case ReducerActionType.LOAD_FILTER_VALUE:\n        if (action.search !== draft.lastSearch || draft.show !== 'filter') {\n          draft.loadingFilter = true;\n          draft.filterValues = [];\n          draft.lastSearch = action.search;\n          draft.show = 'filter';\n        }\n\n        break;\n      case ReducerActionType.USE_DEFAULTS:\n        if (draft.show !== 'default') {\n          draft.show = 'default';\n        }\n\n        break;\n      case ReducerActionType.SET_DEFAULTS:\n        draft.defaultValues = castDraft(action.values);\n        draft.loadingDefault = false;\n        break;\n      default:\n        assertNever(action);\n    }\n  });\n};\n\nexport const useTypeaheadReducer = <T>() => {\n  const [state, dispatch] = useReducer<\n    Reducer<ReducerState<T>, ReducerAction<T>>\n  >(reducerFunction, {\n    filterValues: [],\n    defaultValues: [],\n    show: 'default',\n    loadingFilter: false,\n    loadingDefault: true,\n    lastSearch: '',\n  } as ReducerState<T>);\n\n  const [debouncedState, setDebouncedState] = useState<ReducerState<T>>(state);\n\n  useDebounce(\n    () => {\n      setDebouncedState(state);\n    },\n    400,\n    [state]\n  );\n\n  const setFilterValue = useCallback(\n    (search: string, values: ReadonlyArray<T>) =>\n      dispatch({\n        type: ReducerActionType.SET_FILTER_VALUE,\n        values,\n        search,\n      }),\n    [dispatch]\n  );\n\n  const loadFilterValue = useCallback(\n    (search: string) =>\n      dispatch({\n        type: ReducerActionType.LOAD_FILTER_VALUE,\n        search,\n      }),\n    [dispatch]\n  );\n\n  const setDefaults = useCallback(\n    (values: ReadonlyArray<T>) =>\n      dispatch({\n        type: ReducerActionType.SET_DEFAULTS,\n        values,\n      }),\n    [dispatch]\n  );\n\n  const useDefaults = useCallback(\n    () =>\n      dispatch({\n        type: ReducerActionType.USE_DEFAULTS,\n      }),\n    [dispatch]\n  );\n\n  const dispatchers = useMemo(\n    () => ({\n      setFilterValue,\n      loadFilterValue,\n      setDefaults,\n      useDefaults,\n    }),\n    [setFilterValue, loadFilterValue, setDefaults, useDefaults]\n  );\n\n  return [debouncedState, dispatchers] as [typeof state, typeof dispatchers];\n};\n","import {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n} from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { useFormikContext } from 'formik';\nimport * as React from 'react';\nimport { usePrevious } from 'react-use';\nimport { DeepPartial } from 'ts-essentials';\n\nimport Config from '../../../config/Config';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport {\n  ActionIntegration,\n  BehaviorGroup,\n  IntegrationRef,\n  NotificationType,\n} from '../../../types/Notification';\nimport { IntegrationRecipient } from '../../../types/Recipient';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { useRecipientContext } from '../RecipientContext';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface IntegrationRecipientTypeaheadProps extends OuiaComponentProps {\n  selected: Partial<IntegrationRef> | undefined;\n  integrationType: UserIntegrationType;\n  isDisabled?: boolean;\n  onSelected: (recipientOption: RecipientOption) => void;\n  onOpenChange?: (isOpen: boolean) => void;\n  error?: boolean;\n}\n\nexport const IntegrationRecipientTypeahead: React.FunctionComponent<IntegrationRecipientTypeaheadProps> =\n  (props) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const prevOpen = usePrevious(isOpen);\n\n    const { getIntegrations } = useRecipientContext();\n    const { values } = useFormikContext<DeepPartial<BehaviorGroup>>();\n\n    const [state, dispatchers] = useTypeaheadReducer<IntegrationRecipient>();\n\n    const toggle = React.useCallback(\n      (isOpen: boolean) => {\n        setOpen(isOpen);\n      },\n      [setOpen]\n    );\n\n    React.useEffect(() => {\n      const onOpenChange = props.onOpenChange;\n      if (prevOpen !== undefined && prevOpen !== isOpen) {\n        onOpenChange && onOpenChange(isOpen);\n      }\n    }, [prevOpen, isOpen, props.onOpenChange]);\n\n    React.useEffect(() => {\n      getIntegrations(props.integrationType, '').then((integrations) => {\n        const defaults = integrations.map((i) => new IntegrationRecipient(i));\n        dispatchers.setDefaults(defaults);\n      });\n    }, [getIntegrations, props.integrationType, dispatchers]);\n\n    React.useEffect(() => {\n      if (state.loadingFilter) {\n        getIntegrations(props.integrationType, state.lastSearch).then(\n          (integrations) =>\n            dispatchers.setFilterValue(\n              state.lastSearch,\n              integrations.map((i) => new IntegrationRecipient(i))\n            )\n        );\n      }\n    }, [\n      getIntegrations,\n      props.integrationType,\n      state.loadingFilter,\n      state.lastSearch,\n      dispatchers,\n    ]);\n\n    const existingIntegrations = React.useMemo(() => {\n      const integrationActions = (values.actions ?? [])\n        .filter((action) => action?.type === NotificationType.INTEGRATION)\n        .map((action) => (action as ActionIntegration)?.integration.id);\n\n      return new Set<string>(integrationActions);\n    }, [values]);\n\n    const integrationsMapper = React.useCallback(\n      (recipients: ReadonlyArray<IntegrationRecipient>) => {\n        return recipients.map((r) => {\n          const isDisabled = existingIntegrations?.has(r.integration.id);\n\n          return (\n            <SelectOption\n              key={r.getKey()}\n              value={new RecipientOption(r)}\n              description={\n                isDisabled\n                  ? 'This integration has already been added'\n                  : undefined\n              }\n              isDisabled={isDisabled}\n            />\n          );\n        });\n      },\n      [existingIntegrations]\n    );\n\n    const options = useRecipientOptionMemo(state, integrationsMapper);\n\n    const onFilter = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement> | null) => {\n        // Ignore filter calls with null event\n        if (e === null) {\n          return options;\n        }\n\n        const search = e.target.value?.trim();\n        if (search === '') {\n          dispatchers.useDefaults();\n        } else {\n          dispatchers.loadFilterValue(search);\n        }\n\n        return options;\n      },\n      [dispatchers, options]\n    );\n\n    const selection = React.useMemo(() => {\n      const sel = props.selected;\n      if (\n        sel === undefined ||\n        sel.name === undefined ||\n        sel.id === undefined ||\n        sel.type === undefined\n      ) {\n        return undefined;\n      }\n\n      return new RecipientOption(\n        new IntegrationRecipient(sel as IntegrationRef)\n      );\n    }, [props.selected]);\n\n    const onSelect = React.useCallback(\n      (_event, value: string | SelectOptionObject) => {\n        const integrationSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n          integrationSelected(value);\n          setOpen(false);\n        }\n      },\n      [props.onSelected]\n    );\n\n    const chooseText = `Choose ${Config.integrations.types[\n      props.integrationType\n    ].name.toLowerCase()}`;\n\n    return (\n      <div {...getOuiaProps('IntegrationRecipientTypeahead', props)}>\n        <Select\n          maxHeight={400}\n          variant={SelectVariant.typeahead}\n          typeAheadAriaLabel={chooseText}\n          placeholderText={chooseText}\n          selections={selection}\n          onSelect={onSelect}\n          onToggle={toggle}\n          isOpen={isOpen}\n          onFilter={onFilter}\n          menuAppendTo={document.body}\n          isDisabled={props.isDisabled}\n          validated={props.error ? 'error' : undefined}\n        >\n          {options}\n        </Select>\n      </div>\n    );\n  };\n","import {\n  Chip,\n  ChipGroup,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  Skeleton,\n} from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { usePrevious } from 'react-use';\n\nimport {\n  BaseNotificationRecipient,\n  NotificationRbacGroupRecipient,\n  NotificationUserRecipient,\n} from '../../../types/Recipient';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { GroupNotFound } from '../Rbac/GroupNotFound';\nimport { useRecipientContext } from '../RecipientContext';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface RecipientTypeaheadProps extends OuiaComponentProps {\n  selected: ReadonlyArray<BaseNotificationRecipient>;\n  onSelected: (value: RecipientOption) => void;\n  isDisabled?: boolean;\n  onClear: () => void;\n  onOpenChange?: (isOpen: boolean) => void;\n  error?: boolean;\n}\n\nconst rbacGroupKey = 'groups';\nconst rbacGroupLabel = 'User Access Groups';\n\nconst renderSelectGroup = (\n  key: string,\n  label: string,\n  options: ReadonlyArray<BaseNotificationRecipient>\n) =>\n  options.length > 0 ? (\n    <SelectGroup key={key} label={label}>\n      {options.map((r) => {\n        if (r instanceof NotificationRbacGroupRecipient && r.isLoading) {\n          return (\n            <SelectOption key={r.getKey()} isNoResultsOption>\n              <Skeleton width=\"100%\" />\n            </SelectOption>\n          );\n        }\n\n        return (\n          <SelectOption\n            key={r.getKey()}\n            value={new RecipientOption(r)}\n            description={r.description}\n          />\n        );\n      })}\n    </SelectGroup>\n  ) : (\n    <React.Fragment key={key} />\n  );\n\nconst recipientMapper = (\n  recipients: ReadonlyArray<BaseNotificationRecipient>\n) => {\n  return [renderSelectGroup(rbacGroupKey, rbacGroupLabel, recipients)];\n};\n\nconst loadingMapper = () => {\n  return [\n    <SelectGroup key={rbacGroupKey} label={rbacGroupLabel}>\n      <SelectOption key=\"loading-group\" isNoResultsOption={true}>\n        <Skeleton width=\"100%\" />\n      </SelectOption>\n    </SelectGroup>,\n  ];\n};\n\nconst userOptions = [\n  renderSelectGroup('users', 'Users', [\n    new NotificationUserRecipient(undefined, false, false),\n    new NotificationUserRecipient(undefined, true, false),\n  ]),\n];\n\nexport const RecipientTypeahead: React.FunctionComponent<RecipientTypeaheadProps> =\n  (props) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const [state, dispatchers] =\n      useTypeaheadReducer<BaseNotificationRecipient>();\n    const prevOpen = usePrevious(isOpen);\n    const { getNotificationRecipients } = useRecipientContext();\n\n    React.useEffect(() => {\n      getNotificationRecipients().then((recipients) =>\n        dispatchers.setDefaults(recipients)\n      );\n    }, [getNotificationRecipients, dispatchers]);\n\n    React.useEffect(() => {\n      if (state.loadingFilter) {\n        getNotificationRecipients().then((recipients) =>\n          dispatchers.setFilterValue(state.lastSearch, recipients)\n        );\n      }\n    }, [\n      getNotificationRecipients,\n      state.loadingFilter,\n      state.lastSearch,\n      dispatchers,\n    ]);\n\n    const toggle = React.useCallback(\n      (isOpen: boolean) => {\n        setOpen(isOpen);\n      },\n      [setOpen]\n    );\n\n    React.useEffect(() => {\n      const onOpenChange = props.onOpenChange;\n      if (prevOpen !== undefined && prevOpen !== isOpen) {\n        onOpenChange && onOpenChange(isOpen);\n      }\n    }, [prevOpen, isOpen, props.onOpenChange]);\n\n    // We probably need to augment these.\n    // Change to use this  mapper only for the groups and prepend the Users\n    const rbacOptions = useRecipientOptionMemo(\n      state,\n      recipientMapper,\n      loadingMapper\n    );\n    // augment rbacOptions\n    const options = React.useMemo(\n      () => [...userOptions, ...rbacOptions],\n      [rbacOptions]\n    );\n\n    const selection = React.useMemo(() => {\n      const sel = props.selected;\n      if (sel === undefined) {\n        return undefined;\n      }\n\n      return (sel as ReadonlyArray<NotificationUserRecipient>).map(\n        (s) => new RecipientOption(s)\n      );\n    }, [props.selected]);\n\n    const onSelect = React.useCallback(\n      (_event, value: string | SelectOptionObject) => {\n        const onSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n          onSelected(value);\n        }\n      },\n      [props.onSelected]\n    );\n\n    const selectContent = React.useMemo(() => {\n      return selection?.map((value) => {\n        const unselect =\n          (element: RecipientOption) => (evt: React.MouseEvent) => {\n            evt.stopPropagation();\n            onSelect(evt, element);\n          };\n\n        const key = value.recipient.getKey();\n\n        if (value.recipient instanceof NotificationRbacGroupRecipient) {\n          if (value.recipient.isLoading) {\n            return (\n              <Chip key={key} onClick={unselect(value)}>\n                <Skeleton data-testid=\"loading-group\" width=\"40px\" />\n              </Chip>\n            );\n          } else if (value.recipient.hasError) {\n            return <GroupNotFound key={key} onClose={unselect(value)} />;\n          }\n        }\n\n        return (\n          <Chip onClick={unselect(value)} key={key}>\n            {value.recipient.displayName}\n          </Chip>\n        );\n      });\n    }, [selection, onSelect]);\n\n    return (\n      <div {...getOuiaProps('RecipientTypeahead', props)}>\n        <Select\n          maxHeight={400}\n          variant={SelectVariant.checkbox}\n          selections={selection}\n          onSelect={onSelect}\n          onToggle={toggle}\n          isOpen={isOpen}\n          menuAppendTo={document.body}\n          isDisabled={props.isDisabled}\n          onClear={props.onClear}\n          validated={props.error ? 'error' : undefined}\n          isGrouped\n          isCheckboxSelectionBadgeHidden\n          // hasInlineFilter // Disabled filter. see: https://github.com/patternfly/patternfly-react/issues/7134\n          isInputValuePersisted\n          placeholderText={<ChipGroup>{selectContent}</ChipGroup>}\n        >\n          {options}\n        </Select>\n      </div>\n    );\n  };\n","import { FormHelperText, Select, SelectVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationType } from '../../../types/Integration';\nimport { Action, NotificationType } from '../../../types/Notification';\nimport { UseBehaviorGroupActionHandlers } from '../BehaviorGroup/useBehaviorGroupActionHandlers';\nimport { IntegrationRecipientTypeahead } from '../Form/IntegrationRecipientTypeahead';\nimport { RecipientTypeahead } from '../Form/RecipientTypeahead';\n\ninterface RecipientFormProps {\n  action?: Action;\n  integrationSelected: ReturnType<\n    UseBehaviorGroupActionHandlers['handleIntegrationSelected']\n  >;\n  recipientSelected: ReturnType<\n    UseBehaviorGroupActionHandlers['handleRecipientSelected']\n  >;\n  recipientOnClear: ReturnType<\n    UseBehaviorGroupActionHandlers['handleRecipientOnClear']\n  >;\n  onOpenChange?: (isOpen: boolean) => void;\n  error?: string;\n}\n\nconst dummyOnToggle = () => false;\n\nexport const RecipientForm: React.FunctionComponent<RecipientFormProps> = (\n  props\n) => {\n  let recipient: React.ReactNode;\n\n  if (!props.action) {\n    recipient = (\n      <div>\n        <Select\n          variant={SelectVariant.typeahead}\n          isDisabled\n          onToggle={dummyOnToggle}\n          isOpen={false}\n        />\n      </div>\n    );\n  } else if (props.action.type === NotificationType.INTEGRATION) {\n    recipient = (\n      <IntegrationRecipientTypeahead\n        onSelected={props.integrationSelected}\n        integrationType={\n          props.action.integration?.type ?? IntegrationType.WEBHOOK\n        }\n        selected={props.action.integration}\n        onOpenChange={props.onOpenChange}\n        error={!!props.error}\n      />\n    );\n  } else {\n    recipient = (\n      <RecipientTypeahead\n        onSelected={props.recipientSelected}\n        selected={props.action.recipient}\n        onClear={props.recipientOnClear}\n        onOpenChange={props.onOpenChange}\n        error={!!props.error}\n      />\n    );\n  }\n\n  return (\n    <>\n      {' '}\n      {recipient}\n      {props.error && (\n        <FormHelperText isError isHidden={!props.error}>\n          {props.error}\n        </FormHelperText>\n      )}\n    </>\n  );\n};\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport Config from '../../../config/Config';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { NotificationType } from '../../../types/Notification';\n\ntype ActionTypeOrIntegration =\n  | {\n      kind: 'integration';\n      type: UserIntegrationType;\n    }\n  | {\n      kind: 'notification';\n      type: NotificationType;\n    };\n\nexport class ActionOption implements SelectOptionObject {\n  readonly integrationType: UserIntegrationType | undefined;\n  readonly notificationType: NotificationType;\n\n  constructor(type: ActionTypeOrIntegration) {\n    if (type.kind === 'integration') {\n      this.notificationType = NotificationType.INTEGRATION;\n      this.integrationType = type.type;\n    } else {\n      this.notificationType = type.type;\n      this.integrationType = undefined;\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  compareTo(selectOption: any): boolean {\n    if (selectOption instanceof ActionOption) {\n      return (\n        selectOption.notificationType === this.notificationType &&\n        selectOption.integrationType === this.integrationType\n      );\n    }\n\n    return false;\n  }\n\n  toString(): string {\n    const actionName = Config.notifications.types[this.notificationType].name;\n    if (this.integrationType) {\n      const integrationName =\n        Config.integrations.types[this.integrationType].name;\n      return `${actionName}: ${integrationName}`;\n    }\n\n    return actionName;\n  }\n}\n","import {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n} from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useIntegrations } from '../../../hooks/useIntegrations';\nimport { useNotifications } from '../../../hooks/useNotifications';\nimport { linkTo } from '../../../Routes';\nimport {\n  UserIntegrationType,\n  isUserIntegrationType,\n} from '../../../types/Integration';\nimport { Action, NotificationType } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { useRecipientContext } from '../RecipientContext';\nimport { ActionOption } from './ActionOption';\n\nconst getSelectOptions = (\n  availableNotificationTypes: ReadonlyArray<NotificationType>,\n  availableIntegrationTypes: ReadonlyArray<UserIntegrationType>,\n  selectedNotifications: ReadonlyArray<NotificationType>\n) => [\n  ...availableNotificationTypes\n    .filter((type) => !selectedNotifications.includes(type))\n    .map(\n      (type) =>\n        new ActionOption({\n          kind: 'notification',\n          type,\n        })\n    ),\n  ...availableIntegrationTypes.map(\n    (type) =>\n      new ActionOption({\n        kind: 'integration',\n        type,\n      })\n  ),\n];\n\ntype NoIntegrationConfigured = {\n  testNoIntegrationRenderWithoutRelAndTarget?: boolean;\n};\n\nconst NoIntegrationConfigured: React.FunctionComponent<NoIntegrationConfigured> =\n  (props) => (\n    <>\n      <div>You have no integration configured.</div>\n      <div>\n        Go to Settings {'>'}{' '}\n        <Link\n          style={{ pointerEvents: 'all' }}\n          rel={\n            props.testNoIntegrationRenderWithoutRelAndTarget\n              ? undefined\n              : 'noopener noreferrer'\n          }\n          target={\n            props.testNoIntegrationRenderWithoutRelAndTarget\n              ? undefined\n              : '_blank'\n          }\n          to={linkTo.integrations()}\n        >\n          Integrations\n        </Link>{' '}\n        to configure.\n      </div>\n    </>\n  );\n\nexport interface ActionTypeaheadProps extends OuiaComponentProps {\n  selectedNotifications: ReadonlyArray<NotificationType>;\n  action?: Action;\n  isDisabled?: boolean;\n  onSelected: (actionOption: ActionOption) => void;\n  testNoIntegrationRenderWithoutRelAndTarget?: boolean;\n}\n\nexport const ActionTypeahead: React.FunctionComponent<ActionTypeaheadProps> = (\n  props\n) => {\n  const [isOpen, setOpen] = React.useState(false);\n  const { getIntegrations } = useRecipientContext();\n  const [hasIntegrations, setHasIntegrations] = React.useState<\n    Record<UserIntegrationType, boolean>\n  >(\n    Object.values(UserIntegrationType).reduce((types, type) => {\n      types[type] = true;\n      return types;\n    }, {} as Record<UserIntegrationType, boolean>)\n  );\n\n  React.useEffect(() => {\n    Object.values(UserIntegrationType).forEach(async (type) => {\n      const values = await getIntegrations(type);\n      setHasIntegrations(\n        produce((draft) => {\n          draft[type] = values.length > 0;\n        })\n      );\n    });\n  }, [getIntegrations]);\n\n  const toggle = React.useCallback(\n    (isExpanded: boolean) => {\n      setOpen(isExpanded);\n    },\n    [setOpen]\n  );\n\n  const onSelect = React.useCallback(\n    (_event, value: string | SelectOptionObject) => {\n      const actionSelected = props.onSelected;\n      if (value instanceof ActionOption) {\n        actionSelected(value);\n        setOpen(false);\n      }\n    },\n    [props.onSelected, setOpen]\n  );\n\n  const selectedOption = React.useMemo(() => {\n    if (!props.action) {\n      return undefined;\n    }\n\n    if (props.action.type === NotificationType.INTEGRATION) {\n      return new ActionOption({\n        kind: 'integration',\n        type: props.action.integration.type,\n      });\n    }\n\n    return new ActionOption({\n      kind: 'notification',\n      type: props.action.type,\n    });\n  }, [props.action]);\n\n  const integrationTypes = useIntegrations();\n  const notificationTypes = useNotifications();\n\n  const selectableOptions = React.useMemo(() => {\n    return getSelectOptions(\n      notificationTypes,\n      integrationTypes,\n      props.selectedNotifications\n    ).map((o) => {\n      const isDisabled =\n        isUserIntegrationType(o.integrationType) &&\n        !hasIntegrations[o.integrationType];\n      return (\n        <SelectOption\n          isDisabled={isDisabled}\n          key={o.toString()}\n          value={o}\n          description={\n            isDisabled && (\n              <NoIntegrationConfigured\n                testNoIntegrationRenderWithoutRelAndTarget={\n                  props.testNoIntegrationRenderWithoutRelAndTarget\n                }\n              />\n            )\n          }\n        />\n      );\n    });\n  }, [\n    notificationTypes,\n    integrationTypes,\n    props.selectedNotifications,\n    hasIntegrations,\n    props.testNoIntegrationRenderWithoutRelAndTarget,\n  ]);\n\n  return (\n    <div {...getOuiaProps('ActionTypeahead', props)}>\n      <Select\n        maxHeight={400}\n        variant={SelectVariant.single}\n        aria-label=\"Select action\"\n        placeholderText=\"Select action\"\n        selections={selectedOption}\n        onToggle={toggle}\n        isOpen={isOpen}\n        onSelect={onSelect}\n        menuAppendTo={document.body}\n        isDisabled={props.isDisabled}\n      >\n        {selectableOptions}\n      </Select>\n    </div>\n  );\n};\n","import { Button, ButtonVariant, GridItem } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n  IActions,\n  ICell,\n  IRow,\n  IRowData,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { important } from 'csx';\nimport { FieldArrayRenderProps, FormikProps } from 'formik';\nimport produce, { Draft, castDraft } from 'immer';\nimport * as React from 'react';\nimport { DeepPartial } from 'ts-essentials';\nimport { cssRaw, style } from 'typestyle';\n\nimport {\n  Action,\n  BehaviorGroup,\n  NewBehaviorGroup,\n  NotificationType,\n} from '../../../types/Notification';\nimport { RecipientForm } from '../EditableActionRow/RecipientForm';\nimport { ActionTypeahead } from '../Form/ActionTypeahead';\nimport {\n  SetActionUpdater,\n  UseBehaviorGroupActionHandlers,\n  useBehaviorGroupActionHandlers,\n} from './useBehaviorGroupActionHandlers';\n\ncssRaw(`\n    @media only screen and (max-width: 768px) {\n        .pf-c-select .pf-c-select__toggle-typeahead {\n            --pf-c-select__toggle-typeahead--FlexBasis: 0;\n        }\n    }\n`);\n\nexport type BehaviorGroupFormTableProps = FieldArrayRenderProps & {\n  form: FormikProps<FormType>;\n};\n\ntype FormType = DeepPartial<BehaviorGroup | NewBehaviorGroup>;\n\nconst tableHeaderClassName = style({\n  $nest: {\n    '& tr': {\n      borderBottom: important(0),\n    },\n    '& th:first-child': {\n      paddingLeft: important(0),\n    },\n    '& th:last-child, & td:last-child': {\n      paddingRight: important(0),\n    },\n  },\n});\n\nconst tableBodyClassName = style({\n  $nest: {\n    '& td:first-child': {\n      paddingLeft: important(0),\n    },\n    '& td:last-child': {\n      paddingRight: important(0),\n    },\n    '& td': {\n      verticalAlign: important('top'),\n    },\n  },\n});\n\nconst alignLeftClassName = style({\n  textAlign: 'left',\n  paddingLeft: 0,\n});\n\nconst cells: Array<ICell> = [\n  {\n    title: 'Actions',\n    transforms: [cellWidth(50)],\n  },\n  {\n    title: 'Recipient',\n  },\n];\n\nconst toTableRows = (\n  actions: ReadonlyArray<Action | undefined>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  errors: any,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  touched: any,\n  selectedNotifications: ReadonlyArray<NotificationType>,\n  rowHandlers: UseBehaviorGroupActionHandlers,\n  setFieldTouched: (\n    field: string,\n    isTouched?: boolean,\n    shouldValidate?: boolean\n  ) => void\n): Array<IRow> => {\n  return actions.map((action, index) => {\n    let error: string | undefined = undefined;\n    let isTouched = false;\n    let path;\n\n    if (action?.type === NotificationType.INTEGRATION) {\n      path = `actions.${index}.integration`;\n    } else {\n      path = `actions.${index}.recipient`;\n    }\n\n    if (action?.type === NotificationType.INTEGRATION) {\n      if (touched[index]?.integration) {\n        isTouched = true;\n      }\n\n      if (isTouched && errors[index]?.integration) {\n        error = 'Select a recipient for this integration.';\n      }\n    }\n\n    if (!error && isTouched) {\n      setFieldTouched(path, false, false);\n    }\n\n    return {\n      id: index,\n      key: index,\n      cells: [\n        {\n          title: (\n            <ActionTypeahead\n              selectedNotifications={selectedNotifications}\n              action={action}\n              onSelected={rowHandlers.handleActionSelected(index)}\n            />\n          ),\n        },\n        {\n          title: (\n            <RecipientForm\n              action={action}\n              integrationSelected={rowHandlers.handleIntegrationSelected(index)}\n              recipientSelected={rowHandlers.handleRecipientSelected(index)}\n              recipientOnClear={rowHandlers.handleRecipientOnClear(index)}\n              error={error}\n              onOpenChange={(isOpen) => {\n                if (!isOpen) {\n                  setFieldTouched(path, true, false);\n                }\n              }}\n            />\n          ),\n        },\n      ],\n    };\n  });\n};\n\nconst emptySpan = () => <span />;\n\nexport const BehaviorGroupFormActionsTable: React.FunctionComponent<BehaviorGroupFormTableProps> =\n  (props) => {\n    const { values, setValues, errors, touched, setFieldTouched } = props.form;\n    const actions = React.useMemo<ReadonlyArray<Action | undefined>>(\n      () => values.actions ?? ([] as ReadonlyArray<Action>),\n      [values]\n    );\n    const touchedActions = React.useMemo(\n      () => touched?.actions ?? [],\n      [touched]\n    );\n    const errorActions = React.useMemo(() => errors?.actions ?? [], [errors]);\n\n    const selectedNotifications = React.useMemo(\n      () =>\n        new Array(\n          ...new Set<NotificationType>(\n            (actions.filter((a) => a) as ReadonlyArray<Action>).map(\n              (a) => a.type\n            )\n          )\n        ) as ReadonlyArray<NotificationType>,\n      [actions]\n    );\n\n    const setValueDispatch = React.useCallback(\n      (updater: SetActionUpdater) => {\n        setValues(\n          produce((prev) => {\n            const form = prev as Draft<FormType>;\n            if (updater instanceof Function) {\n              form.actions = castDraft(\n                updater(form.actions as ReadonlyArray<DeepPartial<Action>>)\n              );\n            } else {\n              form.actions = castDraft(updater);\n            }\n          }),\n          false\n        );\n      },\n      [setValues]\n    );\n\n    const addAction = React.useCallback(() => {\n      const push = props.push;\n      push(undefined);\n    }, [props.push]);\n\n    React.useEffect(() => {\n      if (actions.length === 0) {\n        addAction();\n      }\n    }, [actions, addAction]);\n\n    const rowHandlers = useBehaviorGroupActionHandlers(setValueDispatch);\n\n    const rows = React.useMemo(\n      () =>\n        toTableRows(\n          actions,\n          errorActions,\n          touchedActions,\n          selectedNotifications,\n          rowHandlers,\n          setFieldTouched\n        ),\n      [\n        actions,\n        errorActions,\n        touchedActions,\n        selectedNotifications,\n        rowHandlers,\n        setFieldTouched,\n      ]\n    );\n\n    const actionResolver = React.useCallback(\n      (rowData: IRowData): IActions => {\n        const handleRemove = props.handleRemove;\n        if (rows.length > 1) {\n          return [\n            {\n              key: 'delete',\n              title: (\n                <Button\n                  aria-label=\"delete-action\"\n                  variant={ButtonVariant.plain}\n                >\n                  <MinusCircleIcon />\n                </Button>\n              ),\n              isOutsideDropdown: true,\n              onClick: handleRemove(rowData.id),\n            },\n          ];\n        }\n\n        return [];\n      },\n      [rows, props.handleRemove]\n    );\n\n    return (\n      <>\n        <Table\n          aria-label=\"behavior-group-actions-form\"\n          rows={rows}\n          cells={cells}\n          actionResolver={actionResolver}\n          actionsToggle={\n            emptySpan as any /* eslint-disable-line @typescript-eslint/no-explicit-any */\n          }\n          borders={false}\n          variant={TableVariant.compact}\n          isStickyHeader={true}\n        >\n          <TableHeader className={tableHeaderClassName} />\n          <TableBody className={tableBodyClassName} />\n        </Table>\n        <GridItem span={12}>\n          <Button\n            className={alignLeftClassName}\n            variant={ButtonVariant.link}\n            icon={<PlusCircleIcon />}\n            onClick={addAction}\n          >\n            Add action\n          </Button>\n        </GridItem>\n      </>\n    );\n  };\n","import produce, { Draft, castDraft, original } from 'immer';\nimport { SetStateAction, useCallback } from 'react';\nimport { DeepPartial } from 'ts-essentials';\n\nimport {\n  Action,\n  ActionIntegration,\n  ActionNotify,\n  NotificationType,\n} from '../../../types/Notification';\nimport {\n  BaseNotificationRecipient,\n  IntegrationRecipient,\n  NotificationUserRecipient,\n} from '../../../types/Recipient';\nimport { ActionOption } from '../Form/ActionOption';\nimport { RecipientOption } from '../Form/RecipientOption';\n\nexport interface UseBehaviorGroupActionHandlers {\n  handleActionSelected: (index: number) => (value: ActionOption) => void;\n  handleIntegrationSelected: (\n    index: number\n  ) => (value: RecipientOption) => void;\n  handleRecipientSelected: (index: number) => (value: RecipientOption) => void;\n  handleRecipientOnClear: (index: number) => () => void;\n}\n\nexport type SetActionUpdater = SetStateAction<\n  ReadonlyArray<DeepPartial<Action>>\n>;\n\nexport const useBehaviorGroupActionHandlers = (\n  setActions: (updater: SetActionUpdater) => void\n): UseBehaviorGroupActionHandlers => {\n  const handleActionSelected = useCallback(\n    (index: number) => (value: ActionOption) => {\n      setActions(\n        produce((prev) => {\n          if (!prev[index]) {\n            prev[index] = {};\n          }\n\n          const row = prev[index];\n          row.type = value.notificationType;\n          if (value.integrationType) {\n            const rowAsIntegration = row as Draft<\n              DeepPartial<ActionIntegration>\n            >;\n            rowAsIntegration.integration = {\n              type: value.integrationType,\n            };\n          } else {\n            const rowAsNotification = row as Draft<ActionNotify>;\n            rowAsNotification.recipient = [];\n          }\n        })\n      );\n    },\n    [setActions]\n  );\n\n  const handleIntegrationSelected = useCallback(\n    (index: number) => (value: RecipientOption) => {\n      setActions(\n        produce((prev) => {\n          if (value.recipient instanceof IntegrationRecipient) {\n            const rowAsIntegration = prev[index] as Draft<ActionIntegration>;\n            rowAsIntegration.integration = value.recipient.integration;\n          }\n        })\n      );\n    },\n    [setActions]\n  );\n\n  const handleRecipientSelected = useCallback(\n    (index: number) => (value: RecipientOption) => {\n      setActions(\n        produce((prev) => {\n          const row = prev[index];\n          if (row.type !== NotificationType.INTEGRATION) {\n            const rowAsNotification = row as Draft<ActionNotify>;\n            const originalRecipient = original(rowAsNotification.recipient);\n            if (originalRecipient) {\n              const index = originalRecipient.findIndex((r) =>\n                value.recipient.equals(r as NotificationUserRecipient)\n              );\n              if (index === -1) {\n                rowAsNotification.recipient.push(\n                  castDraft(value.recipient as BaseNotificationRecipient)\n                );\n              } else {\n                rowAsNotification.recipient.splice(index, 1);\n              }\n            }\n          }\n        })\n      );\n    },\n    [setActions]\n  );\n\n  const handleRecipientOnClear = useCallback(\n    (index: number) => () => {\n      setActions(\n        produce((prev) => {\n          const row = prev[index];\n          if (row.type !== NotificationType.INTEGRATION) {\n            const rowAsNotification = row as Draft<ActionNotify>;\n            rowAsNotification.recipient = [];\n          }\n        })\n      );\n    },\n    [setActions]\n  );\n\n  return {\n    handleActionSelected,\n    handleIntegrationSelected,\n    handleRecipientSelected,\n    handleRecipientOnClear,\n  };\n};\n","import { Grid } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { FieldArray } from 'formik';\nimport * as React from 'react';\n\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { BehaviorGroupFormActionsTable } from './BehaviorGroupFormActionsTable';\n\nexport interface EditBehaviorGroupProps extends OuiaComponentProps {\n  behaviorGroup?: Partial<BehaviorGroup>;\n}\n\nexport const EditBehaviorGroupForm: React.FunctionComponent<EditBehaviorGroupProps> =\n  (props) => {\n    return (\n      <div {...getOuiaProps('Notifications/BehaviorGroupForm', props)}>\n        <Grid hasGutter>\n          <FieldArray name=\"actions\">\n            {(helpers) => (\n              <>\n                <BehaviorGroupFormActionsTable {...helpers} />\n              </>\n            )}\n          </FieldArray>\n        </Grid>\n      </div>\n    );\n  };\n","import * as Yup from 'yup';\n\nimport { NotificationType } from '../../types/Notification';\n\nconst ActionIntegration = Yup.object({\n  type: Yup.mixed().oneOf([NotificationType.INTEGRATION]).required(),\n  integration: Yup.object({\n    id: Yup.string().required(),\n  }).required(),\n  integrationId: Yup.string().min(1),\n});\n\nconst ActionNotify = Yup.object({\n  type: Yup.mixed()\n    .oneOf([NotificationType.EMAIL_SUBSCRIPTION, NotificationType.DRAWER])\n    .required(),\n  recipient: Yup.array(Yup.object()).min(1),\n  integrationId: Yup.string().min(0),\n});\n\ntype ActionsType =\n  | Yup.TypeOf<typeof ActionIntegration>\n  | Yup.TypeOf<typeof ActionNotify>;\n\nexport const ActionsArray = Yup.array(\n  Yup.lazy((obj) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-prototype-builtins\n    if (obj && (obj as any).hasOwnProperty('type')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if ((obj as any).type === NotificationType.INTEGRATION) {\n        return ActionIntegration;\n      }\n    }\n\n    return ActionNotify;\n  })\n).test(\n  'no-repeated',\n  \"${path} can't contain repeated actions\",\n  (value: Array<ActionsType> | undefined, context) => {\n    const errors: Array<ReturnType<Yup.TestContext['createError']>> = [];\n\n    let foundEmail = false;\n    const integrationIds: Array<string> = [];\n\n    if (!value) {\n      return true;\n    }\n\n    for (let i = 0; i < value.length; ++i) {\n      const action = value[i];\n      const integrationId = action.integrationId;\n      if (action.type === NotificationType.EMAIL_SUBSCRIPTION) {\n        if (foundEmail) {\n          errors.push(\n            context.createError({\n              message: 'Only 1 send email action is allowed',\n              path: `actions.${i}`,\n            })\n          );\n        }\n\n        foundEmail = true;\n      } else if (integrationId) {\n        if (integrationIds.includes(integrationId)) {\n          errors.push(\n            context.createError({\n              message:\n                'Integration already used in the group, please select other',\n              path: `actions.${i}`,\n            })\n          );\n        } else {\n          integrationIds.push(integrationId);\n        }\n      }\n    }\n\n    if (errors.length === 0) {\n      return true;\n    }\n\n    return {\n      ...context.createError(),\n      inner: errors,\n    };\n  }\n);\n\nexport const WithActions = Yup.object({\n  actions: ActionsArray,\n});\n\nexport const BehaviorGroupSchema = Yup.object({\n  displayName: Yup.string().required(\n    'You must specify a name for the behavior group'\n  ),\n  actions: ActionsArray,\n});\n","import { Text, TextContent, Title } from '@patternfly/react-core';\nimport { Form } from '@redhat-cloud-services/insights-common-typescript';\nimport { useFormikContext } from 'formik';\nimport * as React from 'react';\nimport * as Yup from 'yup';\n\nimport { EditBehaviorGroupForm } from '../../../../components/Notifications/BehaviorGroup/BehaviorGroupForm';\nimport { CreateWizardStep } from '../../../../components/Notifications/BehaviorGroup/Wizard/ExtendedWizardStep';\nimport { ActionsArray } from '../../../../schemas/Integrations/Notifications';\nimport { CreateBehaviorGroup } from '../../../../types/CreateBehaviorGroup';\n\nconst title = 'Actions and recipients';\n\nconst ActionAndRecipientsStep: React.FunctionComponent = () => {\n  const { values } = useFormikContext<CreateBehaviorGroup>();\n\n  return (\n    <Form>\n      <div>\n        <Title headingLevel=\"h4\" size=\"xl\">\n          {title}\n        </Title>\n        <TextContent className=\"pf-v5-u-pt-sm\">\n          <Text>\n            Select action and recipient pairs to assign to your notification\n            events.\n          </Text>\n        </TextContent>\n        <EditBehaviorGroupForm behaviorGroup={values} />\n      </div>\n    </Form>\n  );\n};\n\nconst schema = Yup.object({\n  actions: ActionsArray,\n});\n\nexport const useActionAndRecipientStep: CreateWizardStep = () => {\n  return React.useMemo(\n    () => ({\n      name: title,\n      component: <ActionAndRecipientsStep />,\n      schema,\n    }),\n    []\n  );\n};\n","import { Skeleton, Spinner } from '@patternfly/react-core';\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport * as React from 'react';\n\nimport { EventType } from '../../../../types/Notification';\n\nconst skeletonRows = 10;\n\nexport interface SelectableEventTypeRow extends EventType {\n  isSelected: boolean;\n}\n\ninterface SelectableEventTypeTableBaseProps {\n  onSelect?: (isSelected: boolean, event: EventType) => void;\n  selectionLoading?: boolean;\n}\n\ninterface SelectableEventTypeTableImplProps\n  extends SelectableEventTypeTableBaseProps {\n  events: ReadonlyArray<SelectableEventTypeRow>;\n}\n\nexport interface SelectableEventTypeTableProps\n  extends SelectableEventTypeTableBaseProps {\n  events?: ReadonlyArray<SelectableEventTypeRow>;\n}\n\nconst SelectableEventTypeTableLayout: React.FunctionComponent = (props) => {\n  return (\n    <TableComposable variant={TableVariant.compact}>\n      <Thead>\n        <Tr>\n          <Th />\n          <Th>Event type</Th>\n          <Th>Application</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{props.children}</Tbody>\n    </TableComposable>\n  );\n};\n\nconst SelectableEventTypeTableSkeleton: React.FunctionComponent = () => {\n  return (\n    <SelectableEventTypeTableLayout>\n      {[...Array(skeletonRows)].map((_unused, index) => (\n        <Tr key={index}>\n          <Td\n            select={{\n              isSelected: false,\n              rowIndex: index,\n              disable: true,\n            }}\n          />\n          <Td>\n            <Skeleton width=\"80%\" />\n          </Td>\n          <Td>\n            <Skeleton width=\"80%\" />\n          </Td>\n        </Tr>\n      ))}\n    </SelectableEventTypeTableLayout>\n  );\n};\n\nconst SelectableEventTypeTableImpl: React.FunctionComponent<SelectableEventTypeTableImplProps> =\n  (props) => {\n    return (\n      <SelectableEventTypeTableLayout>\n        {props.events.map((event, rowIndex) => (\n          <Tr key={event.id}>\n            <Td\n              modifier={props.selectionLoading ? 'fitContent' : undefined}\n              noPadding={props.selectionLoading}\n              select={\n                props.selectionLoading\n                  ? undefined\n                  : {\n                      rowIndex,\n                      onSelect: (_event, isSelected) =>\n                        props.onSelect && props.onSelect(isSelected, event),\n                      isSelected: event.isSelected,\n                      disable: props.selectionLoading,\n                    }\n              }\n            >\n              {props.selectionLoading && <Spinner size=\"sm\" />}\n            </Td>\n            <Td>{event.eventTypeDisplayName}</Td>\n            <Td>{event.applicationDisplayName}</Td>\n          </Tr>\n        ))}\n      </SelectableEventTypeTableLayout>\n    );\n  };\n\nexport const SelectableEventTypeTable: React.FunctionComponent<SelectableEventTypeTableProps> =\n  (props) => {\n    if (props.events) {\n      return <SelectableEventTypeTableImpl {...props} events={props.events} />;\n    }\n\n    return <SelectableEventTypeTableSkeleton />;\n  };\n","import { Text, TextContent, Title } from '@patternfly/react-core';\nimport { Form, Page } from '@redhat-cloud-services/insights-common-typescript';\nimport { useFormikContext } from 'formik';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { useEffect } from 'react';\n\nimport { CreateWizardStep } from '../../../../components/Notifications/BehaviorGroup/Wizard/ExtendedWizardStep';\nimport {\n  SelectableEventTypeRow,\n  SelectableEventTypeTable,\n} from '../../../../components/Notifications/BehaviorGroup/Wizard/SelectableEventTypeTable';\nimport {\n  NotificationsToolbar,\n  SelectionCommand,\n} from '../../../../components/Notifications/Toolbar';\nimport {\n  useListNotifications,\n  useParameterizedListNotifications,\n} from '../../../../services/useListNotifications';\nimport { CreateBehaviorGroup } from '../../../../types/CreateBehaviorGroup';\nimport { EventType, Facet } from '../../../../types/Notification';\nimport { useEventTypesPage } from '../../hooks/useEventTypesPage';\n\nconst title = 'Associate event types';\n\nexport interface AssociateEventTypesStepProps {\n  applications: ReadonlyArray<Facet>;\n  bundle: Facet;\n}\n\nconst AssociateEventTypesStep: React.FunctionComponent<AssociateEventTypesStepProps> =\n  (props) => {\n    const { setValues, values } = useFormikContext<CreateBehaviorGroup>();\n    const [selectedEventTypes, setSelectedEventTypes] = React.useState<\n      Record<string, EventType>\n    >(() => {\n      const selected: Record<string, EventType> = {};\n      values.events.forEach((value) => {\n        selected[value.id] = value;\n      });\n\n      return selected;\n    });\n    const eventTypePage = useEventTypesPage(\n      props.bundle,\n      props.applications,\n      false\n    );\n    const eventTypesRaw = useListNotifications(\n      eventTypePage.pageController.page\n    );\n    const onDemandEventTypes = useParameterizedListNotifications();\n\n    useEffect(() => {\n      setValues(\n        produce((draft) => {\n          draft.events = Object.values(selectedEventTypes);\n        })\n      );\n    }, [setValues, selectedEventTypes]);\n\n    const count = React.useMemo(() => {\n      const payload = eventTypesRaw.payload;\n      if (payload?.status === 200) {\n        return payload.value.meta.count;\n      }\n\n      return 0;\n    }, [eventTypesRaw.payload]);\n\n    const events = React.useMemo<ReadonlyArray<SelectableEventTypeRow>>(() => {\n      if (eventTypesRaw.payload?.type === 'eventTypesArray') {\n        return eventTypesRaw.payload.value.data.map((value) => ({\n          ...value,\n          isSelected: Object.keys(selectedEventTypes).includes(value.id),\n        }));\n      }\n\n      return [];\n    }, [eventTypesRaw.payload, selectedEventTypes]);\n\n    const onSelect = React.useCallback(\n      (isSelected: boolean, eventType: EventType) => {\n        setSelectedEventTypes(\n          produce((draft) => {\n            if (isSelected) {\n              draft[eventType.id] = eventType;\n            } else {\n              delete draft[eventType.id];\n            }\n          })\n        );\n      },\n      [setSelectedEventTypes]\n    );\n\n    const onSelectCommand = React.useCallback(\n      (command: SelectionCommand) => {\n        const currentPage = eventTypePage.pageController.page;\n\n        switch (command) {\n          case SelectionCommand.ALL:\n            if (count === events.length) {\n              return setSelectedEventTypes(\n                produce((draft) => {\n                  events.forEach((e) => {\n                    draft[e.id] = e;\n                  });\n                })\n              );\n            } else {\n              (async () => {\n                let pageIndex = 1;\n                const addedElements: Record<string, EventType> = {};\n                const lastPage = Page.lastPageForElements(\n                  count,\n                  currentPage.size\n                );\n                // eslint-disable-next-line no-constant-condition\n                while (true) {\n                  const fetchingPage = currentPage.withPage(pageIndex);\n\n                  if (fetchingPage.index > lastPage.index) {\n                    break;\n                  }\n\n                  if (currentPage.index === fetchingPage.index) {\n                    events.forEach((e) => {\n                      addedElements[e.id] = e;\n                    });\n                  } else {\n                    const events = await onDemandEventTypes.query(\n                      currentPage.withPage(pageIndex)\n                    );\n                    if (events.payload?.type === 'eventTypesArray') {\n                      events.payload.value.data.forEach((e) => {\n                        addedElements[e.id] = e;\n                      });\n                    } else {\n                      break;\n                    }\n                  }\n\n                  pageIndex++;\n                }\n\n                setSelectedEventTypes(\n                  produce((draft) => {\n                    for (const event of Object.values(addedElements)) {\n                      draft[event.id] = event;\n                    }\n                  })\n                );\n              })();\n            }\n\n            break;\n          case SelectionCommand.PAGE:\n            setSelectedEventTypes(\n              produce((draft) => {\n                events.forEach((e) => {\n                  draft[e.id] = e;\n                });\n              })\n            );\n\n            break;\n          case SelectionCommand.NONE:\n            setSelectedEventTypes({});\n            break;\n        }\n      },\n      [\n        setSelectedEventTypes,\n        events,\n        onDemandEventTypes,\n        eventTypePage.pageController.page,\n        count,\n      ]\n    );\n\n    return (\n      <Form>\n        <div>\n          <Title headingLevel=\"h4\" size=\"xl\">\n            {title}\n          </Title>\n          <TextContent className=\"pf-v5-u-pt-sm\">\n            <Text>\n              Select event types you would like to assign this behavior group\n              to.\n            </Text>\n          </TextContent>\n        </div>\n        <NotificationsToolbar\n          filters={eventTypePage.filters}\n          setFilters={eventTypePage.setFilters}\n          clearFilter={eventTypePage.clearFilters}\n          appFilterOptions={props.applications}\n          pageAdapter={eventTypePage.pageController}\n          count={count}\n          pageCount={events.length}\n          onSelectionChanged={onSelectCommand}\n          selectedCount={Object.keys(selectedEventTypes).length}\n          bulkSelectionDisabled={onDemandEventTypes.loading}\n        >\n          <SelectableEventTypeTable\n            onSelect={onSelect}\n            events={eventTypesRaw.loading ? undefined : events}\n            selectionLoading={onDemandEventTypes.loading}\n          />\n        </NotificationsToolbar>\n      </Form>\n    );\n  };\n\nexport const useAssociateEventTypesStep: CreateWizardStep<AssociateEventTypesStepProps> =\n  ({ applications, bundle }: AssociateEventTypesStepProps) => {\n    return React.useMemo(\n      () => ({\n        name: title,\n        component: (\n          <AssociateEventTypesStep\n            applications={applications}\n            bundle={bundle}\n          />\n        ),\n      }),\n      [applications, bundle]\n    );\n  };\n","import { Title } from '@patternfly/react-core';\nimport {\n  Form,\n  FormTextInput,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport * as Yup from 'yup';\n\nimport { CreateWizardStep } from '../../../../components/Notifications/BehaviorGroup/Wizard/ExtendedWizardStep';\n\nconst title = 'Name';\n\nconst BasicInformationStep: React.FunctionComponent = () => {\n  return (\n    <Form ouiaId=\"basic-information-step\">\n      <Title headingLevel=\"h4\" size=\"xl\">\n        {title}\n      </Title>\n      <FormTextInput\n        ouiaId=\"name\"\n        id=\"name\"\n        name=\"displayName\"\n        label=\"Behavior group name\"\n        isRequired\n      />\n    </Form>\n  );\n};\n\nexport const schema = Yup.object({\n  displayName: Yup.string()\n    .min(1)\n    .max(150, 'Must be 150 characters or less')\n    .required('Behavior group name is required'),\n});\n\nexport const useBasicInformationStep: CreateWizardStep = () => {\n  return React.useMemo(\n    () => ({\n      name: title,\n      component: <BasicInformationStep />,\n      schema,\n    }),\n    []\n  );\n};\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Grid,\n  GridItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\nimport { Form } from '@redhat-cloud-services/insights-common-typescript';\nimport { useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { BehaviorGroupActionsSummary } from '../../../../components/Notifications/BehaviorGroup/BehaviorGroupActionsSummary';\nimport { CreateWizardStep } from '../../../../components/Notifications/BehaviorGroup/Wizard/ExtendedWizardStep';\nimport { CreateBehaviorGroup } from '../../../../types/CreateBehaviorGroup';\nimport { EventType } from '../../../../types/Notification';\n\nconst title = 'Review';\n\ninterface EventTypeReviewTableProps {\n  events: ReadonlyArray<EventType>;\n}\n\nconst EventTypeTable: React.FunctionComponent<EventTypeReviewTableProps> = (\n  props\n) => {\n  return (\n    <Grid>\n      <GridItem span={6}>\n        <TextContent>\n          <Text component={TextVariants.h6}>Event type</Text>\n        </TextContent>\n      </GridItem>\n      <GridItem span={6}>\n        <TextContent>\n          <Text component={TextVariants.h6}>Application</Text>\n        </TextContent>\n      </GridItem>\n      {props.events.map((event) => (\n        <React.Fragment key={event.id}>\n          <GridItem span={6}>{event.eventTypeDisplayName}</GridItem>\n          <GridItem span={6}>{event.applicationDisplayName}</GridItem>\n        </React.Fragment>\n      ))}\n    </Grid>\n  );\n};\n\nconst ReviewStep: React.FunctionComponent = () => {\n  const { values } = useFormikContext<CreateBehaviorGroup>();\n\n  return (\n    <Form ouiaId=\"review-step\">\n      <Title headingLevel=\"h2\" size=\"xl\">\n        {title}\n      </Title>\n      <DescriptionList isHorizontal>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Name</DescriptionListTerm>\n          <DescriptionListDescription>\n            {' '}\n            {values.displayName}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm> Actions and recipients</DescriptionListTerm>\n          <DescriptionListDescription>\n            <BehaviorGroupActionsSummary actions={values.actions} />\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Associate event types</DescriptionListTerm>\n          <DescriptionListDescription>\n            <EventTypeTable events={values.events} />\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </Form>\n  );\n};\n\nexport const createReviewStep: CreateWizardStep = () => ({\n  name: title,\n  component: <ReviewStep />,\n  nextButtonText: 'Finish',\n});\n","import { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\nimport * as Yup from 'yup';\n\nimport { BehaviorGroupWizard } from '../../../components/Notifications/BehaviorGroup/Wizard/BehaviorGroupWizard';\nimport { RecipientContextProvider } from '../../../components/Notifications/RecipientContext';\nimport { useGetIntegrations } from '../../../components/Notifications/useGetIntegrations';\nimport { useGetRecipients } from '../../../components/Notifications/useGetRecipients';\nimport { CreateBehaviorGroup } from '../../../types/CreateBehaviorGroup';\nimport { Facet } from '../../../types/Notification';\nimport { useNotification } from '../../../utils/AlertUtils';\nimport {\n  SaveBehaviorGroupOperation,\n  useSaveBehaviorGroup,\n} from './useSaveBehaviorGroup';\nimport { useSteps } from './useSteps';\n\ninterface BehaviorGroupWizardProps {\n  bundle: Facet;\n  applications: ReadonlyArray<Facet>;\n  behaviorGroup?: Partial<CreateBehaviorGroup>;\n  onClose: (saved: boolean) => void;\n}\n\ninterface BehaviorGroupWizardInternalProps extends BehaviorGroupWizardProps {\n  validationSchema?: Yup.AnySchema;\n  setValidationSchema: (schema?: Yup.AnySchema) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noOp = () => {};\n\nconst InternalBehaviorGroupWizardPage: React.FunctionComponent<BehaviorGroupWizardInternalProps> =\n  (props) => {\n    const [currentStep, setCurrentStep] = React.useState(0);\n    const { isValid, validateForm } = useFormikContext<CreateBehaviorGroup>();\n    const saving = useSaveBehaviorGroup(props.behaviorGroup);\n    const { values } = useFormikContext<CreateBehaviorGroup>();\n    const { addDangerNotification, addSuccessNotification } = useNotification();\n\n    const associateEventTypeStepProps = {\n      bundle: props.bundle,\n      applications: props.applications,\n    };\n\n    const steps = useSteps(\n      associateEventTypeStepProps,\n      currentStep,\n      isValid,\n      saving.isSaving\n    );\n\n    const currentStepModel = steps[currentStep] as\n      | typeof steps[number]\n      | undefined;\n    const stepValidationSchema = currentStepModel?.schema;\n\n    React.useEffect(() => {\n      props.setValidationSchema(stepValidationSchema);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentStep]);\n\n    React.useEffect(() => {\n      validateForm();\n    }, [props.validationSchema, validateForm]);\n\n    const onSave = React.useCallback(async () => {\n      const onClose = props.onClose;\n      const save = saving.save;\n      const behaviorGroup = {\n        ...values,\n        bundleId: props.bundle.id,\n      };\n\n      const result = await save(behaviorGroup);\n\n      if (result.status) {\n        if (result.operation === SaveBehaviorGroupOperation.CREATE) {\n          addSuccessNotification(\n            'New behavior group created',\n            <>\n              Group <b> {behaviorGroup.displayName} </b> created successfully.\n            </>\n          );\n        } else {\n          addSuccessNotification(\n            'Behavior group saved',\n            <>\n              Group <b> {behaviorGroup.displayName} </b> was saved successfully.\n            </>\n          );\n        }\n\n        onClose(true);\n      } else {\n        if (result.operation === SaveBehaviorGroupOperation.CREATE) {\n          addDangerNotification(\n            'Behavior group failed to be created',\n            <>\n              Failed to create group <b> {behaviorGroup.displayName}</b>.\n              <br />\n              Please try again.\n            </>\n          );\n        } else {\n          addDangerNotification(\n            'Behavior group failed to save',\n            <>\n              Failed to save group <b> {behaviorGroup.displayName}</b>.\n              <br />\n              Please try again.\n            </>\n          );\n        }\n      }\n    }, [\n      values,\n      saving.save,\n      props.bundle,\n      props.onClose,\n      addDangerNotification,\n      addSuccessNotification,\n    ]);\n\n    const onNext = async (goNext) => {\n      let shouldGoNext = true;\n\n      if (currentStepModel?.isValid) {\n        shouldGoNext = await currentStepModel.isValid();\n      }\n\n      if (shouldGoNext) {\n        setCurrentStep((prev) => Math.min(prev + 1, steps.length));\n        goNext();\n      }\n    };\n\n    const onBack = async (goBack) => {\n      setCurrentStep((prev) => prev - 1);\n      goBack();\n    };\n\n    const onClose = () => {\n      props.onClose(false);\n    };\n\n    return (\n      <BehaviorGroupWizard\n        steps={steps}\n        onNext={onNext}\n        onBack={onBack}\n        onGoToStep={setCurrentStep}\n        loading={saving.isSaving}\n        onClose={onClose}\n        onSave={onSave}\n      />\n    );\n  };\n\nexport const BehaviorGroupWizardPage: React.FunctionComponent<BehaviorGroupWizardProps> =\n  (props) => {\n    const getRecipients = useGetRecipients();\n    const getIntegrations = useGetIntegrations();\n    const actionsContextValue = React.useMemo(\n      () => ({\n        getIntegrations,\n        getNotificationRecipients: getRecipients,\n      }),\n      [getIntegrations, getRecipients]\n    );\n\n    const [validationSchema, setValidationSchema] =\n      React.useState<Yup.AnySchema>();\n\n    return (\n      <RecipientContextProvider value={actionsContextValue}>\n        <Formik<Partial<CreateBehaviorGroup>>\n          validateOnMount\n          onSubmit={noOp}\n          initialValues={\n            props.behaviorGroup ?? {\n              actions: [],\n              events: [],\n              displayName: undefined,\n            }\n          }\n          validationSchema={validationSchema}\n          validateOnBlur\n          validateOnChange\n        >\n          <InternalBehaviorGroupWizardPage\n            {...props}\n            validationSchema={validationSchema}\n            setValidationSchema={setValidationSchema}\n          />\n        </Formik>\n      </RecipientContextProvider>\n    );\n  };\n","import assertNever from 'assert-never';\n\nimport { Operations } from '../../generated/OpenapiIntegrations';\nimport {\n  SystemProperties,\n  isDrawerSystemProperties,\n  isEmailSystemProperties,\n} from '../../types/Notification';\n\nexport const getDefaultSystemEndpointAction = (\n  systemProperties: SystemProperties\n) => {\n  if (isEmailSystemProperties(systemProperties)) {\n    return Operations.EndpointResourceGetOrCreateEmailSubscriptionEndpoint.actionCreator(\n      {\n        body: {\n          only_admins: systemProperties.props.onlyAdmins,\n          group_id: systemProperties.props.groupId,\n        },\n      }\n    );\n  } else if (isDrawerSystemProperties(systemProperties)) {\n    return Operations.EndpointResourceGetOrCreateDrawerSubscriptionEndpoint.actionCreator(\n      {\n        body: {\n          only_admins: systemProperties.props.onlyAdmins,\n          group_id: systemProperties.props.groupId,\n        },\n      }\n    );\n  }\n\n  assertNever(systemProperties);\n};\n","import produce from 'immer';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { ExtendedWizardStep } from '../../../components/Notifications/BehaviorGroup/Wizard/ExtendedWizardStep';\nimport { useActionAndRecipientStep } from './Steps/ActionAndRecipientsStep';\nimport {\n  AssociateEventTypesStepProps,\n  useAssociateEventTypesStep,\n} from './Steps/AssociateEventTypesStep';\nimport { useBasicInformationStep } from './Steps/BasicInformationStep';\nimport { createReviewStep } from './Steps/ReviewStep';\n\nexport const useSteps = (\n  associateEventTypeStep: AssociateEventTypesStepProps,\n  currentStep: number,\n  isValid: boolean,\n  isSaving: boolean\n): Array<ExtendedWizardStep> => {\n  const basicInformationStep = useBasicInformationStep();\n  const associateEventTypesStep = useAssociateEventTypesStep(\n    associateEventTypeStep\n  );\n  const actionAndRecipientStep = useActionAndRecipientStep();\n\n  const [maxStep, setMaxStep] = useState<number>(0);\n  const [invalidSteps, setInvalidSteps] = useState<Set<number>>(\n    () => new Set<number>()\n  );\n\n  useEffect(() => {\n    setMaxStep((prev) => Math.max(currentStep, prev));\n  }, [currentStep]);\n\n  useEffect(() => {\n    setInvalidSteps(\n      produce((draft) => {\n        if (isValid) {\n          draft.delete(currentStep);\n        } else {\n          draft.add(currentStep);\n        }\n      })\n    );\n  }, [currentStep, isValid]);\n\n  const lastAvailableStep =\n    invalidSteps.size === 0 ? maxStep : Math.min(...Array.from(invalidSteps));\n\n  return useMemo(() => {\n    return [\n      basicInformationStep,\n      actionAndRecipientStep,\n      associateEventTypesStep,\n      createReviewStep(),\n    ].map((step, index) => ({\n      ...step,\n      id: index,\n      canJumpTo: !isSaving && index <= lastAvailableStep,\n      hideCancelButton: false,\n      enableNext: isValid,\n    }));\n  }, [\n    basicInformationStep,\n    actionAndRecipientStep,\n    isValid,\n    lastAvailableStep,\n    isSaving,\n    associateEventTypesStep,\n  ]);\n};\n","import { useCallback } from 'react';\n\nimport { useRbacGroups } from '../../app/rbac/RbacGroupContext';\nimport { NotificationRbacGroupRecipient } from '../../types/Recipient';\nimport { GetNotificationRecipients } from './RecipientContext';\n\nexport const useGetRecipients = (): GetNotificationRecipients => {\n  const rbacGroups = useRbacGroups();\n  return useCallback(async () => {\n    return rbacGroups.groups.map(\n      (r) => new NotificationRbacGroupRecipient(undefined, r.id, r.name)\n    );\n  }, [rbacGroups]);\n};\n","import {\n  Filter,\n  Operator,\n  Page,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport {\n  listIntegrationIntegrationDecoder,\n  listIntegrationsActionCreator,\n} from '../../services/useListIntegrations';\nimport { UserIntegrationType } from '../../types/Integration';\nimport { IntegrationRef } from '../../types/Notification';\nimport { GetIntegrations } from './RecipientContext';\n\nexport const useGetIntegrations = (): GetIntegrations => {\n  const { query } = useContext(ClientContext);\n\n  return React.useCallback(\n    async (type: UserIntegrationType, search?: string) => {\n      return query(\n        listIntegrationsActionCreator(\n          Page.of(\n            1,\n            20,\n            new Filter()\n              .and('type', Operator.EQUAL, [type])\n              .and('name', Operator.EQUAL, search ?? '')\n          )\n        )\n      ).then((response) => {\n        let integrations: ReadonlyArray<IntegrationRef> = [];\n        const payload = response.payload\n          ? listIntegrationIntegrationDecoder(response.payload)\n          : undefined;\n\n        if (payload?.type === 'IntegrationPage') {\n          integrations = payload.value.data;\n        }\n\n        return integrations;\n      });\n    },\n    [query]\n  );\n};\n","import {\n  ButtonVariant,\n  Checkbox,\n  ExpandableSection,\n  List,\n  ListItem,\n  Skeleton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  ActionModalProps,\n  DeleteModal,\n  DeleteModalProps,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { useOnDeleteWrapper } from '../../../hooks/useOnDeleteWrapper';\nimport { OnDelete } from '../../../types/Callbacks';\nimport { BehaviorGroup, Notification } from '../../../types/Notification';\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onDelete';\n\ninterface BehaviorGroupDeleteModalProps\n  extends Omit<DeleteModalProps, UsedProps> {\n  behaviorGroup: BehaviorGroup;\n  onDelete: OnDelete<BehaviorGroup>;\n  conflictingNotifications: Array<Notification>;\n}\n\ntype BehaviorGroupDeleteModalSkeletonProps = Pick<ActionModalProps, 'onClose'>;\n\nexport const BehaviorGroupDeleteModal: React.FunctionComponent<BehaviorGroupDeleteModalProps> =\n  (props) => {\n    const onDelete = useOnDeleteWrapper(props.onDelete, props.behaviorGroup);\n\n    const cancelButtonTitle = React.useMemo(\n      () => (props.conflictingNotifications.length === 0 ? 'Cancel' : 'Close'),\n      [props.conflictingNotifications]\n    );\n\n    const cancelButtonVariant = React.useMemo(\n      () =>\n        props.conflictingNotifications.length === 0\n          ? ButtonVariant.link\n          : ButtonVariant.secondary,\n      [props.conflictingNotifications]\n    );\n\n    const [ackDelete, setAckDelete] = React.useState(false);\n\n    const content = React.useMemo(() => {\n      if (props.conflictingNotifications.length === 0) {\n        return (\n          <Stack hasGutter>\n            <StackItem>\n              Action and recipient pairings assigned in{' '}\n              <b>{props.behaviorGroup.displayName}</b> will lost. You will no\n              longer be able to assign this behavior group to events.\n            </StackItem>\n            <StackItem>\n              <Checkbox\n                id=\"checkbox-delete-i-acknowledge\"\n                label=\"I acknowledge that this action cannot be undone\"\n                onChange={setAckDelete}\n                isChecked={ackDelete}\n              />\n            </StackItem>\n          </Stack>\n        );\n      } else {\n        const events = props.conflictingNotifications;\n\n        return (\n          <Stack hasGutter>\n            <StackItem>\n              You will no longer be able to assign{' '}\n              <b>{props.behaviorGroup.displayName}</b> to events, and existing\n              associations to events listed below will be removed.\n            </StackItem>\n            <StackItem>\n              <ExpandableSection\n                toggleText={`View ${events.length} event${\n                  events.length === 0 ? '' : 's'\n                }`}\n              >\n                <List>\n                  {events.map((event) => (\n                    <ListItem\n                      key={event.id}\n                    >{`${event.applicationDisplayName} - ${event.eventTypeDisplayName}`}</ListItem>\n                  ))}\n                </List>\n              </ExpandableSection>\n            </StackItem>\n            <StackItem>\n              <Checkbox\n                id=\"checkbox-delete-i-acknowledge\"\n                label=\"I acknowledge that this action cannot be undone\"\n                onChange={setAckDelete}\n                isChecked={ackDelete}\n              />\n            </StackItem>\n          </Stack>\n        );\n      }\n    }, [\n      props.conflictingNotifications,\n      props.behaviorGroup,\n      ackDelete,\n      setAckDelete,\n    ]);\n\n    return (\n      <DeleteModal\n        isOpen={true}\n        isDeleting={props.isDeleting}\n        title=\"Delete behavior group\"\n        content={content}\n        onClose={props.onClose}\n        onDelete={onDelete}\n        error={props.error}\n        titleIconVariant=\"warning\"\n        actionButtonDisabled={!ackDelete}\n        cancelButtonTitle={cancelButtonTitle}\n        cancelButtonVariant={cancelButtonVariant}\n      />\n    );\n  };\n\nconst onDelete = () => false;\n\nexport const BehaviorGroupDeleteModalSkeleton: React.FunctionComponent<BehaviorGroupDeleteModalSkeletonProps> =\n  (props) => {\n    return (\n      <DeleteModal\n        isOpen={true}\n        title=\"Delete behavior group\"\n        actionButtonDisabled={true}\n        titleIconVariant=\"warning\"\n        content={\n          <Stack hasGutter>\n            <StackItem>\n              <Skeleton width=\"500px\" />\n            </StackItem>\n            <StackItem>\n              <Skeleton width=\"500px\" />\n            </StackItem>\n          </Stack>\n        }\n        onClose={props.onClose}\n        isDeleting={false}\n        onDelete={onDelete}\n      />\n    );\n  };\n","import { useCallback } from 'react';\n\nimport { OnDelete } from '../types/Callbacks';\n\nexport const useOnDeleteWrapper = <T>(onDelete: OnDelete<T>, toDelete: T) => {\n  return useCallback(() => {\n    return onDelete(toDelete);\n  }, [onDelete, toDelete]);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { UUID } from '../../types/Notification';\n\nconst deleteBehaviorGroupAction = (id: UUID) => {\n  return Operations.NotificationResourceDeleteBehaviorGroup.actionCreator({\n    id,\n  });\n};\n\nexport const useDeleteBehaviorGroupMutation = () =>\n  useMutation(deleteBehaviorGroupAction);\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport {\n  validatedResponse,\n  validationResponseTransformer,\n} from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toNotifications } from '../../types/adapters/NotificationAdapter';\nimport { UUID } from '../../types/Notification';\n\nconst getAffectedNotificationsByBehaviorGroupAction = (id: UUID) => {\n  return Operations.NotificationResourceGetEventTypesAffectedByRemovalOfBehaviorGroup.actionCreator(\n    {\n      behaviorGroupId: id,\n    }\n  );\n};\n\nconst defaultNotificationsDecoder = validationResponseTransformer(\n  (\n    payload: Operations.NotificationResourceGetEventTypesAffectedByRemovalOfBehaviorGroup.Payload\n  ) => {\n    if (payload.status === 200) {\n      return validatedResponse(\n        'Notifications',\n        200,\n        toNotifications(payload.value),\n        payload.errors\n      );\n    }\n\n    return payload;\n  }\n);\n\nexport const useGetAffectedNotificationsByBehaviorGroupQuery = (id: UUID) =>\n  useTransformQueryResponse(\n    useQuery(getAffectedNotificationsByBehaviorGroupAction(id)),\n    defaultNotificationsDecoder\n  );\n","import * as React from 'react';\nimport { useEffect } from 'react';\n\nimport {\n  BehaviorGroupDeleteModal,\n  BehaviorGroupDeleteModalSkeleton,\n} from '../../../components/Notifications/BehaviorGroup/BehaviorGroupDeleteModal';\nimport { useDeleteBehaviorGroupMutation } from '../../../services/Notifications/DeleteBehaviorGroup';\nimport { useGetAffectedNotificationsByBehaviorGroupQuery } from '../../../services/Notifications/GetAffectedNotificationsByBehaviorGroup';\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { useNotification } from '../../../utils/AlertUtils';\n\nexport interface DeleteBehaviorGroupPageProps {\n  behaviorGroup: BehaviorGroup;\n  onClose: (deleted: boolean) => void;\n}\n\nexport const DeleteBehaviorGroupPage: React.FunctionComponent<DeleteBehaviorGroupPageProps> =\n  (props) => {\n    const deleteBehaviorGroup = useDeleteBehaviorGroupMutation();\n    const affected = useGetAffectedNotificationsByBehaviorGroupQuery(\n      props.behaviorGroup.id\n    );\n    const { addDangerNotification, addSuccessNotification } = useNotification();\n\n    const onDelete = React.useCallback(\n      async (behaviorGroup: BehaviorGroup) => {\n        const mutate = deleteBehaviorGroup.mutate;\n        const response = await mutate(behaviorGroup.id);\n\n        if (response.payload?.status === 200) {\n          addSuccessNotification(\n            'Behavior group deleted',\n            <>\n              Group <b>{behaviorGroup.displayName}</b> deleted successfully.\n            </>\n          );\n          return true;\n        }\n\n        addDangerNotification(\n          'Behavior group failed to be deleted',\n          <>\n            Failed to delete group <b> {behaviorGroup.displayName}</b>.\n            <br />\n            Please try again.\n          </>\n        );\n\n        return false;\n      },\n      [\n        deleteBehaviorGroup.mutate,\n        addDangerNotification,\n        addSuccessNotification,\n      ]\n    );\n\n    useEffect(() => {\n      const payload = affected.payload;\n      const onClose = props.onClose;\n      if (payload && payload.status !== 200) {\n        addDangerNotification(\n          'Associated events failed to load ',\n          <>\n            Failed to load associated events for group{' '}\n            <b> {props.behaviorGroup.displayName}</b>.\n            <br />\n            Please try again.\n          </>\n        );\n\n        onClose(false);\n      }\n    }, [\n      addDangerNotification,\n      affected.payload,\n      props.behaviorGroup,\n      props.onClose,\n    ]);\n\n    if (affected.loading) {\n      return <BehaviorGroupDeleteModalSkeleton onClose={props.onClose} />;\n    }\n\n    if (affected.payload?.status !== 200) {\n      return null;\n    }\n\n    return (\n      <BehaviorGroupDeleteModal\n        onDelete={onDelete}\n        isDeleting={deleteBehaviorGroup.loading}\n        onClose={props.onClose}\n        behaviorGroup={props.behaviorGroup}\n        conflictingNotifications={affected.payload.value}\n      />\n    );\n  };\n","import {\n  Badge,\n  Button,\n  ButtonProps,\n  ButtonVariant,\n  ExpandableSection,\n  ExpandableSectionToggle,\n  Popover,\n  SearchInput,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Title,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n  global_BackgroundColor_100,\n  global_palette_black_1000,\n  global_spacer_lg,\n} from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { useAppContext } from '../../../app/AppContext';\nimport { BehaviorGroupCardList } from '../../../components/Notifications/BehaviorGroup/BehaviorGroupCardList';\nimport { useDeleteModalReducer } from '../../../hooks/useDeleteModalReducer';\nimport { useFormModalReducer } from '../../../hooks/useFormModalReducer';\nimport { CreateBehaviorGroup } from '../../../types/CreateBehaviorGroup';\nimport { BehaviorGroup, Facet } from '../../../types/Notification';\nimport { emptyImmutableArray } from '../../../utils/Immutable';\nimport { BehaviorGroupWizardPage } from '../BehaviorGroupWizard/BehaviorGroupWizardPage';\nimport { DeleteBehaviorGroupPage } from '../Form/DeleteBehaviorGroupPage';\nimport { BehaviorGroupContent } from './useBehaviorGroupContent';\n\nconst expandableSectionClassName = {\n  backgroundColor: global_BackgroundColor_100.var,\n  paddingLeft: global_spacer_lg.var,\n  paddingRight: global_spacer_lg.var,\n};\n\nconst sectionClassName = style(expandableSectionClassName, {\n  paddingBottom: global_spacer_lg.var,\n});\n\nconst sectionTitleClassName = style(expandableSectionClassName, {\n  paddingTop: global_spacer_lg.var,\n});\n\nconst titleClassName = style({\n  marginTop: '-0.15em',\n  color: global_palette_black_1000.var,\n});\n\nconst defaultIconClassName = style({\n  marginTop: '2px',\n  marginLeft: '-16px',\n});\n\nconst badgeClassName = style({\n  marginTop: '10px',\n  marginLeft: '-16px',\n});\n\nconst emptyAddButtonClassName = style({\n  marginTop: '-0.2em',\n});\n\ninterface BehaviorGroupSectionProps {\n  bundle: Facet;\n  applications: ReadonlyArray<Facet>;\n  behaviorGroupContent: BehaviorGroupContent;\n}\n\ntype BehaviorGroupAddButtonProps = Pick<\n  ButtonProps,\n  'className' | 'onClick' | 'isDisabled' | 'component'\n>;\n\nconst BehaviorGroupAddButton: React.FunctionComponent<BehaviorGroupAddButtonProps> =\n  (props) => {\n    const { isDisabled, ...buttonProps } = props;\n    const { isOrgAdmin } = useAppContext();\n\n    const button = (\n      <Button\n        {...buttonProps}\n        isAriaDisabled={isDisabled}\n        variant={ButtonVariant.primary}\n      >\n        Create new group\n      </Button>\n    );\n\n    if (isDisabled) {\n      const content = isOrgAdmin\n        ? 'You need the Notifications administrator role to perform this action'\n        : 'You do not have permissions to perform this action. Contact your org admin for more information';\n      return <Tooltip content={content}>{button}</Tooltip>;\n    }\n\n    return button;\n  };\n\nexport const BehaviorGroupsSection: React.FunctionComponent<BehaviorGroupSectionProps> =\n  (props) => {\n    const [isExpanded, setExpanded] = React.useState(true);\n    const [filter, setFilter] = React.useState<string>('');\n    const { rbac } = useAppContext();\n\n    const filteredBehaviors = React.useMemo(() => {\n      if (\n        !props.behaviorGroupContent.isLoading &&\n        !props.behaviorGroupContent.hasError\n      ) {\n        const lowerCaseFilter = filter.toLowerCase();\n        return props.behaviorGroupContent.content.filter((bg) =>\n          bg.displayName.toLowerCase().includes(lowerCaseFilter)\n        );\n      }\n\n      return emptyImmutableArray;\n    }, [filter, props.behaviorGroupContent]);\n\n    const [editModalState, editModalActions] =\n      useFormModalReducer<CreateBehaviorGroup>();\n    const [deleteModalState, deleteModalActions] =\n      useDeleteModalReducer<BehaviorGroup>();\n\n    const createGroup = React.useCallback(\n      (event) => {\n        event.stopPropagation();\n        editModalActions.create({\n          events: [],\n          actions: [],\n          displayName: '',\n        });\n      },\n      [editModalActions]\n    );\n\n    const onCloseModal = React.useCallback(\n      (saved: boolean) => {\n        const reload = props.behaviorGroupContent.reload;\n        if (saved) {\n          reload();\n        }\n\n        editModalActions.reset();\n      },\n      [editModalActions, props.behaviorGroupContent.reload]\n    );\n\n    const onEdit = React.useCallback(\n      (behaviorGroup: BehaviorGroup) => {\n        editModalActions.edit({\n          id: behaviorGroup.id,\n          events: behaviorGroup.events,\n          actions: behaviorGroup.actions,\n          displayName: behaviorGroup.displayName,\n        });\n      },\n      [editModalActions]\n    );\n\n    const onDelete = React.useCallback(\n      (behaviorGroup: BehaviorGroup) => {\n        deleteModalActions.delete(behaviorGroup);\n      },\n      [deleteModalActions]\n    );\n\n    const onCloseDelete = React.useCallback(\n      (deleted: boolean) => {\n        const reload = props.behaviorGroupContent.reload;\n        if (deleted) {\n          reload();\n        }\n\n        deleteModalActions.reset();\n      },\n      [deleteModalActions, props.behaviorGroupContent.reload]\n    );\n\n    const onClearFilter = React.useCallback(() => {\n      setFilter('');\n    }, [setFilter]);\n\n    const contentId = 'behavior-group-section-content';\n\n    return (\n      <>\n        <div className={sectionTitleClassName}>\n          <Split hasGutter>\n            <ExpandableSectionToggle\n              isExpanded={isExpanded}\n              onToggle={setExpanded}\n              contentId={contentId}\n              direction=\"down\"\n            >\n              <SplitItem>\n                <Title className={titleClassName} headingLevel=\"h2\">\n                  Behavior groups\n                </Title>\n              </SplitItem>\n            </ExpandableSectionToggle>\n            <SplitItem>\n              {!props.behaviorGroupContent.isLoading &&\n                !props.behaviorGroupContent.hasError &&\n                (props.behaviorGroupContent.content.length > 0 ? (\n                  <Badge className={badgeClassName} isRead>\n                    {props.behaviorGroupContent.content.length}\n                  </Badge>\n                ) : (\n                  <BehaviorGroupAddButton\n                    className={emptyAddButtonClassName}\n                    component=\"a\"\n                    onClick={createGroup}\n                    isDisabled={!rbac.canWriteNotifications}\n                  />\n                ))}\n            </SplitItem>\n            <SplitItem>\n              <Popover\n                position=\"right\"\n                hideOnOutsideClick\n                appendTo={() => document.body}\n                headerContent={\n                  <div className=\"pf-u-color-100\">Behavior groups</div>\n                }\n                bodyContent={\n                  <div className=\"pf-u-font-size-sm pf-u-color-100\">\n                    Behavior groups are made up of action/recipient pairings\n                    that allow you to configure which notification actions\n                    different users will be able to receive. Once you&apos;ve\n                    created a behavior group, you can assign it to an event\n                    using the Events table below.{' '}\n                  </div>\n                }\n                footerContent={\n                  <div className=\"pf-u-font-size-sm pf-u-color-100\">\n                    {' '}\n                    You may also prevent users from changing assigned actions by\n                    locking action/recipient pairings when creating or editing\n                    behavior groups.\n                  </div>\n                }\n              >\n                <Button\n                  className={defaultIconClassName}\n                  variant=\"plain\"\n                  aria-label=\"Help\"\n                >\n                  <OutlinedQuestionCircleIcon />\n                </Button>\n              </Popover>\n            </SplitItem>\n          </Split>\n        </div>\n        <ExpandableSection\n          className={sectionClassName}\n          contentId={contentId}\n          isExpanded={isExpanded}\n          onToggle={setExpanded}\n          isDetached\n        >\n          <Stack hasGutter>\n            {(props.behaviorGroupContent.isLoading ||\n              props.behaviorGroupContent.hasError ||\n              props.behaviorGroupContent.content.length > 0) && (\n              <>\n                <StackItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <SearchInput\n                        value={filter}\n                        onChange={setFilter}\n                        onClear={onClearFilter}\n                        type=\"text\"\n                        aria-label=\"Search by name\"\n                        placeholder=\"Search by name\"\n                        isDisabled={props.behaviorGroupContent.isLoading}\n                      />\n                    </SplitItem>\n                    <SplitItem>\n                      <BehaviorGroupAddButton\n                        isDisabled={\n                          props.behaviorGroupContent.isLoading ||\n                          !rbac.canWriteNotifications\n                        }\n                        onClick={createGroup}\n                      />\n                    </SplitItem>\n                  </Split>\n                </StackItem>\n                <StackItem>\n                  {props.behaviorGroupContent.isLoading ? (\n                    <BehaviorGroupCardList />\n                  ) : props.behaviorGroupContent.hasError ? (\n                    <div>Error loading behavior groups</div>\n                  ) : (\n                    <BehaviorGroupCardList\n                      onEdit={rbac.canWriteNotifications ? onEdit : undefined}\n                      onDelete={\n                        rbac.canWriteNotifications ? onDelete : undefined\n                      }\n                      behaviorGroups={filteredBehaviors}\n                    />\n                  )}\n                </StackItem>\n              </>\n            )}\n          </Stack>\n          {editModalState.isOpen && (\n            <BehaviorGroupWizardPage\n              bundle={props.bundle}\n              applications={props.applications}\n              behaviorGroup={editModalState.template}\n              onClose={onCloseModal}\n            />\n          )}\n          {deleteModalState.isOpen && (\n            <DeleteBehaviorGroupPage\n              behaviorGroup={deleteModalState.data}\n              onClose={onCloseDelete}\n            />\n          )}\n        </ExpandableSection>\n      </>\n    );\n  };\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport {\n  validatedResponse,\n  validationResponseTransformer,\n} from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toBehaviorGroup } from '../../types/adapters/BehaviorGroupAdapter';\nimport { UUID } from '../../types/Notification';\n\nconst behaviorGroupDecoder = validationResponseTransformer(\n  (\n    payload: Operations.NotificationResourceFindBehaviorGroupsByBundleId.Payload\n  ) => {\n    if (payload.status === 200) {\n      return validatedResponse(\n        'BehaviorGroups',\n        200,\n        payload.value.map(toBehaviorGroup),\n        payload.errors\n      );\n    }\n\n    return payload;\n  }\n);\n\nexport const useGetBehaviorGroups = (bundleId: UUID) => {\n  return useTransformQueryResponse(\n    useQuery(\n      Operations.NotificationResourceFindBehaviorGroupsByBundleId.actionCreator(\n        {\n          bundleId,\n        }\n      )\n    ),\n    behaviorGroupDecoder\n  );\n};\n","import { addDangerNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport produce, { castDraft } from 'immer';\nimport * as React from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { usePrevious } from 'react-use';\n\nimport { linkBehaviorGroupAction } from '../../../services/Notifications/LinkBehaviorGroup';\nimport {\n  BehaviorGroup,\n  Notification,\n  NotificationBehaviorGroup,\n  UUID,\n} from '../../../types/Notification';\nimport { findById } from '../../../utils/Find';\n\nexport type BehaviorGroupNotificationRow = NotificationBehaviorGroup & {\n  readonly loadingActionStatus: 'loading' | 'done' | 'error';\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n} & (\n    | {\n        readonly isEditMode: false;\n      }\n    | {\n        readonly isEditMode: true;\n        readonly oldBehaviors: ReadonlyArray<BehaviorGroup>;\n      }\n  );\n\nclass NotificationNotFound extends Error {}\n\nconst getNotification = <T extends ReadonlyArray<BehaviorGroupNotificationRow>>(\n  rows: T,\n  notificationId: UUID\n): T[number] => {\n  // eslint-disable-next-line testing-library/await-async-queries\n  const notification = rows.find(findById(notificationId));\n  if (!notification) {\n    throw new NotificationNotFound('Notification not found in rows');\n  }\n\n  return notification;\n};\n\nexport const useBehaviorGroupNotificationRows = (\n  notifications: Array<Notification>,\n  behaviorGroups: ReadonlyArray<BehaviorGroup> | undefined\n) => {\n  const [notificationRows, setNotificationRows] = React.useState<\n    Array<BehaviorGroupNotificationRow>\n  >([]);\n  const prevNotificationInput = usePrevious(notifications);\n  const { query } = React.useContext(ClientContext);\n\n  const removeBehaviorGroup = React.useCallback(\n    (notificationId: UUID, behaviorGroupId: UUID) => {\n      setNotificationRows(\n        produce((draft) => {\n          const notification = getNotification(draft, notificationId);\n          const index = notification.behaviors.findIndex(\n            // eslint-disable-next-line testing-library/await-async-queries\n            findById(behaviorGroupId)\n          );\n          if (index === -1) {\n            throw new Error('Behavior group not found in rows');\n          }\n\n          notification.behaviors.splice(index, 1);\n        })\n      );\n    },\n    [setNotificationRows]\n  );\n\n  const updateBehaviorGroups = React.useCallback(\n    (behaviorGroups: ReadonlyArray<BehaviorGroup>) => {\n      setNotificationRows(\n        produce((draft) => {\n          for (const content of draft) {\n            // content.behaviors = castDraft(content.behaviors.map(ob => behaviorGroups.find(nb => nb.id === ob.id) || ob));\n            // Find if there are new behaviors for this type.\n            content.behaviors = [];\n            behaviorGroups.forEach((behaviorGroup) => {\n              if (behaviorGroup.events.find((e) => e.id === content.id)) {\n                content.behaviors.push(castDraft(behaviorGroup));\n              }\n            });\n          }\n        })\n      );\n    },\n    [setNotificationRows]\n  );\n\n  const updateBehaviorGroupLink = React.useCallback(\n    (\n      notificationId: UUID,\n      behaviorGroup: BehaviorGroup,\n      linkBehavior: boolean\n    ) => {\n      if (linkBehavior) {\n        setNotificationRows(\n          produce((draft) => {\n            const notification = getNotification(draft, notificationId);\n            notification.behaviors.push({\n              ...castDraft(behaviorGroup),\n            });\n          })\n        );\n      } else {\n        removeBehaviorGroup(notificationId, behaviorGroup.id);\n      }\n    },\n    [removeBehaviorGroup, setNotificationRows]\n  );\n\n  const setEditMode = React.useCallback(\n    async (notificationId: UUID, command: 'edit' | 'finish' | 'cancel') => {\n      if (command === 'finish') {\n        const notification = getNotification(notificationRows, notificationId);\n        if (notification.isEditMode) {\n          setNotificationRows(\n            produce((draft) => {\n              const draftNotification = getNotification(draft, notificationId);\n              draftNotification.loadingActionStatus = 'loading';\n            })\n          );\n\n          const response = await query(\n            linkBehaviorGroupAction(\n              notificationId,\n              notification.behaviors.map((b) => b.id)\n            )\n          );\n          if (response.payload?.status === 200) {\n            setNotificationRows(\n              produce((draft) => {\n                const draftNotification = getNotification(\n                  draft,\n                  notificationId\n                );\n                draftNotification.isEditMode = false;\n                draftNotification.loadingActionStatus = 'done';\n              })\n            );\n          } else {\n            addDangerNotification(\n              'Saving behavior',\n              <>\n                There was an error saving the behavior of{' '}\n                <b>\n                  {notification.applicationDisplayName} -{' '}\n                  {notification.eventTypeDisplayName}\n                </b>\n                .\n              </>\n            );\n            setNotificationRows(\n              produce((draft) => {\n                const draftNotification = getNotification(\n                  draft,\n                  notificationId\n                );\n                draftNotification.isEditMode = true;\n                draftNotification.loadingActionStatus = 'done';\n              })\n            );\n          }\n        }\n      } else {\n        setNotificationRows(\n          produce((draft) => {\n            const notification = getNotification(draft, notificationId);\n\n            if (notification.isEditMode && command === 'cancel') {\n              notification.behaviors = notification.oldBehaviors;\n            }\n\n            notification.isEditMode = command === 'edit';\n            if (notification.isEditMode) {\n              notification.oldBehaviors = notification.behaviors;\n            }\n          })\n        );\n      }\n    },\n    [setNotificationRows, notificationRows, query]\n  );\n\n  const startEditMode = React.useCallback(\n    (notificationId: UUID) => {\n      setEditMode(notificationId, 'edit');\n    },\n    [setEditMode]\n  );\n\n  const finishEditMode = React.useCallback(\n    (notificationId: UUID) => {\n      setEditMode(notificationId, 'finish');\n    },\n    [setEditMode]\n  );\n\n  const cancelEditMode = React.useCallback(\n    (notificationId: UUID) => {\n      setEditMode(notificationId, 'cancel');\n    },\n    [setEditMode]\n  );\n\n  React.useEffect(() => {\n    if (notifications !== prevNotificationInput) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setNotificationRows((_prev) =>\n        notifications.map((notification) => ({\n          ...notification,\n          loadingActionStatus: 'done',\n          behaviors: [],\n          isEditMode: false,\n        }))\n      );\n\n      if (behaviorGroups) {\n        updateBehaviorGroups(behaviorGroups);\n      }\n    }\n  }, [\n    behaviorGroups,\n    notifications,\n    prevNotificationInput,\n    setNotificationRows,\n    updateBehaviorGroups,\n  ]);\n\n  return {\n    rows: notificationRows,\n    updateBehaviorGroupLink,\n    updateBehaviorGroups,\n    startEditMode,\n    finishEditMode,\n    cancelEditMode,\n  };\n};\n","import { Tab, TabTitleText } from '@patternfly/react-core';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nimport { ExporterType } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { useAppContext } from '../../../app/AppContext';\nimport { NotificationsBehaviorGroupTable } from '../../../components/Notifications/NotificationsBehaviorGroupTable';\nimport { TabComponent } from '../../../components/Notifications/TabComponent';\nimport { NotificationsToolbar } from '../../../components/Notifications/Toolbar';\nimport { useListNotifications } from '../../../services/useListNotifications';\nimport {\n  BehaviorGroup,\n  Facet,\n  NotificationBehaviorGroup,\n  UUID,\n} from '../../../types/Notification';\nimport { useEventTypesPage } from '../hooks/useEventTypesPage';\nimport { BehaviorGroupsSection } from './BehaviorGroupsSection';\nimport { useBehaviorGroupContent } from './useBehaviorGroupContent';\nimport { useBehaviorGroupNotificationRows } from './useBehaviorGroupNotificationRows';\n\ninterface BundlePageBehaviorGroupContentProps {\n  applications: Array<Facet>;\n  bundle: Facet;\n}\n\nconst behaviorGroupSectionClassName = style({\n  marginBottom: global_spacer_xl.var,\n});\n\nconst noEvents = [];\n\nexport const BundlePageBehaviorGroupContent: React.FunctionComponent<BundlePageBehaviorGroupContentProps> =\n  (props) => {\n    const behaviorGroupContent = useBehaviorGroupContent(props.bundle.id);\n\n    const { rbac } = useAppContext();\n\n    const onExport = React.useCallback((type: ExporterType) => {\n      console.log('Export to', type);\n    }, []);\n\n    const eventTypePage = useEventTypesPage(\n      props.bundle,\n      props.applications,\n      true\n    );\n\n    const useNotifications = useListNotifications(\n      eventTypePage.pageController.page\n    );\n\n    const count = React.useMemo(() => {\n      const payload = useNotifications.payload;\n      if (payload?.status === 200) {\n        return payload.value.meta.count;\n      }\n\n      return 0;\n    }, [useNotifications.payload]);\n\n    const behaviorGroups =\n      !behaviorGroupContent.isLoading && !behaviorGroupContent.hasError\n        ? behaviorGroupContent.content\n        : undefined;\n\n    const {\n      rows: notificationRows,\n      updateBehaviorGroupLink,\n      startEditMode,\n      finishEditMode,\n      cancelEditMode,\n      updateBehaviorGroups,\n    } = useBehaviorGroupNotificationRows(\n      !useNotifications.loading &&\n        useNotifications.payload?.type === 'eventTypesArray'\n        ? useNotifications.payload.value.data\n        : noEvents,\n      behaviorGroups\n    );\n\n    React.useEffect(() => {\n      if (behaviorGroups) {\n        updateBehaviorGroups(behaviorGroups);\n      }\n    }, [behaviorGroups, updateBehaviorGroups]);\n\n    const onBehaviorGroupLinkUpdated = React.useCallback(\n      (\n        notification: NotificationBehaviorGroup,\n        behaviorGroup: BehaviorGroup,\n        isLinked: boolean\n      ) => {\n        if (behaviorGroup) {\n          updateBehaviorGroupLink(notification.id, behaviorGroup, isLinked);\n        }\n      },\n      [updateBehaviorGroupLink]\n    );\n\n    const onStartEditing = React.useCallback(\n      (notificationId: UUID) => {\n        startEditMode(notificationId);\n      },\n      [startEditMode]\n    );\n\n    const onFinishEditing = React.useCallback(\n      (notificationId: UUID) => {\n        finishEditMode(notificationId);\n      },\n      [finishEditMode]\n    );\n\n    const onCancelEditing = React.useCallback(\n      (notificationId: UUID) => {\n        cancelEditMode(notificationId);\n      },\n      [cancelEditMode]\n    );\n\n    return (\n      <TabComponent configuration={props.children} settings={props.children}>\n        <Tab eventKey={0} title={<TabTitleText>Configuration</TabTitleText>}>\n          <NotificationsToolbar\n            filters={eventTypePage.filters}\n            setFilters={eventTypePage.setFilters}\n            clearFilter={eventTypePage.clearFilters}\n            appFilterOptions={props.applications}\n            onExport={onExport}\n            count={count}\n            pageAdapter={eventTypePage.pageController}\n          >\n            <NotificationsBehaviorGroupTable\n              notifications={notificationRows}\n              behaviorGroupContent={behaviorGroupContent}\n              onBehaviorGroupLinkUpdated={onBehaviorGroupLinkUpdated}\n              onStartEditing={\n                rbac.canWriteNotifications ? onStartEditing : undefined\n              }\n              onFinishEditing={\n                rbac.canWriteNotifications ? onFinishEditing : undefined\n              }\n              onCancelEditing={\n                rbac.canWriteNotifications ? onCancelEditing : undefined\n              }\n              onSort={eventTypePage.onSort}\n              sortBy={eventTypePage.sortBy}\n              sortDirection={eventTypePage.sortDirection}\n            />\n          </NotificationsToolbar>\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Behavior Groups</TabTitleText>}>\n          <div className={behaviorGroupSectionClassName}>\n            <BehaviorGroupsSection\n              bundle={props.bundle}\n              applications={props.applications}\n              behaviorGroupContent={behaviorGroupContent}\n            />\n          </div>\n        </Tab>\n      </TabComponent>\n    );\n  };\n","import produce, { Draft, original } from 'immer';\nimport * as React from 'react';\nimport { useMemo } from 'react';\n\nimport { useRbacGroups } from '../../../app/rbac/RbacGroupContext';\nimport { useGetBehaviorGroups } from '../../../services/Notifications/GetBehaviorGroups';\nimport {\n  ActionNotify,\n  BehaviorGroup,\n  UUID,\n  isActionNotify,\n} from '../../../types/Notification';\nimport { NotificationRbacGroupRecipient } from '../../../types/Recipient';\n\nexport type BehaviorGroupContent =\n  | {\n      isLoading: true;\n      reload: () => void;\n    }\n  | {\n      isLoading: false;\n      hasError: true;\n      error: string;\n      reload: () => void;\n    }\n  | {\n      isLoading: false;\n      hasError: false;\n      content: ReadonlyArray<BehaviorGroup>;\n      reload: () => void;\n    };\n\nexport const useBehaviorGroupContent = (bundleId: UUID) => {\n  const behaviorGroups = useGetBehaviorGroups(bundleId);\n  const { groups, isLoading: isLoadingGroups } = useRbacGroups();\n\n  const result = React.useMemo<BehaviorGroupContent>(() => {\n    const payload = behaviorGroups.payload;\n    const error = behaviorGroups.errorObject;\n    const loading = behaviorGroups.loading;\n    const reload = behaviorGroups.query;\n\n    if (loading) {\n      return {\n        isLoading: true,\n        reload,\n      };\n    }\n\n    if (payload?.status === 200) {\n      return {\n        isLoading: false,\n        hasError: false,\n        content: payload.value,\n        reload,\n      };\n    }\n\n    return {\n      isLoading: false,\n      hasError: true,\n      error: error.toString(),\n      reload,\n    };\n  }, [\n    behaviorGroups.payload,\n    behaviorGroups.loading,\n    behaviorGroups.errorObject,\n    behaviorGroups.query,\n  ]);\n\n  return useMemo(() => {\n    if (!result.isLoading && !result.hasError) {\n      return produce(result, (draft) => {\n        const originalValues = original(draft);\n        if (originalValues) {\n          originalValues.content.forEach((bg, bgIndex) =>\n            bg.actions.forEach((a, aIndex) => {\n              if (isActionNotify(a)) {\n                a.recipient.forEach((recipient, recipientIndex) => {\n                  if (\n                    recipient instanceof NotificationRbacGroupRecipient &&\n                    recipient.isLoading\n                  ) {\n                    const recipients = (\n                      draft.content[bgIndex].actions[\n                        aIndex\n                      ] as Draft<ActionNotify>\n                    ).recipient;\n                    const rbacRecipient = recipients[\n                      recipientIndex\n                    ] as NotificationRbacGroupRecipient;\n                    recipients[recipientIndex] =\n                      new NotificationRbacGroupRecipient(\n                        rbacRecipient.integrationId,\n                        rbacRecipient.groupId,\n                        groups.find((g) => g.id === rbacRecipient.groupId)\n                          ?.name || isLoadingGroups\n                      );\n                  }\n                });\n              }\n            })\n          );\n        }\n      });\n    }\n\n    return result;\n  }, [result, groups, isLoadingGroups]);\n};\n","import {\n  ButtonVariant,\n  Flex,\n  FlexItem,\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport {\n  getInsights,\n  localUrl,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport { default as React, useEffect, useMemo, useState } from 'react';\nimport { style } from 'typestyle';\n\nimport { useAppContext } from '../../../app/AppContext';\nimport { ButtonLink } from '../../../components/ButtonLink';\nimport { TabComponent } from '../../../components/Notifications/TabComponent';\nimport { TimeConfigComponent } from '../../../components/Notifications/TimeConfig';\nimport { PageHeader } from '../../../components/PageHeader';\nimport { Messages } from '../../../properties/Messages';\nimport { linkTo } from '../../../Routes';\nimport { useGetApplicationsLazy } from '../../../services/Notifications/GetApplications';\nimport { Facet } from '../../../types/Notification';\nimport { BundlePageBehaviorGroupContent } from './BundlePageBehaviorGroupContent';\n\ninterface NotificationListBundlePageProps {\n  bundle: Facet;\n  bundleTabs: Facet[];\n  applications: Array<Facet>;\n}\n\nexport const NotificationListBundlePage: React.FunctionComponent<NotificationListBundlePageProps> =\n  (props) => {\n    const { updateDocumentTitle } = useChrome();\n\n    updateDocumentTitle?.(`${props.bundle.displayName} - Notifications`);\n\n    const notificationsOverhaul = useFlag('platform.notifications.overhaul');\n\n    const { rbac } = useAppContext();\n    const eventLogPageUrl = React.useMemo(\n      () => linkTo.eventLog(props.bundle.name),\n      [props.bundle.name]\n    );\n    const getApplications = useGetApplicationsLazy();\n    const [activeTabKey, setActiveTabKey] = useState(0);\n\n    const mainPage = (\n      <Main>\n        <BundlePageBehaviorGroupContent\n          applications={props.applications}\n          bundle={props.bundle}\n        />\n      </Main>\n    );\n\n    const paddingLeftClassName = style({\n      paddingLeft: global_spacer_lg.value,\n    });\n\n    const eventLogButton = () => {\n      return notificationsOverhaul ? null : (\n        <ButtonLink\n          isDisabled={!rbac.canReadEvents}\n          to={eventLogPageUrl}\n          variant={ButtonVariant.secondary}\n        >\n          {Messages.pages.notifications.list.viewHistory}\n        </ButtonLink>\n      );\n    };\n\n    const pageTitle = () => {\n      if (notificationsOverhaul) {\n        return `Configure Events`;\n      } else {\n        return `${Messages.pages.notifications.list.title} | ${props.bundle.displayName}`;\n      }\n    };\n\n    const timeConfigPage = (\n      <Main>\n        <TimeConfigComponent />\n      </Main>\n    );\n\n    useEffect(() => {\n      if (notificationsOverhaul) {\n        const query = getApplications.query;\n        query(props.bundleTabs[activeTabKey].name);\n      }\n    }, [\n      activeTabKey,\n      getApplications.query,\n      props.bundleTabs,\n      notificationsOverhaul,\n    ]);\n\n    const getInitialApplications = useMemo(() => {\n      if (getApplications.payload) {\n        return getApplications.payload.value as Facet[];\n      } else {\n        return [];\n      }\n    }, [getApplications.payload]);\n\n    if (notificationsOverhaul) {\n      const handleTabClick = (event, tabIndex) => {\n        setActiveTabKey(tabIndex);\n      };\n\n      return (\n        <>\n          <PageHeader\n            title={pageTitle()}\n            subtitle={\n              <span>\n                This service allows you to configure which notifications\n                different users within your organization will be entitled to\n                receiving. To do this, create behavior groups and apply\n                <a\n                  href={localUrl(\n                    `/user-preferences/notifications/${props.bundle.name}`,\n                    getInsights().chrome.isBeta()\n                  )}\n                >\n                  {' '}\n                  User Preferences\n                </a>\n                .\n              </span>\n            }\n            action={eventLogButton()}\n          />\n          <Flex direction={{ default: 'column' }}>\n            <FlexItem>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                className={paddingLeftClassName}\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>Red Hat Enterprise Linux</TabTitleText>}\n                >\n                  <Main>\n                    <BundlePageBehaviorGroupContent\n                      applications={getInitialApplications}\n                      bundle={props.bundleTabs[0]}\n                    />\n                  </Main>\n                </Tab>\n                <Tab eventKey={1} title={<TabTitleText>Console</TabTitleText>}>\n                  <Main>\n                    <BundlePageBehaviorGroupContent\n                      applications={getInitialApplications}\n                      bundle={props.bundleTabs[1]}\n                    />\n                  </Main>\n                </Tab>\n                <Tab\n                  eventKey={2}\n                  title={<TabTitleText>Openshift</TabTitleText>}\n                >\n                  <Main>\n                    <BundlePageBehaviorGroupContent\n                      applications={getInitialApplications}\n                      bundle={props.bundleTabs[2]}\n                    />\n                  </Main>\n                </Tab>\n              </Tabs>\n            </FlexItem>\n          </Flex>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <PageHeader\n            title={`${Messages.pages.notifications.list.title} | ${props.bundle.displayName}`}\n            subtitle={\n              <span>\n                This service allows you to configure which notifications\n                different users within your organization will be entitled to\n                receiving. To do this, create behavior groups and apply them to\n                different events. Users will be able to opt-in or out of\n                receiving authorized event notifications in their\n                <a\n                  href={localUrl(\n                    `/user-preferences/notifications/${props.bundle.name}`,\n                    getInsights().chrome.isBeta()\n                  )}\n                >\n                  {' '}\n                  User Preferences\n                </a>\n                .\n              </span>\n            }\n            action={eventLogButton()}\n          />\n\n          <TabComponent\n            configuration={props.children}\n            settings={props.children}\n          >\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>Configuration</TabTitleText>}\n            >\n              {mainPage}\n            </Tab>\n            <Tab eventKey={1} title={<TabTitleText>Settings</TabTitleText>}>\n              {timeConfigPage}\n            </Tab>\n          </TabComponent>\n        </>\n      );\n    }\n  };\n","import { useFlag } from '@unleash/proxy-client-react';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { AppSkeleton } from '../../../app/AppSkeleton';\nimport { useGetApplicationsLazy } from '../../../services/Notifications/GetApplications';\nimport { useGetBundles } from '../../../services/Notifications/GetBundles';\nimport { Facet } from '../../../types/Notification';\nimport { NotificationListBundlePage } from './BundlePage';\n\nenum BundleStatus {\n  LOADING,\n  NOT_FOUND,\n  FAILED_TO_LOAD,\n}\n\nconst isBundleStatus = (bundle: Facet | BundleStatus): bundle is BundleStatus =>\n  typeof bundle === 'number';\n\nexport const NotificationsListPage: React.FunctionComponent = () => {\n  const navigate = useNavigate();\n  const params = useParams<Record<string, string | undefined>>();\n  const notificationsOverhaul = useFlag('platform.notifications.overhaul');\n  const bundleList = ['rhel', 'console', 'openshift'];\n\n  const bundleName = useMemo(\n    () => (notificationsOverhaul ? 'rhel' : params.bundleName),\n    [notificationsOverhaul, params.bundleName]\n  );\n\n  const getBundles = useGetBundles();\n  const getApplications = useGetApplicationsLazy();\n\n  const bundle: Facet | BundleStatus = useMemo(() => {\n    if (getBundles.payload?.status === 200) {\n      return (\n        getBundles.payload.value.find((b) => b.name === bundleName) ??\n        BundleStatus.NOT_FOUND\n      );\n    } else if (getBundles.payload) {\n      return BundleStatus.FAILED_TO_LOAD;\n    }\n\n    return BundleStatus.LOADING;\n  }, [getBundles.payload, bundleName]);\n\n  const bundleTabs: Facet[] | BundleStatus = [];\n\n  const getbundleTabs = () => {\n    if (getBundles.payload?.status === 200) {\n      bundleList.forEach((bundle) => {\n        if (getBundles.payload?.value) {\n          bundleTabs.push(\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (getBundles.payload.value as any).find((b) => b.name === bundle) ??\n              BundleStatus.NOT_FOUND\n          );\n        }\n      });\n    } else if (getBundles.payload) {\n      throw new Error('Unable to load bundle information');\n    } else {\n      return <AppSkeleton />;\n    }\n  };\n\n  if (notificationsOverhaul) {\n    getbundleTabs();\n  }\n\n  React.useEffect(() => {\n    const query = getApplications.query;\n    if (!isBundleStatus(bundle)) {\n      query(bundle.name);\n    }\n  }, [bundle, getApplications.query]);\n\n  const applications: Array<Facet> | null | undefined = useMemo(() => {\n    if (getApplications.payload) {\n      return getApplications.payload.status === 200\n        ? getApplications.payload.value\n        : null;\n    }\n\n    return undefined;\n  }, [getApplications.payload]);\n\n  if (bundle === BundleStatus.NOT_FOUND) {\n    if (bundleName === '/rhel') {\n      throw new Error('Default bundle information not found');\n    }\n\n    navigate('/notifications/rhel');\n    return <React.Fragment />;\n  }\n\n  if (bundle === BundleStatus.FAILED_TO_LOAD) {\n    throw new Error('Unable to load bundle information');\n  }\n\n  if (applications === null) {\n    throw new Error('Unable to load application facets');\n  }\n\n  if (bundle === BundleStatus.LOADING || !applications) {\n    return <AppSkeleton />;\n  }\n\n  return (\n    <NotificationListBundlePage\n      bundleTabs={bundleTabs}\n      bundle={bundle}\n      applications={applications}\n    />\n  );\n};\n","import {\n  DatePicker,\n  DatePickerRef,\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  Split,\n  SplitItem,\n  TextInputProps,\n} from '@patternfly/react-core';\nimport { important } from 'csx';\nimport { add, format, isAfter, isBefore, min, parseISO } from 'date-fns';\nimport produce from 'immer';\nimport React, { useMemo, useState } from 'react';\nimport { Dispatch, useRef } from 'react';\nimport { SetStateAction } from 'react';\nimport { style } from 'typestyle';\n\nimport { EventPeriod } from '../../../types/Event';\n\nexport enum NotificationsLogDateFilterValue {\n  TODAY = 'today',\n  YESTERDAY = 'yesterday',\n  LAST_7 = 'last_7',\n  LAST_14 = 'last_14',\n  CUSTOM = 'custom',\n}\n\nconst labels: Record<NotificationsLogDateFilterValue, string> = {\n  [NotificationsLogDateFilterValue.TODAY]: 'Today',\n  [NotificationsLogDateFilterValue.YESTERDAY]: 'Yesterday',\n  [NotificationsLogDateFilterValue.LAST_7]: 'Last 7 days',\n  [NotificationsLogDateFilterValue.LAST_14]: 'Last 14 days',\n  [NotificationsLogDateFilterValue.CUSTOM]: 'Custom',\n};\n\nconst datePickerClassName = style({\n  backgroundColor: important('var(-pf-v5-global--BackgroundColor--100)'),\n  cursor: 'pointer',\n  $nest: {\n    '&::placeholder': {\n      color: important('var(--pf-v5-global--palette--black-1000)'),\n    },\n    '&:hover': {\n      borderBottomColor: 'var(--pf-v5-global--active-color--100)',\n    },\n  },\n});\n\nclass EventLogSelectObject implements SelectOptionObject {\n  readonly value: NotificationsLogDateFilterValue;\n\n  constructor(value: NotificationsLogDateFilterValue) {\n    this.value = value;\n  }\n\n  toString(): string {\n    return labels[this.value];\n  }\n  compareTo(selectOption: unknown): boolean {\n    if (selectOption instanceof EventLogSelectObject) {\n      return selectOption.value === this.value;\n    }\n\n    return false;\n  }\n}\n\nconst dateInputProps: TextInputProps = {\n  isReadOnly: true,\n  className: datePickerClassName,\n};\n\ninterface CustomDateFilterProps {\n  retentionDays: number;\n  period: EventPeriod;\n  setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n}\n\nconst startRangeValidators = (minDate, maxDate, period) => [\n  (date) => {\n    if (isBefore(date, minDate)) {\n      return 'Date is before the retention policy';\n    } else if (isAfter(date, maxDate)) {\n      return 'Date is after today';\n    } else if (period[1] && isAfter(date, period[1])) {\n      return 'Start date must be before end date';\n    }\n\n    return '';\n  },\n];\n\nconst endRangeValidators = (minDate, maxDate, period) => [\n  (date) => {\n    if (isBefore(date, minDate)) {\n      return 'Date is before the retention policy';\n    } else if (isAfter(date, maxDate)) {\n      return 'Date is after today';\n    } else if (period[0] && isBefore(date, period[0])) {\n      return 'End date must be after start date';\n    }\n\n    return '';\n  },\n];\n\nconst CustomDateFilter: React.FunctionComponent<CustomDateFilterProps> = ({\n  period,\n  setPeriod,\n}) => {\n  const maxDate = useMemo(() => new Date(), []);\n  const minDate = useMemo(\n    () =>\n      add(maxDate, {\n        days: -14,\n      }),\n    [maxDate]\n  );\n\n  const formatPeriod = (period: Date | undefined) =>\n    period ? format(period, 'yyyy-MM-dd') : undefined;\n\n  const startValue: string | undefined = formatPeriod(period[0]);\n  const endValue: string | undefined = formatPeriod(period[1]);\n\n  const startDateRef = useRef<DatePickerRef>(null);\n  const endDateRef = useRef<DatePickerRef>(null);\n\n  return (\n    <Split>\n      <SplitItem>\n        <DatePicker\n          placeholder=\"Start\"\n          inputProps={{\n            ...dateInputProps,\n            onClick: () => startDateRef.current?.setCalendarOpen(true),\n          }}\n          validators={startRangeValidators(minDate, maxDate, period)}\n          onChange={(start: string) => {\n            const startDate = parseISO(start);\n            setPeriod(\n              produce((draft) => {\n                draft[0] = startDate;\n                if (!draft[1]) {\n                  draft[1] = min([add(startDate, { days: 1 }), maxDate]);\n                }\n              })\n            );\n          }}\n          value={startValue}\n          ref={startDateRef}\n        />\n      </SplitItem>\n      <SplitItem className=\"pf-v5-u-align-self-center pf-v5-u-px-sm pf-v5-u-color-300\">\n        to\n      </SplitItem>\n      <SplitItem>\n        <DatePicker\n          placeholder=\"End\"\n          inputProps={{\n            ...dateInputProps,\n            onClick: () => endDateRef.current?.setCalendarOpen(true),\n          }}\n          validators={endRangeValidators(minDate, maxDate, period)}\n          onChange={(end: string) => {\n            setPeriod(\n              produce((draft) => {\n                draft[1] = parseISO(end);\n              })\n            );\n          }}\n          value={endValue}\n          ref={endDateRef}\n        />\n      </SplitItem>\n    </Split>\n  );\n};\n\nexport interface NotificationsLogDateFilterProps {\n  value: NotificationsLogDateFilterValue;\n  setValue: (value: NotificationsLogDateFilterValue) => void;\n  retentionDays: number;\n  period: EventPeriod;\n  setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n}\n\nexport const NotificationsLogDateFilter: React.FunctionComponent<NotificationsLogDateFilterProps> =\n  ({ value, setValue, period, setPeriod, retentionDays }) => {\n    const [isOpen, setOpen] = useState(false);\n    const val = useMemo(() => new EventLogSelectObject(value), [value]);\n\n    return (\n      <Split>\n        <SplitItem>\n          <Select\n            isOpen={isOpen}\n            variant={SelectVariant.single}\n            onToggle={() => setOpen((prev) => !prev)}\n            selections={val}\n            onSelect={(\n              _e: unknown,\n              selectObject: SelectOptionObject | string\n            ) => {\n              if (selectObject instanceof EventLogSelectObject) {\n                setValue(selectObject.value);\n                setOpen(false);\n              }\n            }}\n          >\n            {Object.values(NotificationsLogDateFilterValue).map((v) => (\n              <SelectOption key={v} value={new EventLogSelectObject(v)} />\n            ))}\n          </Select>\n        </SplitItem>\n        {value === NotificationsLogDateFilterValue.CUSTOM && (\n          <SplitItem>\n            <CustomDateFilter\n              period={period}\n              setPeriod={setPeriod}\n              retentionDays={retentionDays}\n            />\n          </SplitItem>\n        )}\n      </Split>\n    );\n  };\n","import {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst NotificationsLogEmptyState = () => {\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          No results found\n        </Title>\n        <EmptyStateBody>Clear all filters and try again.</EmptyStateBody>\n        <Button variant=\"link\">Clear all filters</Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default NotificationsLogEmptyState;\n","import { Pagination } from '@patternfly/react-core';\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  ThProps,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport React from 'react';\n\nimport NotificationsLogEmptyState from './NotificationsLogEmptyState';\n\nexport type DirectionType = 'asc' | 'desc';\n\nexport type OnSort = (index: number, direction: DirectionType) => void;\n\nexport type SortType = {\n  columnIndex: number;\n  direction: DirectionType;\n};\n\nexport type PaginationType = {\n  limit: number;\n  offset: number;\n  count: number;\n};\n\nexport type OnPagination = (pagnation: Omit<PaginationType, 'count'>) => void;\n\nexport type DrawerType = {\n  id: string;\n  description: string;\n  title: string;\n  created: string;\n  read: boolean;\n  source: string;\n}[];\n\nconst NotificationsLogTable = ({\n  isEmptyState,\n  onSort,\n  sort,\n  drawer,\n  onPagination,\n  pagination,\n}: {\n  isEmptyState: boolean;\n  onSort: OnSort;\n  sort: SortType;\n  drawer: DrawerType;\n  onPagination: OnPagination;\n  pagination: PaginationType;\n}) => {\n  const getSortParams = (columnIndex: number): ThProps['sort'] => ({\n    sortBy: {\n      index: sort.columnIndex,\n      direction: sort.direction,\n      defaultDirection: 'asc',\n    },\n    onSort: (_event, index, direction) => {\n      onSort(index, direction);\n    },\n    columnIndex,\n  });\n\n  return (\n    <React.Fragment>\n      <TableComposable>\n        <Thead>\n          <Tr>\n            <Th sort={getSortParams(0)}>Event type</Th>\n            <Th>Service</Th>\n            <Th sort={getSortParams(2)}>Timestamp</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {isEmptyState ? (\n            <Tr>\n              <Td colSpan={8}>\n                <NotificationsLogEmptyState />\n              </Td>\n            </Tr>\n          ) : (\n            <React.Fragment>\n              {drawer.map((data) => (\n                <Tr key={data.id}>\n                  <Td>{data.title}</Td>\n                  <Td>{data.source}</Td>\n                  <Td>{data.created}</Td>\n                </Tr>\n              ))}\n            </React.Fragment>\n          )}\n        </Tbody>\n      </TableComposable>\n      <Pagination\n        itemCount={pagination.count}\n        perPage={pagination.limit}\n        page={pagination.offset / pagination.limit + 1}\n        onSetPage={(_ev, newPage, perPage) => {\n          onPagination({\n            limit: perPage ?? pagination.limit,\n            offset: (newPage - 1) * (perPage ?? pagination.limit),\n          });\n        }}\n        widgetId=\"pagination-id\"\n        onPerPageSelect={(_ev, perPage) => {\n          onPagination({\n            limit: perPage ?? pagination.limit,\n            offset: 0,\n          });\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default NotificationsLogTable;\n","import {\n  Divider,\n  Icon,\n  MenuToggle,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { Pagination } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport React, { Dispatch, SetStateAction } from 'react';\n\nimport { EventPeriod } from '../../../types/Event';\nimport {\n  NotificationsLogDateFilter,\n  NotificationsLogDateFilterValue,\n} from './NotificationsLogDateFilter';\n\nconst NotificationsLogToolbar: React.FC<{\n  retentionDays: number;\n  period: EventPeriod;\n  setPeriod: Dispatch<SetStateAction<EventPeriod>>;\n  onPagination: (pagination: { limit: number; offset: number }) => void;\n  pagination: { limit: number; offset: number; count: number };\n  dateFilter: NotificationsLogDateFilterValue;\n  setDateFilter: (value: NotificationsLogDateFilterValue) => void;\n}> = ({ onPagination, pagination, ...props }) => {\n  return (\n    <React.Fragment>\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarItem>\n            <MenuToggle\n              icon={\n                <Icon>\n                  <FilterIcon />\n                </Icon>\n              }\n            >\n              Event\n            </MenuToggle>\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarItem>\n            <NotificationsLogDateFilter\n              value={props.dateFilter}\n              setValue={props.setDateFilter}\n              retentionDays={props.retentionDays}\n              setPeriod={props.setPeriod}\n              period={props.period}\n            />\n          </ToolbarItem>\n          <ToolbarItem className=\"pf-u-ml-auto\">\n            <Pagination\n              itemCount={pagination.count}\n              perPage={pagination.limit}\n              page={pagination.offset / pagination.limit + 1}\n              onSetPage={(_ev, newPage, perPage) => {\n                onPagination({\n                  limit: perPage ?? pagination.limit,\n                  offset: (newPage - 1) * (perPage ?? pagination.limit),\n                });\n              }}\n              widgetId=\"pagination-id\"\n              onPerPageSelect={(_ev, perPage) => {\n                onPagination({\n                  limit: perPage ?? pagination.limit,\n                  offset: 0,\n                });\n              }}\n              isCompact\n            />\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n    </React.Fragment>\n  );\n};\n\nexport default NotificationsLogToolbar;\n","import { Card } from '@patternfly/react-core';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  Filter,\n  Operator,\n  toUtc,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { format, sub, toDate } from 'date-fns';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { NotificationsLogDateFilterValue } from '../../../components/Notifications/NotificationsLog/NotificationsLogDateFilter';\nimport NotificationsLogTable, {\n  DrawerType,\n  PaginationType,\n} from '../../../components/Notifications/NotificationsLog/NotificationsLogTable';\nimport NotificationsLogToolbar from '../../../components/Notifications/NotificationsLog/NotificationsLogToolbar';\nimport { PageHeader } from '../../../components/PageHeader';\nimport { Messages } from '../../../properties/Messages';\n\nexport type NotificationsPeriod = [Date | undefined, Date | undefined];\n\nconst sortMapper = {\n  0: 'title',\n  2: 'time',\n};\n\nconst RETENTION_DAYS = 14;\n\nconst filterPeriodMapper = (dateFilter) => {\n  const today = toUtc(new Date());\n  const yesterday = sub(toDate(today), {\n    days: 1,\n  });\n  return {\n    [NotificationsLogDateFilterValue.LAST_14]: [\n      sub(toDate(today), {\n        days: 14,\n      }),\n      today,\n    ],\n    [NotificationsLogDateFilterValue.LAST_7]: [\n      sub(toDate(today), {\n        days: 7,\n      }),\n      today,\n    ],\n    [NotificationsLogDateFilterValue.TODAY]: [today, today],\n    [NotificationsLogDateFilterValue.YESTERDAY]: [yesterday, yesterday],\n  }[dateFilter];\n};\n\nconst createFilter = (dateFilter, period) => {\n  const filterPeriod = [undefined, undefined] as [\n    Date | undefined,\n    Date | undefined\n  ];\n  const DATE_FORMAT = 'yyyy-MM-dd';\n  const filter = new Filter();\n\n  filterPeriodMapper(dateFilter) || period;\n\n  if (filterPeriod[0] && filterPeriod[1]) {\n    filter.and('start', Operator.EQUAL, format(filterPeriod[0], DATE_FORMAT));\n    filter.and('end', Operator.EQUAL, format(filterPeriod[1], DATE_FORMAT));\n  }\n\n  return {\n    startDate: filterPeriod[0]\n      ? format(filterPeriod[0], DATE_FORMAT)\n      : undefined,\n    endDate: filterPeriod[1] ? format(filterPeriod[1], DATE_FORMAT) : undefined,\n  };\n};\n\nexport const NotificationsLogPage: React.FunctionComponent = () => {\n  const [data, setData] = useState<DrawerType>([]);\n  const [period, setPeriod] = useState<NotificationsPeriod>([\n    undefined,\n    undefined,\n  ]);\n  const [dateFilter, setDateFilter] = useState<NotificationsLogDateFilterValue>(\n    NotificationsLogDateFilterValue.LAST_14\n  );\n  const [pagination, setPagination] = useState<PaginationType>({\n    offset: 0,\n    limit: 20,\n    count: 0,\n  });\n  const [sort, setSort] = useState<{\n    columnIndex: number;\n    direction: 'asc' | 'desc';\n  }>({\n    columnIndex: 2,\n    direction: 'desc',\n  });\n\n  const filterBuilder = useMemo(\n    () => createFilter(dateFilter, period),\n    [dateFilter, period[0]?.toString(), period[1]?.toString()]\n  );\n\n  //TODO: use new JS client instead of directly calling fetch\n  const callApi = useCallback((pagination, sort, filterBuilder) => {\n    const search = new URLSearchParams({\n      offset: `${pagination.offset}`,\n      limit: `${pagination.limit}`,\n      sort_by: `${sortMapper[sort.columnIndex]}:${sort.direction}`,\n    });\n\n    if (filterBuilder.startDate) {\n      search.append('startDate', filterBuilder.startDate + 'T00:00:00');\n    }\n\n    if (filterBuilder.endDate) {\n      search.append('endDate', filterBuilder.endDate + 'T23:59:59');\n    }\n\n    fetch(`/api/notifications/v1/notifications/drawer?${search.toString()}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        return response.json();\n      })\n      .then((response) => {\n        setData(response.data);\n        setPagination((prevState) => ({\n          ...prevState,\n          count: response.meta.count,\n        }));\n      })\n      .catch((error) => {\n        console.error('Error while fetching data: ', error);\n      });\n  }, []);\n\n  useEffect(() => {\n    callApi(pagination, sort, filterBuilder);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dateFilter, period[0]?.toString(), period[1]?.toString()]);\n\n  return (\n    <React.Fragment>\n      <PageHeader\n        title={Messages.pages.notifications.notificationsLog.title}\n        subtitle={Messages.pages.notifications.notificationsLog.subtitle}\n      />\n      <Main>\n        <Card>\n          <NotificationsLogToolbar\n            pagination={pagination}\n            onPagination={({ limit, offset }) => {\n              setPagination((prevState) => ({ ...prevState, offset, limit }));\n              callApi({ limit, offset }, sort, filterBuilder);\n            }}\n            dateFilter={dateFilter}\n            setDateFilter={setDateFilter}\n            retentionDays={RETENTION_DAYS}\n            period={period}\n            setPeriod={setPeriod}\n          />\n          <NotificationsLogTable\n            isEmptyState={data.length === 0}\n            sort={sort}\n            onSort={(index, direction) => {\n              setSort({\n                columnIndex: index,\n                direction,\n              });\n              callApi(\n                pagination,\n                {\n                  columnIndex: index,\n                  direction,\n                },\n                filterBuilder\n              );\n            }}\n            drawer={data}\n            pagination={pagination}\n            onPagination={({ limit, offset }) => {\n              setPagination((prevState) => ({ ...prevState, offset, limit }));\n              callApi({ limit, offset }, sort, filterBuilder);\n            }}\n          />\n        </Card>\n      </Main>\n    </React.Fragment>\n  );\n};\n","import {\n  Button,\n  DataListAction,\n  DataListCell,\n  DataListContent,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  DataListToggle,\n  Divider,\n  Flex,\n  FlexItem,\n  Icon,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  BellIcon,\n  IntegrationIcon,\n  RunningIcon,\n  UserIcon,\n  UsersIcon,\n} from '@patternfly/react-icons';\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport enum IconName {\n  USER = 'user',\n  RUNNING = 'running',\n  INTEGRATION = 'integration',\n  USERS = 'users',\n  BELL = 'bell',\n}\n\ninterface CustomDataListItemProps {\n  icon: IconName;\n  heading: string;\n  linkTitle?: string;\n  linkTarget?: string;\n  expandableContent: string;\n  isRedirect?: boolean;\n}\n\nconst CustomDataListItem: React.FC<CustomDataListItemProps> = ({\n  icon,\n  heading,\n  linkTitle,\n  linkTarget,\n  expandableContent,\n  isRedirect,\n}) => {\n  const navigate = useNavigate();\n  let iconElement: React.ReactNode = null;\n  const [expanded, setExpanded] = React.useState(false);\n\n  switch (icon) {\n    case IconName.USER:\n      iconElement = <UserIcon className=\"pf-u-primary-color-100\" />;\n      break;\n    case IconName.RUNNING:\n      iconElement = <RunningIcon className=\"pf-u-primary-color-100\" />;\n      break;\n    case IconName.INTEGRATION:\n      iconElement = <IntegrationIcon className=\"pf-u-primary-color-100\" />;\n      break;\n    case IconName.USERS:\n      iconElement = <UsersIcon className=\"pf-u-primary-color-100\" />;\n      break;\n    case IconName.BELL:\n      iconElement = <BellIcon className=\"pf-u-primary-color-100\" />;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <React.Fragment>\n      <DataListItem aria-labelledby=\"item1\" isExpanded={expanded}>\n        <DataListItemRow className=\"pf-u-align-items-center\">\n          <DataListToggle\n            isExpanded={expanded}\n            id=\"toggle1\"\n            aria-controls=\"expand1\"\n            onClick={() => setExpanded(!expanded)}\n          />\n          <DataListItemCells\n            dataListCells={[\n              <DataListCell key={'cell-' + icon.toString().toLowerCase()}>\n                <div>\n                  <Flex className=\"pf-u-flex-nowrap\">\n                    <FlexItem className=\"pf-u-align-self-center\">\n                      <Icon size=\"lg\">{iconElement}</Icon>\n                    </FlexItem>\n                    <Divider\n                      orientation={{\n                        default: 'vertical',\n                      }}\n                    />\n                    <FlexItem className=\"pf-u-align-self-center\">\n                      <Title headingLevel=\"h4\">{heading}</Title>\n                    </FlexItem>\n                  </Flex>\n                </div>\n              </DataListCell>,\n            ]}\n          />\n          {linkTitle && linkTarget && (\n            <DataListAction\n              aria-labelledby=\"item1 action1\"\n              id=\"action1\"\n              aria-label=\"Actions\"\n              isPlainButtonAction\n            >\n              <Button\n                component=\"a\"\n                href={linkTarget}\n                variant=\"link\"\n                onClick={(e) => {\n                  if (!isRedirect) {\n                    e.preventDefault();\n                    navigate(linkTarget.replace('/preview', ''));\n                  }\n                }}\n              >\n                {linkTitle}\n              </Button>\n            </DataListAction>\n          )}\n        </DataListItemRow>\n        <DataListContent\n          aria-label={heading + ' - Detailed Explanation'}\n          id=\"expand1\"\n          isHidden={!expanded}\n        >\n          <p>{expandableContent}</p>\n        </DataListContent>\n      </DataListItem>\n    </React.Fragment>\n  );\n};\n\nexport default CustomDataListItem;\n","import {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Icon,\n  Label,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  ArrowRightIcon,\n  ExternalLinkAltIcon,\n  RunningIcon,\n  UserIcon,\n} from '@patternfly/react-icons';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PageHeaderTitle from '@redhat-cloud-services/frontend-components/PageHeader/PageHeaderTitle';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport notificationsProductIcon from '../../../assets/icons/notifications-product-icon.svg';\nimport CustomDataListItem, { IconName } from './CustomDataListItem';\n\n// eslint-disable-next-line max-len\nconst LEARN_MORE =\n  'https://access.redhat.com/documentation/en-us/red_hat_hybrid_cloud_console/2023/html/configuring_notifications_on_the_red_hat_hybrid_cloud_console/index';\n// eslint-disable-next-line max-len\nconst CONFIGURE_INTEGRATIONS =\n  'https://access.redhat.com/documentation/en-us/red_hat_hybrid_cloud_console/2023/html/configuring_notifications_on_the_red_hat_hybrid_cloud_console/assembly-intro_notifications';\n// eslint-disable-next-line max-len\nconst CONFIGURE_SOURCES =\n  'https://access.redhat.com/documentation/en-us/red_hat_hybrid_cloud_console/2023/html/configuring_sources_for_red_hat_services/index';\n\nexport const NotificationsOverviewPage: React.FunctionComponent = () => {\n  const navigate = useNavigate();\n  const isSourcesIntegrations = useFlag('platform.sources.integrations');\n  const [isOrgAdmin, setIsOrgAdmin] = React.useState(null);\n  const { auth, isBeta, getBundle } = useChrome();\n  const notificationsOverhaul = useFlag('platform.notifications.overhaul');\n  React.useEffect(() => {\n    const getUser = async () => {\n      const {\n        identity: { user },\n      }: // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      any = await auth.getUser();\n      setIsOrgAdmin(user.is_org_admin);\n    };\n\n    if (auth) {\n      getUser();\n    }\n  }, [auth]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Flex className=\"pf-u-flex-nowrap\">\n          <FlexItem>\n            <img src={notificationsProductIcon} />\n          </FlexItem>\n          <Divider\n            orientation={{\n              default: 'vertical',\n            }}\n          />\n          <FlexItem className=\"pf-u-align-self-flex-start\">\n            <PageHeaderTitle title=\"Notifications\" className=\"pf-u-mb-sm\" />\n            <p className=\"pf-u-mb-sm\">\n              A standardized way of notifying users of events for supported\n              services on the Hybrid Cloud Console.\n            </p>\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main>\n        {isOrgAdmin ? (\n          <React.Fragment>\n            <Card className=\"pf-u-mb-lg\">\n              <Grid hasGutter>\n                <GridItem sm={12} md={6} lg={8}>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\">\n                      Manage events for your organization\n                    </Title>\n                  </CardTitle>\n                  <CardBody>\n                    <p>\n                      This service allows you to configure which notifications\n                      different users within your organization will be entitled\n                      to receiving. To do this, create behavior groups and apply\n                      them to different events. Users will be able to opt-in or\n                      out of receiving authorized event notifications in their{' '}\n                      <a\n                        href={`${\n                          isBeta() ? '/preview' : ''\n                        }/${getBundle()}/notifications/user-preferences`}\n                        onClick={(e) => {\n                          e.preventDefault();\n                          navigate(\n                            `/${getBundle()}/notifications/user-preferences`\n                          );\n                        }}\n                      >\n                        User Preferences\n                      </a>\n                      .\n                    </p>\n                  </CardBody>\n                  <CardFooter>\n                    <Button\n                      variant=\"primary\"\n                      component=\"a\"\n                      href={`${\n                        isBeta() ? '/preview' : ''\n                      }/${getBundle()}/notifications/configure-events`}\n                      isLarge\n                      onClick={(e) => {\n                        e.preventDefault();\n                        navigate(\n                          `/${getBundle()}/notifications/configure-events`\n                        );\n                      }}\n                    >\n                      Configure events\n                    </Button>\n                  </CardFooter>\n                </GridItem>\n                <GridItem\n                  md={6}\n                  lg={4}\n                  className=\"pf-u-display-none pf-u-display-block-on-md pf-c-card__cover-image\"\n                ></GridItem>\n              </Grid>\n            </Card>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <Title headingLevel=\"h2\" className=\"pf-u-mb-md\">\n              Get started with Notifications on the Hybrid Cloud Console\n            </Title>\n            <Grid hasGutter className=\"pf-u-mb-lg\">\n              <GridItem sm={12} md={6}>\n                <Card className=\"pf-u-h-100\">\n                  <CardTitle>\n                    <Flex className=\"pf-u-flex-nowrap\">\n                      <FlexItem>\n                        <Icon size=\"lg\">\n                          <UserIcon className=\"pf-u-primary-color-100\" />\n                        </Icon>\n                      </FlexItem>\n                      <FlexItem>\n                        <Title headingLevel=\"h2\">\n                          Manage your own notifications with My User Preferences\n                        </Title>\n                      </FlexItem>\n                    </Flex>\n                  </CardTitle>\n                  <CardBody>\n                    <p>\n                      This service allows you to opt-in and out of receiving\n                      notifications. Your Organization Administrator has\n                      configured which notifications you can or can not receive\n                      in their Settings.\n                    </p>\n                  </CardBody>\n                  <CardFooter>\n                    <Button\n                      variant=\"primary\"\n                      isLarge\n                      component=\"a\"\n                      href={`${\n                        isBeta() ? '/preview' : ''\n                      }/${getBundle()}/notifications/user-preferences`}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        navigate(\n                          `/${getBundle()}/notifications/user-preferences`\n                        );\n                      }}\n                    >\n                      Go to My User Preferencesss\n                    </Button>\n                  </CardFooter>\n                </Card>\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <Card className=\"pf-u-h-100\">\n                  <CardTitle>\n                    <Flex className=\"pf-u-flex-nowrap\">\n                      <FlexItem>\n                        <Icon size=\"lg\">\n                          <RunningIcon className=\"pf-u-primary-color-100\" />\n                        </Icon>\n                      </FlexItem>\n                      <FlexItem>\n                        <Title headingLevel=\"h2\">\n                          Monitor all fired events with the Event log\n                        </Title>\n                      </FlexItem>\n                    </Flex>\n                  </CardTitle>\n                  <CardBody>\n                    <p>\n                      See all the events affecting your organization and view\n                      details around the events fired.\n                    </p>\n                  </CardBody>\n                  <CardFooter>\n                    {!notificationsOverhaul && (\n                      <Button\n                        variant=\"secondary\"\n                        isLarge\n                        component=\"a\"\n                        href={`${\n                          isBeta() ? '/preview' : ''\n                        }/${getBundle()}/notifications/user-preferences`}\n                        onClick={(e) => {\n                          e.preventDefault();\n                          navigate(`/${getBundle()}/notifications/eventlog`);\n                        }}\n                      >\n                        View Event log\n                      </Button>\n                    )}\n                  </CardFooter>\n                </Card>\n              </GridItem>\n            </Grid>\n          </React.Fragment>\n        )}\n\n        {isOrgAdmin ? (\n          <React.Fragment>\n            <Title headingLevel=\"h2\" className=\"pf-u-mb-md\">\n              Supporting features\n            </Title>\n\n            <DataList\n              aria-label=\"Supporting features list\"\n              className=\"pf-u-mb-lg\"\n            >\n              <CustomDataListItem\n                icon={IconName.USER}\n                heading=\"Manage your own notifications with My User Preferences\"\n                linkTitle=\"Go to My User Preferences\"\n                linkTarget={`${\n                  isBeta() ? '/preview' : ''\n                }/${getBundle()}/notifications/user-preferences`}\n                expandableContent=\"This service allows you to opt-in and out of receiving notifications. Your Organization\n                            Administrator has configured which notifications you can or can not receive in their Settings.\"\n              />\n              <CustomDataListItem\n                icon={IconName.RUNNING}\n                heading=\"Monitor all fired events with the Event log\"\n                linkTitle=\"View Event log\"\n                linkTarget={`${\n                  isBeta() ? '/preview' : ''\n                }/${getBundle()}/notifications/eventlog `}\n                expandableContent=\"See all the events affecting your organization and view details around the events fired.\"\n              />\n              <CustomDataListItem\n                icon={IconName.INTEGRATION}\n                heading=\"Set up Integrations to customize your notifications\"\n                linkTitle=\"Set up Integrations\"\n                {...(isSourcesIntegrations && { isRedirect: true })}\n                linkTarget={\n                  isSourcesIntegrations\n                    ? `${\n                        isBeta() ? '/preview' : ''\n                      }/settings/sources?category=Integrations`\n                    : `${\n                        isBeta() ? '/preview' : ''\n                      }/${getBundle()}/notifications/integrations`\n                }\n                expandableContent=\"Notifications and integrations services work together to transmit messages to third-party application\n                    endpoints, such as instant messaging platforms and external ticketing systems, when triggering events occur. Integrations\n                    include Splunk, Slack, ServiceNow, and more.\"\n              />\n              <CustomDataListItem\n                icon={IconName.USERS}\n                heading=\"Create behavior groups to easily notify the right users\"\n                linkTitle=\"Create new behavior group\"\n                linkTarget={`${\n                  isBeta() ? '/preview' : ''\n                }/${getBundle()}/notifications/configure-events`}\n                expandableContent=\"Behavior groups are made up of action/recipient pairings that allow you to configure which notification\n                    actions different users will be able to receive. Once you've created a behavior group, you can assign it to an event. You\n                    may also prevent users from changing assigned actions by locking action/recipient pairings when creating or editing behavior\n                    groups.\"\n              />\n            </DataList>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <DataList\n              aria-label=\"Supporting features list\"\n              className=\"pf-u-mb-lg\"\n            >\n              <CustomDataListItem\n                icon={IconName.BELL}\n                heading=\"About Notifications\"\n                expandableContent=\"Notifications are a way for users to be alerted of important events that occur in the Hybrid Cloud\n                            Console. You can receive notifications within the console via the notifications drawer as well as through email and\n                            third-party integrations, such as Slack or ServiceNow.\"\n              />\n            </DataList>\n          </React.Fragment>\n        )}\n\n        <Title headingLevel=\"h2\" className=\"pf-u-mb-md\">\n          Recommended content\n        </Title>\n\n        {isOrgAdmin ? (\n          <React.Fragment>\n            <DataList\n              aria-label=\"Recommended content list\"\n              className=\"pf-u-mb-lg\"\n            >\n              <DataListItem>\n                <DataListItemRow>\n                  <DataListItemCells\n                    dataListCells={[\n                      <DataListCell key=\"row1-col1\">\n                        <span>Configuring notifications and integrations</span>\n                      </DataListCell>,\n                      <DataListCell key=\"row1-col2\">\n                        <Label color=\"orange\">Documentation</Label>\n                      </DataListCell>,\n                      <DataListCell alignRight isFilled={false} key=\"row1-col3\">\n                        <a\n                          href={LEARN_MORE}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            window.open(LEARN_MORE, '_blank');\n                          }}\n                        >\n                          View documentation <ExternalLinkAltIcon />\n                        </a>\n                      </DataListCell>,\n                    ]}\n                  />\n                </DataListItemRow>\n              </DataListItem>\n              <DataListItem>\n                <DataListItemRow>\n                  <DataListItemCells\n                    dataListCells={[\n                      <DataListCell key=\"row2-col1\">\n                        <span>Configuring integrations and events</span>\n                      </DataListCell>,\n                      <DataListCell key=\"row2-col2\">\n                        <Label color=\"orange\">Documentation</Label>\n                      </DataListCell>,\n                      <DataListCell alignRight isFilled={false} key=\"row2-col3\">\n                        <a\n                          href={CONFIGURE_INTEGRATIONS}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            window.open(CONFIGURE_INTEGRATIONS, '_blank');\n                          }}\n                        >\n                          View documentation <ExternalLinkAltIcon />\n                        </a>\n                      </DataListCell>,\n                    ]}\n                  />\n                </DataListItemRow>\n              </DataListItem>\n              <DataListItem>\n                <DataListItemRow>\n                  <DataListItemCells\n                    dataListCells={[\n                      <DataListCell key=\"row3-col1\">\n                        <span>Restricting access to a service to a team</span>\n                      </DataListCell>,\n                      <DataListCell key=\"row3-col2\">\n                        <Label color=\"green\">Quick start</Label>\n                      </DataListCell>,\n                      <DataListCell alignRight isFilled={false} key=\"row3-col3\">\n                        <a\n                          href={`${\n                            isBeta() ? '/preview' : ''\n                          }/iam/my-user-access?bundle=rhel&quickstart=rbac-admin-vuln-permissions`}\n                        >\n                          Begin Quick start <ArrowRightIcon />\n                        </a>\n                      </DataListCell>,\n                    ]}\n                  />\n                </DataListItemRow>\n              </DataListItem>\n            </DataList>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <DataList\n              aria-label=\"Recommended content list\"\n              className=\"pf-u-mb-lg\"\n            >\n              <DataListItem>\n                <DataListItemRow>\n                  <DataListItemCells\n                    dataListCells={[\n                      <DataListCell key=\"row1-col1\">\n                        <span>Configuring notifications and integrations</span>\n                      </DataListCell>,\n                      <DataListCell key=\"row1-col2\">\n                        <Label color=\"orange\">Documentation</Label>\n                      </DataListCell>,\n                      <DataListCell alignRight isFilled={false} key=\"row1-col3\">\n                        <a\n                          href={CONFIGURE_INTEGRATIONS}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            window.open(CONFIGURE_INTEGRATIONS, '_blank');\n                          }}\n                        >\n                          View documentation <ExternalLinkAltIcon />\n                        </a>\n                      </DataListCell>,\n                    ]}\n                  />\n                </DataListItemRow>\n              </DataListItem>\n              <DataListItem>\n                <DataListItemRow>\n                  <DataListItemCells\n                    dataListCells={[\n                      <DataListCell key=\"row2-col1\">\n                        <span>\n                          Configuring integrations for Red Hat services\n                        </span>\n                      </DataListCell>,\n                      <DataListCell key=\"row2-col2\">\n                        <Label color=\"orange\">Documentation</Label>\n                      </DataListCell>,\n                      <DataListCell alignRight isFilled={false} key=\"row2-col3\">\n                        <a\n                          href={CONFIGURE_SOURCES}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            window.open(CONFIGURE_SOURCES, '_blank');\n                          }}\n                        >\n                          View documentation <ExternalLinkAltIcon />\n                        </a>\n                      </DataListCell>,\n                    ]}\n                  />\n                </DataListItemRow>\n              </DataListItem>\n            </DataList>\n          </React.Fragment>\n        )}\n        <a\n          href={`${isBeta() ? '/preview' : ''}/settings/learning-resources`}\n          className=\"pf-u-mb-lg\"\n        >\n          View all Settings Learning Resources\n        </a>\n      </Main>\n    </React.Fragment>\n  );\n};\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport * as React from 'react';\nimport { Routes as DomRoutes, Navigate, Route } from 'react-router-dom';\n\nimport { CheckReadPermissions } from './components/CheckReadPermissions';\nimport { IntegrationsListPage } from './pages/Integrations/List/Page';\nimport { SplunkSetupPage } from './pages/Integrations/SplunkSetup/SplunkSetupPage';\nimport { EventLogPage } from './pages/Notifications/EventLog/EventLogPage';\nimport { NotificationsListPage } from './pages/Notifications/List/Page';\nimport { NotificationsLogPage } from './pages/Notifications/NotificationsLog/Page';\nimport { NotificationsOverviewPage } from './pages/Notifications/Overview/Page';\n\ninterface Path {\n  path: string;\n  component: React.ComponentType;\n}\n\nexport const linkTo = {\n  overview: () => '/',\n  configureEvents: () => '/configure-events',\n  integrations: () => '/settings/integrations',\n  notifications: (bundle: string) => `/${bundle}`,\n  eventLog: (bundle?: string) =>\n    `/eventlog${bundle ? `?bundle=${bundle}` : ''}`,\n  notificationsLog: () => '/notificationslog',\n  splunk: () => '/integrations/splunk-setup',\n};\n\nconst EmptyPage: React.FunctionComponent = () => {\n  const { getApp } = useChrome();\n  if (getApp() === 'integrations') {\n    return <IntegrationsListPage />;\n  }\n\n  return null;\n};\n\nconst legacyRoutes: Path[] = [\n  {\n    path: '/',\n    component: EmptyPage,\n  },\n  {\n    path: linkTo.integrations(),\n    component: IntegrationsListPage,\n  },\n  {\n    path: linkTo.eventLog(),\n    component: EventLogPage,\n  },\n  {\n    path: linkTo.notifications(':bundleName'),\n    component: NotificationsListPage,\n  },\n  {\n    path: linkTo.splunk(),\n    component: SplunkSetupPage,\n  },\n  {\n    path: linkTo.notificationsLog(),\n    component: NotificationsLogPage,\n  },\n];\n\nconst routesOverhaul: Path[] = [\n  {\n    path: linkTo.overview(),\n    component: NotificationsOverviewPage,\n  },\n  {\n    path: linkTo.integrations(),\n    component: IntegrationsListPage,\n  },\n  {\n    path: linkTo.configureEvents(),\n    component: NotificationsListPage,\n  },\n  {\n    path: linkTo.eventLog(),\n    component: EventLogPage,\n  },\n  {\n    path: linkTo.notificationsLog(),\n    component: NotificationsLogPage,\n  },\n];\n\nexport const Routes: React.FunctionComponent = () => {\n  const notificationsOverhaul = useFlag('platform.notifications.overhaul');\n\n  const pathRoutes = React.useMemo(\n    () => (notificationsOverhaul ? routesOverhaul : legacyRoutes),\n    [notificationsOverhaul]\n  );\n\n  return (\n    <DomRoutes>\n      {pathRoutes.map((pathRoute) => (\n        <Route\n          key={pathRoute.path}\n          path={pathRoute.path}\n          element={\n            <CheckReadPermissions>\n              <pathRoute.component />\n            </CheckReadPermissions>\n          }\n        />\n      ))}\n      {!notificationsOverhaul && (\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      )}\n    </DomRoutes>\n  );\n};\n","import './App.scss';\n\nimport { Switch } from '@patternfly/react-core';\nimport Maintenance from '@redhat-cloud-services/frontend-components/Maintenance';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport {\n  InsightsEnvDetector,\n  RenderIfTrue,\n  getInsights,\n  toUtc,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { NotificationsPortal } from '../components/Store/NotificationsPortal';\nimport { Routes } from '../Routes';\nimport { staging } from '../types/Environments';\nimport { ServerStatus } from '../types/Server';\nimport { AppContext } from './AppContext';\nimport { AppSkeleton } from './AppSkeleton';\nimport { RbacGroupContextProvider } from './rbac/RbacGroupContextProvider';\nimport { useApp } from './useApp';\n\nconst utcFormat = 'HH:mm';\nconst regularFormat = 'hh:mma';\nconst timezoneFormat = 'O';\n\nconst switchClassname = style({\n  padding: 8,\n});\n\nconst App: React.ComponentType = () => {\n  const { updateDocumentTitle } = useChrome();\n\n  updateDocumentTitle?.('Notifications');\n  const { rbac, server, isOrgAdmin } = useApp();\n  const insights = getInsights();\n  const [usingExperimental, setUsingExperimental] =\n    React.useState<boolean>(false);\n\n  const toggleExperimental = React.useCallback(\n    (isEnabled) => {\n      if (isEnabled) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (insights.chrome as any).getEnvironmentOriginal =\n          insights.chrome.getEnvironment;\n        insights.chrome.getEnvironment = () => 'ci';\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        insights.chrome.getEnvironment = (insights.chrome as any)\n          .getEnvironmentOriginal as typeof insights.chrome.getEnvironment;\n      }\n\n      setUsingExperimental(isEnabled);\n    },\n    [insights]\n  );\n\n  if (!rbac || !server) {\n    return <AppSkeleton />;\n  }\n\n  if (server.status === ServerStatus.MAINTENANCE) {\n    const utcStartTime = format(toUtc(server.from), utcFormat);\n    const utcEndTime = format(toUtc(server.to), utcFormat);\n    const startTime = format(server.from, regularFormat);\n    const endTime = format(server.to, regularFormat);\n    const timezone = format(server.to, timezoneFormat);\n\n    return (\n      <Maintenance\n        utcStartTime={utcStartTime}\n        utcEndTime={utcEndTime}\n        startTime={startTime}\n        endTime={endTime}\n        timeZone={timezone}\n      />\n    );\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        rbac,\n        server,\n        isOrgAdmin: !!isOrgAdmin,\n      }}\n    >\n      <RbacGroupContextProvider>\n        <NotificationsPortal />\n        <InsightsEnvDetector insights={insights} onEnvironment={staging}>\n          <RenderIfTrue>\n            <Switch\n              className={switchClassname}\n              isChecked={usingExperimental}\n              onChange={toggleExperimental}\n              labelOff=\"Enable experimental features\"\n              label=\"Disable experimental features\"\n            />\n          </RenderIfTrue>\n        </InsightsEnvDetector>\n        <Routes />\n      </RbacGroupContextProvider>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const useGetTimePreference = () => {\n  return useQuery(\n    Operations.OrgConfigResourceGetDailyDigestTimePreference.actionCreator()\n  );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport type SaveTimePrefActionsParams = {\n  body: string;\n};\n\nconst actionCreator = (params: SaveTimePrefActionsParams) => {\n  return Operations.OrgConfigResourceSaveDailyDigestTimePreference.actionCreator(\n    {\n      body: params.body,\n    }\n  );\n};\n\nexport const useUpdateTimePreference = () => {\n  return useMutation(actionCreator);\n};\n"],"names":["useGetBundles","includeApplications","initFetch","useQuery","getBundlesAction","AnyMain","props","store","useStore","NotAuthorizedPage","chrome","useChrome","bundleName","useParams","getBundles","bundles","useMemo","payload","status","value","find","b","name","location","useLocation","intl","useIntl","userPreferences","href","localUrl","isBeta","myUserAccess","serviceName","getApp","Config","formatMessage","pathname","linkTo","eventLog","title","displayName","description","PageHeader","Split","SplitItem","isFilled","paddingBottom","StackItem","NotAuthorized","CheckReadPermissions","rbac","hasReadPermissions","canReadIntegrationsEndpoints","canReadEvents","canReadNotifications","children","IntegrationsListPage","updateDocumentTitle","getBundle","notificationsOverhaul","useFlag","Section","className","Messages","Button","variant","component","Link","to","DOCUMENTATION_URL","OPEN_CASE_URL","SplunkSetupFinished","isSuccess","error","SplunkSetupFinishedSuccess","SplunkSetupFinishedFailure","EmptyState","EmptyStateIcon","icon","CheckCircleIcon","color","Title","headingLevel","size","EmptyStateBody","ExclamationCircleIcon","target","rel","EmptyStateSecondaryActions","listNotificationsActionCreator","pager","query","Page","toQuery","limit","offset","applicationIds","filterApplicationId","eventTypeName","filterEventFilterName","bundleId","filterBundleId","sortBy","sortColumn","sortDirection","decoder","validationResponseTransformer","validatedResponse","data","errors","useListNotifications","useTransformQueryResponse","getBehaviorGroupByNotificationDecoder","map","id","NotificationServiceUpdateEventTypeBehaviors","linkBehaviorGroupAction","notificationId","behaviorGroupIds","actionCreator","body","eventTypeId","type","behaviorGroup","display_name","bundle_id","isDefault","undefined","actions","events","saveBehaviorGroupActionCreator","endpoint_ids","endpointIds","event_type_ids","eventTypesIds","useSaveBehaviorGroupMutation","useMutation","updateBehaviorGroupActionsActionCreator","params","behaviorGroupId","DEFAULT_SPLUNK_EVENTS","advisor","policies","drift","compliance","patch","vulnerability","useAttachEventsToSplunk","getAllEventTypes","useClient","fetchPage","async","page","withSort","Sort","Direction","errorObject","length","nextPage","Error","useGetAllEventTypes","client","getAnyBehaviorGroupByNotification","getBehaviorGroupByNotificationAction","useGetAnyBehaviorGroupByNotification","appendActionToNotification","eventType","newActionIds","onProgress","selectedEventTypes","filter","application","expectEvents","includes","console","log","SplunkURLSchema","url","test","urlObj","URL","search","SplunkSetupForm","setStep","stepIsInProgress","setStepIsInProgress","stepVariant","setStepVariant","hecToken","setHecToken","splunkServerHostName","setHostName","automationLogs","setAutomationLogs","setError","startSplunkAutomation","createSplunkIntegration","mutate","useSaveIntegration","integrationName","newIntegration","Integration","secretToken","isEnabled","sslVerificationEnabled","useCreateSplunkIntegration","createSplunkBehaviorGroup","getBundleByName","response","bundle","useGetBundleByName","behaviorGroupName","useCreateSplunkBehaviorGroup","updateSplunkBehaviorActions","integration","push","useUpdateSplunkBehaviorActions","attachEvents","useSplunkSetup","isDisabled","setIsDisabled","useState","validatedServerHostname","setValidatedServerHostname","ValidatedOptions","validatedHecToken","setValidatedHecToken","useEffect","every","v","message","newLog","prevLogs","Grid","GridItem","span","Form","FormGroup","label","labelIcon","Popover","headerContent","bodyContent","onClick","e","preventDefault","HelpIcon","noVerticalAlign","isRequired","fieldId","helperTextInvalid","validated","TextInput","onChange","isValid","uuid","ActionGroup","SplunkAutomationButton","onStart","addDangerNotification","SplunkSetupFailedToast","onFinish","prevStep","CodeBlock","CodeBlockCode","isLoading","List","ListVariant","ListItem","SplunkSetupTitle","footerContent","ExternalLinkSquareAltIcon","ButtonLink","EventLogDateFilterValue","labels","TODAY","YESTERDAY","LAST_7","LAST_14","CUSTOM","datePickerClassName","style","backgroundColor","important","cursor","$nest","borderBottomColor","EventLogSelectObject","constructor","this","toString","compareTo","selectOption","dateInputProps","isReadOnly","CustomDateFilter","maxDate","Date","minDate","add","days","startRangeValidators","date","isBefore","isAfter","period","endRangeValidators","setStartDate","start","setPeriod","startDate","parseISO","draft","min","setEndDate","end","startValue","format","endValue","startDateRef","useRef","endDateRef","onClickStartDateInput","current","setCalendarOpen","onClickEndDateInput","startDateInputProps","endDateInputProps","DatePicker","placeholder","inputProps","validators","ref","EventLogDateFilter","options","Object","values","SelectOption","key","isOpen","setOpen","onToggle","prev","onSelect","_e","selectObject","setValue","Select","SelectVariant","selections","retentionDays","NotificationStatusFailed","Status","text","global_danger_color_100","NotificationStatusUnknown","UnknownIcon","NotificationStatusProcessing","InProgressIcon","NotificationStatusSent","global_success_color_100","g","NotificationStatusSuccess","NotificationStatusWarning","ExclamationTriangleIcon","tableData","ActionsHelpPopover","TableHelpPopover","tableBody","headerClass","minWidth","EventLogActionPopoverContent","action","getIntegrationRecipient","recipient","useAsync","TableComposable","borders","TableVariant","isStickyHeader","Thead","Tr","Th","Tbody","Td","endpointType","loading","Skeleton","width","Tooltip","content","last","isDegraded","toDisplayStatus","successCount","errorCount","EventLogTableColumns","labelClassName","toLabelProps","actionStatus","EventLogTable","onSort","_event","columnIndex","sortByDirection","_extraData","externalOnSort","sortOptions","EVENT","SERVICE","DATE","direction","index","rows","Array","_","i","event","LabelGroup","a","hasAutoWidth","Label","DateFormat","EmptyStateSearch","EmptyStateVariant","sort","ButtonVariant","useNotifications","insights","getInsights","environment","getInsightsEnvironment","EventLogFilterColumn","areEqual","arr1","arr2","noOrder","idx","isChecked","treeNode","checkProps","checked","childChecked","some","child","allChildrenChecked","EventLogTreeFilter","groups","filters","updateFilters","initialize","init","forEach","group","currentFilter","currentFilterChipValues","chips","chip","items","checkAll","item","initTreeNodeById","treeNodeById","setTreeNodeById","isToggled","setIsToggled","treeDataArray","activeFilters","activeBundleIds","bundleIds","parentFilter","category","childNode","childFilter","isRead","keys","activeFilter","activeChips","prevBundles","prevFilter","entry","prevChips","currChips","Dropdown","toggle","DropdownToggle","toggleIndicator","AngleDownIcon","TreeView","hasChecks","onCheck","parentNode","leafNode","notificationTypes","Notification","actionStatusMetadata","chipValue","EventLogToolbar","notifications","integrations","useIntegrations","actionTypeMetadata","notification","toUpperCase","concat","filterMetadata","APPLICATION","ACTION_TYPE","exclusive","ACTION_STATUS","primaryToolbarFilterConfig","setFilters","clearFilter","metaData","customFilters","setCustomFilters","toolbarConfig","usePrimaryToolbarFilterConfig","defaultDelete","activeFiltersConfig","onDelete","customDelete","rawFilterConfigs","regularFilterConfigs","customFilterConfigs","filterConfig","idxToRemove","deleteFilter","deletedChipValues","adjusted","splice","mapToEventLogCustomFilter","createCustomFilterObj","applications","applicationsByBundle","queryParam","nameSplit","split","partialBundleFilters","applicationFilter","filterValues","bundleProducer","currBundleFilters","bundleFilter","applicationProducer","currApplicationFilters","customFilter","chipValues","applicationQueryParam","usePrimaryToolbarFilterConfigWrapper","bundleOptions","pageChanged","inner","perPageChanged","perPage","topPaginationProps","itemCount","count","isCompact","PaginationVariant","onSetPage","onFirstClick","onPreviousClick","onNextClick","onLastClick","onPageInput","onPerPageSelect","bottomPaginationProps","getOuiaProps","PrimaryToolbar","dedicatedAction","dateFilter","setDateFilter","pagination","subtitleClassName","paddingTop","global_spacer_sm","actionClassName","marginLeft","global_spacer_3xl","TextContent","Text","subtitle","toNotificationEvent","serverEvent","event_type","fromUtc","created","sortEventActions","groupActions","first","second","localeCompare","actionsById","actionsWithoutEndpoint","endpoint_id","newAction","initAction","isFailed","endpoint_type","sub_type","endpoint_sub_type","eventDecoder","getEndpointAction","DATE_FORMAT","EventLogPage","getEndpoint","useParameterizedQuery","eventLogFilters","debounce","useStateFactory","useApplication","useUrlStateMultipleOptions","useBundle","useActionType","useActionStatus","useEvent","useUrlStateString","column","BUNDLE","useFilters","useEventLogFilter","setSortDirection","setSortColumn","filterBuilder","useCallback","Filter","selectedBundleNames","queryParams","and","Operator","selectedAppNames","appName","applicationName","invocationResults","endpointTypes","filterPeriod","today","toUtc","sub","toDate","yesterday","useFilterBuilder","eventsPage","usePage","eventsQuery","filterBundleIds","appIds","filterAppIds","filterInvocationResults","filterEndpointTypes","filterStart","endDate","filterEnd","eventTypeDisplayName","filterEvent","includeActions","useGetEvents","meta","eventNotificationPageUrl","endpoint","properties","only_admins","changeItemsPerPage","changePage","pageCount","AppSkeleton","ouia","useOuia","Bullseye","Spinner","centered","getApplicationsAction","useGetApplicationsLazy","TabComponent","activeTabKey","setActiveTabKey","handleTabClick","tabIndex","Tabs","defaultActiveKey","role","SortDirection","emptyImmutableArray","freeze","emptyImmutableObject","SearchIcon","findById","findByKey","val","CommaSeparator","BehaviorGroupChip","unlink","Chip","BehaviorGroupCell","onSelected","dataset","currentTarget","firstChild","behaviorGroupContent","hasError","found","isSelected","selected","OptionsMenuItem","bg","LockIcon","sortedSelected","OptionsMenuToggle","toggleTemplate","ChipGroup","readonlyText","Icon","isInline","BellSlashIcon","join","isEditMode","OptionsMenu","menuItems","menuAppendTo","document","TableText","wrapModifier","NotificationsTableColumns","actionButtonClassName","float","HiddenActionsToggle","getActions","callbacks","loadingActionStatus","actionsToggle","CheckIcon","global_disabled_color_100","global_active_color_100","isOutsideDropdown","onFinishEditing","CloseIcon","global_palette_black_600","onCancelEditing","PencilAltIcon","onStartEditing","NotificationsBehaviorGroupTable","Component","Wrapped","onBehaviorGroupLinkUpdated","toLowerCase","ASC","DESC","sortDirectionFromString","BEHAVIOR","applicationDisplayName","behaviors","NotificationFilterColumn","SelectionCommand","allFilterColumns","NAME","ACTION","NotificationsToolbar","filterColumns","appFilterItems","appFilterOptions","default","bulkSelectProps","onSelectionChanged","pageAdapter","selectedCount","pageSize","selectAll","ALL","selectNone","NONE","PAGE","bulkSelectionDisabled","exportConfigInternal","useTableExportConfig","onExport","exportConfig","useInsightsEnvironmentFlag","bulkSelect","useEventTypesPage","useUrlState","notificationsFilter","initialAppOptions","initUseUrlState","useUrlStateName","defaultValue","useUrlStateApplication","useUrlStateAction","useNotificationFilter","appFilter","arrayValue","filterOption","eventTypeFilter","eventTypeFilterName","stringValue","useEventTypesFilterBuilder","sorting","setSorting","pageController","clearFilters","verticalAlign","height","WebhookIcon","alt","src","ActionTypeToIcon","actionType","EnvelopeIcon","ActionComponentWrapper","ActionComponent","GroupNotFound","onClose","position","BanIcon","users","u","ignorePreferences","groupId","BehaviorGroupActionsSummaryLayout","TextVariants","BehaviorGroupActionsSummaryImpl","BehaviorGroupActionsSummarySkeleton","contentWidth","_unused","BehaviorGroupActionsSummary","cardClassName","BehaviorGroupCardLayout","switchOpen","Card","isFlat","CardHeader","CardHeaderMain","isDefaultBehavior","appendTo","CardActions","KebabToggle","dropdownItems","isPlain","DropdownPosition","CardBody","BehaviorGroupCardImpl","onClickEdit","onEdit","onClickDelete","DropdownItem","BehaviorGroupCardSkeleton","BehaviorGroupCard","cardsWrapperClassName","overflow","BehaviorGroupCardListLayout","Flex","alignItems","alignContent","flexWrap","BehaviorGroupaCrdListImpl","behaviorGroups","FlexItem","BehaviorGroupCardListSkeleton","BehaviorGroupCardList","BehaviorGroupWizardFooter","wizardContext","WizardContext","WizardFooter","onNext","activeStep","enableNext","nextButtonText","hideBackButton","onBack","hideCancelButton","BehaviorGroupWizard","useFormikContext","Wizard","steps","footer","startAtStep","onGoToStep","step","onSave","RecipientContext","createContext","getIntegrations","getNotificationRecipients","useRecipientContext","useContext","RecipientContextProvider","Provider","SaveBehaviorGroupOperation","RecipientOption","equals","getOptions","mapper","loadingMapper","isNoResultsOption","useRecipientOptionMemo","state","show","defaultValues","loadingDefault","loadingFilter","ReducerActionType","reducerFunction","SET_FILTER_VALUE","lastSearch","LOAD_FILTER_VALUE","USE_DEFAULTS","SET_DEFAULTS","useTypeaheadReducer","dispatch","useReducer","debouncedState","setDebouncedState","useDebounce","setFilterValue","loadFilterValue","setDefaults","useDefaults","IntegrationRecipientTypeahead","prevOpen","usePrevious","dispatchers","onOpenChange","integrationType","then","defaults","existingIntegrations","integrationActions","Set","integrationsMapper","recipients","r","has","getKey","onFilter","trim","selection","sel","integrationSelected","chooseText","maxHeight","typeAheadAriaLabel","placeholderText","rbacGroupKey","rbacGroupLabel","renderSelectGroup","SelectGroup","recipientMapper","userOptions","RecipientTypeahead","rbacOptions","s","selectContent","unselect","element","evt","stopPropagation","onClear","isGrouped","isCheckboxSelectionBadgeHidden","isInputValuePersisted","dummyOnToggle","RecipientForm","recipientSelected","recipientOnClear","FormHelperText","isError","isHidden","ActionOption","kind","notificationType","actionName","NoIntegrationConfigured","pointerEvents","testNoIntegrationRenderWithoutRelAndTarget","ActionTypeahead","hasIntegrations","setHasIntegrations","reduce","types","isExpanded","actionSelected","selectedOption","integrationTypes","selectableOptions","availableNotificationTypes","availableIntegrationTypes","selectedNotifications","o","cssRaw","tableHeaderClassName","borderBottom","paddingLeft","paddingRight","tableBodyClassName","alignLeftClassName","textAlign","cells","transforms","cellWidth","emptySpan","BehaviorGroupFormActionsTable","setValues","touched","setFieldTouched","form","touchedActions","errorActions","setValueDispatch","updater","Function","addAction","rowHandlers","setActions","handleActionSelected","row","handleIntegrationSelected","handleRecipientSelected","rowAsNotification","originalRecipient","findIndex","handleRecipientOnClear","path","isTouched","toTableRows","actionResolver","rowData","handleRemove","MinusCircleIcon","Table","TableHeader","TableBody","PlusCircleIcon","EditBehaviorGroupForm","hasGutter","FieldArray","helpers","ActionIntegration","oneOf","required","integrationId","ActionNotify","ActionsArray","obj","hasOwnProperty","context","foundEmail","integrationIds","createError","ActionAndRecipientsStep","schema","SelectableEventTypeTableLayout","SelectableEventTypeTableSkeleton","select","rowIndex","disable","SelectableEventTypeTableImpl","modifier","selectionLoading","noPadding","SelectableEventTypeTable","AssociateEventTypesStep","setSelectedEventTypes","eventTypePage","eventTypesRaw","onDemandEventTypes","onSelectCommand","command","currentPage","pageIndex","addedElements","lastPage","fetchingPage","withPage","BasicInformationStep","ouiaId","FormTextInput","max","EventTypeTable","ReviewStep","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","noOp","InternalBehaviorGroupWizardPage","currentStep","setCurrentStep","validateForm","saving","originalBehaviorGroup","saveBehaviorGroupMutation","ClientContext","fetchingIntegrations","setFetchingIntegrations","save","needsSavingDisplayName","needsSavingActions","needsSavingEventTypes","originalEvents","newEvents","toFetch","uniqWith","isEqual","enpointIds","Promise","all","systemProps","systemProperties","onlyAdmins","group_id","result","newIds","remainingIds","ids","toAdd","shift","actionsToIdList","request","operation","CREATE","UPDATE","catch","isSaving","useSaveBehaviorGroup","addSuccessNotification","associateEventTypeStep","basicInformationStep","associateEventTypesStep","useAssociateEventTypesStep","actionAndRecipientStep","maxStep","setMaxStep","invalidSteps","setInvalidSteps","Math","delete","lastAvailableStep","from","canJumpTo","useSteps","currentStepModel","stepValidationSchema","setValidationSchema","validationSchema","goNext","shouldGoNext","goBack","BehaviorGroupWizardPage","getRecipients","rbacGroups","useGetRecipients","useGetIntegrations","actionsContextValue","Formik","validateOnMount","onSubmit","initialValues","validateOnBlur","validateOnChange","BehaviorGroupDeleteModal","toDelete","useOnDeleteWrapper","cancelButtonTitle","conflictingNotifications","cancelButtonVariant","ackDelete","setAckDelete","Stack","Checkbox","ExpandableSection","toggleText","DeleteModal","isDeleting","titleIconVariant","actionButtonDisabled","BehaviorGroupDeleteModalSkeleton","deleteBehaviorGroupAction","defaultNotificationsDecoder","DeleteBehaviorGroupPage","deleteBehaviorGroup","affected","getAffectedNotificationsByBehaviorGroupAction","expandableSectionClassName","global_BackgroundColor_100","global_spacer_lg","sectionClassName","sectionTitleClassName","titleClassName","marginTop","global_palette_black_1000","defaultIconClassName","badgeClassName","emptyAddButtonClassName","BehaviorGroupAddButton","buttonProps","isOrgAdmin","button","isAriaDisabled","BehaviorGroupsSection","setExpanded","setFilter","filteredBehaviors","lowerCaseFilter","editModalState","editModalActions","useFormModalReducer","deleteModalState","deleteModalActions","useDeleteModalReducer","createGroup","create","onCloseModal","saved","reload","reset","edit","onCloseDelete","deleted","onClearFilter","contentId","ExpandableSectionToggle","Badge","canWriteNotifications","hideOnOutsideClick","OutlinedQuestionCircleIcon","isDetached","SearchInput","template","behaviorGroupDecoder","NotificationNotFound","getNotification","behaviorGroupSectionClassName","marginBottom","global_spacer_xl","noEvents","BundlePageBehaviorGroupContent","useGetBehaviorGroups","isLoadingGroups","originalValues","bgIndex","aIndex","recipientIndex","rbacRecipient","useBehaviorGroupContent","notificationRows","updateBehaviorGroupLink","startEditMode","finishEditMode","cancelEditMode","updateBehaviorGroups","setNotificationRows","prevNotificationInput","removeBehaviorGroup","linkBehavior","setEditMode","draftNotification","oldBehaviors","_prev","useBehaviorGroupNotificationRows","isLinked","configuration","settings","Tab","eventKey","TabTitleText","NotificationListBundlePage","eventLogPageUrl","getApplications","mainPage","Main","paddingLeftClassName","eventLogButton","timeConfigPage","TimeConfig","TimeConfigComponent","bundleTabs","getInitialApplications","activeKey","BundleStatus","NotificationsListPage","navigate","useNavigate","bundleList","NOT_FOUND","FAILED_TO_LOAD","LOADING","getbundleTabs","isBundleStatus","NotificationsLogDateFilterValue","formatPeriod","NotificationsLogDateFilter","isEmptyState","drawer","onPagination","getSortParams","defaultDirection","colSpan","source","Pagination","_ev","newPage","widgetId","Toolbar","ToolbarContent","ToolbarItem","MenuToggle","FilterIcon","Divider","sortMapper","NotificationsLogPage","setData","setPagination","setSort","filterPeriodMapper","createFilter","callApi","URLSearchParams","sort_by","append","fetch","ok","json","prevState","IconName","heading","linkTitle","linkTarget","expandableContent","isRedirect","iconElement","expanded","USER","UserIcon","RUNNING","RunningIcon","INTEGRATION","IntegrationIcon","USERS","UsersIcon","BELL","BellIcon","DataListItem","DataListItemRow","DataListToggle","DataListItemCells","dataListCells","DataListCell","orientation","DataListAction","isPlainButtonAction","replace","DataListContent","LEARN_MORE","CONFIGURE_INTEGRATIONS","CONFIGURE_SOURCES","overview","configureEvents","notificationsLog","splunk","legacyRoutes","ProgressStepper","isVertical","ProgressStep","isCurrent","titleId","routesOverhaul","isSourcesIntegrations","setIsOrgAdmin","auth","identity","user","getUser","is_org_admin","sm","md","lg","CardTitle","CardFooter","isLarge","DataList","alignRight","window","open","ExternalLinkAltIcon","ArrowRightIcon","Routes","pathRoutes","pathRoute","Route","Navigate","utcFormat","regularFormat","switchClassname","padding","server","useApp","usingExperimental","setUsingExperimental","toggleExperimental","getEnvironmentOriginal","getEnvironment","Server","utcStartTime","utcEndTime","startTime","endTime","timezone","Maintenance","timeZone","AppContext","RbacGroupContextProvider","NotificationsPortal","InsightsEnvDetector","onEnvironment","RenderIfTrue","Switch","labelOff","useGetTimePreference","useUpdateTimePreference"],"sourceRoot":""}
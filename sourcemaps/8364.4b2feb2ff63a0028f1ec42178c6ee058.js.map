{"version":3,"file":"js/8364.d6bddabbaa921c940e3b.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Maintenance/Maintenance.js","webpack:///./src/AppEntry.tsx","webpack:///./src/app/App.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/Recipient.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, Stack, StackItem, Title } from '@patternfly/react-core';\nimport { HourglassHalfIcon } from '@patternfly/react-icons';\nimport '../Maintenance/maintenance.css';\nvar Maintenance = function (_a) {\n    var _b = _a.utcStartTime, utcStartTime = _b === void 0 ? '10am' : _b, _c = _a.utcEndTime, utcEndTime = _c === void 0 ? '12am' : _c, _d = _a.startTime, startTime = _d === void 0 ? '6am' : _d, _e = _a.endTime, endTime = _e === void 0 ? '8am' : _e, _f = _a.timeZone, timeZone = _f === void 0 ? 'EST' : _f, description = _a.description, _g = _a.redirectLink, redirectLink = _g === void 0 ? 'https://status.redhat.com/incidents' : _g, className = _a.className, props = __rest(_a, [\"utcStartTime\", \"utcEndTime\", \"startTime\", \"endTime\", \"timeZone\", \"description\", \"redirectLink\", \"className\"]);\n    var emptyStateClassName = classNames(className, 'ins-c-empty-state__maintenance');\n    return (_jsxs(EmptyState, __assign({ className: emptyStateClassName }, props, { children: [_jsx(EmptyStateIcon, { icon: HourglassHalfIcon }), _jsx(Title, __assign({ headingLevel: \"h4\", size: \"lg\" }, { children: \"Maintenance in progress\" })), _jsx(EmptyStateBody, { children: description ? (description) : (_jsxs(Stack, { children: [_jsx(StackItem, { children: \"We are currently undergoing scheduled maintenance and will be\" }), _jsxs(StackItem, { children: [\"unavailable from \", utcStartTime, \" to \", utcEndTime, \" UTC (\", startTime, \"-\", endTime, \" \", timeZone, \").\"] }), _jsxs(StackItem, { children: [\"For more information please visit \", _jsx(\"a\", __assign({ href: redirectLink }, { children: \"status.redhat.com\" })), \".\"] })] })) })] })));\n};\nexport default Maintenance;\n//# sourceMappingURL=Maintenance.js.map","import IntlProvider from '@redhat-cloud-services/frontend-components-translations/Provider';\nimport {\n  createFetchingClient,\n  getInsights,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\nimport * as Redux from 'redux';\n\nimport messages from '../locales/data.json';\nimport App from './app/App';\nimport { getNotificationsRegistry } from './store/Store';\n\nexport interface AppEntryProps {\n  logger?: Redux.Middleware;\n}\n\nenableMapSet();\n\nconst AppEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n  const client = React.useMemo(\n    () =>\n      createFetchingClient(getInsights, {\n        responseInterceptors: [validateSchemaResponseInterceptor],\n      }),\n    []\n  );\n\n  const store = React.useMemo(() => {\n    const registry = props.logger\n      ? getNotificationsRegistry(props.logger)\n      : getNotificationsRegistry();\n    return registry.getStore();\n  }, [props.logger]);\n\n  return (\n    <IntlProvider\n      locale={navigator.language.slice(0, 2)}\n      messages={messages}\n      onError={console.log}\n    >\n      <Provider store={store}>\n        <ClientContextProvider client={client}>\n          <App />\n        </ClientContextProvider>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nexport default AppEntry;\n","import './App.scss';\n\nimport { Switch } from '@patternfly/react-core';\nimport Maintenance from '@redhat-cloud-services/frontend-components/Maintenance';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport {\n  InsightsEnvDetector,\n  RenderIfTrue,\n  getInsights,\n  toUtc,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport format from 'date-fns/format';\nimport * as React from 'react';\n\nimport { NotificationsPortal } from '../components/Store/NotificationsPortal';\nimport { Routes } from '../Routes';\nimport { staging } from '../types/Environments';\nimport { ServerStatus } from '../types/Server';\nimport { AppContext } from './AppContext';\nimport { AppSkeleton } from './AppSkeleton';\nimport { RbacGroupContextProvider } from './rbac/RbacGroupContextProvider';\nimport { useApp } from './useApp';\n\nconst utcFormat = 'HH:mm';\nconst regularFormat = 'hh:mma';\nconst timezoneFormat = 'O';\n\nconst App: React.ComponentType = () => {\n  const { updateDocumentTitle } = useChrome();\n\n  updateDocumentTitle?.('Notifications');\n  const { rbac, server, isOrgAdmin } = useApp();\n  const insights = getInsights();\n  const [usingExperimental, setUsingExperimental] =\n    React.useState<boolean>(false);\n\n  const toggleExperimental = React.useCallback(\n    (isEnabled) => {\n      if (isEnabled) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (insights.chrome as any).getEnvironmentOriginal =\n          insights.chrome.getEnvironment;\n        insights.chrome.getEnvironment = () => 'ci';\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        insights.chrome.getEnvironment = (insights.chrome as any)\n          .getEnvironmentOriginal as typeof insights.chrome.getEnvironment;\n      }\n\n      setUsingExperimental(isEnabled);\n    },\n    [insights]\n  );\n\n  if (!rbac || !server) {\n    return <AppSkeleton />;\n  }\n\n  if (server.status === ServerStatus.MAINTENANCE) {\n    const utcStartTime = format(toUtc(server.from), utcFormat);\n    const utcEndTime = format(toUtc(server.to), utcFormat);\n    const startTime = format(server.from, regularFormat);\n    const endTime = format(server.to, regularFormat);\n    const timezone = format(server.to, timezoneFormat);\n\n    return (\n      <Maintenance\n        utcStartTime={utcStartTime}\n        utcEndTime={utcEndTime}\n        startTime={startTime}\n        endTime={endTime}\n        timeZone={timezone}\n      />\n    );\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        rbac,\n        server,\n        isOrgAdmin: !!isOrgAdmin,\n      }}\n    >\n      <RbacGroupContextProvider>\n        <NotificationsPortal />\n        <InsightsEnvDetector insights={insights} onEnvironment={staging}>\n          <RenderIfTrue>\n            <Switch\n              className=\"pf-v5-u-p-sm\"\n              isChecked={usingExperimental}\n              onChange={toggleExperimental}\n              labelOff=\"Enable experimental features\"\n              label=\"Disable experimental features\"\n            />\n          </RenderIfTrue>\n        </InsightsEnvDetector>\n        <Routes />\n      </RbacGroupContextProvider>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n  id: UUID;\n  applicationDisplayName: string;\n  eventTypeDisplayName: string;\n}\n\nexport interface Notification extends EventType {\n  actions?: Array<Action>;\n  useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<\n  UserIntegration,\n  'id' | 'name' | 'type' | 'isEnabled'\n>;\n\nexport interface DefaultNotificationBehavior {\n  actions: Array<Action>;\n}\n\nexport interface ActionBase {\n  type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n  type: NotificationType.INTEGRATION;\n  integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n  type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n  recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n  action.type === NotificationType.EMAIL_SUBSCRIPTION ||\n  action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (\n  action: Action\n): action is ActionIntegration => action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n  EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n  DRAWER = 'DRAWER',\n  INTEGRATION = 'INTEGRATION',\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n  readonly id: UUID;\n  readonly actions: ReadonlyArray<Action>;\n  readonly events: ReadonlyArray<EventType>;\n  readonly bundleId: UUID;\n  readonly displayName: string;\n  readonly bundleName?: string;\n  readonly isDefault: boolean;\n};\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> &\n  Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<\n  BehaviorGroup | NewBehaviorGroup,\n  'isDefault'\n>;\n\nexport type EmailSystemProperties = {\n  type: NotificationType.EMAIL_SUBSCRIPTION;\n  props: {\n    onlyAdmins: boolean;\n    ignorePreferences: false;\n    groupId: undefined | UUID;\n  };\n};\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n  props: {\n    onlyAdmins: boolean;\n    groupId: undefined | UUID;\n    ignorePreferences: false;\n  };\n};\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(\n  properties: SystemProperties\n): properties is EmailSystemProperties {\n  return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(\n  properties: SystemProperties\n): properties is DrawerSystemProperties {\n  return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (\n  actions: ReadonlyArray<Action | undefined>\n): Array<UUID | undefined> => {\n  return actions\n    .map((action) => {\n      if (action === undefined) {\n        return [undefined];\n      }\n\n      if (action.type === NotificationType.INTEGRATION) {\n        return [action.integration.id];\n      } else {\n        return action.recipient.map((r) => r.integrationId);\n      }\n    })\n    .flat();\n};\n\nexport const areActionsEqual = (\n  actions1: ReadonlyArray<Action | undefined>,\n  actions2: ReadonlyArray<Action | undefined>\n): boolean => {\n  if (actions1.length !== actions2.length) {\n    return false;\n  }\n\n  const integrations1 = getIntegrationIds(actions1);\n  const integrations2 = getIntegrationIds(actions2);\n\n  if (integrations1.length !== integrations2.length) {\n    return false;\n  }\n\n  // Order matters here, no sorting.\n  return integrations1.every((val, index) => val === integrations2[index]);\n};\n","import { IntegrationRef, UUID } from './Notification';\n\nexport abstract class Recipient {\n  readonly displayName: string;\n\n  protected constructor(displayName: string) {\n    this.displayName = displayName;\n  }\n\n  public abstract getKey();\n  public abstract equals(recipient: Recipient);\n}\n\nexport class IntegrationRecipient extends Recipient {\n  readonly integration: IntegrationRef;\n\n  public constructor(integration: IntegrationRef) {\n    super(integration.name + (integration.isEnabled ? '' : ' - Disabled'));\n    this.integration = integration;\n  }\n\n  public getKey() {\n    return this.integration.id;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof IntegrationRecipient) {\n      return recipient.integration.id === this.integration.id;\n    }\n\n    return false;\n  }\n}\n\nexport abstract class BaseNotificationRecipient extends Recipient {\n  readonly integrationId: UUID | undefined;\n  readonly key: string;\n  readonly description: string | undefined;\n\n  protected constructor(\n    displayName: string,\n    description: string | undefined,\n    integrationId: UUID | undefined,\n    key: string\n  ) {\n    super(displayName);\n\n    this.key = key;\n    this.description = description;\n    this.integrationId = integrationId;\n  }\n\n  public getKey() {\n    return this.key;\n  }\n}\n\nexport class NotificationUserRecipient extends BaseNotificationRecipient {\n  readonly sendToAdmin: boolean;\n  readonly ignorePreferences: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    sendToAdmin: boolean,\n    ignorePreferences: boolean\n  ) {\n    let displayName;\n    let description;\n\n    if (sendToAdmin) {\n      displayName = 'Admins';\n      description = 'Organization administrators for your account';\n    } else {\n      displayName = 'All';\n      description =\n        'All users in your organization who subscribed to this email in their Notification Preferences';\n    }\n\n    super(\n      displayName,\n      description,\n      integrationId,\n      sendToAdmin ? 'users-admin' : 'users-all'\n    );\n\n    this.sendToAdmin = sendToAdmin;\n    this.ignorePreferences = ignorePreferences;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationUserRecipient) {\n      return (\n        recipient.sendToAdmin === this.sendToAdmin &&\n        recipient.ignorePreferences === this.ignorePreferences\n      );\n    }\n\n    return false;\n  }\n}\n\nexport class NotificationRbacGroupRecipient extends BaseNotificationRecipient {\n  readonly groupId: UUID;\n  readonly isLoading: boolean;\n  readonly hasError: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    groupId: UUID,\n    displayNameOrIsLoading: string | boolean\n  ) {\n    let displayName;\n    let isLoading;\n    let hasError;\n\n    if (typeof displayNameOrIsLoading === 'string') {\n      displayName = displayNameOrIsLoading;\n      isLoading = false;\n      hasError = false;\n    } else {\n      displayName = 'Loading';\n      isLoading = displayNameOrIsLoading;\n      hasError = !displayNameOrIsLoading;\n    }\n\n    super(displayName, undefined, integrationId, `rbac-group-${groupId}`);\n\n    this.groupId = groupId;\n    this.isLoading = isLoading;\n    this.hasError = hasError;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationRbacGroupRecipient) {\n      return recipient.groupId === this.groupId;\n    }\n\n    return false;\n  }\n}\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n  CamelIntegrationType,\n  Integration,\n  IntegrationAnsible,\n  IntegrationBase,\n  IntegrationCamel,\n  IntegrationDrawer,\n  IntegrationEmailSubscription,\n  IntegrationHttp,\n  IntegrationType,\n  NewIntegration,\n  ServerIntegrationRequest,\n  ServerIntegrationResponse,\n  isCamelType,\n} from '../Integration';\n\ninterface ExternalCompositeTyped {\n  type: string;\n  sub_type?: string | null;\n}\n\nexport const getIntegrationType = (\n  serverIntegration: ExternalCompositeTyped\n): IntegrationType => {\n  for (const integration of Object.values(IntegrationType)) {\n    if (serverIntegration.sub_type) {\n      if (\n        integration ===\n        `${serverIntegration.type}:${serverIntegration.sub_type}`\n      ) {\n        return integration as IntegrationType;\n      }\n    } else if (integration === serverIntegration.type) {\n      return integration as IntegrationType;\n    }\n  }\n\n  throw new Error(\n    `Unexpected type: ${serverIntegration.type} with subtype: ${serverIntegration.sub_type}`\n  );\n};\n\nconst getEndpointType = (\n  type: IntegrationType\n): { type: Schemas.EndpointType; subType?: string } => {\n  const splitType = type.split(':', 2);\n  return {\n    type: splitType[0] as Schemas.EndpointType,\n    subType: splitType.length === 2 ? splitType[1] : undefined,\n  };\n};\n\ntype NotNullType = {\n  <T>(value: T | undefined | null): T | undefined;\n  <T>(value: T | undefined | null, defaultValue: T): T;\n};\n\nconst notNull: NotNullType = <T>(\n  value: T | undefined | null,\n  defaultValue?: T\n): T | undefined => (value === null ? defaultValue : value);\nconst toSecretToken = (\n  secretToken: string | undefined | null\n): string | undefined =>\n  secretToken === '' ? undefined : notNull(secretToken);\n\nconst toIntegrationWebhook = (\n  integrationBase: IntegrationBase<IntegrationType.WEBHOOK>,\n  properties?: Schemas.WebhookProperties\n): IntegrationHttp => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.GET,\n});\n\nconst toIntegrationAnsible = (\n  integrationBase: IntegrationBase<IntegrationType.ANSIBLE>,\n  properties?: Schemas.WebhookProperties\n): IntegrationAnsible => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.POST,\n});\n\nconst toIntegrationCamel = (\n  integrationBase: IntegrationBase<CamelIntegrationType>,\n  properties?: Schemas.CamelProperties\n): IntegrationCamel => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  basicAuth:\n    properties?.basic_authentication === null\n      ? undefined\n      : {\n          user: notNull(properties?.basic_authentication?.username, ''),\n          pass: notNull(properties?.basic_authentication?.password, ''),\n        },\n  extras: notNull(properties?.extras),\n});\n\nconst toIntegrationEmail = (\n  integrationBase: IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n  properties: Schemas.EmailSubscriptionProperties\n): IntegrationEmailSubscription => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nconst toIntegrationDrawer = (\n  integrationBase: IntegrationBase<IntegrationType.DRAWER>,\n  properties: Schemas.DrawerProperties\n): IntegrationDrawer => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nexport const toIntegration = (\n  serverIntegration: ServerIntegrationResponse\n): Integration => {\n  const integrationBase: IntegrationBase<IntegrationType> = {\n    id: serverIntegration.id || '',\n    name: serverIntegration.name || '',\n    isEnabled: !!serverIntegration.enabled,\n    type: getIntegrationType(serverIntegration),\n    status: serverIntegration.status ?? 'UNKNOWN',\n    serverErrors: serverIntegration.server_errors ?? 0,\n  };\n\n  if (isCamelType(integrationBase.type)) {\n    return toIntegrationCamel(\n      integrationBase as IntegrationBase<CamelIntegrationType>,\n      serverIntegration.properties as Schemas.CamelProperties\n    );\n  }\n\n  switch (integrationBase.type) {\n    case IntegrationType.WEBHOOK:\n      return toIntegrationWebhook(\n        integrationBase as IntegrationBase<IntegrationType.WEBHOOK>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.ANSIBLE:\n      return toIntegrationAnsible(\n        integrationBase as IntegrationBase<IntegrationType.ANSIBLE>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.EMAIL_SUBSCRIPTION:\n      return toIntegrationEmail(\n        integrationBase as IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n        serverIntegration.properties as Schemas.EmailSubscriptionProperties\n      );\n    case IntegrationType.DRAWER:\n      return toIntegrationDrawer(\n        integrationBase as IntegrationBase<IntegrationType.DRAWER>,\n        serverIntegration.properties as Schemas.DrawerProperties\n      );\n    default:\n      assertNever(integrationBase.type);\n  }\n};\n\nexport const toIntegrations = (\n  serverIntegrations: Array<ServerIntegrationResponse>\n): Array<Integration> => {\n  return serverIntegrations.map(toIntegration);\n};\n\ntype ServerIntegrationProperties =\n  | Schemas.EmailSubscriptionProperties\n  | Schemas.WebhookProperties\n  | Schemas.CamelProperties\n  | Schemas.DrawerProperties;\n\nexport const toIntegrationProperties = (\n  integration: Integration | NewIntegration\n): ServerIntegrationProperties => {\n  const type = integration.type;\n\n  if (isCamelType(type)) {\n    const integrationCamel: IntegrationCamel = integration as IntegrationCamel;\n    return {\n      url: integrationCamel.url,\n      disable_ssl_verification: !integrationCamel.sslVerificationEnabled,\n      secret_token: toSecretToken(integrationCamel.secretToken),\n      basic_authentication: integrationCamel.basicAuth\n        ? {\n            username: integrationCamel.basicAuth.user,\n            password: integrationCamel.basicAuth.pass,\n          }\n        : undefined,\n      extras: integrationCamel.extras,\n    };\n  }\n\n  switch (type) {\n    case IntegrationType.WEBHOOK: {\n      const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n      return {\n        url: integrationHttp.url,\n        method: integrationHttp.method,\n        disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationHttp.secretToken),\n      };\n    }\n    case IntegrationType.ANSIBLE: {\n      const integrationAnsible = integration as IntegrationAnsible;\n      return {\n        url: integrationAnsible.url,\n        disable_ssl_verification: !integrationAnsible.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationAnsible.secretToken),\n        method: integrationAnsible.method,\n      };\n    }\n    case IntegrationType.EMAIL_SUBSCRIPTION: {\n      const integrationEmail: IntegrationEmailSubscription =\n        integration as IntegrationEmailSubscription;\n      return {\n        only_admins: integrationEmail.onlyAdmin,\n        group_id: integrationEmail.groupId,\n        ignore_preferences: integrationEmail.ignorePreferences,\n      };\n    }\n    case IntegrationType.DRAWER: {\n      const integrationDrawer: IntegrationDrawer =\n        integration as IntegrationDrawer;\n      return {\n        only_admins: integrationDrawer.onlyAdmin,\n        group_id: integrationDrawer.groupId,\n        ignore_preferences: integrationDrawer.ignorePreferences,\n      };\n    }\n    default:\n      assertNever(type);\n  }\n};\n\nexport const toServerIntegrationRequest = (\n  integration: Integration | NewIntegration\n): ServerIntegrationRequest => {\n  const { type, subType } = getEndpointType(integration.type);\n  return {\n    id: integration.id,\n    name: integration.name,\n    enabled: integration.isEnabled,\n    type,\n    sub_type: subType,\n    description: '',\n    properties: toIntegrationProperties(integration),\n  };\n};\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","_a","_b","utcStartTime","_c","utcEndTime","_d","startTime","_e","endTime","_f","timeZone","description","_g","redirectLink","className","props","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","emptyStateClassName","EmptyState","children","EmptyStateIcon","icon","HourglassHalfIcon","Title","headingLevel","size","EmptyStateBody","Stack","StackItem","href","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","Provider","ClientContextProvider","utcFormat","regularFormat","updateDocumentTitle","rbac","server","isOrgAdmin","insights","usingExperimental","setUsingExperimental","toggleExperimental","isEnabled","chrome","getEnvironmentOriginal","getEnvironment","status","MAINTENANCE","toUtc","from","to","timezone","value","InsightsEnvDetector","onEnvironment","RenderIfTrue","Switch","isChecked","onChange","labelOff","label","isActionNotify","action","type","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","properties","isDrawerSystemProperties","getIntegrationIds","actions","map","undefined","integration","id","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","integrations1","integrations2","every","val","index","Recipient","displayName","IntegrationRecipient","super","name","getKey","equals","BaseNotificationRecipient","key","NotificationUserRecipient","sendToAdmin","ignorePreferences","NotificationRbacGroupRecipient","groupId","displayNameOrIsLoading","isLoading","hasError","getIntegrationType","serverIntegration","values","sub_type","Error","notNull","defaultValue","toSecretToken","secretToken","toIntegration","integrationBase","enabled","serverErrors","server_errors","url","sslVerificationEnabled","disable_ssl_verification","secret_token","basicAuth","basic_authentication","user","username","pass","password","extras","toIntegrationCamel","WEBHOOK","method","HttpType","Enum","GET","toIntegrationWebhook","ANSIBLE","POST","toIntegrationAnsible","ignore_preferences","group_id","onlyAdmin","only_admins","toIntegrationDrawer","toIntegrations","serverIntegrations","toIntegrationProperties","integrationCamel","integrationHttp","integrationAnsible","integrationEmail","integrationDrawer","toServerIntegrationRequest","subType","splitType","split","getEndpointType"],"sourceRoot":""}
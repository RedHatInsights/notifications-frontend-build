{"version":3,"file":"js/76.840c5404e60ca7a6a2b3.js","mappings":"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","sources":["webpack:///./src/app/IntegrationsApp.tsx","webpack:///./src/IntegrationsEntry.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/Recipient.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts"],"sourcesContent":["import './App.scss';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { NotificationsPortal } from '../components/Store/NotificationsPortal';\nimport IntegrationsList from '../pages/Integrations/List/List';\nimport { IntegrationCategory } from '../types/Integration';\nimport { AppContext } from './AppContext';\nimport { RbacGroupContextProvider } from './rbac/RbacGroupContextProvider';\nimport { useApp } from './useApp';\nimport { AppEntryProps } from '../AppEntry';\n\ninterface IntegrationsAppProps {\n  activeCategory?: string;\n}\n\nconst IntegrationsApp: React.ComponentType<\n  IntegrationsAppProps & AppEntryProps\n> = ({ activeCategory, ...props }: IntegrationsAppProps) => {\n  const { rbac, server, isOrgAdmin } = useApp();\n\n  const category =\n    activeCategory &&\n    Object.values(IntegrationCategory).includes(\n      activeCategory as unknown as IntegrationCategory\n    )\n      ? (activeCategory as IntegrationCategory)\n      : undefined;\n\n  return rbac && server ? (\n    <AppContext.Provider\n      value={{\n        rbac,\n        server,\n        isOrgAdmin: !!isOrgAdmin,\n      }}\n    >\n      <RbacGroupContextProvider>\n        <NotificationsPortal />\n        <IntegrationsList category={category} {...props} />\n      </RbacGroupContextProvider>\n    </AppContext.Provider>\n  ) : (\n    <Bullseye>\n      <Spinner size=\"xl\" />\n    </Bullseye>\n  );\n};\n\nexport default IntegrationsApp;\n","import IntlProvider from '@redhat-cloud-services/frontend-components-translations/Provider';\nimport {\n  createFetchingClient,\n  getInsights,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\n\nimport messages from '../locales/data.json';\nimport IntegrationsApp from './app/IntegrationsApp';\nimport { AppEntryProps } from './AppEntry';\nimport { getNotificationsRegistry } from './store/Store';\n\nenableMapSet();\n\nconst IntegrationsEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n  const client = React.useMemo(\n    () =>\n      createFetchingClient(getInsights, {\n        responseInterceptors: [validateSchemaResponseInterceptor],\n      }),\n    []\n  );\n\n  const store = React.useMemo(() => {\n    const registry = props.logger\n      ? getNotificationsRegistry(props.logger)\n      : getNotificationsRegistry();\n    return registry.getStore();\n  }, [props.logger]);\n\n  return (\n    <IntlProvider\n      locale={navigator.language.slice(0, 2)}\n      messages={messages}\n      onError={console.log}\n    >\n      <Provider store={store}>\n        <ClientContextProvider client={client}>\n          <IntegrationsApp {...props} />\n        </ClientContextProvider>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nexport default IntegrationsEntry;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n  id: UUID;\n  applicationDisplayName: string;\n  eventTypeDisplayName: string;\n}\n\nexport interface Notification extends EventType {\n  actions?: Array<Action>;\n  useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<\n  UserIntegration,\n  'id' | 'name' | 'type' | 'isEnabled'\n>;\n\nexport interface DefaultNotificationBehavior {\n  actions: Array<Action>;\n}\n\nexport interface ActionBase {\n  type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n  type: NotificationType.INTEGRATION;\n  integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n  type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n  recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n  action.type === NotificationType.EMAIL_SUBSCRIPTION ||\n  action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (\n  action: Action\n): action is ActionIntegration => action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n  EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n  DRAWER = 'DRAWER',\n  INTEGRATION = 'INTEGRATION',\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n  readonly id: UUID;\n  readonly actions: ReadonlyArray<Action>;\n  readonly events: ReadonlyArray<EventType>;\n  readonly bundleId: UUID;\n  readonly displayName: string;\n  readonly bundleName?: string;\n  readonly isDefault: boolean;\n};\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> &\n  Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<\n  BehaviorGroup | NewBehaviorGroup,\n  'isDefault'\n>;\n\nexport type EmailSystemProperties = {\n  type: NotificationType.EMAIL_SUBSCRIPTION;\n  props: {\n    onlyAdmins: boolean;\n    ignorePreferences: false;\n    groupId: undefined | UUID;\n  };\n};\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n  props: {\n    onlyAdmins: boolean;\n    groupId: undefined | UUID;\n    ignorePreferences: false;\n  };\n};\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(\n  properties: SystemProperties\n): properties is EmailSystemProperties {\n  return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(\n  properties: SystemProperties\n): properties is DrawerSystemProperties {\n  return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (\n  actions: ReadonlyArray<Action | undefined>\n): Array<UUID | undefined> => {\n  return actions\n    .map((action) => {\n      if (action === undefined) {\n        return [undefined];\n      }\n\n      if (action.type === NotificationType.INTEGRATION) {\n        return [action.integration.id];\n      } else {\n        return action.recipient.map((r) => r.integrationId);\n      }\n    })\n    .flat();\n};\n\nexport const areActionsEqual = (\n  actions1: ReadonlyArray<Action | undefined>,\n  actions2: ReadonlyArray<Action | undefined>\n): boolean => {\n  if (actions1.length !== actions2.length) {\n    return false;\n  }\n\n  const integrations1 = getIntegrationIds(actions1);\n  const integrations2 = getIntegrationIds(actions2);\n\n  if (integrations1.length !== integrations2.length) {\n    return false;\n  }\n\n  // Order matters here, no sorting.\n  return integrations1.every((val, index) => val === integrations2[index]);\n};\n","import { IntegrationRef, UUID } from './Notification';\n\nexport abstract class Recipient {\n  readonly displayName: string;\n\n  protected constructor(displayName: string) {\n    this.displayName = displayName;\n  }\n\n  public abstract getKey();\n  public abstract equals(recipient: Recipient);\n}\n\nexport class IntegrationRecipient extends Recipient {\n  readonly integration: IntegrationRef;\n\n  public constructor(integration: IntegrationRef) {\n    super(integration.name + (integration.isEnabled ? '' : ' - Disabled'));\n    this.integration = integration;\n  }\n\n  public getKey() {\n    return this.integration.id;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof IntegrationRecipient) {\n      return recipient.integration.id === this.integration.id;\n    }\n\n    return false;\n  }\n}\n\nexport abstract class BaseNotificationRecipient extends Recipient {\n  readonly integrationId: UUID | undefined;\n  readonly key: string;\n  readonly description: string | undefined;\n\n  protected constructor(\n    displayName: string,\n    description: string | undefined,\n    integrationId: UUID | undefined,\n    key: string\n  ) {\n    super(displayName);\n\n    this.key = key;\n    this.description = description;\n    this.integrationId = integrationId;\n  }\n\n  public getKey() {\n    return this.key;\n  }\n}\n\nexport class NotificationUserRecipient extends BaseNotificationRecipient {\n  readonly sendToAdmin: boolean;\n  readonly ignorePreferences: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    sendToAdmin: boolean,\n    ignorePreferences: boolean\n  ) {\n    let displayName;\n    let description;\n\n    if (sendToAdmin) {\n      displayName = 'Admins';\n      description = 'Organization administrators for your account';\n    } else {\n      displayName = 'All';\n      description =\n        'All users in your organization who subscribed to this email in their Notification Preferences';\n    }\n\n    super(\n      displayName,\n      description,\n      integrationId,\n      sendToAdmin ? 'users-admin' : 'users-all'\n    );\n\n    this.sendToAdmin = sendToAdmin;\n    this.ignorePreferences = ignorePreferences;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationUserRecipient) {\n      return (\n        recipient.sendToAdmin === this.sendToAdmin &&\n        recipient.ignorePreferences === this.ignorePreferences\n      );\n    }\n\n    return false;\n  }\n}\n\nexport class NotificationRbacGroupRecipient extends BaseNotificationRecipient {\n  readonly groupId: UUID;\n  readonly isLoading: boolean;\n  readonly hasError: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    groupId: UUID,\n    displayNameOrIsLoading: string | boolean\n  ) {\n    let displayName;\n    let isLoading;\n    let hasError;\n\n    if (typeof displayNameOrIsLoading === 'string') {\n      displayName = displayNameOrIsLoading;\n      isLoading = false;\n      hasError = false;\n    } else {\n      displayName = 'Loading';\n      isLoading = displayNameOrIsLoading;\n      hasError = !displayNameOrIsLoading;\n    }\n\n    super(displayName, undefined, integrationId, `rbac-group-${groupId}`);\n\n    this.groupId = groupId;\n    this.isLoading = isLoading;\n    this.hasError = hasError;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationRbacGroupRecipient) {\n      return recipient.groupId === this.groupId;\n    }\n\n    return false;\n  }\n}\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n  CamelIntegrationType,\n  Integration,\n  IntegrationAnsible,\n  IntegrationBase,\n  IntegrationCamel,\n  IntegrationDrawer,\n  IntegrationEmailSubscription,\n  IntegrationHttp,\n  IntegrationType,\n  NewIntegration,\n  ServerIntegrationRequest,\n  ServerIntegrationResponse,\n  isCamelType,\n} from '../Integration';\n\ninterface ExternalCompositeTyped {\n  type: string;\n  sub_type?: string | null;\n}\n\nexport const getIntegrationType = (\n  serverIntegration: ExternalCompositeTyped\n): IntegrationType => {\n  for (const integration of Object.values(IntegrationType)) {\n    if (serverIntegration.sub_type) {\n      if (\n        integration ===\n        `${serverIntegration.type}:${serverIntegration.sub_type}`\n      ) {\n        return integration as IntegrationType;\n      }\n    } else if (integration === serverIntegration.type) {\n      return integration as IntegrationType;\n    }\n  }\n\n  throw new Error(\n    `Unexpected type: ${serverIntegration.type} with subtype: ${serverIntegration.sub_type}`\n  );\n};\n\nconst getEndpointType = (\n  type: IntegrationType\n): { type: Schemas.EndpointType; subType?: string } => {\n  const splitType = type.split(':', 2);\n  return {\n    type: splitType[0] as Schemas.EndpointType,\n    subType: splitType.length === 2 ? splitType[1] : undefined,\n  };\n};\n\ntype NotNullType = {\n  <T>(value: T | undefined | null): T | undefined;\n  <T>(value: T | undefined | null, defaultValue: T): T;\n};\n\nconst notNull: NotNullType = <T>(\n  value: T | undefined | null,\n  defaultValue?: T\n): T | undefined => (value === null ? defaultValue : value);\nconst toSecretToken = (\n  secretToken: string | undefined | null\n): string | undefined =>\n  secretToken === '' ? undefined : notNull(secretToken);\n\nconst toIntegrationWebhook = (\n  integrationBase: IntegrationBase<IntegrationType.WEBHOOK>,\n  properties?: Schemas.WebhookProperties\n): IntegrationHttp => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.GET,\n});\n\nconst toIntegrationAnsible = (\n  integrationBase: IntegrationBase<IntegrationType.ANSIBLE>,\n  properties?: Schemas.WebhookProperties\n): IntegrationAnsible => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.POST,\n});\n\nconst toIntegrationCamel = (\n  integrationBase: IntegrationBase<CamelIntegrationType>,\n  properties?: Schemas.CamelProperties\n): IntegrationCamel => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  basicAuth:\n    properties?.basic_authentication === null\n      ? undefined\n      : {\n          user: notNull(properties?.basic_authentication?.username, ''),\n          pass: notNull(properties?.basic_authentication?.password, ''),\n        },\n  extras: notNull(properties?.extras),\n});\n\nconst toIntegrationEmail = (\n  integrationBase: IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n  properties: Schemas.EmailSubscriptionProperties\n): IntegrationEmailSubscription => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nconst toIntegrationDrawer = (\n  integrationBase: IntegrationBase<IntegrationType.DRAWER>,\n  properties: Schemas.DrawerProperties\n): IntegrationDrawer => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nexport const toIntegration = (\n  serverIntegration: ServerIntegrationResponse\n): Integration => {\n  const integrationBase: IntegrationBase<IntegrationType> = {\n    id: serverIntegration.id || '',\n    name: serverIntegration.name || '',\n    isEnabled: !!serverIntegration.enabled,\n    type: getIntegrationType(serverIntegration),\n    status: serverIntegration.status ?? 'UNKNOWN',\n    serverErrors: serverIntegration.server_errors ?? 0,\n  };\n\n  if (isCamelType(integrationBase.type)) {\n    return toIntegrationCamel(\n      integrationBase as IntegrationBase<CamelIntegrationType>,\n      serverIntegration.properties as Schemas.CamelProperties\n    );\n  }\n\n  switch (integrationBase.type) {\n    case IntegrationType.WEBHOOK:\n      return toIntegrationWebhook(\n        integrationBase as IntegrationBase<IntegrationType.WEBHOOK>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.ANSIBLE:\n      return toIntegrationAnsible(\n        integrationBase as IntegrationBase<IntegrationType.ANSIBLE>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.EMAIL_SUBSCRIPTION:\n      return toIntegrationEmail(\n        integrationBase as IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n        serverIntegration.properties as Schemas.EmailSubscriptionProperties\n      );\n    case IntegrationType.DRAWER:\n      return toIntegrationDrawer(\n        integrationBase as IntegrationBase<IntegrationType.DRAWER>,\n        serverIntegration.properties as Schemas.DrawerProperties\n      );\n    default:\n      assertNever(integrationBase.type);\n  }\n};\n\nexport const toIntegrations = (\n  serverIntegrations: Array<ServerIntegrationResponse>\n): Array<Integration> => {\n  return serverIntegrations.map(toIntegration);\n};\n\ntype ServerIntegrationProperties =\n  | Schemas.EmailSubscriptionProperties\n  | Schemas.WebhookProperties\n  | Schemas.CamelProperties\n  | Schemas.DrawerProperties;\n\nexport const toIntegrationProperties = (\n  integration: Integration | NewIntegration\n): ServerIntegrationProperties => {\n  const type = integration.type;\n\n  if (isCamelType(type)) {\n    const integrationCamel: IntegrationCamel = integration as IntegrationCamel;\n    return {\n      url: integrationCamel.url,\n      disable_ssl_verification: !integrationCamel.sslVerificationEnabled,\n      secret_token: toSecretToken(integrationCamel.secretToken),\n      basic_authentication: integrationCamel.basicAuth\n        ? {\n            username: integrationCamel.basicAuth.user,\n            password: integrationCamel.basicAuth.pass,\n          }\n        : undefined,\n      extras: integrationCamel.extras,\n    };\n  }\n\n  switch (type) {\n    case IntegrationType.WEBHOOK: {\n      const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n      return {\n        url: integrationHttp.url,\n        method: integrationHttp.method,\n        disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationHttp.secretToken),\n      };\n    }\n    case IntegrationType.ANSIBLE: {\n      const integrationAnsible = integration as IntegrationAnsible;\n      return {\n        url: integrationAnsible.url,\n        disable_ssl_verification: !integrationAnsible.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationAnsible.secretToken),\n        method: integrationAnsible.method,\n      };\n    }\n    case IntegrationType.EMAIL_SUBSCRIPTION: {\n      const integrationEmail: IntegrationEmailSubscription =\n        integration as IntegrationEmailSubscription;\n      return {\n        only_admins: integrationEmail.onlyAdmin,\n        group_id: integrationEmail.groupId,\n        ignore_preferences: integrationEmail.ignorePreferences,\n      };\n    }\n    case IntegrationType.DRAWER: {\n      const integrationDrawer: IntegrationDrawer =\n        integration as IntegrationDrawer;\n      return {\n        only_admins: integrationDrawer.onlyAdmin,\n        group_id: integrationDrawer.groupId,\n        ignore_preferences: integrationDrawer.ignorePreferences,\n      };\n    }\n    default:\n      assertNever(type);\n  }\n};\n\nexport const toServerIntegrationRequest = (\n  integration: Integration | NewIntegration\n): ServerIntegrationRequest => {\n  const { type, subType } = getEndpointType(integration.type);\n  return {\n    id: integration.id,\n    name: integration.name,\n    enabled: integration.isEnabled,\n    type,\n    sub_type: subType,\n    description: '',\n    properties: toIntegrationProperties(integration),\n  };\n};\n"],"names":["activeCategory","props","rbac","server","isOrgAdmin","useApp","category","Object","values","Integration","includes","undefined","AppContext","Provider","value","RbacGroupContextProvider","NotificationsPortal","Bullseye","Spinner","size","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","ClientContextProvider","isActionNotify","action","type","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","properties","isDrawerSystemProperties","getIntegrationIds","actions","map","integration","id","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","Recipient","displayName","this","IntegrationRecipient","super","name","isEnabled","getKey","equals","BaseNotificationRecipient","description","key","NotificationUserRecipient","sendToAdmin","ignorePreferences","NotificationRbacGroupRecipient","groupId","displayNameOrIsLoading","isLoading","hasError","getIntegrationType","serverIntegration","sub_type","Error","notNull","defaultValue","toSecretToken","secretToken","toIntegration","integrationBase","enabled","status","serverErrors","server_errors","url","sslVerificationEnabled","disable_ssl_verification","secret_token","basicAuth","basic_authentication","user","username","pass","password","extras","toIntegrationCamel","WEBHOOK","method","HttpType","Enum","GET","toIntegrationWebhook","ANSIBLE","POST","toIntegrationAnsible","ignore_preferences","group_id","onlyAdmin","only_admins","toIntegrationDrawer","toIntegrations","serverIntegrations","toIntegrationProperties","integrationCamel","integrationHttp","integrationAnsible","integrationEmail","integrationDrawer","toServerIntegrationRequest","subType","splitType","split","getEndpointType"],"sourceRoot":""}
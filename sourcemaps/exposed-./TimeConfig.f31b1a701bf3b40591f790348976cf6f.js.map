{"version":3,"file":"js/exposed-./TimeConfig.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/services/Notifications/GetTimePreference.ts","webpack:///./src/services/Notifications/SaveTimePreference.ts","webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/generated/OpenapiNotifications.ts","webpack:///./src/utils/AlertUtils.ts"],"sourcesContent":["import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const useGetTimePreference = () => {\n  return useQuery(\n    Operations.OrgConfigResourceGetDailyDigestTimePreference.actionCreator()\n  );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport type SaveTimePrefActionsParams = {\n  body: string;\n};\n\nconst actionCreator = (params: SaveTimePrefActionsParams) => {\n  return Operations.OrgConfigResourceSaveDailyDigestTimePreference.actionCreator(\n    {\n      body: params.body,\n    }\n  );\n};\n\nexport const useUpdateTimePreference = () => {\n  return useMutation(actionCreator);\n};\n","import {\n  AlertActionLink,\n  Button,\n  HelperText,\n  HelperTextItem,\n  Menu,\n  MenuContainer,\n  MenuContent,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  Modal,\n  ModalVariant,\n  Radio,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  TimePicker,\n  Title,\n} from '@patternfly/react-core';\nimport { Alert } from '@patternfly/react-core';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useGetTimePreference } from '../../services/Notifications/GetTimePreference';\nimport { useUpdateTimePreference } from '../../services/Notifications/SaveTimePreference';\nimport { useNotification } from '../../utils/AlertUtils';\nimport axios from 'axios';\n\nconst alertClassName = style({\n  marginTop: '12px',\n});\n\nconst timezoneListClassName = style({\n  maxHeight: '200px',\n  maxWidth: '400px',\n  overflowY: 'auto',\n});\n\ninterface TimeConfigState {\n  utcTime: string;\n  baseCustomTime: string;\n  timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n  const [showCustomSelect, setShowCustomSelect] = React.useState(false);\n  const [timeSelect, setTimeSelect] = React.useState<TimeConfigState>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleRef = React.useRef<HTMLButtonElement>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n\n  const getTimePreference = useGetTimePreference();\n  const saveTimePreference = useUpdateTimePreference();\n  const { addSuccessNotification, addDangerNotification } = useNotification();\n\n  const timePref = useMemo(() => {\n    if (getTimePreference.error) {\n      return undefined;\n    }\n\n    return getTimePreference.payload?.value as string;\n  }, [getTimePreference.payload?.value, getTimePreference.error]);\n\n  const timeconfigTitle = useMemo(() => {\n    return `Any daily digest emails you've opted into will be sent at ${\n      timeSelect?.utcTime ? timeSelect?.utcTime : '00:00'\n    } UTC`;\n  }, [timeSelect?.utcTime]);\n\n  // Set the time preference value once we load it from the server\n  useEffect(() => {\n    if (timePref) {\n      setTimeSelect({\n        baseCustomTime: timePref,\n        utcTime: timePref,\n        timezoneText: undefined,\n      });\n      setShowCustomSelect(timePref !== '00:00:00');\n    }\n  }, [timePref]);\n\n  const handleRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(false);\n    setTimeSelect({\n      utcTime: '00:00',\n      baseCustomTime: '00:00',\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleCustomRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(true);\n  }, []);\n\n  const handleTimePrefSelect = React.useCallback((_ev, time) => {\n    setTimeSelect({\n      baseCustomTime: time,\n      utcTime: time,\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const handleTimezoneChange = React.useCallback((event?: MouseEvent) => {\n    if (event?.target) {\n      const target = event.target;\n      const textContent = (target as HTMLElement).textContent;\n      const targetTimezone = timezones.find((t) => t.text === textContent);\n      if (targetTimezone) {\n        setTimeSelect((prev) => {\n          if (prev?.baseCustomTime) {\n            const pieces = prev.baseCustomTime\n              .split(':')\n              .map((t) => parseInt(t));\n            const date = new Date();\n            date.setUTCHours(pieces[0], pieces[1]);\n            // Going from UTC to the timezone\n            const zonedDate = addHours(date, -targetTimezone.offset);\n            const utcHours = zonedDate\n              .getUTCHours()\n              .toString()\n              .padStart(2, '0');\n            const utcMinutes = zonedDate\n              .getUTCMinutes()\n              .toString()\n              .padStart(2, '0');\n\n            return {\n              ...prev,\n              utcTime: `${utcHours}:${utcMinutes}`,\n              timezoneText: targetTimezone.text,\n            };\n          }\n\n          return prev;\n        });\n      }\n    }\n\n    setIsOpen(false);\n  }, []);\n\n  const handleButtonSave = React.useCallback(() => {\n    if (timeSelect) {\n      const body = timeSelect.utcTime;\n      axios\n        .put(\n          '/api/notifications/v1.0/org-config/daily-digest/time-preference',\n          body,\n          {\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }\n        )\n        .then(() => {\n          addSuccessNotification('Action settings saved', '');\n        })\n        .catch(() => {\n          addDangerNotification('Failed to save action settings', '');\n        });\n    }\n\n    setIsModalOpen(false);\n  }, [addDangerNotification, addSuccessNotification, timeSelect]);\n\n  const isLoading = saveTimePreference.loading || getTimePreference.loading;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      <Alert\n        className={alertClassName}\n        isInline\n        title={timeconfigTitle}\n        actionLinks={\n          <AlertActionLink onClick={handleModalToggle} ouiaId=\"TimeConfigModal\">\n            Edit time settings\n          </AlertActionLink>\n        }\n      />\n      <Modal\n        className=\"pf-v5-u-pl-xl\"\n        variant={ModalVariant.small}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isLoading={isLoading}\n            isDisabled={isLoading}\n            onClick={handleButtonSave}\n          >\n            {isLoading ? 'Loading' : 'Save'}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n        ouiaId=\"TimeConfigModal\"\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h2\">Action settings</Title>\n          </StackItem>\n          <StackItem>\n            <Text component={TextVariants.p}>Daily digest email receipt</Text>\n            <HelperText>\n              <HelperTextItem variant=\"indeterminate\">\n                Schedule the time at which to send your account&apos;s daily\n                digest email. All times will be converted to UTC after saving.\n              </HelperTextItem>\n            </HelperText>\n          </StackItem>\n        </Stack>\n        <br></br>\n        <Split>\n          <SplitItem isFilled>\n            <Stack hasGutter>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={!showCustomSelect}\n                    onChange={handleRadioSelect}\n                    id=\"settings-time-config\"\n                    label=\"Default time\"\n                    value=\"Default\"\n                    description=\"00:00 UTC\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={showCustomSelect}\n                    onChange={handleCustomRadioSelect}\n                    id=\"settings-time-config-custom\"\n                    label=\"Custom time\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              {showCustomSelect && (\n                <>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time</Text>\n                    <TimePicker\n                      onChange={handleTimePrefSelect}\n                      time={timeSelect?.baseCustomTime}\n                      width=\"263px\"\n                      stepMinutes={15}\n                      placeholder=\"00:00\"\n                      is24Hour\n                    />\n                  </StackItem>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time zone</Text>\n                    <MenuContainer\n                      isOpen={isOpen}\n                      onOpenChange={(isOpen) => setIsOpen(isOpen)}\n                      menu={\n                        <Menu ref={menuRef} isPlain={false}>\n                          <MenuContent id=\"timezoneMenu\">\n                            <MenuList className={timezoneListClassName}>\n                              {timezones.map((tz) => (\n                                // Abbr, value, offset, etc are not unique by themselves\n                                <MenuItem\n                                  onClick={handleTimezoneChange}\n                                  key={tz.text}\n                                >\n                                  {tz.text}\n                                </MenuItem>\n                              ))}\n                            </MenuList>\n                          </MenuContent>\n                        </Menu>\n                      }\n                      menuRef={menuRef}\n                      toggle={\n                        <MenuToggle\n                          id=\"timezone\"\n                          ref={toggleRef}\n                          onClick={onToggleClick}\n                          isExpanded={isOpen}\n                        >\n                          {timeSelect?.timezoneText ??\n                            '(UTC-00:00) Universal Time'}\n                        </MenuToggle>\n                      }\n                      toggleRef={toggleRef}\n                    />\n                  </StackItem>\n                </>\n              )}\n            </Stack>\n          </SplitItem>\n        </Split>\n      </Modal>\n    </>\n  );\n};\n\nexport default TimeConfigComponent;\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const AddAccessRequest = zodSchemaAddAccessRequest();\n  export type AddAccessRequest = {\n    application_id?: UUID | undefined | null;\n    role?: string | undefined | null;\n  };\n\n  export const AddApplicationRequest = zodSchemaAddApplicationRequest();\n  export type AddApplicationRequest = {\n    bundle_id: UUID;\n    display_name: string;\n    name: string;\n    owner_role?: string | undefined | null;\n  };\n\n  export const AggregationEmailTemplate = zodSchemaAggregationEmailTemplate();\n  export type AggregationEmailTemplate = {\n    application?: Application | undefined | null;\n    application_id?: UUID | undefined | null;\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: LocalDateTime | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    subscription_type: EmailSubscriptionType;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: LocalDateTime | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const Application1 = zodSchemaApplication1();\n  export type Application1 = {\n    display_name: string;\n    id: UUID;\n  };\n\n  export const ApplicationSettingsValue = zodSchemaApplicationSettingsValue();\n  export type ApplicationSettingsValue = {\n    hasForcedEmail?: boolean | undefined | null;\n    notifications?:\n      | {\n          [x: string]: boolean;\n        }\n      | undefined\n      | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    behaviors?: Array<EventTypeBehavior> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: LocalDateTime | undefined | null;\n    default_behavior?: boolean | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: LocalDateTime | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: LocalDateTime | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const BundleSettingsValue = zodSchemaBundleSettingsValue();\n  export type BundleSettingsValue = {\n    applications?:\n      | {\n          [x: string]: ApplicationSettingsValue;\n        }\n      | undefined\n      | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const CreateBehaviorGroupRequest =\n    zodSchemaCreateBehaviorGroupRequest();\n  export type CreateBehaviorGroupRequest = {\n    bundle_id?: UUID | undefined | null;\n    bundle_name?: string | undefined | null;\n    bundle_uuid_or_bundle_name_valid?: boolean | undefined | null;\n    display_name: string;\n    endpoint_ids?: Array<string> | undefined | null;\n    event_type_ids?: Array<string> | undefined | null;\n  };\n\n  export const CreateBehaviorGroupResponse =\n    zodSchemaCreateBehaviorGroupResponse();\n  export type CreateBehaviorGroupResponse = {\n    bundle_id: UUID;\n    created: LocalDateTime;\n    display_name: string;\n    endpoints: Array<string>;\n    event_types: Array<string>;\n    id: UUID;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: LocalDateTime | undefined | null;\n    start_time?: LocalDateTime | undefined | null;\n    status: Status;\n  };\n\n  export const DuplicateNameMigrationReport =\n    zodSchemaDuplicateNameMigrationReport();\n  export type DuplicateNameMigrationReport = {\n    updatedBehaviorGroups?: number | undefined | null;\n    updatedIntegrations?: number | undefined | null;\n  };\n\n  export const DrawerSubscriptionProperties = zodSchemaDrawerSubscriptionProperties();\n  export type DrawerSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    only_admins: boolean;\n    ignore_preferences: boolean;\n  }\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'INSTANT' | 'DAILY';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: LocalDateTime | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties | DrawerSubscriptionProperties)\n      | undefined\n      | null;\n    server_errors?: number | undefined | null;\n    status?: EndpointStatus | undefined | null;\n    sub_type?: string | undefined | null;\n    type: EndpointType;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointStatus = zodSchemaEndpointStatus();\n  export type EndpointStatus =\n    | 'READY'\n    | 'UNKNOWN'\n    | 'NEW'\n    | 'PROVISIONING'\n    | 'DELETING'\n    | 'FAILED';\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'camel'\n    | 'ansible'\n    | 'drawer';\n\n  export const Environment = zodSchemaEnvironment();\n  export type Environment = 'PROD' | 'STAGE' | 'EPHEMERAL' | 'LOCAL_SERVER';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: LocalDateTime;\n    event_type: string;\n    id: UUID;\n    payload?: string | undefined | null;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_id?: UUID | undefined | null;\n    endpoint_sub_type?: string | undefined | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    status: EventLogEntryActionStatus;\n  };\n\n  export const EventLogEntryActionStatus = zodSchemaEventLogEntryActionStatus();\n  export type EventLogEntryActionStatus =\n    | 'SENT'\n    | 'SUCCESS'\n    | 'PROCESSING'\n    | 'FAILED'\n    | 'UNKNOWN';\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    fully_qualified_name?: string | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const EventTypeBehavior = zodSchemaEventTypeBehavior();\n  export type EventTypeBehavior = {\n    created?: LocalDateTime | undefined | null;\n    event_type?: EventType | undefined | null;\n    id?: EventTypeBehaviorId | undefined | null;\n  };\n\n  export const EventTypeBehaviorId = zodSchemaEventTypeBehaviorId();\n  export type EventTypeBehaviorId = {\n    behaviorGroupId: UUID;\n    eventTypeId: UUID;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    children?: Array<Facet> | undefined | null;\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const InstantEmailTemplate = zodSchemaInstantEmailTemplate();\n  export type InstantEmailTemplate = {\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: LocalDateTime | undefined | null;\n    event_type?: EventType | undefined | null;\n    event_type_id?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const InternalApplicationUserPermission =\n    zodSchemaInternalApplicationUserPermission();\n  export type InternalApplicationUserPermission = {\n    application_display_name: string;\n    application_id: UUID;\n    role: string;\n  };\n\n  export const InternalRoleAccess = zodSchemaInternalRoleAccess();\n  export type InternalRoleAccess = {\n    application_id: UUID;\n    id?: UUID | undefined | null;\n    role: string;\n  };\n\n  export const InternalUserPermissions = zodSchemaInternalUserPermissions();\n  export type InternalUserPermissions = {\n    applications: Array<Application1>;\n    is_admin: boolean;\n    roles: Array<string>;\n  };\n\n  export const LocalDate = zodSchemaLocalDate();\n  export type LocalDate = string;\n\n  export const LocalDateTime = zodSchemaLocalDateTime();\n  export type LocalDateTime = string;\n\n  export const LocalTime = zodSchemaLocalTime();\n  export type LocalTime = string;\n\n  export const MessageValidationResponse = zodSchemaMessageValidationResponse();\n  export type MessageValidationResponse = {\n    errors: {\n      [x: string]: Array<string>;\n    };\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: LocalDateTime | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    endpointSubType?: string | undefined | null;\n    endpointType?: EndpointType | undefined | null;\n    id?: UUID | undefined | null;\n    invocationTime: number;\n    status: NotificationStatus;\n  };\n\n  export const NotificationStatus = zodSchemaNotificationStatus();\n  export type NotificationStatus =\n    | 'FAILED_INTERNAL'\n    | 'FAILED_EXTERNAL'\n    | 'PROCESSING'\n    | 'SENT'\n    | 'SUCCESS';\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const PageEventType = zodSchemaPageEventType();\n  export type PageEventType = {\n    data: Array<EventType>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    payload: string;\n    template: Array<string>;\n  };\n\n  export const RequestDefaultBehaviorGroupPropertyList =\n    zodSchemaRequestDefaultBehaviorGroupPropertyList();\n  export type RequestDefaultBehaviorGroupPropertyList = {\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    only_admins: boolean;\n  };\n\n  export const ServerInfo = zodSchemaServerInfo();\n  export type ServerInfo = {\n    environment?: Environment | undefined | null;\n  };\n\n  export const SettingsValues = zodSchemaSettingsValues();\n  export type SettingsValues = {\n    bundles?:\n      | {\n          [x: string]: BundleSettingsValue;\n        }\n      | undefined\n      | null;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'UP' | 'MAINTENANCE';\n\n  export const Template = zodSchemaTemplate();\n  export type Template = {\n    created?: LocalDateTime | undefined | null;\n    data: string;\n    description: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: LocalDateTime | undefined | null;\n  };\n\n  export const TriggerDailyDigestRequest = zodSchemaTriggerDailyDigestRequest();\n  export type TriggerDailyDigestRequest = {\n    application_name: string;\n    bundle_name: string;\n    end?: LocalDateTime | undefined | null;\n    org_id: string;\n    start?: LocalDateTime | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UpdateBehaviorGroupRequest =\n    zodSchemaUpdateBehaviorGroupRequest();\n  export type UpdateBehaviorGroupRequest = {\n    display_name?: string | undefined | null;\n    display_name_not_null_and_blank?: boolean | undefined | null;\n    endpoint_ids?: Array<string> | undefined | null;\n    event_type_ids?: Array<string> | undefined | null;\n  };\n\n  export const UserConfigPreferences = zodSchemaUserConfigPreferences();\n  export type UserConfigPreferences = {\n    daily_email?: boolean | undefined | null;\n    instant_email?: boolean | undefined | null;\n  };\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaAddAccessRequest() {\n      return z\n      .object({\n          application_id: zodSchemaUUID().optional().nullable(),\n          role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAddApplicationRequest() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          display_name: z.string(),\n          name: z.string(),\n          owner_role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAggregationEmailTemplate() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID().optional().nullable(),\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          subscription_type: zodSchemaEmailSubscriptionType(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication1() {\n      return z\n      .object({\n          display_name: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplicationSettingsValue() {\n      return z\n      .object({\n          hasForcedEmail: z.boolean().optional().nullable(),\n          notifications: z.record(z.boolean()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          behaviors: z.array(zodSchemaEventTypeBehavior()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          default_behavior: z.boolean().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundleSettingsValue() {\n      return z\n      .object({\n          applications: z\n          .record(zodSchemaApplicationSettingsValue())\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCreateBehaviorGroupRequest() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID().optional().nullable(),\n          bundle_name: z.string().optional().nullable(),\n          bundle_uuid_or_bundle_name_valid: z.boolean().optional().nullable(),\n          display_name: z.string(),\n          endpoint_ids: z.array(z.string()).optional().nullable(),\n          event_type_ids: z.array(z.string()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCreateBehaviorGroupResponse() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime(),\n          display_name: z.string(),\n          endpoints: z.array(z.string()),\n          event_types: z.array(z.string()),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: zodSchemaLocalDateTime().optional().nullable(),\n          start_time: zodSchemaLocalDateTime().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaDuplicateNameMigrationReport() {\n      return z\n      .object({\n          updatedBehaviorGroups: z.number().int().optional().nullable(),\n          updatedIntegrations: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaDrawerSubscriptionProperties() {\n    return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'INSTANT', 'DAILY' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          server_errors: z.number().int().optional().nullable(),\n          status: zodSchemaEndpointStatus().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          type: zodSchemaEndpointType(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointStatus() {\n      return z.enum([\n          'READY',\n          'UNKNOWN',\n          'NEW',\n          'PROVISIONING',\n          'DELETING',\n          'FAILED'\n      ]);\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'camel', 'ansible', 'drawer' ]);\n  }\n\n  function zodSchemaEnvironment() {\n      return z.enum([ 'PROD', 'STAGE', 'EPHEMERAL', 'LOCAL_SERVER' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: zodSchemaLocalDateTime(),\n          event_type: z.string(),\n          id: zodSchemaUUID(),\n          payload: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_id: zodSchemaUUID().optional().nullable(),\n          endpoint_sub_type: z.string().optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          status: zodSchemaEventLogEntryActionStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryActionStatus() {\n      return z.enum([ 'SENT', 'SUCCESS', 'PROCESSING', 'FAILED', 'UNKNOWN' ]);\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          fully_qualified_name: z.string().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventTypeBehavior() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          event_type: zodSchemaEventType().optional().nullable(),\n          id: zodSchemaEventTypeBehaviorId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventTypeBehaviorId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          eventTypeId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          children: z\n          .array(z.lazy(() => zodSchemaFacet()))\n          .optional()\n          .nullable(),\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaInstantEmailTemplate() {\n      return z\n      .object({\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          event_type: zodSchemaEventType().optional().nullable(),\n          event_type_id: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalApplicationUserPermission() {\n      return z\n      .object({\n          application_display_name: z.string(),\n          application_id: zodSchemaUUID(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalRoleAccess() {\n      return z\n      .object({\n          application_id: zodSchemaUUID(),\n          id: zodSchemaUUID().optional().nullable(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalUserPermissions() {\n      return z\n      .object({\n          applications: z.array(zodSchemaApplication1()),\n          is_admin: z.boolean(),\n          roles: z.array(z.string())\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLocalDate() {\n      return z.string();\n  }\n\n  function zodSchemaLocalDateTime() {\n      return z.string();\n  }\n\n  function zodSchemaLocalTime() {\n      return z.string();\n  }\n\n  function zodSchemaMessageValidationResponse() {\n      return z\n      .object({\n          errors: z.record(z.array(z.string()))\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          endpointSubType: z.string().optional().nullable(),\n          endpointType: zodSchemaEndpointType().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationTime: z.number().int(),\n          status: zodSchemaNotificationStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationStatus() {\n      return z.enum([\n          'FAILED_INTERNAL',\n          'FAILED_EXTERNAL',\n          'PROCESSING',\n          'SENT',\n          'SUCCESS'\n      ]);\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventType() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventType()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          payload: z.string(),\n          template: z.array(z.string())\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestDefaultBehaviorGroupPropertyList() {\n      return z\n      .object({\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaServerInfo() {\n      return z\n      .object({\n          environment: zodSchemaEnvironment().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaSettingsValues() {\n      return z\n      .object({\n          bundles: z.record(zodSchemaBundleSettingsValue()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'UP', 'MAINTENANCE' ]);\n  }\n\n  function zodSchemaTemplate() {\n      return z\n      .object({\n          created: zodSchemaLocalDateTime().optional().nullable(),\n          data: z.string(),\n          description: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaTriggerDailyDigestRequest() {\n      return z\n      .object({\n          application_name: z.string(),\n          bundle_name: z.string(),\n          end: zodSchemaLocalDateTime().optional().nullable(),\n          org_id: z.string(),\n          start: zodSchemaLocalDateTime().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUpdateBehaviorGroupRequest() {\n      return z\n      .object({\n          display_name: z.string().optional().nullable(),\n          display_name_not_null_and_blank: z.boolean().optional().nullable(),\n          endpoint_ids: z.array(z.string()).optional().nullable(),\n          event_type_ids: z.array(z.string()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUserConfigPreferences() {\n      return z\n      .object({\n          daily_email: z.boolean().optional().nullable(),\n          instant_email: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // POST /notifications/behaviorGroups\n  // Create a behavior group - assigning actions and linking to event types as requested\n  export namespace NotificationResourceCreateBehaviorGroup {\n    const Response400 = z.string();\n    type Response400 = string;\n    export interface Params {\n      body: Schemas.CreateBehaviorGroupRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'CreateBehaviorGroupResponse',\n          200,\n          Schemas.CreateBehaviorGroupResponse\n        >\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/behaviorGroups';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.CreateBehaviorGroupResponse,\n                    'CreateBehaviorGroupResponse',\n                    200\n                ),\n                new ValidateRule(Response400, 'unknown', 400),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/behaviorGroups/affectedByRemovalOfEndpoint/{endpointId}\n  // Retrieve the behavior groups affected by the removal of an endpoint.\n  export namespace NotificationResourceGetBehaviorGroupsAffectedByRemovalOfEndpoint {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/affectedByRemovalOfEndpoint/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/behaviorGroups/{behaviorGroupId}/actions\n  // Update the list of actions of a behavior group.\n  export namespace NotificationResourceUpdateBehaviorGroupActions {\n    const Body = z.array(z.string());\n    type Body = Array<string>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{behaviorGroupId}/actions'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/behaviorGroups/{id}\n  // Update a behavior group.\n  export namespace NotificationResourceUpdateBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    const Response400 = z.string();\n    type Response400 = string;\n    const Response404 = z.string();\n    type Response404 = string;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.UpdateBehaviorGroupRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', 404, Response404>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Response400, 'unknown', 400),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403),\n                new ValidateRule(Response404, 'unknown', 404)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/behaviorGroups/{id}\n  // Delete a behavior group.\n  export namespace NotificationResourceDeleteBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/behaviorGroups/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleId}/behaviorGroups\n  // Retrieve the behavior groups of a bundle.\n  export namespace NotificationResourceFindBehaviorGroupsByBundleId {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleId}/behaviorGroups'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleName}\n  // Retrieve the bundle by name\n  export namespace NotificationResourceGetBundleByName {\n    const BundleName = z.string();\n    type BundleName = string;\n    export interface Params {\n      bundleName: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleName}'.replace(\n            '{bundleName}',\n            params.bundleName.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleName}/applications/{applicationName}\n  // Retrieve the application by name of a given bundle name\n  export namespace NotificationResourceGetApplicationByNameAndBundleName {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application', 200, Schemas.Application>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleName}/applications/{applicationName}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application, 'Application', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/bundles/{bundleName}/applications/{applicationName}/eventTypes/{eventTypeName}\n  // Retrieve the event type by name of a given bundle name and application name\n  export namespace NotificationResourceGetEventTypesByNameAndBundleAndApplicationName {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const EventTypeName = z.string();\n    type EventTypeName = string;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      eventTypeName: EventTypeName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EventType', 200, Schemas.EventType>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/bundles/{bundleName}/applications/{applicationName}/eventTypes/{eventTypeName}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString())\n        .replace('{eventTypeName}', params.eventTypeName.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.EventType, 'EventType', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes\n  // Retrieve all event types. The returned list can be filtered by bundle or application.\n  export namespace NotificationResourceGetEventTypes {\n    const ApplicationIds = z.array(z.string());\n    type ApplicationIds = Array<string>;\n    const EventTypeName = z.string();\n    type EventTypeName = string;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    export interface Params {\n      applicationIds?: ApplicationIds;\n      bundleId?: Schemas.UUID;\n      eventTypeName?: EventTypeName;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'PageEventType', 200, Schemas.PageEventType>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes';\n        const query = {} as Record<string, any>;\n        if (params.applicationIds !== undefined) {\n            query.applicationIds = params.applicationIds;\n        }\n\n        if (params.bundleId !== undefined) {\n            query.bundleId = params.bundleId;\n        }\n\n        if (params.eventTypeName !== undefined) {\n            query.eventTypeName = params.eventTypeName;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.PageEventType, 'PageEventType', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}\n  // Retrieve the event types affected by the removal of a behavior group.\n  export namespace NotificationResourceGetEventTypesAffectedByRemovalOfBehaviorGroup {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/{eventTypeId}/behaviorGroups\n  // Retrieve the behavior groups linked to an event type.\n  export namespace NotificationResourceGetLinkedBehaviorGroups {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/eventTypes/{eventTypeId}/behaviorGroups\n  // Update the list of behavior groups of an event type.\n  export namespace NotificationResourceUpdateEventTypeBehaviors {\n    const Body = z.array(z.string());\n    type Body = Array<string>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/eventTypes/{eventTypeId}/behaviorGroups/{behaviorGroupId}\n  // Delete a behavior group from the given event type.\n  export namespace NotificationResourceDeleteBehaviorGroupFromEventType {\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups/{behaviorGroupId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/eventTypes/{eventTypeUuid}/behaviorGroups/{behaviorGroupUuid}\n  // Add a behavior group to the given event type.\n  export namespace NotificationResourceAppendBehaviorGroupToEventType {\n    export interface Params {\n      behaviorGroupUuid: Schemas.UUID;\n      eventTypeUuid: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/notifications/eventTypes/{eventTypeUuid}/behaviorGroups/{behaviorGroupUuid}'\n        .replace(\n            '{behaviorGroupUuid}',\n            params.behaviorGroupUuid.toString()\n        )\n        .replace('{eventTypeUuid}', params.eventTypeUuid.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/events\n  // Retrieve the event log entries.\n  export namespace EventResourceGetEvents {\n    const AppIds = z.array(z.string());\n    type AppIds = Array<string>;\n    const BundleIds = z.array(z.string());\n    type BundleIds = Array<string>;\n    const EndpointTypes = z.array(z.string());\n    type EndpointTypes = Array<string>;\n    const EventTypeDisplayName = z.string();\n    type EventTypeDisplayName = string;\n    const IncludeActions = z.boolean();\n    type IncludeActions = boolean;\n    const IncludeDetails = z.boolean();\n    type IncludeDetails = boolean;\n    const IncludePayload = z.boolean();\n    type IncludePayload = boolean;\n    const InvocationResults = z.array(z.boolean());\n    type InvocationResults = Array<boolean>;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Status = z.array(Schemas.EventLogEntryActionStatus);\n    type Status = Array<Schemas.EventLogEntryActionStatus>;\n    export interface Params {\n      appIds?: AppIds;\n      bundleIds?: BundleIds;\n      endDate?: Schemas.LocalDate;\n      endpointTypes?: EndpointTypes;\n      eventTypeDisplayName?: EventTypeDisplayName;\n      includeActions?: IncludeActions;\n      includeDetails?: IncludeDetails;\n      includePayload?: IncludePayload;\n      invocationResults?: InvocationResults;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n      startDate?: Schemas.LocalDate;\n      status?: Status;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'PageEventLogEntry', 200, Schemas.PageEventLogEntry>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/events';\n        const query = {} as Record<string, any>;\n        if (params.appIds !== undefined) {\n            query.appIds = params.appIds;\n        }\n\n        if (params.bundleIds !== undefined) {\n            query.bundleIds = params.bundleIds;\n        }\n\n        if (params.endDate !== undefined) {\n            query.endDate = params.endDate;\n        }\n\n        if (params.endpointTypes !== undefined) {\n            query.endpointTypes = params.endpointTypes;\n        }\n\n        if (params.eventTypeDisplayName !== undefined) {\n            query.eventTypeDisplayName = params.eventTypeDisplayName;\n        }\n\n        if (params.includeActions !== undefined) {\n            query.includeActions = params.includeActions;\n        }\n\n        if (params.includeDetails !== undefined) {\n            query.includeDetails = params.includeDetails;\n        }\n\n        if (params.includePayload !== undefined) {\n            query.includePayload = params.includePayload;\n        }\n\n        if (params.invocationResults !== undefined) {\n            query.invocationResults = params.invocationResults;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        if (params.startDate !== undefined) {\n            query.startDate = params.startDate;\n        }\n\n        if (params.status !== undefined) {\n            query.status = params.status;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.PageEventLogEntry,\n                    'PageEventLogEntry',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/applications\n  // Return a thin list of configured applications. This can be used to configure a filter in the UI\n  export namespace NotificationResourceGetApplicationsFacets {\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export interface Params {\n      bundleName?: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/applications';\n        const query = {} as Record<string, any>;\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/bundles\n  // Return a thin list of configured bundles. This can be used to configure a filter in the UI\n  export namespace NotificationResourceGetBundleFacets {\n    const IncludeApplications = z.boolean();\n    type IncludeApplications = boolean;\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export interface Params {\n      includeApplications?: IncludeApplications;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/bundles';\n        const query = {} as Record<string, any>;\n        if (params.includeApplications !== undefined) {\n            query.includeApplications = params.includeApplications;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /org-config/daily-digest/time-preference\n  export namespace OrgConfigResourceGetDailyDigestTimePreference {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/org-config/daily-digest/time-preference';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /org-config/daily-digest/time-preference\n  // Save the daily digest UTC time preference. To cover all time zones conversion to UTC, the accepted minute values are 00, 15, 30 and 45.\n  export namespace OrgConfigResourceSaveDailyDigestTimePreference {\n    export interface Params {\n      body: Schemas.LocalTime;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/org-config/daily-digest/time-preference';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /user-config/notification-preference\n  export namespace UserConfigResourceGetSettingsSchema {\n    const BundleName = z.string();\n    type BundleName = string;\n    export interface Params {\n      bundleName?: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/user-config/notification-preference';\n        const query = {} as Record<string, any>;\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /user-config/notification-preference\n  export namespace UserConfigResourceSaveSettings {\n    export interface Params {\n      body: Schemas.SettingsValues;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/user-config/notification-preference';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /user-config/notification-preference/{bundleName}/{applicationName}\n  export namespace UserConfigResourceGetPreferences {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'UserConfigPreferences',\n          200,\n          Schemas.UserConfigPreferences\n        >\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        '/api/notifications/v1.0/user-config/notification-preference/{bundleName}/{applicationName}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.UserConfigPreferences,\n                    'UserConfigPreferences',\n                    200\n                )\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import { AlertProps } from '@patternfly/react-core';\nimport { addNotification as createNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { clearNotifications as createClearNotificationsAction } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport type NotificationType = AlertProps['variant'];\ntype ExplicitNotificationFunction = (\n  title: string,\n  description: React.ReactNode,\n  dismissable?: boolean\n) => void;\n\n// Todo: Create a PR over frontend-components with a similar hook\nexport const useNotification = () => {\n  const dispatch = useDispatch();\n  return useMemo(() => {\n    const addNotification = (\n      variant: NotificationType,\n      title: string,\n      description: React.ReactNode,\n      dismissable?: boolean\n    ) =>\n      dispatch(\n        createNotificationAction({\n          variant,\n          title,\n          description,\n          dismissable,\n        })\n      );\n\n    const addSuccessNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('success', ...args);\n    const addDangerNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('danger', ...args);\n    const addInfoNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('info', ...args);\n    const addWarningNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('warning', ...args);\n    const clearNotifications = () => dispatch(createClearNotificationsAction());\n\n    return {\n      addNotification,\n      addSuccessNotification,\n      addDangerNotification,\n      addInfoNotification,\n      addWarningNotification,\n      clearNotifications,\n    };\n  }, [dispatch]);\n};\n"],"names":["actionCreator","params","OrgConfigResourceSaveDailyDigestTimePreference","body","alertClassName","style","marginTop","timezoneListClassName","maxHeight","maxWidth","overflowY","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","toggleRef","menuRef","getTimePreference","useQuery","OrgConfigResourceGetDailyDigestTimePreference","saveTimePreference","useMutation","addSuccessNotification","addDangerNotification","timePref","useMemo","error","payload","value","timeconfigTitle","utcTime","useEffect","baseCustomTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","handleCustomRadioSelect","handleTimePrefSelect","_ev","time","handleTimezoneChange","event","target","textContent","targetTimezone","find","t","text","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","addHours","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","headers","then","catch","isLoading","loading","handleModalToggle","Alert","className","isInline","title","actionLinks","AlertActionLink","onClick","ouiaId","Modal","variant","small","onClose","actions","Button","key","type","isDisabled","Stack","hasGutter","StackItem","Title","headingLevel","Text","component","p","HelperText","HelperTextItem","Split","SplitItem","isFilled","Skeleton","Radio","isChecked","onChange","id","label","description","name","h6","TimePicker","width","stepMinutes","placeholder","is24Hour","MenuContainer","onOpenChange","menu","Menu","ref","isPlain","MenuContent","MenuList","tz","MenuItem","toggle","MenuToggle","isExpanded","Schemas","Operations","zodSchemaApplication","bundle_id","zodSchemaUUID","created","zodSchemaLocalDateTime","optional","nullable","display_name","updated","nonstrict","zodSchemaApplication1","zodSchemaApplicationSettingsValue","hasForcedEmail","notifications","zodSchemaBasicAuthentication","password","username","zodSchemaBehaviorGroupAction","endpoint","zodSchemaEndpoint","zodSchemaBehaviorGroupActionId","behaviorGroupId","endpointId","zodSchemaBundle","zodSchemaBundleSettingsValue","applications","zodSchemaCamelProperties","basic_authentication","disable_ssl_verification","extras","secret_token","url","zodSchemaEmailSubscriptionProperties","group_id","ignore_preferences","only_admins","zodSchemaEmailSubscriptionType","enabled","properties","zodSchemaWebhookProperties","server_errors","int","status","zodSchemaEndpointStatus","sub_type","zodSchemaEndpointType","zodSchemaEnvironment","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","application","bundle","event_type","details","endpoint_id","endpoint_sub_type","endpoint_type","zodSchemaEventLogEntryActionStatus","zodSchemaEventType","application_id","fully_qualified_name","zodSchemaEventTypeBehavior","zodSchemaEventTypeBehaviorId","eventTypeId","zodSchemaHttpType","zodSchemaMeta","count","zodSchemaNotificationStatus","zodSchemaStatus","zodSchemaTemplate","data","method","AddAccessRequest","role","AddApplicationRequest","owner_role","AggregationEmailTemplate","body_template","body_template_id","subject_template","subject_template_id","subscription_type","Application","Application1","ApplicationSettingsValue","BasicAuthentication","BehaviorGroup","behaviors","default_behavior","BehaviorGroupAction","BehaviorGroupActionId","Bundle","BundleSettingsValue","CamelProperties","CreateBehaviorGroupRequest","bundle_name","bundle_uuid_or_bundle_name_valid","endpoint_ids","event_type_ids","CreateBehaviorGroupResponse","endpoints","event_types","CurrentStatus","end_time","start_time","DuplicateNameMigrationReport","updatedBehaviorGroups","updatedIntegrations","DrawerSubscriptionProperties","EmailSubscriptionProperties","EmailSubscriptionType","Endpoint","EndpointPage","links","meta","EndpointProperties","EndpointStatus","EndpointType","Environment","EventLogEntry","EventLogEntryAction","EventLogEntryActionStatus","EventType","EventTypeBehavior","EventTypeBehaviorId","Facet","zodSchemaFacet","children","displayName","HttpType","InstantEmailTemplate","event_type_id","InternalApplicationUserPermission","application_display_name","InternalRoleAccess","InternalUserPermissions","is_admin","roles","LocalDate","LocalDateTime","LocalTime","MessageValidationResponse","errors","Meta","NotificationHistory","endpointSubType","endpointType","invocationTime","NotificationStatus","PageEventLogEntry","PageEventType","RenderEmailTemplateRequest","template","RequestDefaultBehaviorGroupPropertyList","RequestEmailSubscriptionProperties","ServerInfo","environment","SettingsValues","bundles","Status","Template","TriggerDailyDigestRequest","application_name","end","org_id","start","UUID","UpdateBehaviorGroupRequest","display_name_not_null_and_blank","UserConfigPreferences","daily_email","instant_email","WebhookProperties","__Empty","max","NotificationResourceCreateBehaviorGroup","NotificationResourceGetBehaviorGroupsAffectedByRemovalOfEndpoint","NotificationResourceUpdateBehaviorGroupActions","NotificationResourceUpdateBehaviorGroup","NotificationResourceDeleteBehaviorGroup","NotificationResourceFindBehaviorGroupsByBundleId","NotificationResourceGetBundleByName","NotificationResourceGetApplicationByNameAndBundleName","NotificationResourceGetEventTypesByNameAndBundleAndApplicationName","NotificationResourceGetEventTypes","NotificationResourceGetEventTypesAffectedByRemovalOfBehaviorGroup","NotificationResourceGetLinkedBehaviorGroups","NotificationResourceUpdateEventTypeBehaviors","NotificationResourceDeleteBehaviorGroupFromEventType","NotificationResourceAppendBehaviorGroupToEventType","EventResourceGetEvents","NotificationResourceGetApplicationsFacets","NotificationResourceGetBundleFacets","UserConfigResourceGetSettingsSchema","UserConfigResourceSaveSettings","UserConfigResourceGetPreferences","Response400","actionBuilder","queryParams","config","rules","ValidateRule","build","Response200","path","replace","Response404","bundleId","bundleName","applicationName","eventTypeName","query","applicationIds","limit","pageNumber","sortBy","sort_by","behaviorGroupUuid","eventTypeUuid","appIds","bundleIds","endDate","endpointTypes","eventTypeDisplayName","includeActions","includeDetails","includePayload","invocationResults","startDate","includeApplications","useNotification","dispatch","useDispatch","addNotification","dismissable","args","addInfoNotification","addWarningNotification","clearNotifications"],"sourceRoot":""}
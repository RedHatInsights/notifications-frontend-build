{"version":3,"file":"js/exposed-./TimeConfig.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/services/Notifications/GetTimePreference.ts","webpack:///./src/services/Notifications/SaveTimePreference.ts","webpack:///./src/utils/AlertUtils.ts"],"sourcesContent":["import {\n  AlertActionLink,\n  Button,\n  HelperText,\n  HelperTextItem,\n  Menu,\n  MenuContainer,\n  MenuContent,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  Modal,\n  ModalVariant,\n  Radio,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  TimePicker,\n  Title,\n} from '@patternfly/react-core';\nimport { Alert } from '@patternfly/react-core';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useGetTimePreference } from '../../services/Notifications/GetTimePreference';\nimport { useUpdateTimePreference } from '../../services/Notifications/SaveTimePreference';\nimport { useNotification } from '../../utils/AlertUtils';\nimport axios from 'axios';\n\nconst alertClassName = style({\n  marginTop: '12px',\n});\n\nconst timezoneListClassName = style({\n  maxHeight: '200px',\n  maxWidth: '400px',\n  overflowY: 'auto',\n});\n\ninterface TimeConfigState {\n  utcTime: string;\n  baseCustomTime: string;\n  timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n  const [showCustomSelect, setShowCustomSelect] = React.useState(false);\n  const [timeSelect, setTimeSelect] = React.useState<TimeConfigState>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleRef = React.useRef<HTMLButtonElement>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n\n  const getTimePreference = useGetTimePreference();\n  const saveTimePreference = useUpdateTimePreference();\n  const { addSuccessNotification, addDangerNotification } = useNotification();\n\n  const timePref = useMemo(() => {\n    if (getTimePreference.error) {\n      return undefined;\n    }\n\n    return getTimePreference.payload?.value as string;\n  }, [getTimePreference.payload?.value, getTimePreference.error]);\n\n  const timeconfigTitle = useMemo(() => {\n    return `Any daily digest emails you've opted into will be sent at ${\n      timeSelect?.utcTime ? timeSelect?.utcTime : '00:00'\n    } UTC`;\n  }, [timeSelect?.utcTime]);\n\n  // Set the time preference value once we load it from the server\n  useEffect(() => {\n    if (timePref) {\n      setTimeSelect({\n        baseCustomTime: timePref,\n        utcTime: timePref,\n        timezoneText: undefined,\n      });\n      setShowCustomSelect(timePref !== '00:00:00');\n    }\n  }, [timePref]);\n\n  const handleRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(false);\n    setTimeSelect({\n      utcTime: '00:00',\n      baseCustomTime: '00:00',\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleCustomRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(true);\n  }, []);\n\n  const handleTimePrefSelect = React.useCallback((_ev, time) => {\n    setTimeSelect({\n      baseCustomTime: time,\n      utcTime: time,\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const handleTimezoneChange = React.useCallback((event?: MouseEvent) => {\n    if (event?.target) {\n      const target = event.target;\n      const textContent = (target as HTMLElement).textContent;\n      const targetTimezone = timezones.find((t) => t.text === textContent);\n      if (targetTimezone) {\n        setTimeSelect((prev) => {\n          if (prev?.baseCustomTime) {\n            const pieces = prev.baseCustomTime\n              .split(':')\n              .map((t) => parseInt(t));\n            const date = new Date();\n            date.setUTCHours(pieces[0], pieces[1]);\n            // Going from UTC to the timezone\n            const zonedDate = addHours(date, -targetTimezone.offset);\n            const utcHours = zonedDate\n              .getUTCHours()\n              .toString()\n              .padStart(2, '0');\n            const utcMinutes = zonedDate\n              .getUTCMinutes()\n              .toString()\n              .padStart(2, '0');\n\n            return {\n              ...prev,\n              utcTime: `${utcHours}:${utcMinutes}`,\n              timezoneText: targetTimezone.text,\n            };\n          }\n\n          return prev;\n        });\n      }\n    }\n\n    setIsOpen(false);\n  }, []);\n\n  const handleButtonSave = React.useCallback(() => {\n    if (timeSelect) {\n      const body = timeSelect.utcTime;\n      axios\n        .put(\n          '/api/notifications/v1.0/org-config/daily-digest/time-preference',\n          body,\n          {\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }\n        )\n        .then(() => {\n          addSuccessNotification('Action settings saved', '');\n        })\n        .catch(() => {\n          addDangerNotification('Failed to save action settings', '');\n        });\n    }\n\n    setIsModalOpen(false);\n  }, [addDangerNotification, addSuccessNotification, timeSelect]);\n\n  const isLoading = saveTimePreference.loading || getTimePreference.loading;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      <Alert\n        className={alertClassName}\n        isInline\n        title={timeconfigTitle}\n        actionLinks={\n          <AlertActionLink onClick={handleModalToggle} ouiaId=\"TimeConfigModal\">\n            Edit time settings\n          </AlertActionLink>\n        }\n      />\n      <Modal\n        className=\"pf-v5-u-pl-xl\"\n        variant={ModalVariant.small}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isLoading={isLoading}\n            isDisabled={isLoading}\n            onClick={handleButtonSave}\n          >\n            {isLoading ? 'Loading' : 'Save'}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n        ouiaId=\"TimeConfigModal\"\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h2\">Action settings</Title>\n          </StackItem>\n          <StackItem>\n            <Text component={TextVariants.p}>Daily digest email receipt</Text>\n            <HelperText>\n              <HelperTextItem variant=\"indeterminate\">\n                Schedule the time at which to send your account&apos;s daily\n                digest email. All times will be converted to UTC after saving.\n              </HelperTextItem>\n            </HelperText>\n          </StackItem>\n        </Stack>\n        <br></br>\n        <Split>\n          <SplitItem isFilled>\n            <Stack hasGutter>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={!showCustomSelect}\n                    onChange={handleRadioSelect}\n                    id=\"settings-time-config\"\n                    label=\"Default time\"\n                    value=\"Default\"\n                    description=\"00:00 UTC\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={showCustomSelect}\n                    onChange={handleCustomRadioSelect}\n                    id=\"settings-time-config-custom\"\n                    label=\"Custom time\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              {showCustomSelect && (\n                <>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time</Text>\n                    <TimePicker\n                      onChange={handleTimePrefSelect}\n                      time={timeSelect?.baseCustomTime}\n                      width=\"263px\"\n                      stepMinutes={15}\n                      placeholder=\"00:00\"\n                      is24Hour\n                    />\n                  </StackItem>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time zone</Text>\n                    <MenuContainer\n                      isOpen={isOpen}\n                      onOpenChange={(isOpen) => setIsOpen(isOpen)}\n                      menu={\n                        <Menu ref={menuRef} isPlain={false}>\n                          <MenuContent id=\"timezoneMenu\">\n                            <MenuList className={timezoneListClassName}>\n                              {timezones.map((tz) => (\n                                // Abbr, value, offset, etc are not unique by themselves\n                                <MenuItem\n                                  onClick={handleTimezoneChange}\n                                  key={tz.text}\n                                >\n                                  {tz.text}\n                                </MenuItem>\n                              ))}\n                            </MenuList>\n                          </MenuContent>\n                        </Menu>\n                      }\n                      menuRef={menuRef}\n                      toggle={\n                        <MenuToggle\n                          id=\"timezone\"\n                          ref={toggleRef}\n                          onClick={onToggleClick}\n                          isExpanded={isOpen}\n                        >\n                          {timeSelect?.timezoneText ??\n                            '(UTC-00:00) Universal Time'}\n                        </MenuToggle>\n                      }\n                      toggleRef={toggleRef}\n                    />\n                  </StackItem>\n                </>\n              )}\n            </Stack>\n          </SplitItem>\n        </Split>\n      </Modal>\n    </>\n  );\n};\n\nexport default TimeConfigComponent;\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const useGetTimePreference = () => {\n  return useQuery(\n    Operations.OrgConfigResourceGetDailyDigestTimePreference.actionCreator()\n  );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport type SaveTimePrefActionsParams = {\n  body: string;\n};\n\nconst actionCreator = (params: SaveTimePrefActionsParams) => {\n  return Operations.OrgConfigResourceSaveDailyDigestTimePreference.actionCreator(\n    {\n      body: params.body,\n    }\n  );\n};\n\nexport const useUpdateTimePreference = () => {\n  return useMutation(actionCreator);\n};\n","import { AlertProps } from '@patternfly/react-core';\nimport { addNotification as createNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { clearNotifications as createClearNotificationsAction } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport type NotificationType = AlertProps['variant'];\ntype ExplicitNotificationFunction = (\n  title: string,\n  description: React.ReactNode,\n  dismissable?: boolean\n) => void;\n\n// Todo: Create a PR over frontend-components with a similar hook\nexport const useNotification = () => {\n  const dispatch = useDispatch();\n  return useMemo(() => {\n    const addNotification = (\n      variant: NotificationType,\n      title: string,\n      description: React.ReactNode,\n      dismissable?: boolean\n    ) =>\n      dispatch(\n        createNotificationAction({\n          variant,\n          title,\n          description,\n          dismissable,\n        })\n      );\n\n    const addSuccessNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('success', ...args);\n    const addDangerNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('danger', ...args);\n    const addInfoNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('info', ...args);\n    const addWarningNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('warning', ...args);\n    const clearNotifications = () => dispatch(createClearNotificationsAction());\n\n    return {\n      addNotification,\n      addSuccessNotification,\n      addDangerNotification,\n      addInfoNotification,\n      addWarningNotification,\n      clearNotifications,\n    };\n  }, [dispatch]);\n};\n"],"names":["alertClassName","style","marginTop","timezoneListClassName","maxHeight","maxWidth","overflowY","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","toggleRef","menuRef","getTimePreference","saveTimePreference","addSuccessNotification","addDangerNotification","timePref","useMemo","error","payload","value","timeconfigTitle","utcTime","useEffect","baseCustomTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","handleCustomRadioSelect","handleTimePrefSelect","_ev","time","handleTimezoneChange","event","target","textContent","targetTimezone","find","t","text","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","body","headers","then","catch","isLoading","loading","handleModalToggle","className","isInline","title","actionLinks","onClick","ouiaId","variant","small","onClose","actions","key","type","isDisabled","hasGutter","headingLevel","component","p","isFilled","isChecked","onChange","id","label","description","name","h6","width","stepMinutes","placeholder","is24Hour","onOpenChange","menu","ref","isPlain","tz","toggle","isExpanded","useGetTimePreference","useQuery","OrgConfigResourceGetDailyDigestTimePreference","actionCreator","params","OrgConfigResourceSaveDailyDigestTimePreference","useUpdateTimePreference","useMutation","useNotification","dispatch","useDispatch","addNotification","dismissable","args","addInfoNotification","addWarningNotification","clearNotifications"],"sourceRoot":""}
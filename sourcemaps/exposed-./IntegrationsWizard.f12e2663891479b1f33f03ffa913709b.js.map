{"version":3,"file":"js/exposed-./IntegrationsWizard.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/pages/Integrations/Create/IntegrationWizard.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/Recipient.ts"],"sourcesContent":["import componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport * as React from 'react';\nimport Review from './Review';\nimport CardSelect from './CustomComponents/CardSelect';\nimport InlineAlert from './CustomComponents/InlineAlert';\nimport SelectableTable from './CustomComponents/SelectableTable';\nimport { schema } from './schema';\nimport {\n  CARD_SELECT,\n  INLINE_ALERT,\n  INTEGRATION_TYPE,\n  REVIEW,\n  SELECTABLE_TABLE,\n  TABLE_TOOLBAR,\n} from './helpers';\nimport { Integration } from '../../../types/Integration';\nimport TableToolbar from './CustomComponents/TableToolbar';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport { IntegrationsData } from './CustomComponents/FinalStep';\nimport { FinalWizard } from './FinalWizard';\nexport interface IntegrationWizardProps {\n  category: string;\n  isOpen: boolean;\n  isEdit: boolean;\n  template?: Partial<\n    Integration & {\n      secretToken: string;\n      id: string;\n      extras?: {\n        channel?: string;\n      };\n    }\n  >;\n  closeModal: () => void;\n  afterSubmit: () => void;\n}\nexport const IntegrationWizard: React.FunctionComponent<\n  IntegrationWizardProps\n> = ({\n  isOpen,\n  isEdit,\n  template,\n  closeModal,\n  category,\n}: IntegrationWizardProps) => {\n  const mapperExtension = {\n    [REVIEW]: Review,\n    [CARD_SELECT]: CardSelect,\n    [INLINE_ALERT]: InlineAlert,\n    [SELECTABLE_TABLE]: SelectableTable,\n    [TABLE_TOOLBAR]: TableToolbar,\n  };\n  const isBehaviorGroupsEnabled = useFlag(\n    'platform.integrations.behavior-groups-move'\n  );\n  const [wizardOpen, setWizardOpen] = React.useState<boolean>(isOpen);\n  const [wizardState, setWizardState] = React.useState<\n    IntegrationsData | undefined\n  >();\n  React.useEffect(() => {\n    setWizardOpen(isOpen);\n  }, [isOpen]);\n  return (\n    <React.Fragment>\n      {wizardOpen ? (\n        <FormRenderer\n          schema={schema(category, isEdit, isBehaviorGroupsEnabled)}\n          componentMapper={{ ...componentMapper, ...mapperExtension }}\n          onSubmit={({\n            url,\n            [INTEGRATION_TYPE]: intType,\n            name,\n            'secret-token': secret_token,\n            'event-types-table': event_type_id,\n            'product-family': bundle_name,\n          }) => {\n            const [type, sub_type] = intType?.split(':') || ['webhook'];\n            if (!isBehaviorGroupsEnabled) {\n              fetch(\n                `/api/integrations/v1.0/endpoints${\n                  isEdit ? `/${template?.id}` : ''\n                }`,\n                {\n                  method: isEdit ? 'PUT' : 'POST',\n                  headers: {\n                    'Content-Type': 'application/json;charset=UTF-8',\n                  },\n                  body: JSON.stringify({\n                    name,\n                    enabled: true,\n                    type,\n                    ...(sub_type && { sub_type }),\n                    description: '',\n                    properties: {\n                      method: 'POST',\n                      url,\n                      disable_ssl_verification: false,\n                      secret_token,\n                    },\n                  }),\n                }\n              );\n              closeModal();\n            } else {\n              setWizardState({\n                isEdit,\n                url,\n                type,\n                sub_type,\n                name,\n                secret_token,\n                event_type_id,\n                bundle_name,\n                template,\n              });\n              setWizardOpen(false);\n            }\n          }}\n          initialValues={\n            isEdit\n              ? {\n                  ...template,\n                  'secret-token': template?.secretToken,\n                }\n              : {}\n          }\n          onCancel={closeModal}\n        >\n          {(props) => {\n            return <Pf4FormTemplate {...props} showFormControls={false} />;\n          }}\n        </FormRenderer>\n      ) : null}\n      {wizardState !== undefined && (\n        <FinalWizard\n          data={wizardState}\n          onClose={() => {\n            setWizardState(undefined);\n            closeModal();\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default IntegrationWizard;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n  id: UUID;\n  applicationDisplayName: string;\n  eventTypeDisplayName: string;\n  description?: string;\n}\n\nexport interface Notification extends EventType {\n  actions?: Array<Action>;\n  useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<\n  UserIntegration,\n  'id' | 'name' | 'type' | 'isEnabled'\n>;\n\nexport interface DefaultNotificationBehavior {\n  actions: Array<Action>;\n}\n\nexport interface ActionBase {\n  type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n  type: NotificationType.INTEGRATION;\n  integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n  type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n  recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n  action.type === NotificationType.EMAIL_SUBSCRIPTION ||\n  action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (\n  action: Action\n): action is ActionIntegration => action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n  EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n  DRAWER = 'DRAWER',\n  INTEGRATION = 'INTEGRATION',\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n  readonly id: UUID;\n  readonly actions: ReadonlyArray<Action>;\n  readonly events: ReadonlyArray<EventType>;\n  readonly bundleId: UUID;\n  readonly displayName: string;\n  readonly bundleName?: string;\n  readonly isDefault: boolean;\n};\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> &\n  Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<\n  BehaviorGroup | NewBehaviorGroup,\n  'isDefault'\n>;\n\nexport type EmailSystemProperties = {\n  type: NotificationType.EMAIL_SUBSCRIPTION;\n  props: {\n    onlyAdmins: boolean;\n    ignorePreferences: false;\n    groupId: undefined | UUID;\n  };\n};\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n  props: {\n    onlyAdmins: boolean;\n    groupId: undefined | UUID;\n    ignorePreferences: false;\n  };\n};\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(\n  properties: SystemProperties\n): properties is EmailSystemProperties {\n  return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(\n  properties: SystemProperties\n): properties is DrawerSystemProperties {\n  return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (\n  actions: ReadonlyArray<Action | undefined>\n): Array<UUID | undefined> => {\n  return actions\n    .map((action) => {\n      if (action === undefined) {\n        return [undefined];\n      }\n\n      if (action.type === NotificationType.INTEGRATION) {\n        return [action.integration.id];\n      } else {\n        return action.recipient.map((r) => r.integrationId);\n      }\n    })\n    .flat();\n};\n\nexport const areActionsEqual = (\n  actions1: ReadonlyArray<Action | undefined>,\n  actions2: ReadonlyArray<Action | undefined>\n): boolean => {\n  if (actions1.length !== actions2.length) {\n    return false;\n  }\n\n  const integrations1 = getIntegrationIds(actions1);\n  const integrations2 = getIntegrationIds(actions2);\n\n  if (integrations1.length !== integrations2.length) {\n    return false;\n  }\n\n  // Order matters here, no sorting.\n  return integrations1.every((val, index) => val === integrations2[index]);\n};\n","import { IntegrationRef, UUID } from './Notification';\n\nexport abstract class Recipient {\n  readonly displayName: string;\n\n  protected constructor(displayName: string) {\n    this.displayName = displayName;\n  }\n\n  public abstract getKey();\n  public abstract equals(recipient: Recipient);\n}\n\nexport class IntegrationRecipient extends Recipient {\n  readonly integration: IntegrationRef;\n\n  public constructor(integration: IntegrationRef) {\n    super(integration.name + (integration.isEnabled ? '' : ' - Disabled'));\n    this.integration = integration;\n  }\n\n  public getKey() {\n    return this.integration.id;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof IntegrationRecipient) {\n      return recipient.integration.id === this.integration.id;\n    }\n\n    return false;\n  }\n}\n\nexport abstract class BaseNotificationRecipient extends Recipient {\n  readonly integrationId: UUID | undefined;\n  readonly key: string;\n  readonly description: string | undefined;\n\n  protected constructor(\n    displayName: string,\n    description: string | undefined,\n    integrationId: UUID | undefined,\n    key: string\n  ) {\n    super(displayName);\n\n    this.key = key;\n    this.description = description;\n    this.integrationId = integrationId;\n  }\n\n  public getKey() {\n    return this.key;\n  }\n}\n\nexport class NotificationUserRecipient extends BaseNotificationRecipient {\n  readonly sendToAdmin: boolean;\n  readonly ignorePreferences: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    sendToAdmin: boolean,\n    ignorePreferences: boolean\n  ) {\n    let displayName;\n    let description;\n\n    if (sendToAdmin) {\n      displayName = 'Admins';\n      description = 'Organization administrators for your account';\n    } else {\n      displayName = 'All';\n      description =\n        'All users in your organization who subscribed to this email in their Notification Preferences';\n    }\n\n    super(\n      displayName,\n      description,\n      integrationId,\n      sendToAdmin ? 'users-admin' : 'users-all'\n    );\n\n    this.sendToAdmin = sendToAdmin;\n    this.ignorePreferences = ignorePreferences;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationUserRecipient) {\n      return (\n        recipient.sendToAdmin === this.sendToAdmin &&\n        recipient.ignorePreferences === this.ignorePreferences\n      );\n    }\n\n    return false;\n  }\n}\n\nexport class NotificationRbacGroupRecipient extends BaseNotificationRecipient {\n  readonly groupId: UUID;\n  readonly isLoading: boolean;\n  readonly hasError: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    groupId: UUID,\n    displayNameOrIsLoading: string | boolean\n  ) {\n    let displayName;\n    let isLoading;\n    let hasError;\n\n    if (typeof displayNameOrIsLoading === 'string') {\n      displayName = displayNameOrIsLoading;\n      isLoading = false;\n      hasError = false;\n    } else {\n      displayName = 'Loading';\n      isLoading = displayNameOrIsLoading;\n      hasError = !displayNameOrIsLoading;\n    }\n\n    super(displayName, undefined, integrationId, `rbac-group-${groupId}`);\n\n    this.groupId = groupId;\n    this.isLoading = isLoading;\n    this.hasError = hasError;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationRbacGroupRecipient) {\n      return recipient.groupId === this.groupId;\n    }\n\n    return false;\n  }\n}\n"],"names":["IntegrationWizard","isOpen","isEdit","template","closeModal","category","mapperExtension","isBehaviorGroupsEnabled","useFlag","wizardOpen","setWizardOpen","wizardState","setWizardState","schema","componentMapper","onSubmit","url","intType","name","secret_token","event_type_id","bundle_name","type","sub_type","split","fetch","id","method","headers","body","JSON","stringify","enabled","description","properties","disable_ssl_verification","initialValues","secretToken","onCancel","props","showFormControls","undefined","data","onClose","isActionNotify","action","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","isDrawerSystemProperties","getIntegrationIds","actions","map","integration","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","Recipient","displayName","this","IntegrationRecipient","super","isEnabled","getKey","equals","BaseNotificationRecipient","key","NotificationUserRecipient","sendToAdmin","ignorePreferences","NotificationRbacGroupRecipient","groupId","displayNameOrIsLoading","isLoading","hasError"],"sourceRoot":""}
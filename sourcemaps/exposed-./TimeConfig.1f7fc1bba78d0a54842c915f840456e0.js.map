{"version":3,"file":"js/exposed-./TimeConfig.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/api/constants.ts","webpack:///./src/api/api.js","webpack:///./src/api/helpers/notifications/time-preference-helper.ts","webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/utils/AlertUtils.ts"],"sourcesContent":["export const NOTIFICATIONS_API_BASE = `/api/notifications/v1`;\nexport const INTEGRATIONS_API_BASE = `/api/integrations/v2`;\n","import axios from 'axios';\nimport {\n  errorInterceptor,\n  interceptor500,\n  responseDataInterceptor,\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\n\n// Notifications endpoints\nimport getBundleFacets from '@redhat-cloud-services/notifications-client/dist/NotificationResourceV1GetBundleFacets';\nimport getEventTypes from '@redhat-cloud-services/notifications-client/dist/NotificationResourceV1GetEventTypes';\n\n// Integrations endpoints\nimport createEndpoint from '@redhat-cloud-services/integrations-client/dist/EndpointResourceV1CreateEndpoint';\nimport updateEndpoint from '@redhat-cloud-services/integrations-client/dist/EndpointResourceV1UpdateEndpoint';\nimport getEndpoint from '@redhat-cloud-services/integrations-client/dist/v2/EndpointResourceV2GetEndpoint';\n\n// Time config endpoints\nimport getTimePreference from '@redhat-cloud-services/notifications-client/dist/OrgConfigResourceV1GetDailyDigestTimePreference';\nimport putTimePreference from '@redhat-cloud-services/notifications-client/dist/OrgConfigResourceV1SaveDailyDigestTimePreference';\n\nimport { APIFactory } from '@redhat-cloud-services/javascript-clients-shared';\nimport { INTEGRATIONS_API_BASE, NOTIFICATIONS_API_BASE } from './constants';\n\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(responseDataInterceptor);\naxiosInstance.interceptors.response.use(null, interceptor500);\naxiosInstance.interceptors.response.use(null, errorInterceptor);\n\nconst notificationsApi = new APIFactory(\n  NOTIFICATIONS_API_BASE,\n  {\n    getBundleFacets,\n    getEventTypes,\n    getTimePreference,\n    putTimePreference,\n  },\n  { axios: axiosInstance }\n);\n\nconst integrationsApi = new APIFactory(\n  INTEGRATIONS_API_BASE,\n  {\n    createEndpoint,\n    updateEndpoint,\n    getEndpoint,\n  },\n  { axios: axiosInstance }\n);\n\n// Exported APIs\nexport function getNotificationsApi() {\n  return notificationsApi;\n}\n\nexport function getIntegrationsApi() {\n  return integrationsApi;\n}\n","import { getNotificationsApi } from '../../api';\n\nconst notificationsApi = getNotificationsApi();\n\nexport async function getTimeConfig() {\n  return await notificationsApi.getTimePreference();\n}\n\nexport async function setTimeConfig(time: string) {\n  return await notificationsApi.putTimePreference({ body: time });\n}\n","import {\n  AlertActionLink,\n  Button,\n  HelperText,\n  HelperTextItem,\n  Menu,\n  MenuContainer,\n  MenuContent,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  Modal,\n  ModalVariant,\n  Radio,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  TimePicker,\n  Title,\n} from '@patternfly/react-core';\nimport { Alert } from '@patternfly/react-core';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useNotification } from '../../utils/AlertUtils';\nimport {\n  getTimeConfig,\n  setTimeConfig,\n} from '../../api/helpers/notifications/time-preference-helper';\n\nconst alertClassName = style({\n  marginTop: '12px',\n});\n\nconst timezoneListClassName = style({\n  maxHeight: '200px',\n  maxWidth: '400px',\n  overflowY: 'auto',\n});\n\ninterface TimeConfigState {\n  utcTime: string;\n  baseCustomTime: string;\n  timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n  const [showCustomSelect, setShowCustomSelect] = React.useState(false);\n  const [timePref, setTimePref] = React.useState<string | null>();\n  const [timeSelect, setTimeSelect] = React.useState<TimeConfigState | null>(\n    null\n  );\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleRef = React.useRef<HTMLButtonElement>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n\n  const { addSuccessNotification, addDangerNotification } = useNotification();\n\n  React.useEffect(() => {\n    const timePreferenceLoad = async () => setTimePref(await getTimeConfig());\n    timePreferenceLoad();\n  }, []);\n\n  const timeconfigTitle = useMemo(() => {\n    return `Any daily digest emails you've opted into will be sent at ${\n      timeSelect?.utcTime ? timeSelect?.utcTime : '00:00'\n    } UTC`;\n  }, [timeSelect?.utcTime]);\n\n  // Set the time preference value once we load it from the server\n  useEffect(() => {\n    if (timePref) {\n      setTimeSelect({\n        baseCustomTime: timePref,\n        utcTime: timePref,\n        timezoneText: undefined,\n      });\n      setShowCustomSelect(timePref !== '00:00:00');\n    }\n  }, [timePref]);\n\n  const handleRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(false);\n    setTimeSelect({\n      utcTime: '00:00',\n      baseCustomTime: '00:00',\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleCustomRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(true);\n  }, []);\n\n  const handleTimePrefSelect = React.useCallback((_ev, time) => {\n    setTimeSelect({\n      baseCustomTime: time,\n      utcTime: time,\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const handleTimezoneChange = React.useCallback((event?: MouseEvent) => {\n    if (event?.target) {\n      const target = event.target;\n      const textContent = (target as HTMLElement).textContent;\n      const targetTimezone = timezones.find((t) => t.text === textContent);\n      if (targetTimezone) {\n        setTimeSelect((prev) => {\n          const pieces = (prev?.baseCustomTime || '00:00')\n            .split(':')\n            .map((t) => parseInt(t));\n          const date = new Date();\n          date.setUTCHours(pieces[0], pieces[1]);\n          // Going from UTC to the timezone\n          const zonedDate = addHours(date, -targetTimezone.offset);\n          const utcHours = zonedDate.getUTCHours().toString().padStart(2, '0');\n          const utcMinutes = zonedDate\n            .getUTCMinutes()\n            .toString()\n            .padStart(2, '0');\n\n          return {\n            baseCustomTime: prev?.baseCustomTime || '00:00',\n            utcTime: `${utcHours}:${utcMinutes}`,\n            timezoneText: targetTimezone.text,\n          };\n        });\n      }\n    }\n\n    setIsOpen(false);\n  }, []);\n\n  const handleButtonSave = React.useCallback(() => {\n    if (timeSelect) {\n      setTimeConfig(`${timeSelect.utcTime}:00`)\n        .then(() => {\n          addSuccessNotification('Action settings saved', '');\n        })\n        .catch(() => {\n          addDangerNotification('Failed to save action settings', '');\n        });\n    }\n\n    setIsModalOpen(false);\n  }, [addDangerNotification, addSuccessNotification, timeSelect]);\n\n  const isLoading = timeSelect === null || timePref === null;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      <Alert\n        className={alertClassName}\n        isInline\n        title={timeconfigTitle}\n        actionLinks={\n          <AlertActionLink onClick={handleModalToggle} ouiaId=\"TimeConfigModal\">\n            Edit time settings\n          </AlertActionLink>\n        }\n      />\n      <Modal\n        className=\"pf-v5-u-pl-xl\"\n        variant={ModalVariant.small}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isLoading={isLoading}\n            isDisabled={isLoading}\n            onClick={handleButtonSave}\n          >\n            {isLoading ? 'Loading' : 'Save'}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n        ouiaId=\"TimeConfigModal\"\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h2\">Action settings</Title>\n          </StackItem>\n          <StackItem>\n            <Text component={TextVariants.p}>Daily digest email receipt</Text>\n            <HelperText>\n              <HelperTextItem variant=\"indeterminate\">\n                Schedule the time at which to send your account&apos;s daily\n                digest email. All times will be converted to UTC after saving.\n              </HelperTextItem>\n            </HelperText>\n          </StackItem>\n        </Stack>\n        <br></br>\n        <Split>\n          <SplitItem isFilled>\n            <Stack hasGutter>\n              <StackItem>\n                {timePref === null ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={!showCustomSelect}\n                    onChange={handleRadioSelect}\n                    id=\"settings-time-config\"\n                    label=\"Default time\"\n                    value=\"Default\"\n                    description=\"00:00 UTC\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              <StackItem>\n                {timePref === null ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={showCustomSelect}\n                    onChange={handleCustomRadioSelect}\n                    id=\"settings-time-config-custom\"\n                    label=\"Custom time\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              {showCustomSelect && (\n                <>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time</Text>\n                    <TimePicker\n                      onChange={handleTimePrefSelect}\n                      time={timeSelect?.baseCustomTime}\n                      width=\"263px\"\n                      stepMinutes={15}\n                      placeholder=\"00:00\"\n                      is24Hour\n                    />\n                  </StackItem>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time zone</Text>\n                    <MenuContainer\n                      isOpen={isOpen}\n                      onOpenChange={(isOpen) => setIsOpen(isOpen)}\n                      menu={\n                        <Menu ref={menuRef} isPlain={false}>\n                          <MenuContent id=\"timezoneMenu\">\n                            <MenuList className={timezoneListClassName}>\n                              {timezones.map((tz) => (\n                                // Abbr, value, offset, etc are not unique by themselves\n                                <MenuItem\n                                  onClick={handleTimezoneChange}\n                                  key={tz.text}\n                                >\n                                  {tz.text}\n                                </MenuItem>\n                              ))}\n                            </MenuList>\n                          </MenuContent>\n                        </Menu>\n                      }\n                      menuRef={menuRef}\n                      toggle={\n                        <MenuToggle\n                          id=\"timezone\"\n                          ref={toggleRef}\n                          onClick={onToggleClick}\n                          isExpanded={isOpen}\n                        >\n                          {timeSelect?.timezoneText ??\n                            '(UTC-00:00) Universal Time'}\n                        </MenuToggle>\n                      }\n                      toggleRef={toggleRef}\n                    />\n                  </StackItem>\n                </>\n              )}\n            </Stack>\n          </SplitItem>\n        </Split>\n      </Modal>\n    </>\n  );\n};\n\nexport default TimeConfigComponent;\n","import { AlertProps } from '@patternfly/react-core';\nimport { addNotification as createNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { clearNotifications as createClearNotificationsAction } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport type NotificationType = AlertProps['variant'];\ntype ExplicitNotificationFunction = (\n  title: string,\n  description: React.ReactNode,\n  dismissable?: boolean\n) => void;\n\n// Todo: Create a PR over frontend-components with a similar hook\nexport const useNotification = () => {\n  const dispatch = useDispatch();\n  return useMemo(() => {\n    const addNotification = (\n      variant: NotificationType,\n      title: string,\n      description: React.ReactNode,\n      dismissable?: boolean\n    ) =>\n      dispatch(\n        createNotificationAction({\n          variant,\n          title,\n          description,\n          dismissable,\n        })\n      );\n\n    const addSuccessNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('success', ...args);\n    const addDangerNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('danger', ...args);\n    const addInfoNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('info', ...args);\n    const addWarningNotification: ExplicitNotificationFunction = (...args) =>\n      addNotification('warning', ...args);\n    const clearNotifications = () => dispatch(createClearNotificationsAction());\n\n    return {\n      addNotification,\n      addSuccessNotification,\n      addDangerNotification,\n      addInfoNotification,\n      addWarningNotification,\n      clearNotifications,\n    };\n  }, [dispatch]);\n};\n"],"names":["axiosInstance","interceptors","response","use","notificationsApi","APIFactory","getBundleFacets","getEventTypes","getTimePreference","putTimePreference","axios","integrationsApi","createEndpoint","updateEndpoint","getEndpoint","getNotificationsApi","getIntegrationsApi","async","getTimeConfig","setTimeConfig","time","body","alertClassName","style","marginTop","timezoneListClassName","maxHeight","maxWidth","overflowY","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timePref","setTimePref","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","toggleRef","menuRef","addSuccessNotification","addDangerNotification","timePreferenceLoad","timeconfigTitle","useMemo","utcTime","useEffect","baseCustomTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","handleCustomRadioSelect","handleTimePrefSelect","_ev","handleTimezoneChange","event","target","textContent","targetTimezone","find","t","text","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","then","catch","isLoading","handleModalToggle","className","isInline","title","actionLinks","onClick","ouiaId","variant","small","onClose","actions","key","type","isDisabled","hasGutter","headingLevel","component","p","isFilled","isChecked","onChange","id","label","value","description","name","h6","width","stepMinutes","placeholder","is24Hour","onOpenChange","menu","ref","isPlain","tz","toggle","isExpanded","useNotification","dispatch","useDispatch","addNotification","dismissable","args","addInfoNotification","addWarningNotification","clearNotifications"],"sourceRoot":""}
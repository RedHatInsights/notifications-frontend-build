{"version":3,"file":"js/exposed-./IntegrationsTable.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/app/IntegrationsApp.tsx","webpack:///./src/IntegrationsEntry.tsx","webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/pages/Integrations/Create/IntegrationWizard.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/Recipient.ts"],"sourcesContent":["import './App.scss';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { NotificationsPortal } from '../components/Store/NotificationsPortal';\nimport IntegrationsList from '../pages/Integrations/List/List';\nimport { IntegrationCategory } from '../types/Integration';\nimport { AppContext } from './AppContext';\nimport { RbacGroupContextProvider } from './rbac/RbacGroupContextProvider';\nimport { useApp } from './useApp';\nimport { AppEntryProps } from '../AppEntry';\n\ninterface IntegrationsAppProps {\n  activeCategory?: string;\n}\n\nconst IntegrationsApp: React.ComponentType<\n  IntegrationsAppProps & AppEntryProps\n> = ({ activeCategory, ...props }: IntegrationsAppProps) => {\n  const { rbac, server, isOrgAdmin } = useApp();\n\n  const category =\n    activeCategory &&\n    Object.values(IntegrationCategory).includes(\n      activeCategory as unknown as IntegrationCategory\n    )\n      ? (activeCategory as IntegrationCategory)\n      : undefined;\n\n  return rbac && server ? (\n    <AppContext.Provider\n      value={{\n        rbac,\n        server,\n        isOrgAdmin: !!isOrgAdmin,\n      }}\n    >\n      <RbacGroupContextProvider>\n        <NotificationsPortal />\n        <IntegrationsList category={category} {...props} />\n      </RbacGroupContextProvider>\n    </AppContext.Provider>\n  ) : (\n    <Bullseye>\n      <Spinner size=\"xl\" />\n    </Bullseye>\n  );\n};\n\nexport default IntegrationsApp;\n","import IntlProvider from '@redhat-cloud-services/frontend-components-translations/Provider';\nimport {\n  createFetchingClient,\n  getInsights,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\n\nimport messages from '../locales/data.json';\nimport IntegrationsApp from './app/IntegrationsApp';\nimport { AppEntryProps } from './AppEntry';\nimport { getNotificationsRegistry } from './store/Store';\n\nenableMapSet();\n\nconst IntegrationsEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n  const client = React.useMemo(\n    () =>\n      createFetchingClient(getInsights, {\n        responseInterceptors: [validateSchemaResponseInterceptor],\n      }),\n    []\n  );\n\n  const store = React.useMemo(() => {\n    const registry = props.logger\n      ? getNotificationsRegistry(props.logger)\n      : getNotificationsRegistry();\n    return registry.getStore();\n  }, [props.logger]);\n\n  return (\n    <IntlProvider\n      locale={navigator.language.slice(0, 2)}\n      messages={messages}\n      onError={console.log}\n    >\n      <Provider store={store}>\n        <ClientContextProvider client={client}>\n          <IntegrationsApp {...props} />\n        </ClientContextProvider>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nexport default IntegrationsEntry;\n","import {\n  AlertActionLink,\n  Button,\n  HelperText,\n  HelperTextItem,\n  Menu,\n  MenuContainer,\n  MenuContent,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  Modal,\n  ModalVariant,\n  Radio,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  TimePicker,\n  Title,\n} from '@patternfly/react-core';\nimport { Alert } from '@patternfly/react-core';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useNotification } from '../../utils/AlertUtils';\nimport {\n  getTimeConfig,\n  setTimeConfig,\n} from '../../api/helpers/notifications/time-preference-helper';\n\nconst alertClassName = style({\n  marginTop: '12px',\n});\n\nconst timezoneListClassName = style({\n  maxHeight: '200px',\n  maxWidth: '400px',\n  overflowY: 'auto',\n});\n\ninterface TimeConfigState {\n  utcTime: string;\n  baseCustomTime: string;\n  timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n  const [showCustomSelect, setShowCustomSelect] = React.useState(false);\n  const [timePref, setTimePref] = React.useState<string | null>();\n  const [timeSelect, setTimeSelect] = React.useState<TimeConfigState | null>(\n    null\n  );\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleRef = React.useRef<HTMLButtonElement>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n\n  const { addSuccessNotification, addDangerNotification } = useNotification();\n\n  React.useEffect(() => {\n    const timePreferenceLoad = async () => setTimePref(await getTimeConfig());\n    timePreferenceLoad();\n  }, []);\n\n  const timeconfigTitle = useMemo(() => {\n    return `Any daily digest emails you've opted into will be sent at ${\n      timeSelect?.utcTime ? timeSelect?.utcTime : '00:00'\n    } UTC`;\n  }, [timeSelect?.utcTime]);\n\n  // Set the time preference value once we load it from the server\n  useEffect(() => {\n    if (timePref) {\n      setTimeSelect({\n        baseCustomTime: timePref,\n        utcTime: timePref,\n        timezoneText: undefined,\n      });\n      setShowCustomSelect(timePref !== '00:00:00');\n    }\n  }, [timePref]);\n\n  const handleRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(false);\n    setTimeSelect({\n      utcTime: '00:00',\n      baseCustomTime: '00:00',\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleCustomRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(true);\n  }, []);\n\n  const handleTimePrefSelect = React.useCallback((_ev, time) => {\n    setTimeSelect({\n      baseCustomTime: time,\n      utcTime: time,\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const handleTimezoneChange = React.useCallback((event?: MouseEvent) => {\n    if (event?.target) {\n      const target = event.target;\n      const textContent = (target as HTMLElement).textContent;\n      const targetTimezone = timezones.find((t) => t.text === textContent);\n      if (targetTimezone) {\n        setTimeSelect((prev) => {\n          const pieces = (prev?.baseCustomTime || '00:00')\n            .split(':')\n            .map((t) => parseInt(t));\n          const date = new Date();\n          date.setUTCHours(pieces[0], pieces[1]);\n          // Going from UTC to the timezone\n          const zonedDate = addHours(date, -targetTimezone.offset);\n          const utcHours = zonedDate.getUTCHours().toString().padStart(2, '0');\n          const utcMinutes = zonedDate\n            .getUTCMinutes()\n            .toString()\n            .padStart(2, '0');\n\n          return {\n            baseCustomTime: prev?.baseCustomTime || '00:00',\n            utcTime: `${utcHours}:${utcMinutes}`,\n            timezoneText: targetTimezone.text,\n          };\n        });\n      }\n    }\n\n    setIsOpen(false);\n  }, []);\n\n  const handleButtonSave = React.useCallback(() => {\n    if (timeSelect) {\n      setTimeConfig(`${timeSelect.utcTime}:00`)\n        .then(() => {\n          addSuccessNotification('Action settings saved', '');\n        })\n        .catch(() => {\n          addDangerNotification('Failed to save action settings', '');\n        });\n    }\n\n    setIsModalOpen(false);\n  }, [addDangerNotification, addSuccessNotification, timeSelect]);\n\n  const isLoading = timeSelect === null || timePref === null;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      <Alert\n        className={alertClassName}\n        isInline\n        title={timeconfigTitle}\n        actionLinks={\n          <AlertActionLink onClick={handleModalToggle} ouiaId=\"TimeConfigModal\">\n            Edit time settings\n          </AlertActionLink>\n        }\n      />\n      <Modal\n        className=\"pf-v5-u-pl-xl\"\n        variant={ModalVariant.small}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isLoading={isLoading}\n            isDisabled={isLoading}\n            onClick={handleButtonSave}\n          >\n            {isLoading ? 'Loading' : 'Save'}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n        ouiaId=\"TimeConfigModal\"\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h2\">Action settings</Title>\n          </StackItem>\n          <StackItem>\n            <Text component={TextVariants.p}>Daily digest email receipt</Text>\n            <HelperText>\n              <HelperTextItem variant=\"indeterminate\">\n                Schedule the time at which to send your account&apos;s daily\n                digest email. All times will be converted to UTC after saving.\n              </HelperTextItem>\n            </HelperText>\n          </StackItem>\n        </Stack>\n        <br></br>\n        <Split>\n          <SplitItem isFilled>\n            <Stack hasGutter>\n              <StackItem>\n                {timePref === null ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={!showCustomSelect}\n                    onChange={handleRadioSelect}\n                    id=\"settings-time-config\"\n                    label=\"Default time\"\n                    value=\"Default\"\n                    description=\"00:00 UTC\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              <StackItem>\n                {timePref === null ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={showCustomSelect}\n                    onChange={handleCustomRadioSelect}\n                    id=\"settings-time-config-custom\"\n                    label=\"Custom time\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              {showCustomSelect && (\n                <>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time</Text>\n                    <TimePicker\n                      onChange={handleTimePrefSelect}\n                      time={timeSelect?.baseCustomTime}\n                      width=\"263px\"\n                      stepMinutes={15}\n                      placeholder=\"00:00\"\n                      is24Hour\n                    />\n                  </StackItem>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time zone</Text>\n                    <MenuContainer\n                      isOpen={isOpen}\n                      onOpenChange={(isOpen) => setIsOpen(isOpen)}\n                      menu={\n                        <Menu ref={menuRef} isPlain={false}>\n                          <MenuContent id=\"timezoneMenu\">\n                            <MenuList className={timezoneListClassName}>\n                              {timezones.map((tz) => (\n                                // Abbr, value, offset, etc are not unique by themselves\n                                <MenuItem\n                                  onClick={handleTimezoneChange}\n                                  key={tz.text}\n                                >\n                                  {tz.text}\n                                </MenuItem>\n                              ))}\n                            </MenuList>\n                          </MenuContent>\n                        </Menu>\n                      }\n                      menuRef={menuRef}\n                      toggle={\n                        <MenuToggle\n                          id=\"timezone\"\n                          ref={toggleRef}\n                          onClick={onToggleClick}\n                          isExpanded={isOpen}\n                        >\n                          {timeSelect?.timezoneText ??\n                            '(UTC-00:00) Universal Time'}\n                        </MenuToggle>\n                      }\n                      toggleRef={toggleRef}\n                    />\n                  </StackItem>\n                </>\n              )}\n            </Stack>\n          </SplitItem>\n        </Split>\n      </Modal>\n    </>\n  );\n};\n\nexport default TimeConfigComponent;\n","import componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport * as React from 'react';\nimport Review from './Review';\nimport CardSelect from './CustomComponents/CardSelect';\nimport InlineAlert from './CustomComponents/InlineAlert';\nimport SelectableTable from './CustomComponents/SelectableTable';\nimport { schema } from './schema';\nimport {\n  CARD_SELECT,\n  INLINE_ALERT,\n  INTEGRATION_TYPE,\n  REVIEW,\n  SELECTABLE_TABLE,\n  TABLE_TOOLBAR,\n} from './helpers';\nimport { Integration } from '../../../types/Integration';\nimport TableToolbar from './CustomComponents/TableToolbar';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport {\n  createEndpoint,\n  updateEndpoint,\n} from '../../../api/helpers/integrations/endpoints-helper';\nimport { useNotification } from '../../../utils/AlertUtils';\n\nexport interface IntegrationWizardProps {\n  category: string;\n  isOpen: boolean;\n  isEdit: boolean;\n  template?: Partial<\n    Integration & {\n      secretToken: string;\n      id: string;\n      extras?: {\n        channel?: string;\n      };\n    }\n  >;\n  closeModal: () => void;\n  afterSubmit: () => void;\n}\nexport const IntegrationWizard: React.FunctionComponent<\n  IntegrationWizardProps\n> = ({\n  isOpen,\n  isEdit,\n  template,\n  afterSubmit,\n  closeModal,\n  category,\n}: IntegrationWizardProps) => {\n  const mapperExtension = {\n    [REVIEW]: Review,\n    [CARD_SELECT]: CardSelect,\n    [INLINE_ALERT]: InlineAlert,\n    [SELECTABLE_TABLE]: SelectableTable,\n    [TABLE_TOOLBAR]: TableToolbar,\n  };\n  const isBehaviorGroupsEnabled = useFlag(\n    'platform.integrations.behavior-groups-move'\n  );\n  const isPagerDutyEnabled = useFlag('platform.integrations.pager-duty');\n  const notifications = useNotification();\n  const [wizardOpen, setWizardOpen] = React.useState<boolean>(isOpen);\n  React.useEffect(() => {\n    setWizardOpen(isOpen);\n  }, [isOpen]);\n\n  return (\n    <React.Fragment>\n      {wizardOpen && (\n        <FormRenderer\n          schema={schema(\n            category,\n            isEdit,\n            isBehaviorGroupsEnabled,\n            isPagerDutyEnabled\n          )}\n          componentMapper={{ ...componentMapper, ...mapperExtension }}\n          onSubmit={({\n            url,\n            [INTEGRATION_TYPE]: intType,\n            name,\n            'secret-token': secret_token,\n            'event-types-table': event_types,\n            severity,\n          }) => {\n            const [type, sub_type] = intType?.split(':') || ['webhook'];\n            const data = {\n              name,\n              enabled: true,\n              type,\n              ...(sub_type && { sub_type }),\n              description: '',\n              properties: {\n                method: 'POST',\n                url,\n                disable_ssl_verification: false,\n                secret_token,\n                severity,\n              },\n              ...(isBehaviorGroupsEnabled && {\n                event_types: event_types\n                  ? Object.values(event_types as object).flatMap(Object.keys)\n                  : [],\n              }),\n            };\n            isEdit && template?.id\n              ? updateEndpoint(\n                  template?.id,\n                  data,\n                  undefined,\n                  notifications,\n                  afterSubmit\n                )\n              : createEndpoint(data, notifications, afterSubmit);\n            closeModal();\n          }}\n          initialValues={\n            isEdit\n              ? {\n                  ...template,\n                  'secret-token': template?.secretToken,\n                }\n              : {}\n          }\n          onCancel={closeModal}\n        >\n          {(props) => <Pf4FormTemplate {...props} showFormControls={false} />}\n        </FormRenderer>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default IntegrationWizard;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n  id: UUID;\n  applicationDisplayName: string;\n  eventTypeDisplayName: string;\n  description?: string;\n}\n\nexport interface Notification extends EventType {\n  actions?: Array<Action>;\n  useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<\n  UserIntegration,\n  'id' | 'name' | 'type' | 'isEnabled'\n>;\n\nexport interface DefaultNotificationBehavior {\n  actions: Array<Action>;\n}\n\nexport interface ActionBase {\n  type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n  type: NotificationType.INTEGRATION;\n  integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n  type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n  recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n  action.type === NotificationType.EMAIL_SUBSCRIPTION ||\n  action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (\n  action: Action\n): action is ActionIntegration => action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n  EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n  DRAWER = 'DRAWER',\n  INTEGRATION = 'INTEGRATION',\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n  readonly id: UUID;\n  readonly actions: ReadonlyArray<Action>;\n  readonly events: ReadonlyArray<EventType>;\n  readonly bundleId: UUID;\n  readonly displayName: string;\n  readonly bundleName?: string;\n  readonly isDefault: boolean;\n};\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> &\n  Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<\n  BehaviorGroup | NewBehaviorGroup,\n  'isDefault'\n>;\n\nexport type EmailSystemProperties = {\n  type: NotificationType.EMAIL_SUBSCRIPTION;\n  props: {\n    onlyAdmins: boolean;\n    ignorePreferences: false;\n    groupId: undefined | UUID;\n  };\n};\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n  props: {\n    onlyAdmins: boolean;\n    groupId: undefined | UUID;\n    ignorePreferences: false;\n  };\n};\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(\n  properties: SystemProperties\n): properties is EmailSystemProperties {\n  return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(\n  properties: SystemProperties\n): properties is DrawerSystemProperties {\n  return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (\n  actions: ReadonlyArray<Action | undefined>\n): Array<UUID | undefined> => {\n  return actions\n    .map((action) => {\n      if (action === undefined) {\n        return [undefined];\n      }\n\n      if (action.type === NotificationType.INTEGRATION) {\n        return [action.integration.id];\n      } else {\n        return action.recipient.map((r) => r.integrationId);\n      }\n    })\n    .flat();\n};\n\nexport const areActionsEqual = (\n  actions1: ReadonlyArray<Action | undefined>,\n  actions2: ReadonlyArray<Action | undefined>\n): boolean => {\n  if (actions1.length !== actions2.length) {\n    return false;\n  }\n\n  const integrations1 = getIntegrationIds(actions1);\n  const integrations2 = getIntegrationIds(actions2);\n\n  if (integrations1.length !== integrations2.length) {\n    return false;\n  }\n\n  // Order matters here, no sorting.\n  return integrations1.every((val, index) => val === integrations2[index]);\n};\n","import { IntegrationRef, UUID } from './Notification';\n\nexport abstract class Recipient {\n  readonly displayName: string;\n\n  protected constructor(displayName: string) {\n    this.displayName = displayName;\n  }\n\n  public abstract getKey();\n  public abstract equals(recipient: Recipient);\n}\n\nexport class IntegrationRecipient extends Recipient {\n  readonly integration: IntegrationRef;\n\n  public constructor(integration: IntegrationRef) {\n    super(integration.name + (integration.isEnabled ? '' : ' - Disabled'));\n    this.integration = integration;\n  }\n\n  public getKey() {\n    return this.integration.id;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof IntegrationRecipient) {\n      return recipient.integration.id === this.integration.id;\n    }\n\n    return false;\n  }\n}\n\nexport abstract class BaseNotificationRecipient extends Recipient {\n  readonly integrationId: UUID | undefined;\n  readonly key: string;\n  readonly description: string | undefined;\n\n  protected constructor(\n    displayName: string,\n    description: string | undefined,\n    integrationId: UUID | undefined,\n    key: string\n  ) {\n    super(displayName);\n\n    this.key = key;\n    this.description = description;\n    this.integrationId = integrationId;\n  }\n\n  public getKey() {\n    return this.key;\n  }\n}\n\nexport class NotificationUserRecipient extends BaseNotificationRecipient {\n  readonly sendToAdmin: boolean;\n  readonly ignorePreferences: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    sendToAdmin: boolean,\n    ignorePreferences: boolean\n  ) {\n    let displayName;\n    let description;\n\n    if (sendToAdmin) {\n      displayName = 'Admins';\n      description = 'Organization administrators for your account';\n    } else {\n      displayName = 'All';\n      description =\n        'All users in your organization who subscribed to this email in their Notification Preferences';\n    }\n\n    super(\n      displayName,\n      description,\n      integrationId,\n      sendToAdmin ? 'users-admin' : 'users-all'\n    );\n\n    this.sendToAdmin = sendToAdmin;\n    this.ignorePreferences = ignorePreferences;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationUserRecipient) {\n      return (\n        recipient.sendToAdmin === this.sendToAdmin &&\n        recipient.ignorePreferences === this.ignorePreferences\n      );\n    }\n\n    return false;\n  }\n}\n\nexport class NotificationRbacGroupRecipient extends BaseNotificationRecipient {\n  readonly groupId: UUID;\n  readonly isLoading: boolean;\n  readonly hasError: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    groupId: UUID,\n    displayNameOrIsLoading: string | boolean\n  ) {\n    let displayName;\n    let isLoading;\n    let hasError;\n\n    if (typeof displayNameOrIsLoading === 'string') {\n      displayName = displayNameOrIsLoading;\n      isLoading = false;\n      hasError = false;\n    } else {\n      displayName = 'Loading';\n      isLoading = displayNameOrIsLoading;\n      hasError = !displayNameOrIsLoading;\n    }\n\n    super(displayName, undefined, integrationId, `rbac-group-${groupId}`);\n\n    this.groupId = groupId;\n    this.isLoading = isLoading;\n    this.hasError = hasError;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationRbacGroupRecipient) {\n      return recipient.groupId === this.groupId;\n    }\n\n    return false;\n  }\n}\n"],"names":["activeCategory","props","rbac","server","isOrgAdmin","useApp","category","Object","values","Integration","includes","undefined","AppContext","Provider","value","RbacGroupContextProvider","NotificationsPortal","Bullseye","Spinner","size","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","g","getStore","locale","navigator","language","slice","messages","onError","console","log","ClientContextProvider","alertClassName","style","marginTop","timezoneListClassName","maxHeight","maxWidth","overflowY","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timePref","setTimePref","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","toggleRef","menuRef","addSuccessNotification","addDangerNotification","async","timePreferenceLoad","timeconfigTitle","useMemo","utcTime","useEffect","baseCustomTime","timezoneText","handleRadioSelect","isOpen","setIsOpen","handleCustomRadioSelect","handleTimePrefSelect","_ev","time","handleTimezoneChange","event","target","textContent","targetTimezone","find","t","text","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","then","catch","isLoading","handleModalToggle","className","isInline","title","actionLinks","onClick","ouiaId","variant","small","onClose","actions","key","type","isDisabled","hasGutter","headingLevel","component","p","isFilled","isChecked","onChange","id","label","description","name","h6","width","stepMinutes","placeholder","is24Hour","onOpenChange","menu","ref","isPlain","tz","toggle","isExpanded","IntegrationWizard","isEdit","template","afterSubmit","closeModal","mapperExtension","isBehaviorGroupsEnabled","useFlag","isPagerDutyEnabled","notifications","wizardOpen","setWizardOpen","schema","componentMapper","onSubmit","url","intType","secret_token","event_types","severity","sub_type","data","enabled","properties","method","disable_ssl_verification","flatMap","keys","initialValues","secretToken","onCancel","showFormControls","isActionNotify","action","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","isDrawerSystemProperties","getIntegrationIds","integration","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","Recipient","displayName","this","IntegrationRecipient","super","isEnabled","getKey","equals","BaseNotificationRecipient","NotificationUserRecipient","sendToAdmin","ignorePreferences","NotificationRbacGroupRecipient","groupId","displayNameOrIsLoading","hasError"],"sourceRoot":""}
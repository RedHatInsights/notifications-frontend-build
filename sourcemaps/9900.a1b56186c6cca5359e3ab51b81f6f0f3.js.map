{"version":3,"file":"js/9900.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/app/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/bootstrap.tsx","webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/pages/Integrations/Create/IntegrationWizard.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/Recipient.ts"],"sourcesContent":["import './App.scss';\n\nimport { Switch } from '@patternfly/react-core';\nimport Maintenance from '@redhat-cloud-services/frontend-components/Maintenance';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport {\n  InsightsEnvDetector,\n  RenderIfTrue,\n  getInsights,\n  toUtc,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport format from 'date-fns/format';\nimport * as React from 'react';\n\nimport { NotificationsPortal } from '../components/Store/NotificationsPortal';\nimport { Routes } from '../Routes';\nimport { staging } from '../types/Environments';\nimport { ServerStatus } from '../types/Server';\nimport { AppContext } from './AppContext';\nimport { AppSkeleton } from './AppSkeleton';\nimport { RbacGroupContextProvider } from './rbac/RbacGroupContextProvider';\nimport { useApp } from './useApp';\n\nconst utcFormat = 'HH:mm';\nconst regularFormat = 'hh:mma';\nconst timezoneFormat = 'O';\n\nconst App: React.ComponentType = () => {\n  const { updateDocumentTitle } = useChrome();\n\n  updateDocumentTitle?.('Notifications');\n  const { rbac, server, isOrgAdmin } = useApp();\n  const insights = getInsights();\n  const [usingExperimental, setUsingExperimental] =\n    React.useState<boolean>(false);\n\n  const toggleExperimental = React.useCallback(\n    (isEnabled) => {\n      if (isEnabled) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (insights.chrome as any).getEnvironmentOriginal =\n          insights.chrome.getEnvironment;\n        insights.chrome.getEnvironment = () => 'ci';\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        insights.chrome.getEnvironment = (insights.chrome as any)\n          .getEnvironmentOriginal as typeof insights.chrome.getEnvironment;\n      }\n\n      setUsingExperimental(isEnabled);\n    },\n    [insights]\n  );\n\n  if (!rbac || !server) {\n    return <AppSkeleton />;\n  }\n\n  if (server.status === ServerStatus.MAINTENANCE) {\n    const utcStartTime = format(toUtc(server.from), utcFormat);\n    const utcEndTime = format(toUtc(server.to), utcFormat);\n    const startTime = format(server.from, regularFormat);\n    const endTime = format(server.to, regularFormat);\n    const timezone = format(server.to, timezoneFormat);\n\n    return (\n      <Maintenance\n        utcStartTime={utcStartTime}\n        utcEndTime={utcEndTime}\n        startTime={startTime}\n        endTime={endTime}\n        timeZone={timezone}\n      />\n    );\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        rbac,\n        server,\n        isOrgAdmin: !!isOrgAdmin,\n      }}\n    >\n      <RbacGroupContextProvider>\n        <NotificationsPortal />\n        <InsightsEnvDetector insights={insights} onEnvironment={staging}>\n          <RenderIfTrue>\n            <Switch\n              className=\"pf-v5-u-p-sm\"\n              isChecked={usingExperimental}\n              onChange={toggleExperimental}\n              labelOff=\"Enable experimental features\"\n              label=\"Disable experimental features\"\n            />\n          </RenderIfTrue>\n        </InsightsEnvDetector>\n        <Routes />\n      </RbacGroupContextProvider>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","import IntlProvider from '@redhat-cloud-services/frontend-components-translations/Provider';\nimport {\n  createFetchingClient,\n  getInsights,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\nimport * as Redux from 'redux';\n\nimport messages from '../locales/data.json';\nimport App from './app/App';\nimport { getNotificationsRegistry } from './store/Store';\n\nexport interface AppEntryProps {\n  logger?: Redux.Middleware;\n}\n\nenableMapSet();\n\nconst AppEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n  const client = React.useMemo(\n    () =>\n      createFetchingClient(getInsights, {\n        responseInterceptors: [validateSchemaResponseInterceptor],\n      }),\n    []\n  );\n\n  const store = React.useMemo(() => {\n    const registry = props.logger\n      ? getNotificationsRegistry(props.logger)\n      : getNotificationsRegistry();\n    return registry.getStore();\n  }, [props.logger]);\n\n  return (\n    <IntlProvider\n      locale={navigator.language.slice(0, 2)}\n      messages={messages}\n      onError={console.log}\n    >\n      <Provider store={store}>\n        <ClientContextProvider client={client}>\n          <App />\n        </ClientContextProvider>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nexport default AppEntry;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport AppEntry from './AppEntry';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container!);\nroot.render(<AppEntry />);\n","import {\n  AlertActionLink,\n  Button,\n  HelperText,\n  HelperTextItem,\n  Menu,\n  MenuContainer,\n  MenuContent,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  Modal,\n  ModalVariant,\n  Radio,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  TimePicker,\n  Title,\n} from '@patternfly/react-core';\nimport { Alert } from '@patternfly/react-core';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useGetTimePreference } from '../../services/Notifications/GetTimePreference';\nimport { useUpdateTimePreference } from '../../services/Notifications/SaveTimePreference';\nimport { useNotification } from '../../utils/AlertUtils';\nimport axios from 'axios';\n\nconst alertClassName = style({\n  marginTop: '12px',\n});\n\nconst timezoneListClassName = style({\n  maxHeight: '200px',\n  maxWidth: '400px',\n  overflowY: 'auto',\n});\n\ninterface TimeConfigState {\n  utcTime: string;\n  baseCustomTime: string;\n  timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n  const [showCustomSelect, setShowCustomSelect] = React.useState(false);\n  const [timeSelect, setTimeSelect] = React.useState<TimeConfigState>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleRef = React.useRef<HTMLButtonElement>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n\n  const getTimePreference = useGetTimePreference();\n  const saveTimePreference = useUpdateTimePreference();\n  const { addSuccessNotification, addDangerNotification } = useNotification();\n\n  const timePref = useMemo(() => {\n    if (getTimePreference.error) {\n      return undefined;\n    }\n\n    return getTimePreference.payload?.value as string;\n  }, [getTimePreference.payload?.value, getTimePreference.error]);\n\n  const timeconfigTitle = useMemo(() => {\n    return `Any daily digest emails you've opted into will be sent at ${\n      timeSelect?.utcTime ? timeSelect?.utcTime : '00:00'\n    } UTC`;\n  }, [timeSelect?.utcTime]);\n\n  // Set the time preference value once we load it from the server\n  useEffect(() => {\n    if (timePref) {\n      setTimeSelect({\n        baseCustomTime: timePref,\n        utcTime: timePref,\n        timezoneText: undefined,\n      });\n      setShowCustomSelect(timePref !== '00:00:00');\n    }\n  }, [timePref]);\n\n  const handleRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(false);\n    setTimeSelect({\n      utcTime: '00:00',\n      baseCustomTime: '00:00',\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleCustomRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(true);\n  }, []);\n\n  const handleTimePrefSelect = React.useCallback((_ev, time) => {\n    setTimeSelect({\n      baseCustomTime: time,\n      utcTime: time,\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const handleTimezoneChange = React.useCallback((event?: MouseEvent) => {\n    if (event?.target) {\n      const target = event.target;\n      const textContent = (target as HTMLElement).textContent;\n      const targetTimezone = timezones.find((t) => t.text === textContent);\n      if (targetTimezone) {\n        setTimeSelect((prev) => {\n          if (prev?.baseCustomTime) {\n            const pieces = prev.baseCustomTime\n              .split(':')\n              .map((t) => parseInt(t));\n            const date = new Date();\n            date.setUTCHours(pieces[0], pieces[1]);\n            // Going from UTC to the timezone\n            const zonedDate = addHours(date, -targetTimezone.offset);\n            const utcHours = zonedDate\n              .getUTCHours()\n              .toString()\n              .padStart(2, '0');\n            const utcMinutes = zonedDate\n              .getUTCMinutes()\n              .toString()\n              .padStart(2, '0');\n\n            return {\n              ...prev,\n              utcTime: `${utcHours}:${utcMinutes}`,\n              timezoneText: targetTimezone.text,\n            };\n          }\n\n          return prev;\n        });\n      }\n    }\n\n    setIsOpen(false);\n  }, []);\n\n  const handleButtonSave = React.useCallback(() => {\n    if (timeSelect) {\n      const body = timeSelect.utcTime;\n      axios\n        .put(\n          '/api/notifications/v1.0/org-config/daily-digest/time-preference',\n          body,\n          {\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }\n        )\n        .then(() => {\n          addSuccessNotification('Action settings saved', '');\n        })\n        .catch(() => {\n          addDangerNotification('Failed to save action settings', '');\n        });\n    }\n\n    setIsModalOpen(false);\n  }, [addDangerNotification, addSuccessNotification, timeSelect]);\n\n  const isLoading = saveTimePreference.loading || getTimePreference.loading;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      <Alert\n        className={alertClassName}\n        isInline\n        title={timeconfigTitle}\n        actionLinks={\n          <AlertActionLink onClick={handleModalToggle} ouiaId=\"TimeConfigModal\">\n            Edit time settings\n          </AlertActionLink>\n        }\n      />\n      <Modal\n        className=\"pf-v5-u-pl-xl\"\n        variant={ModalVariant.small}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isLoading={isLoading}\n            isDisabled={isLoading}\n            onClick={handleButtonSave}\n          >\n            {isLoading ? 'Loading' : 'Save'}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n        ouiaId=\"TimeConfigModal\"\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h2\">Action settings</Title>\n          </StackItem>\n          <StackItem>\n            <Text component={TextVariants.p}>Daily digest email receipt</Text>\n            <HelperText>\n              <HelperTextItem variant=\"indeterminate\">\n                Schedule the time at which to send your account&apos;s daily\n                digest email. All times will be converted to UTC after saving.\n              </HelperTextItem>\n            </HelperText>\n          </StackItem>\n        </Stack>\n        <br></br>\n        <Split>\n          <SplitItem isFilled>\n            <Stack hasGutter>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={!showCustomSelect}\n                    onChange={handleRadioSelect}\n                    id=\"settings-time-config\"\n                    label=\"Default time\"\n                    value=\"Default\"\n                    description=\"00:00 UTC\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={showCustomSelect}\n                    onChange={handleCustomRadioSelect}\n                    id=\"settings-time-config-custom\"\n                    label=\"Custom time\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              {showCustomSelect && (\n                <>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time</Text>\n                    <TimePicker\n                      onChange={handleTimePrefSelect}\n                      time={timeSelect?.baseCustomTime}\n                      width=\"263px\"\n                      stepMinutes={15}\n                      placeholder=\"00:00\"\n                      is24Hour\n                    />\n                  </StackItem>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time zone</Text>\n                    <MenuContainer\n                      isOpen={isOpen}\n                      onOpenChange={(isOpen) => setIsOpen(isOpen)}\n                      menu={\n                        <Menu ref={menuRef} isPlain={false}>\n                          <MenuContent id=\"timezoneMenu\">\n                            <MenuList className={timezoneListClassName}>\n                              {timezones.map((tz) => (\n                                // Abbr, value, offset, etc are not unique by themselves\n                                <MenuItem\n                                  onClick={handleTimezoneChange}\n                                  key={tz.text}\n                                >\n                                  {tz.text}\n                                </MenuItem>\n                              ))}\n                            </MenuList>\n                          </MenuContent>\n                        </Menu>\n                      }\n                      menuRef={menuRef}\n                      toggle={\n                        <MenuToggle\n                          id=\"timezone\"\n                          ref={toggleRef}\n                          onClick={onToggleClick}\n                          isExpanded={isOpen}\n                        >\n                          {timeSelect?.timezoneText ??\n                            '(UTC-00:00) Universal Time'}\n                        </MenuToggle>\n                      }\n                      toggleRef={toggleRef}\n                    />\n                  </StackItem>\n                </>\n              )}\n            </Stack>\n          </SplitItem>\n        </Split>\n      </Modal>\n    </>\n  );\n};\n\nexport default TimeConfigComponent;\n","import componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport * as React from 'react';\n\nimport Review from './Review';\nimport CardSelect from './CustomComponents/CardSelect';\nimport InlineAlert from './CustomComponents/InlineAlert';\nimport SelectableTable from './CustomComponents/SelectableTable';\nimport { schema } from './schema';\nimport {\n  CARD_SELECT,\n  INLINE_ALERT,\n  INTEGRATION_TYPE,\n  REVIEW,\n  SELECTABLE_TABLE,\n  TABLE_TOOLBAR,\n} from './helpers';\nimport { Integration } from '../../../types/Integration';\nimport TableToolbar from './CustomComponents/TableToolbar';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nexport interface IntegrationWizardProps {\n  category: string;\n  isOpen: boolean;\n  isEdit: boolean;\n  template?: Partial<\n    Integration & {\n      secretToken: string;\n      id: string;\n      extras?: {\n        channel?: string;\n      };\n    }\n  >;\n  closeModal: () => void;\n}\n\nexport const IntegrationWizard: React.FunctionComponent<\n  IntegrationWizardProps\n> = ({\n  isOpen,\n  isEdit,\n  template,\n  closeModal,\n  category,\n}: IntegrationWizardProps) => {\n  const mapperExtension = {\n    [REVIEW]: Review,\n    [CARD_SELECT]: CardSelect,\n    [INLINE_ALERT]: InlineAlert,\n    [SELECTABLE_TABLE]: SelectableTable,\n    [TABLE_TOOLBAR]: TableToolbar,\n  };\n\n  const isBehaviorGroupsEnabled = useFlag(\n    'platform.integrations.behavior-groups-move'\n  );\n\n  return isOpen ? (\n    <FormRenderer\n      schema={schema(category, isEdit, isBehaviorGroupsEnabled)}\n      componentMapper={{ ...componentMapper, ...mapperExtension }}\n      onSubmit={({\n        url,\n        [INTEGRATION_TYPE]: intType,\n        name,\n        'secret-token': secret_token,\n      }) => {\n        const [type, sub_type] = intType?.split(':') || ['webhook'];\n        fetch(\n          `/api/integrations/v1.0/endpoints${isEdit ? `/${template?.id}` : ''}`,\n          {\n            method: isEdit ? 'PUT' : 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8',\n            },\n            body: JSON.stringify({\n              name,\n              enabled: true,\n              type,\n              ...(sub_type && { sub_type }),\n              description: '',\n              properties: {\n                method: 'POST',\n                url,\n                disable_ssl_verification: false,\n                secret_token,\n              },\n            }),\n          }\n        );\n        closeModal();\n      }}\n      initialValues={\n        isEdit\n          ? {\n              ...template,\n              'secret-token': template?.secretToken,\n            }\n          : {}\n      }\n      onCancel={closeModal}\n    >\n      {(props) => {\n        return <Pf4FormTemplate {...props} showFormControls={false} />;\n      }}\n    </FormRenderer>\n  ) : null;\n};\n\nexport default IntegrationWizard;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n  id: UUID;\n  applicationDisplayName: string;\n  eventTypeDisplayName: string;\n}\n\nexport interface Notification extends EventType {\n  actions?: Array<Action>;\n  useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<\n  UserIntegration,\n  'id' | 'name' | 'type' | 'isEnabled'\n>;\n\nexport interface DefaultNotificationBehavior {\n  actions: Array<Action>;\n}\n\nexport interface ActionBase {\n  type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n  type: NotificationType.INTEGRATION;\n  integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n  type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n  recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n  action.type === NotificationType.EMAIL_SUBSCRIPTION ||\n  action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (\n  action: Action\n): action is ActionIntegration => action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n  EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n  DRAWER = 'DRAWER',\n  INTEGRATION = 'INTEGRATION',\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n  readonly id: UUID;\n  readonly actions: ReadonlyArray<Action>;\n  readonly events: ReadonlyArray<EventType>;\n  readonly bundleId: UUID;\n  readonly displayName: string;\n  readonly bundleName?: string;\n  readonly isDefault: boolean;\n};\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> &\n  Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<\n  BehaviorGroup | NewBehaviorGroup,\n  'isDefault'\n>;\n\nexport type EmailSystemProperties = {\n  type: NotificationType.EMAIL_SUBSCRIPTION;\n  props: {\n    onlyAdmins: boolean;\n    ignorePreferences: false;\n    groupId: undefined | UUID;\n  };\n};\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n  props: {\n    onlyAdmins: boolean;\n    groupId: undefined | UUID;\n    ignorePreferences: false;\n  };\n};\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(\n  properties: SystemProperties\n): properties is EmailSystemProperties {\n  return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(\n  properties: SystemProperties\n): properties is DrawerSystemProperties {\n  return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (\n  actions: ReadonlyArray<Action | undefined>\n): Array<UUID | undefined> => {\n  return actions\n    .map((action) => {\n      if (action === undefined) {\n        return [undefined];\n      }\n\n      if (action.type === NotificationType.INTEGRATION) {\n        return [action.integration.id];\n      } else {\n        return action.recipient.map((r) => r.integrationId);\n      }\n    })\n    .flat();\n};\n\nexport const areActionsEqual = (\n  actions1: ReadonlyArray<Action | undefined>,\n  actions2: ReadonlyArray<Action | undefined>\n): boolean => {\n  if (actions1.length !== actions2.length) {\n    return false;\n  }\n\n  const integrations1 = getIntegrationIds(actions1);\n  const integrations2 = getIntegrationIds(actions2);\n\n  if (integrations1.length !== integrations2.length) {\n    return false;\n  }\n\n  // Order matters here, no sorting.\n  return integrations1.every((val, index) => val === integrations2[index]);\n};\n","import { IntegrationRef, UUID } from './Notification';\n\nexport abstract class Recipient {\n  readonly displayName: string;\n\n  protected constructor(displayName: string) {\n    this.displayName = displayName;\n  }\n\n  public abstract getKey();\n  public abstract equals(recipient: Recipient);\n}\n\nexport class IntegrationRecipient extends Recipient {\n  readonly integration: IntegrationRef;\n\n  public constructor(integration: IntegrationRef) {\n    super(integration.name + (integration.isEnabled ? '' : ' - Disabled'));\n    this.integration = integration;\n  }\n\n  public getKey() {\n    return this.integration.id;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof IntegrationRecipient) {\n      return recipient.integration.id === this.integration.id;\n    }\n\n    return false;\n  }\n}\n\nexport abstract class BaseNotificationRecipient extends Recipient {\n  readonly integrationId: UUID | undefined;\n  readonly key: string;\n  readonly description: string | undefined;\n\n  protected constructor(\n    displayName: string,\n    description: string | undefined,\n    integrationId: UUID | undefined,\n    key: string\n  ) {\n    super(displayName);\n\n    this.key = key;\n    this.description = description;\n    this.integrationId = integrationId;\n  }\n\n  public getKey() {\n    return this.key;\n  }\n}\n\nexport class NotificationUserRecipient extends BaseNotificationRecipient {\n  readonly sendToAdmin: boolean;\n  readonly ignorePreferences: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    sendToAdmin: boolean,\n    ignorePreferences: boolean\n  ) {\n    let displayName;\n    let description;\n\n    if (sendToAdmin) {\n      displayName = 'Admins';\n      description = 'Organization administrators for your account';\n    } else {\n      displayName = 'All';\n      description =\n        'All users in your organization who subscribed to this email in their Notification Preferences';\n    }\n\n    super(\n      displayName,\n      description,\n      integrationId,\n      sendToAdmin ? 'users-admin' : 'users-all'\n    );\n\n    this.sendToAdmin = sendToAdmin;\n    this.ignorePreferences = ignorePreferences;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationUserRecipient) {\n      return (\n        recipient.sendToAdmin === this.sendToAdmin &&\n        recipient.ignorePreferences === this.ignorePreferences\n      );\n    }\n\n    return false;\n  }\n}\n\nexport class NotificationRbacGroupRecipient extends BaseNotificationRecipient {\n  readonly groupId: UUID;\n  readonly isLoading: boolean;\n  readonly hasError: boolean;\n\n  public constructor(\n    integrationId: UUID | undefined,\n    groupId: UUID,\n    displayNameOrIsLoading: string | boolean\n  ) {\n    let displayName;\n    let isLoading;\n    let hasError;\n\n    if (typeof displayNameOrIsLoading === 'string') {\n      displayName = displayNameOrIsLoading;\n      isLoading = false;\n      hasError = false;\n    } else {\n      displayName = 'Loading';\n      isLoading = displayNameOrIsLoading;\n      hasError = !displayNameOrIsLoading;\n    }\n\n    super(displayName, undefined, integrationId, `rbac-group-${groupId}`);\n\n    this.groupId = groupId;\n    this.isLoading = isLoading;\n    this.hasError = hasError;\n  }\n\n  public equals(recipient: Recipient) {\n    if (recipient instanceof NotificationRbacGroupRecipient) {\n      return recipient.groupId === this.groupId;\n    }\n\n    return false;\n  }\n}\n"],"names":["utcFormat","regularFormat","updateDocumentTitle","useChrome","rbac","server","isOrgAdmin","useApp","insights","getInsights","usingExperimental","setUsingExperimental","toggleExperimental","isEnabled","chrome","getEnvironmentOriginal","getEnvironment","AppSkeleton","status","Server","S","MAINTENANCE","utcStartTime","format","toUtc","from","utcEndTime","to","startTime","endTime","timezone","Maintenance","timeZone","AppContext","Provider","value","RbacGroupContextProvider","NotificationsPortal","InsightsEnvDetector","onEnvironment","RenderIfTrue","Switch","className","isChecked","onChange","labelOff","label","Routes","container","document","getElementById","render","props","client","createFetchingClient","responseInterceptors","validateSchemaResponseInterceptor","store","logger","g","getStore","locale","navigator","language","slice","messages","onError","console","log","ClientContextProvider","alertClassName","style","marginTop","timezoneListClassName","maxHeight","maxWidth","overflowY","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","toggleRef","menuRef","getTimePreference","saveTimePreference","addSuccessNotification","addDangerNotification","timePref","useMemo","error","payload","timeconfigTitle","utcTime","useEffect","baseCustomTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","handleCustomRadioSelect","handleTimePrefSelect","_ev","time","handleTimezoneChange","event","target","textContent","targetTimezone","find","t","text","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","body","headers","then","catch","isLoading","loading","handleModalToggle","isInline","title","actionLinks","onClick","ouiaId","variant","small","onClose","actions","key","type","isDisabled","hasGutter","headingLevel","component","p","isFilled","id","description","name","h6","width","stepMinutes","placeholder","is24Hour","onOpenChange","menu","ref","isPlain","tz","toggle","isExpanded","IntegrationWizard","isEdit","template","closeModal","category","mapperExtension","isBehaviorGroupsEnabled","useFlag","schema","componentMapper","onSubmit","url","intType","secret_token","sub_type","fetch","method","JSON","stringify","enabled","properties","disable_ssl_verification","initialValues","secretToken","onCancel","showFormControls","isActionNotify","action","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","isDrawerSystemProperties","getIntegrationIds","integration","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","Recipient","displayName","this","IntegrationRecipient","super","getKey","equals","BaseNotificationRecipient","NotificationUserRecipient","sendToAdmin","ignorePreferences","NotificationRbacGroupRecipient","groupId","displayNameOrIsLoading","hasError"],"sourceRoot":""}
{"version":3,"file":"js/8126.4b6267d2a88041d95116.js","mappings":"gVAYA,MAsBA,EAtB6C,KAEzC,MAAM,KAAEA,EAAI,OAAEC,EAAM,WAAEC,IAAe,EAAAC,EAAA,KAErC,OAAQH,GAAQC,EACZ,gBAACG,EAAA,WAAmB,CAACC,MAAQ,CACzBL,OACAC,SACAC,aAAcA,IAEd,gBAACI,EAAA,EAAwB,KACrB,gBAACC,EAAA,EAAmB,MACpB,gBAAC,IAAgB,QAIzB,gBAAC,EAAAC,SAAQ,KACL,gBAAC,EAAAC,QAAO,CAACC,KAAK,OACP,E,0BCZnB,UAEA,MAwBA,EAxBmEC,IAE/D,MAAMC,EAAS,aAAc,KAAM,IAAAC,sBAAqB,EAAAC,YAAa,CACjEC,qBAAsB,CAAE,EAAAC,sCACxB,IAEEC,EAAQ,aAAc,KACPN,EAAMO,QAAS,OAAyBP,EAAMO,SAAU,UACzDC,YACjB,CAAER,EAAMO,SAEX,OACI,kBAAC,KAAY,CAACE,OAASC,UAAUC,SAASC,MAAM,EAAG,GAAKC,SAAW,EAAWC,QAAUC,QAAQC,KAC5F,kBAAC,EAAAC,SAAQ,CAACX,MAAQA,GACd,kBAAC,gBAAM,CAACY,UAAW,OAAYC,OAAOC,SAASC,WAC3C,kBAAC,EAAAC,sBAAqB,CAACrB,OAASA,GAC5B,kBAAC,EAAe,SAKnC,C","sources":["webpack:///./src/app/IntegrationsApp.tsx","webpack:///./src/IntegrationsEntry.tsx"],"sourcesContent":["\nimport './App.scss';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { NotificationsPortal } from '../components/Store/NotificationsPortal';\nimport IntegrationsList from '../pages/Integrations/List/List';\nimport { AppContext } from './AppContext';\nimport { RbacGroupContextProvider } from './rbac/RbacGroupContextProvider';\nimport { useApp } from './useApp';\n\nconst IntegrationsApp: React.ComponentType = () => {\n\n    const { rbac, server, isOrgAdmin } = useApp();\n\n    return (rbac && server) ?\n        <AppContext.Provider value={ {\n            rbac,\n            server,\n            isOrgAdmin: !!isOrgAdmin\n        } }>\n            <RbacGroupContextProvider>\n                <NotificationsPortal />\n                <IntegrationsList />\n            </RbacGroupContextProvider>\n        </AppContext.Provider>\n        :\n        <Bullseye>\n            <Spinner size='xl' />\n        </Bullseye>\n    ;\n};\n\nexport default IntegrationsApp;\n","import { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport {\n    createFetchingClient,\n    getInsights\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport messages from '../locales/data.json';\nimport IntegrationsApp from './app/IntegrationsApp';\nimport { AppEntryProps } from './AppEntry';\nimport { getNotificationsRegistry } from './store/Store';\nimport { getBaseName } from './utils/Basename';\n\nenableMapSet();\n\nconst IntegrationsEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n\n    const client = React.useMemo(() => createFetchingClient(getInsights, {\n        responseInterceptors: [ validateSchemaResponseInterceptor ]\n    }), []);\n\n    const store = React.useMemo(() => {\n        const registry = props.logger ? getNotificationsRegistry(props.logger) : getNotificationsRegistry();\n        return registry.getStore();\n    }, [ props.logger ]);\n\n    return (\n        <IntlProvider locale={ navigator.language.slice(0, 2) } messages={ messages } onError={ console.log }>\n            <Provider store={ store }>\n                <Router basename={ getBaseName(window.location.pathname) }>\n                    <ClientContextProvider client={ client }>\n                        <IntegrationsApp />\n                    </ClientContextProvider>\n                </Router>\n            </Provider>\n        </IntlProvider>\n    );\n};\n\nexport default IntegrationsEntry;\n"],"names":["rbac","server","isOrgAdmin","useApp","AppContext","value","RbacGroupContextProvider","NotificationsPortal","Bullseye","Spinner","size","props","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","Provider","basename","window","location","pathname","ClientContextProvider"],"sourceRoot":""}
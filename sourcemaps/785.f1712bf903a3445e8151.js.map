{"version":3,"sources":["webpack:///./src/app/App.scss","webpack:///./src/components/Notifications/Table.scss","webpack:///./src/app/App.scss?955f","webpack:///./src/components/Notifications/Table.scss?bdaa","webpack:///./src/config/Config.ts","webpack:///./src/properties/DefinedMessages.ts","webpack:///./src/components/RedirectToDefaultBundle.tsx","webpack:///./src/types/Integration.ts","webpack:///./src/properties/Messages.ts","webpack:///./src/pages/Error/Page.tsx","webpack:///./src/app/AppContext.tsx","webpack:///./src/utils/getOuiaProps.ts","webpack:///./src/components/Integrations/Table/ConnectionAttempt.tsx","webpack:///./src/components/Integrations/Table/ConnectionAlert.tsx","webpack:///./src/components/Integrations/Table/ConnectionDegraded.tsx","webpack:///./src/components/Integrations/Table/ConnectionFailed.tsx","webpack:///./src/components/Integrations/Table/ExpandedContent.tsx","webpack:///./src/components/Integrations/Table.tsx","webpack:///./src/hooks/useTableExportConfig.ts","webpack:///./src/types/Environments.ts","webpack:///./src/components/Integrations/Filters.ts","webpack:///./src/components/Integrations/Toolbar.tsx","webpack:///./src/components/Icons/EnabledIntegrationIcon.tsx","webpack:///./src/components/Icons/DisabledIntegrationIcon.tsx","webpack:///./src/hooks/useFormModalReducer.ts","webpack:///./src/generated/OpenapiIntegrations.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts","webpack:///./src/services/useListIntegrations.ts","webpack:///./src/utils/exporters/Integration/Csv.ts","webpack:///./src/utils/exporters/Integration/Json.ts","webpack:///./src/components/Integrations/AddNotificationBody.tsx","webpack:///./src/schemas/Integrations/Integration.ts","webpack:///./src/components/Integrations/Form/IntegrationTypeHttpForm.tsx","webpack:///./src/components/Integrations/Form/IntegrationTypeForm.tsx","webpack:///./src/components/Integrations/Form.tsx","webpack:///./src/components/Integrations/SaveModal.tsx","webpack:///./src/services/useSaveIntegration.ts","webpack:///./src/services/useSwitchIntegrationEnabledStatus.ts","webpack:///./src/store/selectors/SavedNotificationScopeSelector.ts","webpack:///./src/pages/Integrations/Create/CreatePage.tsx","webpack:///./src/components/Integrations/DeleteModal.tsx","webpack:///./src/generated/OpenapiNotifications.ts","webpack:///./src/types/Notification.ts","webpack:///./src/types/adapters/NotificationAdapter.ts","webpack:///./src/services/Notifications/GetAffectedNotificationsByEndpoint.ts","webpack:///./src/services/useDeleteIntegration.ts","webpack:///./src/pages/Integrations/Delete/DeleteModal.tsx","webpack:///./src/pages/Integrations/List/useDeleteModalReducer.ts","webpack:///./src/pages/Integrations/List/useIntegrationFilter.ts","webpack:///./src/services/useListIntegrationHistory.ts","webpack:///./src/pages/Integrations/List/useIntegrationRows.ts","webpack:///./src/pages/Integrations/List/Page.tsx","webpack:///./src/services/Notifications/GetApplications.ts","webpack:///./src/utils/Immutable.ts","webpack:///./src/utils/Find.ts","webpack:///./src/components/Notifications/Table/BehaviorGroupCell.tsx","webpack:///./src/components/Notifications/Table/BehaviorGroupCellControl.tsx","webpack:///./src/components/Notifications/NotificationsBehaviorGroupTable.tsx","webpack:///./src/components/Ouia.tsx","webpack:///./src/components/Notifications/Filter.ts","webpack:///./src/components/Notifications/Types.ts","webpack:///./src/components/Notifications/Table/GroupBy.tsx","webpack:///./src/components/Notifications/Toolbar.tsx","webpack:///./src/services/useListNotifications.ts","webpack:///./src/components/Icons/WebhookIcon.svg","webpack:///./src/components/Icons/WebhookIcon.tsx","webpack:///./src/components/Notifications/ActionComponent.tsx","webpack:///./src/components/Notifications/Recipient.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupCard.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupCardList.tsx","webpack:///./src/schemas/Integrations/Notifications.ts","webpack:///./src/components/Notifications/Form/RecipientOption.ts","webpack:///./src/components/Notifications/Form/useRecipientOptionMemo.tsx","webpack:///./src/components/Notifications/Form/useTypeaheadReducer.ts","webpack:///./src/components/Notifications/Form/IntegrationRecipientTypeahead.tsx","webpack:///./src/components/Notifications/Form/RecipientTypeahead.tsx","webpack:///./src/components/Notifications/EditableActionRow/RecipientForm.tsx","webpack:///./src/components/Notifications/EditableActionRow/useEditableActionRow.ts","webpack:///./src/components/Notifications/Form/ActionOption.ts","webpack:///./src/components/Notifications/Form/ActionTypeahead.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupForm.tsx","webpack:///./src/components/Notifications/BehaviorGroup/BehaviorGroupSaveModal.tsx","webpack:///./src/components/Notifications/useGetIntegrations.ts","webpack:///./src/components/Notifications/useGetRecipients.ts","webpack:///./src/generated/OpenapiPrivate.ts","webpack:///./src/types/adapters/BehaviorGroupAdapter.ts","webpack:///./src/services/Notifications/SaveBehaviorGroup.ts","webpack:///./src/services/Notifications/UpdateBehaviorGroupActions.ts","webpack:///./src/pages/Notifications/Form/EditBehaviorGroupPage.tsx","webpack:///./src/pages/Notifications/List/BehaviorGroupsSection.tsx","webpack:///./src/services/Notifications/GetBehaviorGroups.ts","webpack:///./src/services/Notifications/GetBehaviorGroupByNotificationId.ts","webpack:///./src/services/Notifications/LinkBehaviorGroup.ts","webpack:///./src/pages/Notifications/List/useBehaviorGroupNotificationRows.ts","webpack:///./src/pages/Notifications/List/useNotificationFilter.ts","webpack:///./src/pages/Notifications/List/useNotificationPage.ts","webpack:///./src/pages/Notifications/List/BundlePageBehaviorGroupContent.tsx","webpack:///./src/pages/Notifications/List/useBehaviorGroupContent.ts","webpack:///./src/components/Notifications/DefaultBehavior.tsx","webpack:///./src/components/Notifications/Table.tsx","webpack:///./src/services/useDefaultNotificationBehavior.ts","webpack:///./src/components/Notifications/Form/EditableActionTable.tsx","webpack:///./src/components/Notifications/Form.tsx","webpack:///./src/components/Notifications/SaveModal.tsx","webpack:///./src/services/Notifications/GetDefaultActionId.ts","webpack:///./src/services/useGetNotificationActions.ts","webpack:///./src/pages/Notifications/Form/EditNotificationPage.tsx","webpack:///./src/services/useRemoveActionFromNotification.ts","webpack:///./src/services/useAddActionToNotification.ts","webpack:///./src/services/useRemoveActionFromDN.ts","webpack:///./src/services/useAddActionToDN.ts","webpack:///./src/pages/Notifications/List/useFormModalReducer.ts","webpack:///./src/pages/Notifications/List/useNotificationRows.ts","webpack:///./src/pages/Notifications/List/BundlePageContent.tsx","webpack:///./src/pages/Notifications/List/BundlePage.tsx","webpack:///./src/pages/Notifications/List/Page.tsx","webpack:///./src/Routes.tsx","webpack:///./src/hooks/usePage.ts","webpack:///./src/utils/exporters/Integration/Factory.ts","webpack:///./src/pages/Integrations/List/useActionResolver.ts","webpack:///./src/services/Notifications/GetBundles.ts","webpack:///./src/app/useApp.ts","webpack:///./src/app/App.tsx","webpack:///./src/store/reducers/SavedNotificationScopeReducer.ts","webpack:///./src/store/Store.ts","webpack:///./src/store/actions/SavedNotificationScopeAction.ts","webpack:///./src/store/types/SavedNotificationScopeTypes.ts","webpack:///./src/utils/Basename.ts"],"names":["___CSS_LOADER_EXPORT___","push","module","id","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose","subAppId","title","notifications","description","defaultMessage","integrations","integrationsEmptyStateTitle","integrationsTableEmptyStateBody","defaultBundleName","RedirectToDefaultBundle","from","linkTo","to","IntegrationType","UserIntegrationType","cache","locale","navigator","language","slice","intl","onError","console","log","intlSettings","Messages","appName","formatMessage","appNameIntegrations","pages","list","add","edit","viewHistory","error","emptyState","content","showDetails","actions","goToIndex","components","toolbar","addIntegration","editIntegration","table","columns","name","type","lastConnectionAttempt","enabled","enableError","disableError","integrationType","WEBHOOK","types","EMAIL_SUBSCRIPTION","DRAWER","INTEGRATION","event","action","recipient","common","choose","ErrorPage","props","goToListPage","history","goBack","ErrorBoundaryPage","actionLabel","pageHeader","children","AppContext","rbac","canReadIntegrationsEndpoints","canReadNotifications","canWriteIntegrationsEndpoints","canWriteNotifications","getOuiaProps","getOuiaPropsFactory","ConnectionAttemptType","dateClassName","style","marginLeft","global_spacer_xs","ConnectionAttempt","formattedDate","format","toUtc","date","SUCCESS","color","global_success_color_100","FAILED","global_danger_color_100","getIcon","className","connectionAttemptClassName","global_spacer_sm","marginTopClassName","marginTop","ConnectionAlert","Alert","variant","alertVariant","isInline","attempts","map","attempt","index","key","isSuccess","ConnectionDegraded","failures","filter","length","AlertVariant","ConnectionFailed","titleClass","fontWeight","ExpandedContent","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","integration","url","sslVerificationEnabled","undefined","secretToken","LastConnectionAttemptStatus","connectionAlertClassName","paddingBottom","global_spacer_md","expandedContentClassName","paddingLeft","isEnabledLoadingClassName","smallMarginLeft","degradedClassName","global_warning_color_200","fontSize","getLastConnectionAttemptStatus","UNKNOWN","ERROR","WARNING","getConnectionAlert","status","LastConnectionAttemptSuccess","LastConnectionAttemptError","getConnectionAttemptCell","isLoading","Spinner","size","Text","cellFormatters","expandable","transforms","rowExpandedContentClassName","rowWrapperClassName","tableClassName","noneStyle","important","borderStyle","noBorderBottom","borderBottom","borderTop","buildClassNames","RowWrapper","trRef","rowProps","row","rest","ref","isExpanded","hidden","IntegrationsTable","useIntl","onCollapseHandler","_event","_index","isOpen","data","onCollapse","findIndex","rows","onEnable","reduce","idx","selected","isSelected","cells","lastConnectionAttempts","isConnectionAttemptLoading","isEnabledLoading","Switch","isChecked","isEnabled","onChange","isDisabled","ouiaId","fullWidth","parent","colSpan","actionsResolverCallback","rowData","actionResolver","integrationIndex","i","integrationRow","ouiaSafe","SkeletonTable","rowSize","loadingCount","paddingColumnSize","sortBy","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","EmptyStateBody","Table","rowWrapper","TableHeader","TableBody","useTableExportConfig","onExport","extraItems","onSelect","exporterTypeFromString","stagingAndProd","IntegrationFilterColumn","enabledTextClassName","filterMetadata","NAME","label","placeholder","ENABLED","options","exclusive","items","value","IntegrationsToolbar","primaryToolbarFilterConfig","usePrimaryToolbarFilterConfig","filters","setFilters","clearFilters","actionsConfig","onClick","onAddIntegration","kebabToggleProps","exportConfig","filterConfig","useInsightsEnvironmentFlag","getInsights","useCallback","activeFiltersConfig","pageChanged","page","inner","perPageChanged","perPage","topPaginationProps","itemCount","count","isCompact","PaginationVariant","onSetPage","onFirstClick","onPreviousClick","onNextClick","onLastClick","onPageInput","onPerPageSelect","bottomPaginationProps","PrimaryToolbar","pagination","UseFormModalReducerActionType","noneState","isEdit","template","isCopy","makeCreateAction","CREATE","makeEditAction","EDIT","makeNoneAction","NONE","useFormModalReducer","copyFunction","reducer","useMemo","state","buildReducer","useReducer","Schemas","Operations","zodSchemaApplication","bundle_id","zodSchemaUUID","created","optional","nullable","display_name","updated","nonstrict","zodSchemaBasicAuthentication","password","username","zodSchemaBehaviorGroupAction","endpoint","zodSchemaEndpoint","zodSchemaBehaviorGroupActionId","behaviorGroupId","endpointId","zodSchemaEmailSubscriptionProperties","properties","zodSchemaWebhookProperties","zodSchemaEndpointType","zodSchemaEntityTag","weak","zodSchemaFamily","zodSchemaHttpType","zodSchemaLink","params","rel","rels","uri","uriBuilder","zodSchemaUriBuilder","zodSchemaLocale","country","displayCountry","displayLanguage","displayName","displayScript","displayVariant","extensionKeys","iSO3Country","iSO3Language","script","unicodeLocaleAttributes","unicodeLocaleKeys","zodSchemaMediaType","parameters","subtype","wildcardSubtype","wildcardType","zodSchemaMeta","int","zodSchemaMultivaluedMapStringObject","zodSchemaMultivaluedMapStringString","zodSchemaNewCookie","comment","domain","expiry","httpOnly","maxAge","path","secure","version","zodSchemaStatusType","family","reasonPhrase","statusCode","basic_authentication","disable_ssl_verification","method","secret_token","Application","BasicAuthentication","BehaviorGroup","BehaviorGroupAction","BehaviorGroupActionId","Bundle","EmailSubscriptionProperties","EmailSubscriptionType","Endpoint","EndpointPage","links","meta","EndpointProperties","EndpointType","EntityTag","EventType","application","application_id","Facet","Family","HttpType","Link","Locale","MediaType","Meta","MultivaluedMapStringObject","MultivaluedMapStringString","NewCookie","NotificationHistory","details","eventId","invocationResult","invocationTime","RbacRaw","Response","allowedMethods","cookies","entity","entityTag","headers","lastModified","location","mediaType","metadata","statusInfo","stringHeaders","StatusType","UUID","UriBuilder","WebhookProperties","__Empty","max","EndpointServiceGetEndpoints","EndpointServiceCreateEndpoint","EndpointServiceCreateEndpointBg","EndpointServiceSubscribeEmail","EndpointServiceUnsubscribeEmail","EndpointServiceGetEndpoint","EndpointServiceUpdateEndpoint","EndpointServiceDeleteEndpoint","EndpointServiceEnableEndpoint","EndpointServiceDisableEndpoint","EndpointServiceGetEndpointHistory","EndpointServiceGetDetailedEndpointHistory","actionCreator","query","active","limit","offset","pageNumber","sort_by","actionBuilder","queryParams","config","rules","ValidateRule","build","body","Response200","replace","applicationName","toString","bundleName","historyId","pageSize","getIntegrationType","Enum","webhook","email_subscription","default","Error","getEndpointType","toIntegration","serverIntegration","integrationBase","GET","toIntegrations","serverIntegrations","filterOutDefaultAction","toIntegrationProperties","integrationHttp","toServerIntegrationRequest","serverNotifications","e","enum","listIntegrationsActionCreator","pager","Page","toQuery","filterType","filterActive","listIntegrationIntegrationDecoder","validationResponseTransformer","payload","validatedResponse","Object","values","includes","errors","IntegrationExporterCsv","ExporterCsv","IntegrationExporterJson","ExporterJson","buttonClassname","AddNotificationBody","text","buttonText","Button","ButtonVariant","switchEnabled","IntegrationSchemaBase","required","trim","oneOf","IntegrationHttpSchema","concat","shape","notRequired","POST","IntegrationSchema","IntegrationTypeHttpForm","FormTextInput","isRequired","ouiaIdConcat","Checkbox","IntegrationTypeForm","FormSelectOption","IntegrationsForm","useFormikContext","Form","maxLength","FormSelect","InternalIntegrationSaveModal","pageTitle","handleSubmit","isValid","isSubmitting","onSaveClicked","SaveModal","isSaving","onSave","onClose","actionButtonDisabled","IntegrationSaveModal","initialIntegration","cast","onSubmit","transformedIntegration","Formik","initialValues","validationSchema","validateOnMount","createIntegrationActionCreator","saveIntegrationActionCreator","decoder","response","switchIntegrationEnabledStatusActionCreator","useSwitchIntegrationEnabledStatus","useMutation","savedNotificationScopeSelector","savedNotificationScope","savedNotificationScopeEqualFn","left","right","AddNotificationBodyContainer","useSelector","dispatch","useDispatch","switchIntegrationEnabledStatus","mutate","SavedNotificationScopeAction","then","CreatePage","saveIntegrationMutation","useTransformQueryResponse","hasError","setError","onSaveIntegration","savedIntegration","addSuccessNotification","loading","IntegrationDeleteModal","onDeleteInternal","onDelete","Skeleton","eventText","ExpandableSection","toggleText","List","notification","ListItem","applicationDisplayName","eventTypeDisplayName","DeleteModal","isDeleting","titleIconVariant","NotificationType","NotificationServiceGetEndpointsForDefaults","NotificationServiceAddEndpointToDefaults","NotificationServiceDeleteEndpointFromDefaults","NotificationServiceGetEventTypes","NotificationServiceGetEventTypesAffectedByEndpointId","NotificationServiceGetLinkedEndpoints","NotificationServiceLinkEndpointToEventType","NotificationServiceUnlinkEndpointFromEventType","NotificationServiceGetApplicationsFacets","NotificationServiceGetBundleFacets","NotificationServiceMarkRead","applicationIds","bundleId","eventTypeId","Response204","_toAction","serverAction","userIntegration","toUserIntegration","integrationId","toNotification","serverNotification","JSON","stringify","toAction","toNotifications","toActions","serverActions","notificationsForEndpointActionCreator","defaultNotificationsDecoder","deleteIntegrationActionCreator","IntegrationDeleteModalPage","deleteIntegrationMutation","getNotificationsQuery","useParameterizedQuery","deleteIntegration","UseDeleteModalReducerActionType","DELETE","useDeleteModalReducer","makeDeleteAction","useUrlStateName","defaultValue","useUrlStateString","useUrlStateEnabled","_defaultValue","useUrlStateMultipleOptions","useStateFactory","column","notificationAppStateSelector","notificationAppStateEqualFn","integrationFilterBuilder","Filter","toLocaleLowerCase","and","Operator","userIntegrationCopier","getApplicationsAction","emptyImmutableArray","freeze","emptyImmutableObject","findById","findByKey","val","BehaviorGroupChip","unlink","behaviorGroup","Chip","remainingTemplate","BehaviorGroupCell","setOpen","onSelected","dataset","currentTarget","firstChild","behaviorGroupContent","found","find","OptionsMenuItem","bg","toggle","OptionsMenuToggle","onToggle","toggleTemplate","ChipGroup","numChips","collapsedText","readonlyText","Split","hasGutter","SplitItem","global_palette_black_400","first","v","join","remaining","fillTemplate","isEditMode","OptionsMenu","direction","menuItems","menuAppendTo","document","ButtonWithNotificationId","notificationId","toOnNotificationSetAdapter","BehaviorGroupCellControl","commonButtonProps","onFinishEditing","global_active_color_100","onCancelEditMode","global_palette_black_600","onStartEditing","buttonCellClassName","width","NotificationsBehaviorGroupTable","Component","Wrapped","ouia","callbacks","onCancelEditing","onBehaviorGroupLinkUpdated","callback","loadingActionStatus","behaviors","TableVariant","NotificationFilterColumn","GroupByEnum","GroupBy","DropdownItem","None","groupBy","target","shouldBeOpen","pascalCase","Dropdown","DropdownToggle","toggleIndicator","dropdownItems","NotificationsToolbar","appFilterItems","appFilterOptions","APPLICATION","ACTION","clearFilter","exportConfigInternal","dedicatedAction","onGroupBySelected","useListNotifications","useQuery","filterApplicationId","filterBundleId","listNotificationsActionCreator","verticalAlign","height","alt","src","marginLeftClassName","grayFontClassName","ActionTypeToIcon","actionType","ActionComponentWrapper","ActionComponent","isDefault","disabledLabelClassName","Recipient","Tooltip","position","Label","hasOutline","cardClassName","contentTitleStyle","BehaviorGroupCardLayout","switchOpen","prev","Card","isFlat","CardHeader","CardHeaderMain","TextVariants","CardActions","KebabToggle","isPlain","DropdownPosition","CardBody","Grid","GridItem","span","contents","BehaviorGroupCard","onClickEdit","onEdit","BehaviorGroupCardSkeleton","contentWidth","cardsWrapperClassName","overflow","cardWrapperClassName","BehaviorGroupCardListLayout","container","getBoundingClientRect","Flex","alignItems","alignContent","FlexItem","element","BehaviorGroupCardList","behaviorGroups","BehaviorGroupCardListSkeleton","ActionIntegration","min","ActionNotify","ActionsArray","obj","hasOwnProperty","WithActions","BehaviorGroupSchema","RecipientOption","recipientOrIntegration","this","selectOption","postfix","mapper","r","SelectOption","useRecipientOptionMemo","show","loadingDefault","isNoResultsOption","defaultValues","loadingFilter","filterValues","ReducerActionType","reducerFunction","SET_FILTER_VALUE","search","lastSearch","LOAD_FILTER_VALUE","USE_DEFAULTS","SET_DEFAULTS","useTypeaheadReducer","setFilterValue","loadFilterValue","setDefaults","useDefaults","IntegrationRecipientTypeahead","dispatchers","getIntegrations","onFilter","selection","sel","integrationSelected","Select","SelectVariant","typeAheadAriaLabel","placeholderText","selections","RecipientTypeahead","getRecipients","recipients","s","RecipientForm","recipientSelected","onClear","recipientOnClear","useEditableActionRow","setFieldValue","recipientFieldProps","_","recipientFieldHelpers","useField","actionSelected","notificationType","indexOf","setValue","ActionOption","kind","actionName","ActionTypeahead","selectedOption","hideNonWebhooks","insights","getInsightsEnvironment","o","alignLeftClassName","textAlign","subtitleClassName","ActionRow","isFilled","onRemove","form","addAction","handleRemove","EditBehaviorGroupForm","FieldArray","helpers","InternalBehaviorGroupSaveModal","ModalVariant","BehaviorGroupSaveModal","useGetIntegrations","useContext","ClientContext","_search","toLowerCase","useGetRecipients","NotificationServiceCreateBehaviorGroup","NotificationServiceUpdateBehaviorGroupActions","NotificationServiceUpdateBehaviorGroup","NotificationServiceDeleteBehaviorGroup","NotificationServiceGetEventTypesAffectedByRemovalOfEndpoint","NotificationServiceFindBehaviorGroupsByBundleId","NotificationServiceGetEventTypesAffectedByRemovalOfBehaviorGroup","NotificationServiceGetLinkedBehaviorGroups","NotificationServiceUpdateEventTypeBehaviors","reportBehaviorGroup","toBehaviorGroup","serverBehaviorGroup","behaviorAction","toShallowBehaviorGroupRequest","saveBehaviorGroupActionCreator","updateBehaviorGroupActionsActionCreator","endpointIds","EditBehaviorGroupPage","saveBehaviorGroupMutation","updateBehaviorGroupActionsMutation","creatingIntegrations","setCreatingNotifications","updateBehaviorGroupActions","saveBehaviorGroup","original","Promise","resolve","toCreate","newAction","all","result","newIds","oldNonUserAction","catch","err","expandableSectionClassName","backgroundColor","global_BackgroundColor_100","global_spacer_lg","paddingRight","sectionClassName","sectionTitleClassName","paddingTop","titleClassName","global_palette_black_1000","emptyAddButtonClassName","BehaviorGroupsSection","setExpanded","setFilter","filteredBehaviors","lowerCaseFilter","modalState","createGroup","onCloseModal","saved","reload","onClearFilter","contentId","ExpandableSectionToggle","Badge","isRead","isDetached","Stack","StackItem","SearchInput","behaviorGroupDecoder","getNotification","useBehaviorGroupNotificationRows","notificationRows","setNotificationRows","prevNotificationInput","usePrevious","removeBehaviorGroup","draft","splice","updateBehaviorGroupLink","linkBehavior","setEditMode","command","behaviorGroupIds","linkBehaviorGroupAction","oldBehaviors","startEditMode","finishEditMode","cancelEditMode","_prev","clearQueue","forEach","getBehaviorGroupByNotificationAction","draftNotification","useNotificationFilter","initialAppOptions","debounce","useUrlStateApplication","useUrlStateAction","useFilters","useNotificationPage","bundle","defaultPerPage","sort","currentPage","setCurrentPage","useState","itemsPerPage","setItemsPerPage","useEffect","appFilter","appIds","arrayValue","filterOption","changePage","changeItemsPerPage","behaviorGroupSectionClassName","marginBottom","global_spacer_xl","emptyArray","BundlePageBehaviorGroupContent","notificationsFilter","applications","useGetBehaviorGroups","errorObject","useBehaviorGroupContent","notificationPage","debouncedFilters","useNotifications","isLinked","Section","cssRaw","c_skeleton_BackgroundColor","global_palette_black_300","contentClassName","display","$nest","global_FontSize_sm","DefaultBehavior","defaultBehavior","pfBorderBottomClassName","cellPaddingBottom","actionCellStyle","cellPaddingBottomStyle","cellPaddingTop","cellPaddingTopStyle","noExpandableBorderClassName","borderLeft","applicationGroupClassName","EventCell","rowClassName","toTableRowsGroupedByNone","rowSpan","Math","useDefault","firstAction","joinClasses","classNames","cssStyle","NotificationsTable","grouped","applicationGroups","applicationGroup","n","defaultNotificationBehaviorCreator","EditableActionRow","EditableActionTable","ActionArray","NotificationForm","showActions","FormText","InternalNotificationSaveModal","NotificationSaveModal","getDefaultActionIdDecoder","getNotificationActionsByIdAction","hasDefaultNotificationDecoder","getNotificationByIdActionDecoder","EditNotificationPage","idMapper","oldActions","oldUseDefault","actionsPromise","newUseDefault","defaultActionId","addDangerNotification","originalIds","newActions","nonUserIntegrationsPromises","every","toDelete","toAdd","arr","promises","actionId","actionRemoveActionFromNotification","actionAddActionToNotification","EDIT_DEFAULTS","EDIT_NOTIFICATION","toRowsGroupByNone","toRowGroupByApplication","groups","tableTitleClassName","BundlePageContent","defaultNotificationBehavior","setGroupBy","groupBySelected","prevGroupBy","setNotificationRowById","partialNotificationRow","appIndex","notificationIndex","j","findNotificationPath","newApps","newNotifications","endpoints","prevRows","useNotificationRows","modalIsOpenState","dispatchModalIsOpen","closeFormModal","updateDefaultNotifications","updateNotifications","onEditDefaultAction","onEditNotification","displayInlineClassName","NotificationListBundlePage","pageHeaderTitleProps","isUsingBehaviorGroup","setUsingBehaviorGroup","renderIfUsingBehaviorGroupResolver","PageHeader","PageHeaderTitle","InsightsEnvDetector","onEnvironment","RenderIfFalse","FormGroup","fieldId","Main","RenderIf","renderIf","RenderIfTrue","BundleStatus","pathRoutes","integrationFilter","useIntegrationFilter","pageData","filterBuilder","usePage","integrationsQuery","initFetch","exportIntegrationsQuery","integrationRows","setIntegrationRows","prevIntegrationsInput","reduxDispatch","switchStatus","setIntegrationRowByIndex","partialIntegration","prevIntegrations","newIntegrations","setIntegrationRowById","listIntegrationHistoryActionCreator","last5","reverse","Date","_integration","message","useIntegrationRows","deleteModalState","dispatchDeleteModal","onAddIntegrationClicked","exporter","ExporterType","integrationExporterFactory","exportedIntegrations","nextPage","export","now","canWrite","closeDeleteModal","deleted","pageCount","onFunction","chrome","on","getBundles","getApplications","navId","NOT_FOUND","FAILED_TO_LOAD","LOADING","isBundleStatus","AppSkeleton","InsightsRoute","Routes","pathRoute","exact","setRbac","waitForInsights","init","appId","getApp","identifyApp","auth","getUser","fetchRBAC","hasPermission","useApp","serviceName","pathname","hasReadPermissions","Provider","NotificationsPortal","NotAuthorized","SavedNotificationScopeReducer","getType","createStore","middleware","initStore","resetStore","restoreStore","SavedNotificationScopeKeys","SavedNotificationScopeActions","setIntegration","createAction","SET_INTEGRATION","start","START","finish","FINISH","unset","UNSET","Status","getBaseName","release","pathName","split","shift","getSubApp"],"mappings":"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","file":"js/785.b5f4f32ebf6fd42976e1.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".notifications{@import'~@redhat-cloud-services/frontend-components/index.css';@import'~@redhat-cloud-services/frontend-components-notifications/index.css'}.notifications .pf-c-wizard__main-body{max-height:100%}.notifications .page__notifications#root{--pf-c-page__main-section--BackgroundColor: var(--pf-global--Color--light-100)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/App.scss\"],\"names\":[],\"mappings\":\"AAAA,eACO,8DAAA,CAAA,2EAAA,CAAA,CAAA,uCAAA,eAAA,CAAA,yCAAA,8EAAA\",\"sourcesContent\":[\".notifications{\\n@import'~@redhat-cloud-services/frontend-components/index.css';@import'~@redhat-cloud-services/frontend-components-notifications/index.css';.pf-c-wizard__main-body{max-height:100%}.page__notifications#root{--pf-c-page__main-section--BackgroundColor: var(--pf-global--Color--light-100)}\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".notifications .notification-table .pf-c-table tbody>tr>:first-child::after{--pf-c-table__expandable-row--after--BorderLeftWidth: 0 }.notifications .pf-m-grid-md.pf-c-table tbody::after{--pf-c-table--tbody--after--BorderLeftWidth: 0 }\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Notifications/Table.scss\"],\"names\":[],\"mappings\":\"AACA,4EAAA,wDAAA,CAAA,qDAAA,+CAAA\",\"sourcesContent\":[\".notifications{\\n.notification-table .pf-c-table tbody>tr>:first-child::after{--pf-c-table__expandable-row--after--BorderLeftWidth: 0 }.pf-m-grid-md.pf-c-table tbody::after{--pf-c-table--tbody--after--BorderLeftWidth: 0 }\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../node_modules/sass-loader/dist/cjs.js!./App.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./Table.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./Table.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import { DeepReadonly } from 'ts-essentials';\n\nconst apiVersion = 'v1.0';\nconst apiBaseUrl = `/api/notifications/${apiVersion}`;\n\nexport const withBaseUrl = (path: string) => `${apiBaseUrl}${path}`;\n\nconst Config = {\n    integrations: {\n        subAppId: 'integrations',\n        title: 'Integrations | Settings'\n    },\n    notifications: {\n        subAppId: 'notifications',\n        title: 'Notifications | Settings'\n    },\n    pages: {\n    }\n};\n\nconst ReadonlyConfig: DeepReadonly<typeof Config> = Config;\nexport default ReadonlyConfig;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    notifications: {\n        id: 'notifications',\n        description: 'Application name',\n        defaultMessage: 'Notifications'\n    },\n    integrations: {\n        id: 'integrations',\n        description: 'Application name',\n        defaultMessage: 'Integrations'\n    },\n    integrationsEmptyStateTitle: {\n        id: 'integrationsEmptyStateTitle',\n        description: 'Integrations Empty State title',\n        defaultMessage: 'No integrations'\n    },\n    integrationsTableEmptyStateBody: {\n        id: 'integrationsTableEmptyStateBody',\n        description: 'Integrations Empty State body',\n        defaultMessage: 'Connect to webhooks and external applications.'\n    }\n});\n","import * as React from 'react';\nimport { Redirect } from 'react-router';\n\nimport { linkTo } from '../Routes';\n\nexport const defaultBundleName = 'rhel';\n\nexport const RedirectToDefaultBundle = () => <Redirect from={ linkTo.notifications('') } to={ linkTo.notifications(defaultBundleName) } />;\n","import { Schemas } from '../generated/OpenapiIntegrations';\n\nexport enum IntegrationType {\n    WEBHOOK = 'webhook',\n    EMAIL_SUBSCRIPTION = 'email_subscription'\n}\n\n// Integrations that the user can create in the Integrations page\nexport enum UserIntegrationType {\n    WEBHOOK = 'webhook'\n}\n\nexport interface IntegrationBase {\n    id: string;\n    name: string;\n    type: IntegrationType;\n    isEnabled: boolean;\n}\n\nexport interface IntegrationHttp extends IntegrationBase {\n    type: IntegrationType.WEBHOOK;\n    url: string;\n    sslVerificationEnabled: boolean;\n    secretToken?: string;\n    method: Schemas.HttpType;\n}\n\nexport interface IntegrationEmailSubscription extends IntegrationBase {\n    type: IntegrationType.EMAIL_SUBSCRIPTION\n}\n\nexport type Integration = IntegrationHttp | IntegrationEmailSubscription;\n\ntype ToUserIntegration<T extends IntegrationBase, TYPE extends UserIntegrationType[keyof UserIntegrationType]> = Omit<T, 'type'> & {\n    type: TYPE\n};\n\nexport type UserIntegration = ToUserIntegration<IntegrationHttp, UserIntegrationType.WEBHOOK>;\n\ntype NewIntegrationKeys = 'id';\n\nexport type NewIntegrationTemplate<T extends IntegrationBase | UserIntegration> = Omit<T, NewIntegrationKeys> & Partial<Pick<T, NewIntegrationKeys>>;\n\nexport type NewIntegrationBase = NewIntegrationTemplate<IntegrationBase>;\nexport type NewIntegration = NewIntegrationTemplate<Integration>;\nexport type NewUserIntegration = NewIntegrationTemplate<UserIntegration>;\n\nexport type ServerIntegrationRequest = Schemas.Endpoint;\nexport type ServerIntegrationResponse = Schemas.Endpoint;\n\nexport interface IntegrationConnectionAttempt {\n    date: Date;\n    isSuccess: boolean;\n}\n","import { intlHelper } from '@redhat-cloud-services/frontend-components-translations';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport { DeepReadonly } from 'ts-essentials';\n\nimport { IntegrationType } from '../types/Integration';\nimport messages from './DefinedMessages';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\nconst intlSettings = { locale };\n\nconst MutableMessages = {\n    appName: intlHelper(intl.formatMessage(messages.notifications), intlSettings),\n    appNameIntegrations: intlHelper(intl.formatMessage(messages.integrations), intlSettings),\n    pages: {\n        integrations: {\n            list: {\n                title: 'Integrations'\n            },\n            add: {\n                title: 'Add integration'\n            },\n            edit: {\n                title: 'Edit integration'\n            }\n        },\n        notifications: {\n            list: {\n                title: 'Notifications',\n                viewHistory: 'View notification history'\n            }\n        },\n        error: {\n            title: 'Notifications',\n            emptyState: {\n                title: 'Unhandled error',\n                content: 'There was a problem trying to process your request.',\n                showDetails: 'Show details',\n                actions: {\n                    goToIndex: 'Go back'\n                }\n            }\n        }\n    },\n    components: {\n        integrations: {\n            toolbar: {\n                actions: {\n                    addIntegration: 'Add integration',\n                    editIntegration: 'Edit integration'\n                }\n            },\n            table: {\n                title: 'Integrations',\n                columns: {\n                    name: 'Name',\n                    type: 'Type',\n                    lastConnectionAttempt: 'Last connection attempt',\n                    enabled: 'Enabled'\n                }\n            },\n            enableError: {\n                title: 'Unable to enable the Integration',\n                description: 'There was a problem trying to enable the integration: \"{0}\".\\nPlease try again.'\n            },\n            disableError: {\n                title: 'Unable to disable the Integration',\n                description: 'There was a problem trying to disable the integration: \"{0}\".\\nPlease try again.'\n            },\n            integrationType: {\n                [IntegrationType.WEBHOOK]: 'Webhook'\n            }\n        },\n        notifications: {\n            types: {\n                EMAIL_SUBSCRIPTION: 'Send an email',\n                DRAWER: 'Send to notification drawer',\n                INTEGRATION: 'Integration'\n            },\n            toolbar: {\n                actions: {\n\n                }\n            },\n            table: {\n                title: 'Notifications',\n                columns: {\n                    event: 'Event type',\n                    action: 'Action',\n                    recipient: 'Recipient'\n                }\n            }\n        }\n    },\n    common: {\n        choose: 'Please choose'\n    }\n};\n\nexport const Messages: DeepReadonly<typeof MutableMessages> = MutableMessages;\n","import { ErrorBoundaryPage } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { Messages } from '../../properties/Messages';\n\ntype ErrorPageProps = RouteComponentProps<any>;\n\nexport const ErrorPageInternal: React.FunctionComponent<ErrorPageProps> = (props) => {\n    const goToListPage = React.useCallback(() => {\n        props.history.goBack();\n    }, [ props.history ]);\n\n    return (\n        <ErrorBoundaryPage\n            action={ goToListPage }\n            actionLabel={ Messages.pages.error.emptyState.actions.goToIndex }\n            pageHeader={ Messages.pages.error.title }\n            title={ Messages.pages.error.emptyState.title }\n            description={ Messages.pages.error.emptyState.content }\n        >\n            { props.children }\n        </ErrorBoundaryPage>\n    );\n};\n\nexport const ErrorPage = withRouter(ErrorPageInternal);\n","import * as React from 'react';\nimport { useContext } from 'react';\n\nexport interface AppContext {\n    rbac: {\n        canWriteIntegrationsEndpoints: boolean;\n        canReadIntegrationsEndpoints: boolean;\n        canWriteNotifications: boolean;\n        canReadNotifications: boolean;\n    }\n}\n\nexport const AppContext = React.createContext<AppContext>({\n    rbac: {\n        canReadIntegrationsEndpoints: false,\n        canReadNotifications: false,\n        canWriteIntegrationsEndpoints: false,\n        canWriteNotifications: false\n    }\n});\n\nexport const useAppContext = () => useContext(AppContext);\n","import { getOuiaPropsFactory } from '@redhat-cloud-services/insights-common-typescript';\n\nexport const getOuiaProps = getOuiaPropsFactory('Notifications');\n","import { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { global_danger_color_100, global_spacer_xs, global_success_color_100 } from '@patternfly/react-tokens';\nimport { toUtc } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nexport interface ConnectionAttemptProps {\n    type: ConnectionAttemptType;\n    date: Date;\n}\n\nexport enum ConnectionAttemptType {\n    SUCCESS,\n    FAILED\n}\n\nconst dateClassName = style({\n    marginLeft: global_spacer_xs.var\n});\n\nconst dateFormatString = 'MMM d, HH:mm:ss';\n\nconst getIcon = (type: ConnectionAttemptType) => {\n    switch (type) {\n        case ConnectionAttemptType.SUCCESS:\n            return <CheckCircleIcon color={ global_success_color_100.value } />;\n        case ConnectionAttemptType.FAILED:\n            return <ExclamationCircleIcon color={ global_danger_color_100.value } />;\n        default:\n            assertNever(type);\n    }\n};\n\nexport const ConnectionAttempt: React.FunctionComponent<ConnectionAttemptProps> = (props) => {\n    const formattedDate = format(toUtc(props.date), dateFormatString);\n    return (\n        <>\n            { getIcon(props.type) } <span className={ dateClassName }> { formattedDate } UTC </span>\n        </>\n    );\n};\n","import { Alert, AlertVariant } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ConnectionAttempt, ConnectionAttemptType } from './ConnectionAttempt';\n\ninterface ConnectionAlertProps extends OuiaComponentProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n    alertVariant: AlertVariant;\n    description: string;\n    title: string;\n}\n\nconst connectionAttemptClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst marginTopClassName = style({\n    marginTop: global_spacer_sm.var\n});\n\nexport const ConnectionAlert: React.FunctionComponent<ConnectionAlertProps> = (props) => {\n    return (\n        <div { ...getOuiaProps('ConnectionAlert', props) }>\n            <Alert title={ props.title } variant={ props.alertVariant } isInline>\n                <p className={ marginTopClassName }>\n                    { props.description }\n                </p>\n                <p className={ marginTopClassName }>\n                    Last attempts: { props.attempts.map(\n                        (attempt, index) =>\n                            <span key={ index } className={ connectionAttemptClassName }>\n                                <ConnectionAttempt\n                                    type={ attempt.isSuccess ? ConnectionAttemptType.SUCCESS : ConnectionAttemptType.FAILED }\n                                    date={ attempt.date }\n                                />\n                            </span>\n                    ) }\n                </p>\n            </Alert>\n        </div>\n    );\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { ConnectionAlert } from './ConnectionAlert';\n\ninterface ConnectionDegradedProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n}\n\nexport const ConnectionDegraded: React.FunctionComponent<ConnectionDegradedProps> = (props) => {\n    const description = React.useMemo(() => {\n        const failures = props.attempts.filter(a => !a.isSuccess).length;\n        const attempts = props.attempts.length;\n\n        if (failures === 1) {\n            return `This connection has had 1 failure in the last ${ attempts } connection attempts.`;\n        }\n\n        return `This connection has had ${ failures } failures in the last ${ attempts } connection attempts.`;\n    }, [ props.attempts ]);\n\n    return <ConnectionAlert\n        attempts={ props.attempts }\n        alertVariant={ AlertVariant.warning }\n        description={ description }\n        title=\"Connection is degraded\"\n    />;\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { IntegrationConnectionAttempt } from '../../../types/Integration';\nimport { ConnectionAlert } from './ConnectionAlert';\n\ninterface ConnectionFailedProps {\n    attempts: Array<IntegrationConnectionAttempt>;\n}\n\nexport const ConnectionFailed: React.FunctionComponent<ConnectionFailedProps> = (props) => {\n    return <ConnectionAlert\n        attempts={ props.attempts }\n        alertVariant={ AlertVariant.danger }\n        description=\"This connection has failed the most recent connection attempts.\"\n        title=\"Failed connection\"\n    />;\n};\n","import { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { UserIntegration } from '../../../types/Integration';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\n\nconst titleClass = style({\n    fontWeight: 400\n});\n\ninterface ExpandedContentProps extends OuiaComponentProps {\n    integration: UserIntegration;\n}\n\nexport const ExpandedContent: React.FunctionComponent<ExpandedContentProps> = (props) => {\n    return (\n        <TextContent { ...getOuiaProps('Integrations/Table/ExpandedContent', props) }>\n            <TextList component={ TextListVariants.dl }>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    Endpoint URL\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.url }\n                </TextListItem>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    SSL verification\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.sslVerificationEnabled ? 'Enabled' : 'Disabled' }\n                </TextListItem>\n                <TextListItem className={ titleClass } component={ TextListItemVariants.dt }>\n                    Authentication type\n                </TextListItem>\n                <TextListItem component={ TextListItemVariants.dd }>\n                    { props.integration.secretToken !== undefined ? 'Secret token' : 'None' }\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n","import {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Spinner,\n    Switch,\n    Text,\n    Title\n} from '@patternfly/react-core';\nimport { CheckCircleIcon, CubesIcon, ExclamationCircleIcon, OffIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport {\n    expandable,\n    IActions,\n    IActionsResolver,\n    ICell,\n    IRow,\n    IRowData,\n    RowWrapperProps,\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table';\nimport {\n    global_danger_color_100,\n    global_spacer_md,\n    global_spacer_sm,\n    global_success_color_100,\n    global_warning_color_200\n} from '@patternfly/react-tokens';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { important } from 'csx';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { style } from 'typestyle';\n\nimport messages from '../../properties/DefinedMessages';\nimport { Messages } from '../../properties/Messages';\nimport { IntegrationConnectionAttempt, UserIntegration } from '../../types/Integration';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ConnectionDegraded } from './Table/ConnectionDegraded';\nimport { ConnectionFailed } from './Table/ConnectionFailed';\nimport { ExpandedContent } from './Table/ExpandedContent';\n\nexport type OnEnable = (integration: IntegrationRow, index: number, isChecked: boolean) => void;\n\ninterface IntegrationsTableProps extends OuiaComponentProps {\n    isLoading: boolean;\n    loadingCount?: number;\n    integrations: Array<IntegrationRow>;\n    onCollapse?: (integration: IntegrationRow, index: number, isOpen: boolean) => void;\n    onEnable?: OnEnable;\n    actionResolver: (row: IntegrationRow, index: number) => IActions;\n}\n\nexport type IntegrationRow = UserIntegration & {\n    isOpen: boolean;\n    isSelected: boolean;\n    isEnabledLoading: boolean;\n    isConnectionAttemptLoading: boolean;\n    lastConnectionAttempts?: Array<IntegrationConnectionAttempt>;\n}\n\nenum LastConnectionAttemptStatus {\n    UNKNOWN,\n    SUCCESS,\n    WARNING,\n    ERROR\n}\n\nconst connectionAlertClassName = style({\n    paddingBottom: global_spacer_md.var\n});\n\nconst expandedContentClassName = style({\n    paddingLeft: 0,\n    paddingBottom: 0\n});\n\nconst isEnabledLoadingClassName = style({\n    marginLeft: 10\n});\n\nconst smallMarginLeft = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst degradedClassName = style({\n    fontWeight: 600,\n    color: global_warning_color_200.var,\n    fontSize: 'var(--pf-global--FontSize--sm)'\n});\n\nconst getLastConnectionAttemptStatus = (attempts: Array<IntegrationConnectionAttempt>): LastConnectionAttemptStatus => {\n    if (attempts.length === 0) {\n        return LastConnectionAttemptStatus.UNKNOWN;\n    }\n\n    const failures = attempts.filter(a => !a.isSuccess).length;\n\n    if (failures === attempts.length) {\n        return LastConnectionAttemptStatus.ERROR;\n    } else if (failures > 0) {\n        return LastConnectionAttemptStatus.WARNING;\n    }\n\n    return LastConnectionAttemptStatus.SUCCESS;\n};\n\nconst getConnectionAlert = (attempts: Array<IntegrationConnectionAttempt>) => {\n    const status = getLastConnectionAttemptStatus(attempts);\n    switch (status) {\n        case LastConnectionAttemptStatus.UNKNOWN:\n        case LastConnectionAttemptStatus.SUCCESS:\n            return null;\n        case LastConnectionAttemptStatus.ERROR:\n            return (\n                <div className={ connectionAlertClassName }>\n                    <ConnectionFailed attempts={ attempts } />\n                </div>\n            );\n        case LastConnectionAttemptStatus.WARNING:\n            return (\n                <div className={ connectionAlertClassName }>\n                    <ConnectionDegraded attempts={ attempts } />\n                </div>\n            );\n        default:\n            assertNever(status);\n    }\n};\n\nconst LastConnectionAttemptSuccess: React.FunctionComponent = () => (\n    <>\n        <CheckCircleIcon color={ global_success_color_100.value } data-testid=\"success-icon\" />\n        <span className={ smallMarginLeft }>Success</span>\n    </>\n);\n\nconst LastConnectionAttemptError: React.FunctionComponent = () => (\n    <>\n        <ExclamationCircleIcon color={ global_danger_color_100.value } data-testid=\"fail-icon\" />\n        <span className={ smallMarginLeft }>Failure</span>\n    </>\n);\n\nconst getConnectionAttemptCell = (attempts: Array<IntegrationConnectionAttempt> | undefined, isLoading: boolean) => {\n    if (attempts === undefined) {\n        return 'Error fetching connection attempts';\n    }\n\n    if (isLoading) {\n        return <Spinner size=\"md\" />;\n    }\n\n    const status = getLastConnectionAttemptStatus(attempts);\n    switch (status) {\n        case LastConnectionAttemptStatus.UNKNOWN:\n            return <>\n                <OffIcon data-testid=\"off-icon\" />\n                <span className={ smallMarginLeft }>Unknown</span>\n            </>;\n        case LastConnectionAttemptStatus.SUCCESS:\n            return <><LastConnectionAttemptSuccess /></>;\n        case LastConnectionAttemptStatus.ERROR:\n            return <><LastConnectionAttemptError /></>;\n        case LastConnectionAttemptStatus.WARNING:\n            return <>\n                { attempts[0].isSuccess ? <LastConnectionAttemptSuccess /> : <LastConnectionAttemptError />}\n                <br />\n                <Text className={ degradedClassName }>Degraded connection</Text>\n            </>;\n        default:\n            assertNever(status);\n    }\n};\n\nconst toTableRows = (integrations: Array<IntegrationRow>, onEnable?: OnEnable): Array<IRow> => {\n    return integrations.reduce((rows, integration, idx) => {\n        rows.push({\n            id: integration.id,\n            key: integration.id,\n            isOpen: integration.isOpen,\n            selected: integration.isSelected,\n            cells: [\n                {\n                    title: integration.name\n                },\n                {\n                    title: Messages.components.integrations.integrationType[integration.type]\n                },\n                {\n                    title: getConnectionAttemptCell(integration.lastConnectionAttempts, integration.isConnectionAttemptLoading)\n                },\n                {\n                    title: <>\n                        { integration.isEnabledLoading ? (\n                            <Spinner className={ isEnabledLoadingClassName } size=\"md\" />\n                        ) : (\n                            <Switch\n                                id={ `table-row-switch-id-${integration.id}` }\n                                aria-label=\"Enabled\"\n                                isChecked={ integration.isEnabled }\n                                onChange={ isChecked => onEnable && onEnable(integration, idx, isChecked) }\n                                isDisabled={ !onEnable }\n                                ouiaId={ `enabled-${integration.id}` }\n                            />\n                        )}\n                    </>\n                }\n            ]\n        });\n        rows.push({\n            fullWidth: true,\n            parent: idx * 2,\n            cells: [\n                {\n                    title: <>\n                        {integration.lastConnectionAttempts !== undefined && getConnectionAlert(integration.lastConnectionAttempts)}\n                        <div className={ expandedContentClassName }>\n                            <ExpandedContent integration={ integration } ouiaId={ integration.id } />\n                        </div>\n                    </>,\n                    props: {\n                        colSpan: 6\n                    }\n                }\n            ]\n        });\n        return rows;\n    }, [] as Array<IRow>);\n};\n\nconst columns: Array<ICell> = [\n    {\n        title: Messages.components.integrations.table.columns.name,\n        cellFormatters: [ expandable ],\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.type,\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.lastConnectionAttempt,\n        transforms: []\n    },\n    {\n        title: Messages.components.integrations.table.columns.enabled,\n        transforms: []\n    }\n];\n\nconst buildClassNames = () => {\n    const noneStyle = important('none');\n    const borderStyle = important('var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)');\n\n    const noBorderBottom = {\n        borderBottom: noneStyle\n    };\n\n    const rowExpandedContentClassName = style(noBorderBottom);\n    const rowWrapperClassName = style(noBorderBottom, {\n        borderTop: borderStyle\n    });\n    const tableClassName = style({\n        borderBottom: borderStyle\n    });\n\n    return {\n        rowExpandedContentClassName,\n        rowWrapperClassName,\n        tableClassName\n    };\n};\n\nconst {\n    rowExpandedContentClassName,\n    rowWrapperClassName,\n    tableClassName\n} = buildClassNames();\n\nconst RowWrapper: React.FunctionComponent<RowWrapperProps> = (props) => {\n    const { trRef, className, rowProps, row, ...rest } = props;\n    if (!row) {\n        return <></>;\n    }\n\n    return (\n        <tr\n            { ...rest }\n            ref={ trRef as any }\n            className={ css(\n                className,\n                row.isExpanded === true ? rowExpandedContentClassName : rowWrapperClassName,\n                row.isExpanded !== undefined && styles.tableExpandableRow,\n                row.isExpanded && styles.modifiers.expanded\n            ) }\n            hidden={ row?.isExpanded !== undefined && !row.isExpanded }\n        >\n            { props.children}\n        </tr>\n    );\n};\n\nexport const IntegrationsTable: React.FunctionComponent<IntegrationsTableProps> = (props) => {\n    const intl = useIntl();\n    const onCollapseHandler = React.useCallback((_event, _index: number, isOpen: boolean, data: IRowData) => {\n        const integrations = props.integrations;\n        const onCollapse = props.onCollapse;\n        const index = integrations.findIndex(integration => integration.id === data.id);\n        if (onCollapse && index !== -1) {\n            const integration = integrations[index];\n            onCollapse(integration, index, isOpen);\n        }\n    }, [ props.integrations, props.onCollapse ]);\n\n    const rows = React.useMemo(() => {\n        return toTableRows(props.integrations, props.onEnable);\n    }, [ props.integrations, props.onEnable ]);\n\n    const actionsResolverCallback: IActionsResolver = React.useCallback(rowData => {\n        const actionResolver = props.actionResolver;\n        if (rowData.parent === undefined && rowData && props.integrations) {\n            const integrationIndex = props.integrations.findIndex(i => i.id === rowData.id);\n            const integrationRow = props.integrations[integrationIndex];\n            if (integrationRow) {\n                return actionResolver(integrationRow, integrationIndex);\n            }\n        }\n\n        return [];\n    }, [ props.actionResolver, props.integrations ]);\n\n    if (props.isLoading) {\n        return (\n            <div { ...getOuiaProps('Integrations/Table',  { ...props, ouiaSafe: false }) }>\n                <SkeletonTable\n                    rowSize={ (props.loadingCount && props.loadingCount > 0) ? props.loadingCount : 10 }\n                    columns={ columns }\n                    paddingColumnSize={ 0 }\n                    sortBy={ undefined }\n                />\n            </div>\n        );\n    }\n\n    return (\n        <div { ...getOuiaProps('Integrations/Table', props) }>\n            {rows.length === 0 ?  (<EmptyState variant={ EmptyStateVariant.full }>\n                <EmptyStateIcon icon={ CubesIcon } />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {intl.formatMessage(messages.integrationsEmptyStateTitle)}\n                </Title>\n                <EmptyStateBody>\n                    {intl.formatMessage(messages.integrationsTableEmptyStateBody)}\n                </EmptyStateBody>\n            </EmptyState>) :\n                (<Table\n                    className={ tableClassName }\n                    aria-label={ Messages.components.integrations.table.title }\n                    rows={ rows }\n                    cells={ columns }\n                    onCollapse={ onCollapseHandler }\n                    rowWrapper={ RowWrapper as (props: RowWrapperProps) => React.ReactElement }\n                    actionResolver={ actionsResolverCallback }\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>)}\n        </div>\n    );\n};\n","import { ExporterType, exporterTypeFromString } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\ntype OnExport = (type: ExporterType) => void;\n\nexport const useTableExportConfig = (onExport: OnExport) => {\n    return React.useMemo(() => {\n        if (onExport) {\n            return {\n                extraItems: [],\n                onSelect: (_event, type: string) => {\n                    onExport(exporterTypeFromString(type));\n                }\n            };\n        }\n\n        return undefined;\n    }, [ onExport ]);\n};\n","import { Environment, getInsightsEnvironment, InsightsType } from '@redhat-cloud-services/insights-common-typescript';\n\nexport const stagingAndProd: Array<Environment> = [\n    'stage-beta',\n    'prod-beta',\n    'stage',\n    'prod'\n];\n\nexport const isStagingOrProd = (insights: InsightsType) => {\n    return stagingAndProd.includes(getInsightsEnvironment(insights));\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum IntegrationFilterColumn {\n    NAME = 'name',\n    ENABLED = 'enabled'\n}\n\nexport type IntegrationFilters = Filters<typeof IntegrationFilterColumn>;\nexport type SetIntegrationFilters = SetFilters<typeof IntegrationFilterColumn>;\nexport type ClearIntegrationFilters = ClearFilters<typeof IntegrationFilterColumn>;\n","import { PaginationProps, PaginationVariant } from '@patternfly/react-core';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ColumnsMetada,\n    ExporterType,\n    getInsights,\n    OuiaComponentProps,\n    useInsightsEnvironmentFlag,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { style } from 'typestyle';\n\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { Messages } from '../../properties/Messages';\nimport { stagingAndProd } from '../../types/Environments';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { DisabledIntegrationIcon, EnabledIntegrationIcon } from '../Icons';\nimport { ClearIntegrationFilters, IntegrationFilterColumn, IntegrationFilters, SetIntegrationFilters } from './Filters';\n\ninterface IntegrationsToolbarProps extends OuiaComponentProps {\n    onAddIntegration?: () => void;\n    onExport: (type: ExporterType) => void;\n    filters: IntegrationFilters;\n    setFilters: SetIntegrationFilters;\n    clearFilters: ClearIntegrationFilters;\n    pageCount: number;\n    count: number;\n    page: number;\n    perPage: number;\n    pageChanged: (page: number) => void;\n    perPageChanged: (page: number) => void;\n}\n\nconst enabledTextClassName = style({\n    marginLeft: 4\n});\n\nconst filterMetadata: ColumnsMetada<typeof IntegrationFilterColumn> = {\n    [IntegrationFilterColumn.NAME]: {\n        label: 'Name',\n        placeholder: 'Filter by name'\n    },\n    [IntegrationFilterColumn.ENABLED]: {\n        label: 'Enabled',\n        placeholder: 'Filter by enabled',\n        options: {\n            exclusive: false,\n            items: [\n                {\n                    value: 'Enabled',\n                    label: <><EnabledIntegrationIcon /> <span className={ enabledTextClassName }>Enabled</span></>\n                },\n                {\n                    value: 'Disabled',\n                    label: <><DisabledIntegrationIcon /> <span className={ enabledTextClassName }>Disabled</span></>\n                }\n            ]\n        }\n    }\n};\n\nexport const IntegrationsToolbar: React.FunctionComponent<IntegrationsToolbarProps> = (props) => {\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        IntegrationFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilters,\n        filterMetadata\n    );\n\n    const actionsConfig = React.useMemo(() => {\n        const actions = [\n            {\n                key: 'add-integration',\n                label: Messages.components.integrations.toolbar.actions.addIntegration,\n                onClick: props.onAddIntegration,\n                props: {\n                    isDisabled: !props.onAddIntegration\n                }\n            }\n        ];\n\n        return {\n            actions,\n            kebabToggleProps: {\n                isDisabled: false\n            }\n        };\n    }, [ props.onAddIntegration ]);\n\n    const exportConfig = useTableExportConfig(props.onExport);\n\n    const filterConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingAndProd,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.filterConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const activeFiltersConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingAndProd,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.activeFiltersConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const pageChanged = React.useCallback((_event: unknown, page: number) => {\n        const inner = props.pageChanged;\n        inner(page);\n    }, [ props.pageChanged ]);\n\n    const perPageChanged = React.useCallback((_event: unknown, perPage: number) => {\n        const inner = props.perPageChanged;\n        inner(perPage);\n    }, [ props.perPageChanged ]);\n\n    const topPaginationProps = React.useMemo<PaginationProps>(() => ({\n        itemCount: props.count,\n        page: props.page,\n        perPage: props.perPage,\n        isCompact: true,\n        variant: PaginationVariant.top,\n        onSetPage: pageChanged,\n        onFirstClick: pageChanged,\n        onPreviousClick: pageChanged,\n        onNextClick: pageChanged,\n        onLastClick: pageChanged,\n        onPageInput: pageChanged,\n        onPerPageSelect: perPageChanged\n    }), [ props.count, props.page, props.perPage, pageChanged, perPageChanged ]);\n\n    const bottomPaginationProps = React.useMemo<PaginationProps>(() => ({\n        ...topPaginationProps,\n        isCompact: false,\n        variant: PaginationVariant.bottom\n    }), [ topPaginationProps ]);\n\n    return (\n        <div { ...getOuiaProps('Integrations/DualToolbar', props) }>\n            <PrimaryToolbar\n                actionsConfig={ actionsConfig }\n                exportConfig={ exportConfig }\n                filterConfig={ filterConfig }\n                activeFiltersConfig={ activeFiltersConfig }\n                pagination={ topPaginationProps }\n                id=\"integrations-top-toolbar\"\n            />\n            { props.children }\n            <PrimaryToolbar id=\"integrations-bottom-toolbar\" pagination={ bottomPaginationProps } />\n        </div>\n    );\n};\n","import { CheckCircleIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport const EnabledIntegrationIcon: React.FunctionComponent = () => {\n    return <CheckCircleIcon color=\"green\" />;\n};\n","import { OffIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport const DisabledIntegrationIcon: React.FunctionComponent = () => {\n    return <OffIcon />;\n};\n","import { assertNever } from 'assert-never';\nimport { useMemo, useReducer } from 'react';\n\nenum UseFormModalReducerActionType {\n    EDIT = 'edit',\n    CREATE = 'create',\n    NONE = 'none'\n}\n\ninterface UseFormModalReducerActionCreate<T> {\n    type: UseFormModalReducerActionType.CREATE;\n    template?: Partial<T>;\n}\n\ninterface UseFormModalReducerActionEdit<T> {\n    type: UseFormModalReducerActionType.EDIT;\n    template: T;\n}\n\ninterface UseFormModalReducerActionNone {\n    type: UseFormModalReducerActionType.NONE;\n}\n\ntype UseFormModalReducerAction<T> = UseFormModalReducerActionCreate<T> | UseFormModalReducerActionEdit<T> | UseFormModalReducerActionNone;\n\ninterface UseFormModalReducerState<T> {\n    isOpen: boolean;\n    isEdit: boolean;\n    template: T | Partial<T> | undefined;\n    isCopy: boolean;\n}\n\nconst noneState: UseFormModalReducerState<undefined> = {\n    isOpen: false,\n    isEdit: false,\n    template: undefined,\n    isCopy: false\n};\n\ntype CopyFunction<T> = (from: Partial<T>) => Partial<T>;\n\nconst buildReducer = <T>(copyFunction?: CopyFunction<T>) => {\n    const reducer = (\n        state: UseFormModalReducerState<T>,\n        action: UseFormModalReducerAction<T>\n    ): UseFormModalReducerState<T> => {\n        switch (action.type) {\n            case UseFormModalReducerActionType.CREATE:\n                return {\n                    isOpen: true,\n                    isEdit: false,\n                    template: action.template ? copyFunction ? copyFunction(action.template) : action.template : undefined,\n                    isCopy: !!action.template\n                };\n            case UseFormModalReducerActionType.EDIT:\n                return {\n                    isOpen: true,\n                    isEdit: true,\n                    template: action.template,\n                    isCopy: false\n                };\n            case UseFormModalReducerActionType.NONE:\n                return noneState;\n            default:\n                assertNever(action);\n        }\n    };\n\n    return reducer;\n};\n\nexport const makeCreateAction = <T>(template?: Partial<T>): UseFormModalReducerActionCreate<T> => ({\n    type: UseFormModalReducerActionType.CREATE,\n    template\n});\n\nexport const makeEditAction = <T>(template: T): UseFormModalReducerActionEdit<T> => ({\n    type: UseFormModalReducerActionType.EDIT,\n    template\n});\n\nexport const makeNoneAction = (): UseFormModalReducerActionNone => ({\n    type: UseFormModalReducerActionType.NONE\n});\n\nexport const useFormModalReducer = <T>(copyFunction?: CopyFunction<T>) => {\n    const reducer = useMemo(() => {\n        return buildReducer(copyFunction);\n    }, [ copyFunction ]);\n\n    return useReducer(reducer, noneState);\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const EmailSubscriptionProperties = zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = unknown;\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType = 'webhook' | 'email_subscription' | 'default';\n\n  export const EntityTag = zodSchemaEntityTag();\n  export type EntityTag = {\n    value?: string | undefined | null;\n    weak?: boolean | undefined | null;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const Family = zodSchemaFamily();\n  export type Family =\n    | 'CLIENT_ERROR'\n    | 'INFORMATIONAL'\n    | 'OTHER'\n    | 'REDIRECTION'\n    | 'SERVER_ERROR'\n    | 'SUCCESSFUL';\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Link = zodSchemaLink();\n  export type Link = {\n    params?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    rel?: string | undefined | null;\n    rels?: Array<string> | undefined | null;\n    title?: string | undefined | null;\n    type?: string | undefined | null;\n    uri?: string | undefined | null;\n    uriBuilder?: UriBuilder | undefined | null;\n  };\n\n  export const Locale = zodSchemaLocale();\n  export type Locale = {\n    country?: string | undefined | null;\n    displayCountry?: string | undefined | null;\n    displayLanguage?: string | undefined | null;\n    displayName?: string | undefined | null;\n    displayScript?: string | undefined | null;\n    displayVariant?: string | undefined | null;\n    extensionKeys?: Array<string> | undefined | null;\n    iSO3Country?: string | undefined | null;\n    iSO3Language?: string | undefined | null;\n    language?: string | undefined | null;\n    script?: string | undefined | null;\n    unicodeLocaleAttributes?: Array<string> | undefined | null;\n    unicodeLocaleKeys?: Array<string> | undefined | null;\n    variant?: string | undefined | null;\n  };\n\n  export const MediaType = zodSchemaMediaType();\n  export type MediaType = {\n    parameters?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    subtype?: string | undefined | null;\n    type?: string | undefined | null;\n    wildcardSubtype?: boolean | undefined | null;\n    wildcardType?: boolean | undefined | null;\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();\n  export type MultivaluedMapStringObject = {\n    [x: string]: Array<unknown>;\n  };\n\n  export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();\n  export type MultivaluedMapStringString = {\n    [x: string]: Array<string>;\n  };\n\n  export const NewCookie = zodSchemaNewCookie();\n  export type NewCookie = {\n    comment?: string | undefined | null;\n    domain?: string | undefined | null;\n    expiry?: string | undefined | null;\n    httpOnly?: boolean | undefined | null;\n    maxAge?: number | undefined | null;\n    name?: string | undefined | null;\n    path?: string | undefined | null;\n    secure?: boolean | undefined | null;\n    value?: string | undefined | null;\n    version?: number | undefined | null;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    eventId?: string | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const RbacRaw = zodSchemaRbacRaw();\n  export type RbacRaw = {\n    data?:\n      | Array<{\n          [x: string]: unknown;\n        }>\n      | undefined\n      | null;\n    links?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    meta?:\n      | {\n          [x: string]: number;\n        }\n      | undefined\n      | null;\n  };\n\n  export const Response = zodSchemaResponse();\n  export type Response = {\n    allowedMethods?: Array<string> | undefined | null;\n    cookies?:\n      | {\n          [x: string]: NewCookie;\n        }\n      | undefined\n      | null;\n    date?: string | undefined | null;\n    entity?: unknown | undefined | null;\n    entityTag?: EntityTag | undefined | null;\n    headers?: MultivaluedMapStringObject | undefined | null;\n    language?: Locale | undefined | null;\n    lastModified?: string | undefined | null;\n    length?: number | undefined | null;\n    links?: Array<Link> | undefined | null;\n    location?: string | undefined | null;\n    mediaType?: MediaType | undefined | null;\n    metadata?: MultivaluedMapStringObject | undefined | null;\n    status?: number | undefined | null;\n    statusInfo?: StatusType | undefined | null;\n    stringHeaders?: MultivaluedMapStringString | undefined | null;\n  };\n\n  export const StatusType = zodSchemaStatusType();\n  export type StatusType = {\n    family?: Family | undefined | null;\n    reasonPhrase?: string | undefined | null;\n    statusCode?: number | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UriBuilder = zodSchemaUriBuilder();\n  export type UriBuilder = unknown;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default' ]);\n  }\n\n  function zodSchemaEntityTag() {\n      return z\n      .object({\n          value: z.string().optional().nullable(),\n          weak: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFamily() {\n      return z.enum([\n          'CLIENT_ERROR',\n          'INFORMATIONAL',\n          'OTHER',\n          'REDIRECTION',\n          'SERVER_ERROR',\n          'SUCCESSFUL'\n      ]);\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaLink() {\n      return z\n      .object({\n          params: z.record(z.string()).optional().nullable(),\n          rel: z.string().optional().nullable(),\n          rels: z.array(z.string()).optional().nullable(),\n          title: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          uri: z.string().optional().nullable(),\n          uriBuilder: zodSchemaUriBuilder().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLocale() {\n      return z\n      .object({\n          country: z.string().optional().nullable(),\n          displayCountry: z.string().optional().nullable(),\n          displayLanguage: z.string().optional().nullable(),\n          displayName: z.string().optional().nullable(),\n          displayScript: z.string().optional().nullable(),\n          displayVariant: z.string().optional().nullable(),\n          extensionKeys: z.array(z.string()).optional().nullable(),\n          iSO3Country: z.string().optional().nullable(),\n          iSO3Language: z.string().optional().nullable(),\n          language: z.string().optional().nullable(),\n          script: z.string().optional().nullable(),\n          unicodeLocaleAttributes: z.array(z.string()).optional().nullable(),\n          unicodeLocaleKeys: z.array(z.string()).optional().nullable(),\n          variant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMediaType() {\n      return z\n      .object({\n          parameters: z.record(z.string()).optional().nullable(),\n          subtype: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          wildcardSubtype: z.boolean().optional().nullable(),\n          wildcardType: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMultivaluedMapStringObject() {\n      return z.record(z.array(z.unknown()));\n  }\n\n  function zodSchemaMultivaluedMapStringString() {\n      return z.record(z.array(z.string()));\n  }\n\n  function zodSchemaNewCookie() {\n      return z\n      .object({\n          comment: z.string().optional().nullable(),\n          domain: z.string().optional().nullable(),\n          expiry: z.string().optional().nullable(),\n          httpOnly: z.boolean().optional().nullable(),\n          maxAge: z.number().int().optional().nullable(),\n          name: z.string().optional().nullable(),\n          path: z.string().optional().nullable(),\n          secure: z.boolean().optional().nullable(),\n          value: z.string().optional().nullable(),\n          version: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          eventId: z.string().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRbacRaw() {\n      return z\n      .object({\n          data: z.array(z.record(z.unknown())).optional().nullable(),\n          links: z.record(z.string()).optional().nullable(),\n          meta: z.record(z.number().int()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaResponse() {\n      return z\n      .object({\n          allowedMethods: z.array(z.string()).optional().nullable(),\n          cookies: z.record(zodSchemaNewCookie()).optional().nullable(),\n          date: z.string().optional().nullable(),\n          entity: z.unknown().optional().nullable(),\n          entityTag: zodSchemaEntityTag().optional().nullable(),\n          headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          language: zodSchemaLocale().optional().nullable(),\n          lastModified: z.string().optional().nullable(),\n          length: z.number().int().optional().nullable(),\n          links: z.array(zodSchemaLink()).optional().nullable(),\n          location: z.string().optional().nullable(),\n          mediaType: zodSchemaMediaType().optional().nullable(),\n          metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          status: z.number().int().optional().nullable(),\n          statusInfo: zodSchemaStatusType().optional().nullable(),\n          stringHeaders: zodSchemaMultivaluedMapStringString()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatusType() {\n      return z\n      .object({\n          family: zodSchemaFamily().optional().nullable(),\n          reasonPhrase: z.string().optional().nullable(),\n          statusCode: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUriBuilder() {\n      return z.unknown();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /endpoints\n  export namespace EndpointServiceGetEndpoints {\n    const Active = z.boolean();\n    type Active = boolean;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Type = z.string();\n    type Type = string;\n    export interface Params {\n      active?: Active;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n      type?: Type;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EndpointPage', 200, Schemas.EndpointPage>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints';\n        const query = {} as Record<string, any>;\n        if (params.active !== undefined) {\n            query.active = params.active;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        if (params.type !== undefined) {\n            query.type = params.type;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.EndpointPage, 'EndpointPage', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /endpoints\n  export namespace EndpointServiceCreateEndpoint {\n    export interface Params {\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.Endpoint, 'Endpoint', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /endpoints/bg\n  export namespace EndpointServiceCreateEndpointBg {\n    export interface Params {\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/bg';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.Endpoint, 'Endpoint', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/email/subscription/{bundleName}/{applicationName}/{type}\n  export namespace EndpointServiceSubscribeEmail {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      type: Schemas.EmailSubscriptionType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/email/subscription/{bundleName}/{applicationName}/{type}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString())\n        .replace('{type}', params.type.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/email/subscription/{bundleName}/{applicationName}/{type}\n  export namespace EndpointServiceUnsubscribeEmail {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      type: Schemas.EmailSubscriptionType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/email/subscription/{bundleName}/{applicationName}/{type}'\n        .replace('{applicationName}', params.applicationName.toString())\n        .replace('{bundleName}', params.bundleName.toString())\n        .replace('{type}', params.type.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}\n  export namespace EndpointServiceGetEndpoint {\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Endpoint', 200, Schemas.Endpoint>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.Endpoint, 'Endpoint', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/{id}\n  export namespace EndpointServiceUpdateEndpoint {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.Endpoint;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/{id}\n  export namespace EndpointServiceDeleteEndpoint {\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 204) ]\n        })\n        .build();\n    };\n  }\n  // PUT /endpoints/{id}/enable\n  export namespace EndpointServiceEnableEndpoint {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /endpoints/{id}/enable\n  export namespace EndpointServiceDisableEndpoint {\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}/history\n  export namespace EndpointServiceGetEndpointHistory {\n    const Response200 = z.array(Schemas.NotificationHistory);\n    type Response200 = Array<Schemas.NotificationHistory>;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/history'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /endpoints/{id}/history/{history_id}/details\n  export namespace EndpointServiceGetDetailedEndpointHistory {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const PageSize = z.number().int();\n    type PageSize = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      historyId: Schemas.UUID;\n      id: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      pageSize?: PageSize;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/integrations/v1.0/endpoints/{id}/history/{history_id}/details'\n        .replace('{history_id}', params.historyId.toString())\n        .replace('{id}', params.id.toString());\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.pageSize !== undefined) {\n            query.pageSize = params.pageSize;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n}\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    Integration,\n    IntegrationBase,\n    IntegrationHttp,\n    IntegrationType,\n    NewIntegration,\n    NewUserIntegration,\n    ServerIntegrationRequest,\n    ServerIntegrationResponse,\n    UserIntegration,\n    UserIntegrationType\n} from '../Integration';\n\nconst getIntegrationType = (type: Schemas.EndpointType | undefined): IntegrationType => {\n    switch (type) {\n        case Schemas.EndpointType.Enum.webhook:\n            return IntegrationType.WEBHOOK;\n        case Schemas.EndpointType.Enum.email_subscription:\n            return IntegrationType.EMAIL_SUBSCRIPTION;\n        case Schemas.EndpointType.Enum.default:\n        case undefined:\n            throw new Error(`Unexpected type: ${type}`);\n        default:\n            assertNever(type);\n    }\n};\n\nexport const getEndpointType = (type: IntegrationType | UserIntegrationType): Schemas.EndpointType => {\n    switch (type) {\n        case IntegrationType.WEBHOOK:\n        case UserIntegrationType.WEBHOOK:\n            return Schemas.EndpointType.Enum.webhook;\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return Schemas.EndpointType.Enum.email_subscription;\n        default:\n            assertNever(type);\n    }\n};\n\nexport const toIntegration = (serverIntegration: ServerIntegrationResponse): Integration => {\n\n    const integrationBase: IntegrationBase = {\n        id: serverIntegration.id || '',\n        name: serverIntegration.name || '',\n        isEnabled: !!serverIntegration.enabled,\n        type: getIntegrationType(serverIntegration.type)\n    };\n\n    switch (integrationBase.type) {\n        case IntegrationType.WEBHOOK:\n            const properties = serverIntegration.properties as Schemas.WebhookProperties;\n            return {\n                ...integrationBase,\n                url: properties.url || '',\n                sslVerificationEnabled: !properties.disable_ssl_verification,\n                secretToken: properties.secret_token === null ? undefined : properties.secret_token,\n                method: properties.method ?? Schemas.HttpType.Enum.GET\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return {\n                ...integrationBase,\n                type: IntegrationType.EMAIL_SUBSCRIPTION\n            };\n        default:\n            assertNever(integrationBase.type);\n    }\n};\n\nexport const toUserIntegration = (serverIntegration: ServerIntegrationResponse): UserIntegration => {\n    const integration = toIntegration(serverIntegration);\n    if (!Object.values(UserIntegrationType).includes(integration.type as unknown as UserIntegrationType)) {\n        throw new Error(`Unknown UserIntegrationType ${integration.type}`);\n    }\n\n    return integration as unknown as UserIntegration;\n};\n\nexport const toUserIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<UserIntegration> => {\n    return toIntegrations(serverIntegrations)\n    .filter(\n        integration => Object.values(UserIntegrationType)\n        .includes(integration.type as unknown as UserIntegrationType)) as unknown as Array<UserIntegration>;\n};\n\nexport const toIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<Integration> => {\n    return filterOutDefaultAction(serverIntegrations).map(toIntegration);\n};\n\nexport const toIntegrationProperties = (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration) => {\n    switch (integration.type) {\n        case IntegrationType.WEBHOOK:\n        case UserIntegrationType.WEBHOOK:\n            const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n            return {\n                url: integrationHttp.url,\n                method: integrationHttp.method,\n                disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n                secret_token: integrationHttp.secretToken\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return {};\n        default:\n            assertNever(integration);\n    }\n};\n\nexport const toServerIntegrationRequest =\n    (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration): ServerIntegrationRequest => {\n        return {\n            id: integration.id,\n            name: integration.name,\n            enabled: integration.isEnabled,\n            type: getEndpointType(integration.type),\n            description: '',\n            properties: toIntegrationProperties(integration)\n        };\n    };\n\nexport const filterOutDefaultAction = (serverNotifications: Array<ServerIntegrationResponse>) =>\n    serverNotifications.filter(e => e.type !== Schemas.EndpointType.enum.default);\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useParameterizedQuery, useQuery } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiIntegrations';\nimport { getEndpointType, toUserIntegrations } from '../types/adapters/IntegrationAdapter';\nimport { IntegrationType } from '../types/Integration';\n\nexport const listIntegrationsActionCreator = (pager?: Page) => {\n    const query = (pager ?? Page.defaultPage()).toQuery();\n    return Operations.EndpointServiceGetEndpoints.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        type: query.filterType ? getEndpointType(query.filterType as IntegrationType) : undefined,\n        active: query.filterActive ? query.filterActive === 'true' : undefined\n    });\n};\n\nexport const listIntegrationIntegrationDecoder = validationResponseTransformer((payload: Operations.EndpointServiceGetEndpoints.Payload) => {\n    if (payload?.status === 200) {\n        return validatedResponse(\n            'IntegrationPage',\n            200,\n            {\n                data: toUserIntegrations(payload.value.data),\n                count: payload.value.meta.count\n            },\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useListIntegrationsQuery = (pager?: Page, initFetch?: boolean) => useTransformQueryResponse(\n    useQuery(listIntegrationsActionCreator(pager), initFetch),\n    listIntegrationIntegrationDecoder\n);\n\nexport const useListIntegrationPQuery = () => useTransformQueryResponse(\n    useParameterizedQuery(listIntegrationsActionCreator),\n    listIntegrationIntegrationDecoder\n);\n","import { ExporterCsv, ExporterHeaders } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nexport class IntegrationExporterCsv extends ExporterCsv<UserIntegration> {\n\n    public serialize(integration: UserIntegration) {\n        return {\n            ...integration\n        };\n    }\n\n    public headers(): ExporterHeaders<IntegrationExporterCsv, UserIntegration> {\n        return [\n            [ 'id', 'id' ],\n            [ 'name', 'name' ],\n            [ 'isEnabled', 'isEnabled' ],\n            [ 'type', 'type' ],\n            // This works now, but what will happen when there are multiple types (slack, webhook, etc)\n            [ 'url', 'url' ]\n        ];\n    }\n}\n","import { ExporterJson } from '@redhat-cloud-services/insights-common-typescript';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nexport class IntegrationExporterJson extends ExporterJson<UserIntegration> {\n\n}\n","import { Button, ButtonVariant, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { IntegrationRef } from '../../types/Notification';\n\ninterface AddNotificationBodyProps {\n    integration: IntegrationRef;\n    isLoading: boolean;\n    switchEnabled: () => void;\n}\n\nconst buttonClassname = style({\n    paddingLeft: 0\n});\n\nexport const AddNotificationBody: React.FunctionComponent<AddNotificationBodyProps> = (props) => {\n\n    const text = props.integration.isEnabled ? 'This integration is enabled and ready to use.' : 'This integration is disabled.';\n    const buttonText = props.integration.isEnabled ? 'Disable integration' : 'Enable integration';\n\n    return (\n        <>\n            <div>{ text }</div>\n            <Button\n                className={ buttonClassname }\n                isDisabled={ props.isLoading }\n                variant={ ButtonVariant.link }\n                onClick={ props.switchEnabled }\n            >\n                {buttonText}\n            </Button>\n            { props.isLoading && (\n                <Spinner size=\"sm\" />\n            ) }\n        </>\n    );\n};\n","import * as Yup from 'yup';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    IntegrationHttp,\n    IntegrationType, NewIntegration,\n    NewIntegrationBase, NewIntegrationTemplate\n} from '../../types/Integration';\n\nexport const maxIntegrationNameLength = 150;\n\nexport const IntegrationSchemaBase = Yup.object<NewIntegrationBase>({\n    name: Yup.string().required('Write a name for this Integration.').max(maxIntegrationNameLength).trim(),\n    type: Yup.mixed<IntegrationType>().oneOf([ IntegrationType.WEBHOOK ]).default(IntegrationType.WEBHOOK),\n    isEnabled: Yup.boolean().default(true).required()\n});\n\nexport const IntegrationHttpSchema = IntegrationSchemaBase.concat(Yup.object<NewIntegrationTemplate<IntegrationHttp>>().shape({\n    type: Yup.mixed<IntegrationType.WEBHOOK>().oneOf([ IntegrationType.WEBHOOK ]).required(),\n    url: Yup.string().url().required('Write a valid url for this Integration.'),\n    sslVerificationEnabled: Yup.boolean().default(true),\n    secretToken: Yup.string().notRequired(),\n    method: Yup.mixed<Schemas.HttpType>().oneOf(Object.values(Schemas.HttpType.Enum)).default(Schemas.HttpType.Enum.POST)\n}));\n\nexport const IntegrationSchema = Yup.lazy<NewIntegration | NewIntegrationBase | undefined>(value => {\n    if (value) {\n        if (value.type === IntegrationType.WEBHOOK) {\n            return IntegrationHttpSchema;\n        }\n    }\n\n    return IntegrationSchemaBase;\n});\n","import { Checkbox, FormTextInput, ouiaIdConcat } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './IntegrationTypeForm';\n\nexport const IntegrationTypeHttpForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    return (\n        <div className=\"pf-c-form\" { ...getOuiaProps('Integrations/HttpForm', props) } >\n            <FormTextInput\n                isRequired={ true }\n                label=\"Endpoint URL\"\n                type=\"url\"\n                name=\"url\"\n                id=\"integration-type-http-url\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'endpoint-url') }\n            />\n            <Checkbox\n                id=\"integration-type-http-ssl-verification-enabled\"\n                label=\"Enable SSL verification\"\n                name=\"sslVerificationEnabled\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'is-ssl-verification-enabled') }\n            />\n            <FormTextInput\n                isRequired={ false }\n                label=\"Secret token\"\n                id=\"integration-type-http-secret-token\"\n                name=\"secretToken\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'secret-token') }\n            />\n        </div>\n    );\n};\n","import { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationTypeHttpForm } from './IntegrationTypeHttpForm';\n\nexport interface IntegrationTypeForm extends OuiaComponentProps {\n    type: UserIntegrationType;\n}\n\nexport const IntegrationTypeForm: React.FunctionComponent<IntegrationTypeForm> = (props) => {\n    switch (props.type) {\n        case UserIntegrationType.WEBHOOK:\n            return <IntegrationTypeHttpForm { ...props } />;\n        default:\n            assertNever(props.type);\n    }\n};\n","import { FormSelectOption } from '@patternfly/react-core';\nimport {\n    Form,\n    FormSelect,\n    FormTextInput,\n    OuiaComponentProps,\n    ouiaIdConcat\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { Messages } from '../../properties/Messages';\nimport { maxIntegrationNameLength } from '../../schemas/Integrations/Integration';\nimport { IntegrationType, NewUserIntegration } from '../../types/Integration';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { IntegrationTypeForm } from './Form/IntegrationTypeForm';\n\nconst options = [ IntegrationType.WEBHOOK ]\n.map(type => Messages.components.integrations.integrationType[type])\n.map(label => (<FormSelectOption key={ label } label={ label } />));\n\nexport const IntegrationsForm: React.FunctionComponent<OuiaComponentProps> = (props) => {\n\n    const { values } = useFormikContext<NewUserIntegration>();\n\n    return (\n        <Form { ...getOuiaProps('Integrations/Form', props) }>\n            <FormTextInput\n                maxLength={ maxIntegrationNameLength }\n                isRequired={ true }\n                label=\"Integration name\"\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'name') }\n            />\n            <FormSelect\n                isRequired={ true }\n                label=\"Type\"\n                name=\"type\"\n                id=\"integration-type\"\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'type') }\n            >\n                { options }\n            </FormSelect>\n            <IntegrationTypeForm\n                type={ values.type }\n                ouiaId={ ouiaIdConcat(props.ouiaId, 'type-form') }\n            />\n        </Form>\n    );\n};\n","import { ActionModalError, SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { Messages } from '../../properties/Messages';\nimport { IntegrationSchema } from '../../schemas/Integrations/Integration';\nimport { NewUserIntegration, UserIntegration } from '../../types/Integration';\nimport { IntegrationsForm } from './Form';\n\ntype PartialIntegration = Partial<UserIntegration>;\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\n\nexport interface IntegrationSaveModalProps extends Omit<SaveModalProps, UsedProps>{\n    initialIntegration?: PartialIntegration;\n    onSave: (integration: UserIntegration | NewUserIntegration) => boolean | Promise<boolean>;\n    isEdit: boolean;\n}\n\ninterface InternalIntegrationSaveModalProps {\n    isEdit: boolean;\n    onClose: (saved: boolean) => void;\n    error?: ActionModalError;\n}\n\nconst InternalIntegrationSaveModal: React.FunctionComponent<InternalIntegrationSaveModalProps> = (props) => {\n\n    const pageMessages = props.isEdit ? Messages.pages.integrations.edit : Messages.pages.integrations.add;\n    const pageTitle =  pageMessages.title;\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<NewUserIntegration>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            isOpen={ true }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            title={ pageTitle }\n            content={ <IntegrationsForm /> }\n            onClose={ props.onClose }\n            error={ props.error }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const IntegrationSaveModal: React.FunctionComponent<IntegrationSaveModalProps> = (props) => {\n\n    const [ initialIntegration ] = React.useState<PartialIntegration>(() => {\n        return {\n            // The call is twice, because we use lazy evaluation for the integration base type.\n            // To ensure we get the defaults on the second level (webhook, slack, etc) we need to call it again\n            ...IntegrationSchema.cast(IntegrationSchema.cast()),\n            ...props.initialIntegration\n        };\n    });\n\n    const onSubmit = React.useCallback(async (integration: PartialIntegration) => {\n        const onSave = props.onSave;\n        const onClose = props.onClose;\n        const transformedIntegration = IntegrationSchema.cast(integration) as NewUserIntegration;\n        const saved = await onSave(transformedIntegration);\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onSave, props.onClose ]);\n\n    return (\n        <Formik<PartialIntegration>\n            initialValues={ initialIntegration }\n            validationSchema={ IntegrationSchema }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalIntegrationSaveModal\n                isEdit={ props.isEdit }\n                onClose={ props.onClose }\n                error={ props.error }\n            />\n        </Formik>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiIntegrations';\nimport { toIntegration, toServerIntegrationRequest } from '../types/adapters/IntegrationAdapter';\nimport { Integration, NewIntegration, NewUserIntegration, UserIntegration } from '../types/Integration';\n\nexport const createIntegrationActionCreator = (integration: NewIntegration | NewUserIntegration) => {\n    return Operations.EndpointServiceCreateEndpoint.actionCreator({\n        body: toServerIntegrationRequest(integration)\n    });\n};\n\nexport const saveIntegrationActionCreator = (integration: Integration | NewIntegration | UserIntegration | NewUserIntegration) => {\n    if (integration.id) {\n        return Operations.EndpointServiceUpdateEndpoint.actionCreator({\n            body: toServerIntegrationRequest(integration),\n            id: integration.id\n        });\n    }\n\n    return createIntegrationActionCreator(integration);\n};\n\nconst decoder = (response: Operations.EndpointServiceCreateEndpoint.Payload | Operations.EndpointServiceUpdateEndpoint.Payload) => {\n    if (response.type === 'Endpoint') {\n        return {\n            ...response,\n            type: 'Integration',\n            value: toIntegration(response.value)\n        };\n    }\n\n    return response;\n};\n\nexport const useSaveIntegrationMutation = () => useTransformQueryResponse(\n    useMutation(saveIntegrationActionCreator),\n    decoder\n);\n","import { useMutation } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiIntegrations';\nimport { Integration, ServerIntegrationResponse } from '../types/Integration';\n\nexport const switchIntegrationEnabledStatusActionCreator = (integration: Integration) => {\n    if (integration.isEnabled) {\n        return Operations.EndpointServiceDisableEndpoint.actionCreator({\n            id: integration.id\n        });\n    } else {\n        return Operations.EndpointServiceEnableEndpoint.actionCreator({\n            id: integration.id\n        });\n    }\n};\n\nexport const useSwitchIntegrationEnabledStatus =\n    () => useMutation<ServerIntegrationResponse>(switchIntegrationEnabledStatusActionCreator);\n","import { NotificationAppState } from '../types/NotificationAppState';\nimport { SavedNotificationScopeState } from '../types/SavedNotificationScopeTypes';\n\nexport const savedNotificationScopeSelector = (state: NotificationAppState): SavedNotificationScopeState => state.savedNotificationScope;\n\nexport const savedNotificationScopeEqualFn = (left: SavedNotificationScopeState, right: SavedNotificationScopeState): boolean => {\n    return left?.integration === right?.integration && left?.status === right?.status;\n};\n","import { ActionModalError, addSuccessNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { AddNotificationBody } from '../../../components/Integrations/AddNotificationBody';\nimport { IntegrationSaveModal } from '../../../components/Integrations/SaveModal';\nimport { useSaveIntegrationMutation } from '../../../services/useSaveIntegration';\nimport { useSwitchIntegrationEnabledStatus } from '../../../services/useSwitchIntegrationEnabledStatus';\nimport { SavedNotificationScopeActions } from '../../../store/actions/SavedNotificationScopeAction';\nimport {\n    savedNotificationScopeEqualFn,\n    savedNotificationScopeSelector\n} from '../../../store/selectors/SavedNotificationScopeSelector';\nimport { Status } from '../../../store/types/SavedNotificationScopeTypes';\nimport { Integration, NewUserIntegration, UserIntegration, UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationRef } from '../../../types/Notification';\n\ninterface CreatePageProps {\n    isEdit: boolean;\n    initialIntegration: Partial<UserIntegration>;\n    onClose: (saved: boolean) => void;\n}\n\ninterface AddNotificationBodyContainer {\n    integration: IntegrationRef;\n}\n\nconst AddNotificationBodyContainer: React.FunctionComponent<AddNotificationBodyContainer> = (props) => {\n\n    const savedNotificationScope = useSelector(savedNotificationScopeSelector, savedNotificationScopeEqualFn);\n    const dispatch = useDispatch();\n    const switchIntegrationEnabledStatus = useSwitchIntegrationEnabledStatus();\n\n    const onClick = React.useCallback((): void => {\n        const mutate = switchIntegrationEnabledStatus.mutate;\n        if (savedNotificationScope) {\n            dispatch(SavedNotificationScopeActions.start());\n            const integration = savedNotificationScope.integration;\n            mutate(integration).then(response => {\n                if (!response.error) {\n                    dispatch(SavedNotificationScopeActions.finish(!integration.isEnabled));\n                } else {\n                    dispatch(SavedNotificationScopeActions.finish(integration.isEnabled));\n                }\n            });\n        }\n    }, [ switchIntegrationEnabledStatus.mutate, dispatch, savedNotificationScope ]);\n\n    React.useEffect(() => {\n        dispatch(SavedNotificationScopeActions.setIntegration(props.integration));\n        return () => {\n            dispatch(SavedNotificationScopeActions.unset());\n        };\n    }, [ dispatch, props.integration ]);\n\n    if (!savedNotificationScope) {\n        return <React.Fragment />;\n    }\n\n    return <AddNotificationBody\n        integration={ savedNotificationScope.integration }\n        isLoading={ savedNotificationScope.status === Status.LOADING }\n        switchEnabled={ onClick }\n    />;\n};\n\nexport const CreatePage: React.FunctionComponent<CreatePageProps> = props => {\n\n    const saveIntegrationMutation = useSaveIntegrationMutation();\n    const [ hasError, setError ] = React.useState(false);\n\n    const onSaveIntegration = React.useCallback((integration: NewUserIntegration) => {\n        if (!integration.id) {\n            integration.isEnabled = true;\n        }\n\n        setError(false);\n\n        return saveIntegrationMutation.mutate(integration).then(response => {\n            if (response.payload?.status === 200) {\n\n                const savedIntegration: IntegrationRef =  response.payload?.type === 'Integration' ? {\n                    ...response.payload.value as Integration,\n                    type: response.payload.value.type as unknown as UserIntegrationType\n                } : integration as IntegrationRef;\n\n                const title = props.isEdit ? `${savedIntegration.name} saved successfully` : `${savedIntegration.name} added successfully`;\n\n                addSuccessNotification(\n                    title,\n                    <AddNotificationBodyContainer integration={ savedIntegration } />,\n                    true\n                );\n\n                return true;\n            } else {\n                setError(true);\n                return false;\n            }\n        });\n    }, [ saveIntegrationMutation, props.isEdit ]);\n\n    const error = React.useMemo<ActionModalError | undefined>(() => {\n        if (hasError) {\n            if (props.isEdit) {\n                return {\n                    title: 'Integration failed to update',\n                    description: <p>There was an error trying to update the Integration. Please try again.</p>\n                };\n            } else {\n                return {\n                    title: 'Failed to create Integration',\n                    description: <p>There was an error trying to create the Integration. Please try again.</p>\n                };\n            }\n        }\n\n        return undefined;\n    }, [ hasError, props.isEdit ]);\n\n    return (\n        <IntegrationSaveModal\n            initialIntegration={ props.initialIntegration }\n            onSave={ onSaveIntegration }\n            isEdit={ props.isEdit }\n            isSaving={ saveIntegrationMutation.loading }\n            onClose={ props.onClose }\n            error={ error }\n        />\n    );\n};\n","import { ExpandableSection, List, ListItem, Skeleton } from '@patternfly/react-core';\nimport { DeleteModal, DeleteModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { UserIntegration } from '../../types/Integration';\nimport { Notification } from '../../types/Notification';\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onDelete';\n\ninterface IntegrationDeleteModalProps extends Omit<DeleteModalProps, UsedProps> {\n    integration?: UserIntegration;\n    onDelete: (integration: UserIntegration) => boolean | Promise<boolean>;\n    notifications?: Array<Notification>;\n}\n\nexport const IntegrationDeleteModal: React.FunctionComponent<IntegrationDeleteModalProps> = (props) => {\n\n    const onDeleteInternal = React.useCallback(() => {\n        const integration = props.integration;\n        const onDelete = props.onDelete;\n        if (integration) {\n            return onDelete(integration);\n        }\n\n        return false;\n    }, [ props.onDelete, props.integration ]);\n\n    const content = React.useMemo(() => {\n        if (props.notifications === undefined) {\n            return (\n                <span data-testid=\"loading\">\n                    <Skeleton />\n                </span>\n            );\n        } else if (props.notifications.length === 0) {\n            return <span\n                data-testid=\"removing-integration-without-notifications\"\n            >\n                Removing integration <strong>{ props.integration?.name }</strong> does not affect any notification events.\n            </span>;\n        } else {\n            const eventText = props.notifications.length !== 1 ? 'events' : 'event';\n            return (\n                <span data-testid={ `removing-integration-with-notifications-${props.notifications.length}` }>\n                    Removing integration <strong>{ props.integration?.name }</strong> affects {props.notifications.length} notification {eventText}.\n                    { props.notifications.length > 0 && <ExpandableSection toggleText={ `View ${props.notifications.length} ${eventText}.` }>\n                        <List>\n                            { props.notifications.map(notification => (\n                                <ListItem\n                                    key={ notification.id }\n                                >\n                                    { notification.applicationDisplayName }: { notification.eventTypeDisplayName }\n                                </ListItem>\n                            )) }\n                        </List>\n                    </ExpandableSection> }\n                </span>\n            );\n        }\n    }, [ props.notifications, props.integration ]);\n\n    if (!props.integration) {\n        return null;\n    }\n\n    return (\n        <DeleteModal\n            isOpen={ true }\n            isDeleting={ props.isDeleting }\n            title={ 'Remove integration' }\n            content={ content }\n            onClose={ props.onClose }\n            onDelete={ onDeleteInternal }\n            error={ props.error }\n            titleIconVariant=\"warning\"\n        />\n    );\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const EmailSubscriptionProperties = zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = unknown;\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType = 'webhook' | 'email_subscription' | 'default';\n\n  export const EntityTag = zodSchemaEntityTag();\n  export type EntityTag = {\n    value?: string | undefined | null;\n    weak?: boolean | undefined | null;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const Family = zodSchemaFamily();\n  export type Family =\n    | 'CLIENT_ERROR'\n    | 'INFORMATIONAL'\n    | 'OTHER'\n    | 'REDIRECTION'\n    | 'SERVER_ERROR'\n    | 'SUCCESSFUL';\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Link = zodSchemaLink();\n  export type Link = {\n    params?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    rel?: string | undefined | null;\n    rels?: Array<string> | undefined | null;\n    title?: string | undefined | null;\n    type?: string | undefined | null;\n    uri?: string | undefined | null;\n    uriBuilder?: UriBuilder | undefined | null;\n  };\n\n  export const Locale = zodSchemaLocale();\n  export type Locale = {\n    country?: string | undefined | null;\n    displayCountry?: string | undefined | null;\n    displayLanguage?: string | undefined | null;\n    displayName?: string | undefined | null;\n    displayScript?: string | undefined | null;\n    displayVariant?: string | undefined | null;\n    extensionKeys?: Array<string> | undefined | null;\n    iSO3Country?: string | undefined | null;\n    iSO3Language?: string | undefined | null;\n    language?: string | undefined | null;\n    script?: string | undefined | null;\n    unicodeLocaleAttributes?: Array<string> | undefined | null;\n    unicodeLocaleKeys?: Array<string> | undefined | null;\n    variant?: string | undefined | null;\n  };\n\n  export const MediaType = zodSchemaMediaType();\n  export type MediaType = {\n    parameters?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    subtype?: string | undefined | null;\n    type?: string | undefined | null;\n    wildcardSubtype?: boolean | undefined | null;\n    wildcardType?: boolean | undefined | null;\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();\n  export type MultivaluedMapStringObject = {\n    [x: string]: Array<unknown>;\n  };\n\n  export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();\n  export type MultivaluedMapStringString = {\n    [x: string]: Array<string>;\n  };\n\n  export const NewCookie = zodSchemaNewCookie();\n  export type NewCookie = {\n    comment?: string | undefined | null;\n    domain?: string | undefined | null;\n    expiry?: string | undefined | null;\n    httpOnly?: boolean | undefined | null;\n    maxAge?: number | undefined | null;\n    name?: string | undefined | null;\n    path?: string | undefined | null;\n    secure?: boolean | undefined | null;\n    value?: string | undefined | null;\n    version?: number | undefined | null;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    eventId?: string | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const RbacRaw = zodSchemaRbacRaw();\n  export type RbacRaw = {\n    data?:\n      | Array<{\n          [x: string]: unknown;\n        }>\n      | undefined\n      | null;\n    links?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    meta?:\n      | {\n          [x: string]: number;\n        }\n      | undefined\n      | null;\n  };\n\n  export const Response = zodSchemaResponse();\n  export type Response = {\n    allowedMethods?: Array<string> | undefined | null;\n    cookies?:\n      | {\n          [x: string]: NewCookie;\n        }\n      | undefined\n      | null;\n    date?: string | undefined | null;\n    entity?: unknown | undefined | null;\n    entityTag?: EntityTag | undefined | null;\n    headers?: MultivaluedMapStringObject | undefined | null;\n    language?: Locale | undefined | null;\n    lastModified?: string | undefined | null;\n    length?: number | undefined | null;\n    links?: Array<Link> | undefined | null;\n    location?: string | undefined | null;\n    mediaType?: MediaType | undefined | null;\n    metadata?: MultivaluedMapStringObject | undefined | null;\n    status?: number | undefined | null;\n    statusInfo?: StatusType | undefined | null;\n    stringHeaders?: MultivaluedMapStringString | undefined | null;\n  };\n\n  export const StatusType = zodSchemaStatusType();\n  export type StatusType = {\n    family?: Family | undefined | null;\n    reasonPhrase?: string | undefined | null;\n    statusCode?: number | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UriBuilder = zodSchemaUriBuilder();\n  export type UriBuilder = unknown;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default' ]);\n  }\n\n  function zodSchemaEntityTag() {\n      return z\n      .object({\n          value: z.string().optional().nullable(),\n          weak: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFamily() {\n      return z.enum([\n          'CLIENT_ERROR',\n          'INFORMATIONAL',\n          'OTHER',\n          'REDIRECTION',\n          'SERVER_ERROR',\n          'SUCCESSFUL'\n      ]);\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaLink() {\n      return z\n      .object({\n          params: z.record(z.string()).optional().nullable(),\n          rel: z.string().optional().nullable(),\n          rels: z.array(z.string()).optional().nullable(),\n          title: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          uri: z.string().optional().nullable(),\n          uriBuilder: zodSchemaUriBuilder().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLocale() {\n      return z\n      .object({\n          country: z.string().optional().nullable(),\n          displayCountry: z.string().optional().nullable(),\n          displayLanguage: z.string().optional().nullable(),\n          displayName: z.string().optional().nullable(),\n          displayScript: z.string().optional().nullable(),\n          displayVariant: z.string().optional().nullable(),\n          extensionKeys: z.array(z.string()).optional().nullable(),\n          iSO3Country: z.string().optional().nullable(),\n          iSO3Language: z.string().optional().nullable(),\n          language: z.string().optional().nullable(),\n          script: z.string().optional().nullable(),\n          unicodeLocaleAttributes: z.array(z.string()).optional().nullable(),\n          unicodeLocaleKeys: z.array(z.string()).optional().nullable(),\n          variant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMediaType() {\n      return z\n      .object({\n          parameters: z.record(z.string()).optional().nullable(),\n          subtype: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          wildcardSubtype: z.boolean().optional().nullable(),\n          wildcardType: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMultivaluedMapStringObject() {\n      return z.record(z.array(z.unknown()));\n  }\n\n  function zodSchemaMultivaluedMapStringString() {\n      return z.record(z.array(z.string()));\n  }\n\n  function zodSchemaNewCookie() {\n      return z\n      .object({\n          comment: z.string().optional().nullable(),\n          domain: z.string().optional().nullable(),\n          expiry: z.string().optional().nullable(),\n          httpOnly: z.boolean().optional().nullable(),\n          maxAge: z.number().int().optional().nullable(),\n          name: z.string().optional().nullable(),\n          path: z.string().optional().nullable(),\n          secure: z.boolean().optional().nullable(),\n          value: z.string().optional().nullable(),\n          version: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          eventId: z.string().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRbacRaw() {\n      return z\n      .object({\n          data: z.array(z.record(z.unknown())).optional().nullable(),\n          links: z.record(z.string()).optional().nullable(),\n          meta: z.record(z.number().int()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaResponse() {\n      return z\n      .object({\n          allowedMethods: z.array(z.string()).optional().nullable(),\n          cookies: z.record(zodSchemaNewCookie()).optional().nullable(),\n          date: z.string().optional().nullable(),\n          entity: z.unknown().optional().nullable(),\n          entityTag: zodSchemaEntityTag().optional().nullable(),\n          headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          language: zodSchemaLocale().optional().nullable(),\n          lastModified: z.string().optional().nullable(),\n          length: z.number().int().optional().nullable(),\n          links: z.array(zodSchemaLink()).optional().nullable(),\n          location: z.string().optional().nullable(),\n          mediaType: zodSchemaMediaType().optional().nullable(),\n          metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          status: z.number().int().optional().nullable(),\n          statusInfo: zodSchemaStatusType().optional().nullable(),\n          stringHeaders: zodSchemaMultivaluedMapStringString()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatusType() {\n      return z\n      .object({\n          family: zodSchemaFamily().optional().nullable(),\n          reasonPhrase: z.string().optional().nullable(),\n          statusCode: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUriBuilder() {\n      return z.unknown();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /notifications/defaults\n  // Retrieve all integrations of the configured default actions.\n  export namespace NotificationServiceGetEndpointsForDefaults {\n    const Response200 = z.array(Schemas.Endpoint);\n    type Response200 = Array<Schemas.Endpoint>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/defaults/{endpointId}\n  // Add an integration to the list of configured default actions.\n  export namespace NotificationServiceAddEndpointToDefaults {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/defaults/{endpointId}\n  // Remove an integration from the list of configured default actions.\n  export namespace NotificationServiceDeleteEndpointFromDefaults {\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes\n  // Retrieve all event types. The returned list can be filtered by bundle or application.\n  export namespace NotificationServiceGetEventTypes {\n    const ApplicationIds = z.array(z.string());\n    type ApplicationIds = Array<string>;\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      applicationIds?: ApplicationIds;\n      bundleId?: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes';\n        const query = {} as Record<string, any>;\n        if (params.applicationIds !== undefined) {\n            query.applicationIds = params.applicationIds;\n        }\n\n        if (params.bundleId !== undefined) {\n            query.bundleId = params.bundleId;\n        }\n\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/affectedByRemovalOfEndpoint/{endpointId}\n  export namespace NotificationServiceGetEventTypesAffectedByEndpointId {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/affectedByRemovalOfEndpoint/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/eventTypes/{eventTypeId}\n  export namespace NotificationServiceGetLinkedEndpoints {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.Endpoint);\n    type Response200 = Array<Schemas.Endpoint>;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /notifications/eventTypes/{eventTypeId}/{endpointId}\n  export namespace NotificationServiceLinkEndpointToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      endpointId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'\n        .replace('{endpointId}', params.endpointId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/eventTypes/{eventTypeId}/{endpointId}\n  export namespace NotificationServiceUnlinkEndpointFromEventType {\n    export interface Params {\n      endpointId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'\n        .replace('{endpointId}', params.endpointId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/applications\n  // Return a thin list of configured applications. This can be used to configure a filter in the UI\n  export namespace NotificationServiceGetApplicationsFacets {\n    const BundleName = z.string();\n    type BundleName = string;\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export interface Params {\n      bundleName?: BundleName;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/applications';\n        const query = {} as Record<string, any>;\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /notifications/facets/bundles\n  // Return a thin list of configured bundles. This can be used to configure a filter in the UI\n  export namespace NotificationServiceGetBundleFacets {\n    const Response200 = z.array(Schemas.Facet);\n    type Response200 = Array<Schemas.Facet>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/facets/bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /notifications/{id}\n  export namespace NotificationServiceMarkRead {\n    const Id = z.number().int();\n    type Id = number;\n    const Response204 = z.string();\n    type Response204 = string;\n    export interface Params {\n      id: Id;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 204, Response204>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response204, 'unknown', 204) ]\n        })\n        .build();\n    };\n  }\n}\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\n\nexport type UUID = Schemas.UUID;\n\nexport interface NotificationBase {\n    id: UUID;\n    applicationDisplayName: string;\n    eventTypeDisplayName: string;\n}\n\nexport interface Notification extends NotificationBase {\n    actions?: Array<Action>;\n    useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends NotificationBase {\n    readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<UserIntegration, 'id' | 'name' | 'type' | 'isEnabled'>\n\nexport interface DefaultNotificationBehavior {\n    actions: Array<Action>;\n}\n\nexport interface ActionBase {\n    type: NotificationType;\n    integrationId: UUID;\n}\n\nexport interface ActionIntegration extends ActionBase {\n    type: NotificationType.INTEGRATION;\n    integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n    type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n    recipient: Array<string>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport enum NotificationType {\n    EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n    DRAWER = 'DRAWER',\n    INTEGRATION = 'INTEGRATION'\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n    readonly id: UUID;\n    readonly actions: ReadonlyArray<Action>;\n    readonly bundleId: UUID,\n    readonly displayName: string;\n}\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> & Omit<BehaviorGroup, 'id'>;\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiNotifications';\nimport { ServerIntegrationResponse } from '../Integration';\nimport { Action, NotificationBase, NotificationType, ServerNotificationResponse } from '../Notification';\nimport { filterOutDefaultAction, toIntegration, toUserIntegration } from './IntegrationAdapter';\n\nconst _toAction = (type: NotificationType, serverAction: ServerIntegrationResponse): Action => {\n    if (type === NotificationType.INTEGRATION) {\n        const userIntegration = toUserIntegration(serverAction);\n        return {\n            type,\n            integrationId: userIntegration.id,\n            integration: userIntegration\n        };\n    }\n\n    const integration = toIntegration(serverAction);\n\n    return {\n        type,\n        integrationId: integration.id,\n        recipient: []\n    };\n};\n\nexport const usesDefault = (endpoints: Array<Schemas.Endpoint>): boolean =>\n    endpoints.findIndex(e => e.type === Schemas.EndpointType.enum.default) !== -1;\n\nexport const toNotification = (serverNotification: ServerNotificationResponse): NotificationBase => {\n    if (!serverNotification.id || !serverNotification.application) {\n        throw new Error(`Unexpected notification from server ${JSON.stringify(serverNotification)}`);\n    }\n\n    return {\n        id: serverNotification.id,\n        applicationDisplayName: serverNotification.application.display_name,\n        eventTypeDisplayName: serverNotification.display_name\n    };\n};\n\nexport const toAction = (serverAction: ServerIntegrationResponse): Action => {\n    switch (serverAction.type) {\n        case Schemas.EndpointType.enum.webhook:\n            return _toAction(NotificationType.INTEGRATION, serverAction);\n        case Schemas.EndpointType.enum.email_subscription:\n            return _toAction(NotificationType.EMAIL_SUBSCRIPTION, serverAction);\n        case Schemas.EndpointType.enum.default:\n            throw new Error('EndpointType.default should not reach this point');\n        default:\n            assertNever(serverAction.type);\n    }\n};\n\nexport const toNotifications = (serverNotifications: Array<ServerNotificationResponse>) => serverNotifications.map(toNotification);\nexport const toActions = (serverActions: Array<ServerIntegrationResponse>): Array<Action> => filterOutDefaultAction(serverActions).map(toAction);\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\nimport { toNotifications } from '../../types/adapters/NotificationAdapter';\n\nconst notificationsForEndpointActionCreator = (integrationId: string) => {\n    return Operations.NotificationServiceGetEventTypesAffectedByEndpointId.actionCreator({\n        endpointId: integrationId\n    });\n};\n\nconst defaultNotificationsDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceGetEventTypesAffectedByEndpointId.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'Notifications',\n                200,\n                toNotifications(payload.value),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetAffectedNotificationsByEndpoint = () =>\n    useTransformQueryResponse(useParameterizedQuery(notificationsForEndpointActionCreator), defaultNotificationsDecoder);\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiIntegrations';\n\nexport const deleteIntegrationActionCreator = (integrationId: string) => {\n    return Operations.EndpointServiceDeleteEndpoint.actionCreator({\n        id: integrationId\n    });\n};\n\nexport const useDeleteIntegration = () => useMutation<boolean>(deleteIntegrationActionCreator);\n","import {\n    ActionModalError,\n    addSuccessNotification,\n    OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { IntegrationDeleteModal } from '../../../components/Integrations/DeleteModal';\nimport { useGetAffectedNotificationsByEndpoint } from '../../../services/Notifications/GetAffectedNotificationsByEndpoint';\nimport { useDeleteIntegration } from '../../../services/useDeleteIntegration';\nimport { UserIntegration } from '../../../types/Integration';\n\ninterface IntegrationDeleteModalPageProps extends OuiaComponentProps {\n    onClose: (deleted: boolean) => void;\n    integration: UserIntegration;\n}\n\nexport const IntegrationDeleteModalPage: React.FunctionComponent<IntegrationDeleteModalPageProps> = (props) => {\n\n    const deleteIntegrationMutation = useDeleteIntegration();\n    const getNotificationsQuery = useGetAffectedNotificationsByEndpoint();\n    const [ hasError, setError ] = React.useState(false);\n\n    const onDelete = React.useCallback((integration: UserIntegration) => {\n        const deleteIntegration = deleteIntegrationMutation.mutate;\n        setError(false);\n        return deleteIntegration(integration.id).then((response) => {\n            if (!response.error) {\n                addSuccessNotification('Integration removed', 'The integration was removed.');\n                return true;\n            } else {\n                setError(true);\n                return false;\n            }\n        });\n    }, [ deleteIntegrationMutation.mutate, setError ]);\n\n    const error = React.useMemo<ActionModalError | undefined>(() => {\n        if (hasError) {\n            return {\n                title: 'Failed to remove Integration',\n                description: <p>There was an error trying to remove the Integration. Please try again.</p>\n            };\n        }\n\n        return undefined;\n    }, [ hasError ]);\n\n    React.useEffect(() => {\n        const query = getNotificationsQuery.query;\n        query(props.integration.id);\n    }, [ props.integration, getNotificationsQuery.query ]);\n\n    const notifications = React.useMemo(() => {\n        const payload = getNotificationsQuery.payload;\n        if (payload && payload.type === 'Notifications') {\n            return payload.value;\n        }\n\n        return undefined;\n    }, [ getNotificationsQuery.payload ]);\n\n    return (\n        <IntegrationDeleteModal\n            integration={ props.integration }\n            notifications={ notifications }\n            isDeleting={ deleteIntegrationMutation.loading }\n            onClose={ props.onClose }\n            onDelete={ onDelete }\n            error={ error }\n        />\n    );\n};\n","import { assertNever } from 'assert-never';\nimport { useReducer } from 'react';\n\nimport { UserIntegration } from '../../../types/Integration';\n\nenum UseDeleteModalReducerActionType {\n    DELETE = 'delete',\n    NONE = 'none'\n}\n\ninterface UseDeleteModalActionDelete {\n    type: UseDeleteModalReducerActionType.DELETE;\n    integration: UserIntegration;\n}\n\ninterface UseDeleteModalActionNone {\n    type: UseDeleteModalReducerActionType.NONE;\n}\n\ntype UseDeleteModalReducerAction = UseDeleteModalActionDelete | UseDeleteModalActionNone;\n\ninterface UseDeleteModalReducerState {\n    integration: UserIntegration | undefined;\n}\n\nconst noneState: UseDeleteModalReducerState = {\n    integration: undefined\n};\n\nconst reducer = (state: UseDeleteModalReducerState, action: UseDeleteModalReducerAction): UseDeleteModalReducerState => {\n    switch (action.type) {\n        case UseDeleteModalReducerActionType.DELETE:\n            return {\n                integration: action.integration\n            };\n        case UseDeleteModalReducerActionType.NONE:\n            return noneState;\n        default:\n            assertNever(action);\n\n    }\n};\n\nexport const useDeleteModalReducer = () => {\n    return useReducer(reducer, noneState);\n};\n\nuseDeleteModalReducer.makeNoneAction = (): UseDeleteModalActionNone => ({\n    type: UseDeleteModalReducerActionType.NONE\n});\n\nuseDeleteModalReducer.makeDeleteAction = (integration: UserIntegration): UseDeleteModalActionDelete => ({\n    type: UseDeleteModalReducerActionType.DELETE,\n    integration\n});\n","import {\n    useFilters,\n    useUrlStateMultipleOptions,\n    useUrlStateString\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\n\nimport { IntegrationFilterColumn } from '../../../components/Integrations/Filters';\n\nconst DEBOUNCE_MS = 250;\n\nconst useUrlStateName = (defaultValue?: string) => useUrlStateString('name', defaultValue);\nconst useUrlStateEnabled = (_defaultValue?: string) => useUrlStateMultipleOptions('enabled', [ 'Enabled', 'Disabled' ]);\n\nconst useStateFactory = (column: IntegrationFilterColumn) => {\n    switch (column) {\n        case IntegrationFilterColumn.NAME:\n            return useUrlStateName;\n        case IntegrationFilterColumn.ENABLED:\n            return useUrlStateEnabled;\n        default:\n            assertNever(column);\n    }\n};\n\nexport const useIntegrationFilter = (debounce = DEBOUNCE_MS) => {\n    return useFilters(IntegrationFilterColumn, debounce, useStateFactory);\n};\n","import { Operations } from '../generated/OpenapiIntegrations';\n\nexport const listIntegrationHistoryActionCreator = (integrationId: string) => {\n    return Operations.EndpointServiceGetEndpointHistory.actionCreator({\n        id: integrationId\n    });\n};\n","import { addDangerNotification } from '@redhat-cloud-services/insights-common-typescript';\nimport pLimit from 'p-limit';\nimport { useCallback, useContext, useEffect, useState } from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { format } from 'react-string-format';\nimport { usePrevious } from 'react-use';\n\nimport { IntegrationRow } from '../../../components/Integrations/Table';\nimport { Messages } from '../../../properties/Messages';\nimport { listIntegrationHistoryActionCreator } from '../../../services/useListIntegrationHistory';\nimport { useSwitchIntegrationEnabledStatus } from '../../../services/useSwitchIntegrationEnabledStatus';\nimport { SavedNotificationScopeActions } from '../../../store/actions/SavedNotificationScopeAction';\nimport { NotificationAppState } from '../../../store/types/NotificationAppState';\nimport { SavedNotificationScopeState, Status } from '../../../store/types/SavedNotificationScopeTypes';\nimport { UserIntegration } from '../../../types/Integration';\n\nconst notificationAppStateSelector = (state: NotificationAppState): SavedNotificationScopeState => state.savedNotificationScope;\n\nconst notificationAppStateEqualFn = (left: SavedNotificationScopeState, right: SavedNotificationScopeState): boolean => {\n    return left?.integration === right?.integration && left?.status === right?.status;\n};\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport const useIntegrationRows = (integrations: Array<UserIntegration>) => {\n    const [ integrationRows, setIntegrationRows ] = useState<Array<IntegrationRow>>([]);\n    const prevIntegrationsInput = usePrevious(integrations);\n\n    const reduxDispatch = useDispatch();\n    const savedNotificationScope = useSelector<NotificationAppState, SavedNotificationScopeState>(\n        notificationAppStateSelector, notificationAppStateEqualFn\n    );\n\n    const switchStatus = useSwitchIntegrationEnabledStatus();\n    const { query } = useContext(ClientContext);\n    const [ limit ] = useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const setIntegrationRowByIndex = useCallback((index: number, partialIntegration: Partial<IntegrationRow>) => {\n        setIntegrationRows(prevIntegrations => {\n            const newIntegrations = [ ...prevIntegrations ];\n            newIntegrations[index] = { ...newIntegrations[index], ...partialIntegration };\n            return newIntegrations;\n        });\n    }, [ setIntegrationRows ]);\n\n    const setIntegrationRowById = useCallback((id: string, partialIntegration: Partial<IntegrationRow>) => {\n        setIntegrationRows(prevIntegrations => {\n            const index = prevIntegrations.findIndex(integration => integration.id === id);\n            if (index === -1) {\n                return prevIntegrations;\n            }\n\n            const newIntegrations = [ ...prevIntegrations ];\n            newIntegrations[index] = { ...newIntegrations[index], ...partialIntegration };\n            return newIntegrations;\n        });\n    }, [ setIntegrationRows ]);\n\n    useEffect(() => {\n        if (integrations !== prevIntegrationsInput) {\n            setIntegrationRows(prev => {\n                return integrations.map(integration => ({\n                    isOpen: false,\n                    isSelected: false,\n                    isEnabledLoading: false,\n                    lastConnectionAttempts: [],\n                    isConnectionAttemptLoading: true,\n                    ...prev.find(i => i.id === integration.id),\n                    ...integration\n                }));\n            });\n\n            if (integrations) {\n                limit.clearQueue();\n\n                integrations.map(integration => integration.id).forEach(integrationId => {\n                    limit(() => query(listIntegrationHistoryActionCreator(integrationId))).then(response => {\n\n                        if (response.payload && response.payload.status === 200) {\n                            const last5 = (response.payload.value.reverse().slice(0, 5)).map(p => ({\n                                isSuccess: !!p.invocationResult,\n                                date: new Date(p.created as string)\n                            }));\n                            setIntegrationRowById(integrationId, {\n                                isConnectionAttemptLoading: false,\n                                lastConnectionAttempts: last5\n                            });\n                        } else {\n                            setIntegrationRowById(integrationId, {\n                                isConnectionAttemptLoading: false,\n                                lastConnectionAttempts: undefined\n                            });\n                        }\n                    });\n                });\n            }\n        }\n    }, [ prevIntegrationsInput, integrations, setIntegrationRowById, limit, query ]);\n\n    const onCollapse = useCallback((_integration: IntegrationRow, index: number, isOpen: boolean) => {\n        setIntegrationRowByIndex(index, {\n            isOpen\n        });\n    }, [ setIntegrationRowByIndex ]);\n\n    const onEnable = useCallback((_integration: UserIntegration, index: number, isEnabled: boolean) => {\n        setIntegrationRowByIndex(index, {\n            isEnabledLoading: true\n        });\n\n        if (savedNotificationScope) {\n            if (_integration.id === savedNotificationScope.integration.id) {\n                reduxDispatch(SavedNotificationScopeActions.start());\n            }\n        }\n\n        switchStatus.mutate(_integration).then((response) => {\n            if (!response.error) {\n                setIntegrationRowByIndex(index, {\n                    isEnabled,\n                    isEnabledLoading: false\n                });\n                if (savedNotificationScope) {\n                    if (_integration.id === savedNotificationScope.integration.id) {\n                        reduxDispatch(SavedNotificationScopeActions.finish(isEnabled));\n                    }\n                }\n            } else {\n                const message = isEnabled ? Messages.components.integrations.enableError : Messages.components.integrations.disableError;\n\n                if (savedNotificationScope) {\n                    if (_integration.id === savedNotificationScope.integration.id) {\n                        reduxDispatch(SavedNotificationScopeActions.finish(_integration.isEnabled));\n                    }\n                }\n\n                addDangerNotification(\n                    message.title,\n                    format(message.description, _integration.name),\n                    true);\n                setIntegrationRowByIndex(index, {\n                    isEnabled: _integration.isEnabled,\n                    isEnabledLoading: false\n                });\n            }\n        });\n\n    }, [ setIntegrationRowByIndex, switchStatus, reduxDispatch, savedNotificationScope ]);\n\n    useEffect(() => {\n        if (savedNotificationScope) {\n            if (savedNotificationScope.status === Status.LOADING) {\n                setIntegrationRowById(\n                    savedNotificationScope.integration.id,\n                    { isEnabledLoading: true }\n                );\n            } else {\n                setIntegrationRowById(\n                    savedNotificationScope.integration.id,\n                    { isEnabledLoading: false, isEnabled: savedNotificationScope.integration.isEnabled }\n                );\n            }\n        }\n    }, [ savedNotificationScope, setIntegrationRowById ]);\n\n    return {\n        rows: integrationRows,\n        onCollapse,\n        onEnable\n    };\n};\n","import { Main, PageHeader, PageHeaderTitle, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    addDangerNotification,\n    ExporterType,\n    Filter,\n    Operator,\n    Page\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { format } from 'date-fns';\nimport inBrowserDownload from 'in-browser-download';\nimport * as React from 'react';\nimport { useContext } from 'react';\n\nimport { AppContext } from '../../../app/AppContext';\nimport { IntegrationFilters } from '../../../components/Integrations/Filters';\nimport { IntegrationsTable } from '../../../components/Integrations/Table';\nimport { IntegrationsToolbar } from '../../../components/Integrations/Toolbar';\nimport { makeCreateAction, makeEditAction, makeNoneAction, useFormModalReducer } from '../../../hooks/useFormModalReducer';\nimport { usePage } from '../../../hooks/usePage';\nimport { Messages } from '../../../properties/Messages';\nimport { useListIntegrationPQuery, useListIntegrationsQuery } from '../../../services/useListIntegrations';\nimport { IntegrationType, UserIntegration } from '../../../types/Integration';\nimport { integrationExporterFactory } from '../../../utils/exporters/Integration/Factory';\nimport { CreatePage } from '../Create/CreatePage';\nimport { IntegrationDeleteModalPage } from '../Delete/DeleteModal';\nimport { useActionResolver } from './useActionResolver';\nimport { useDeleteModalReducer } from './useDeleteModalReducer';\nimport { useIntegrationFilter } from './useIntegrationFilter';\nimport { useIntegrationRows } from './useIntegrationRows';\n\nconst integrationFilterBuilder = (filters?: IntegrationFilters) => {\n    const filter = new Filter();\n    if (filters?.enabled?.length === 1) {\n        const isEnabled = filters.enabled[0].toLocaleLowerCase() === 'enabled';\n        filter.and('active', Operator.EQUAL, isEnabled.toString());\n    }\n\n    return filter.and('type', Operator.EQUAL, IntegrationType.WEBHOOK);\n};\n\nconst userIntegrationCopier = (userIntegration: Partial<UserIntegration>) => ({\n    ...userIntegration,\n    name: `Copy of ${userIntegration.name}`\n});\n\nexport const IntegrationsListPage: React.FunctionComponent = () => {\n\n    const { rbac: { canWriteIntegrationsEndpoints }} = useContext(AppContext);\n    const integrationFilter = useIntegrationFilter();\n    const pageData = usePage<IntegrationFilters>(10, integrationFilterBuilder, integrationFilter.filters);\n    const integrationsQuery = useListIntegrationsQuery(pageData.page);\n    const exportIntegrationsQuery = useListIntegrationPQuery();\n\n    const integrations = React.useMemo(() => {\n        const payload = integrationsQuery.payload;\n        if (payload?.type === 'IntegrationPage') {\n            return payload.value;\n        }\n\n        return {\n            data: [],\n            count: 0\n        };\n    }, [ integrationsQuery.payload ]);\n\n    const integrationRows = useIntegrationRows(integrations.data);\n    const [ modalIsOpenState, dispatchModalIsOpen ] = useFormModalReducer<UserIntegration>(userIntegrationCopier);\n    const [ deleteModalState, dispatchDeleteModal ] = useDeleteModalReducer();\n\n    const onAddIntegrationClicked = React.useCallback(() => {\n        dispatchModalIsOpen(makeCreateAction());\n    }, [ dispatchModalIsOpen ]);\n\n    const onEdit = React.useCallback((integration: UserIntegration) => {\n        dispatchModalIsOpen(makeEditAction(integration));\n    }, [ dispatchModalIsOpen ]);\n\n    const onDelete = React.useCallback((integration: UserIntegration) => {\n        dispatchDeleteModal(useDeleteModalReducer.makeDeleteAction(integration));\n    }, [ dispatchDeleteModal ]);\n\n    const onExport = React.useCallback(async (type: ExporterType) => {\n        const query = exportIntegrationsQuery.query;\n        const exporter = integrationExporterFactory(type);\n        const exportedIntegrations: Array<UserIntegration> = [];\n        let page = Page.of(1, 100, new Filter().and('type', Operator.EQUAL, 'webhook'));\n        while (true) {\n            const data = await query(page);\n            if (data?.payload?.status !== 200) {\n                if (exportedIntegrations.length === 0) {\n                    addDangerNotification(\n                        'Unable to download integrations',\n                        'We were unable to download the integrations for exporting. Please try again.'\n                    );\n                    return;\n                } else {\n                    addDangerNotification(\n                        'Unable to download all integrations',\n                        `We were unable to download all the integrations for exporting. Downloading: ${exportedIntegrations.length}.`\n                    );\n                    break;\n                }\n            }\n\n            if (data.payload.value.data.length === 0) {\n                break;\n            }\n\n            page = page.nextPage();\n            exportedIntegrations.push(...data.payload.value.data);\n        }\n\n        if (exportedIntegrations) {\n            inBrowserDownload(\n                exporter.export(exportedIntegrations),\n                `integrations-${format(new Date(Date.now()), 'y-dd-MM')}.${exporter.type}`\n            );\n        }\n    }, [ exportIntegrationsQuery ]);\n\n    const actionResolver = useActionResolver({\n        canWrite: canWriteIntegrationsEndpoints,\n        onEdit,\n        onDelete,\n        onEnable: integrationRows.onEnable\n    });\n\n    const closeFormModal = React.useCallback((saved: boolean) => {\n        const query = integrationsQuery.query;\n        dispatchModalIsOpen(makeNoneAction());\n        if (saved) {\n            query();\n        }\n    }, [ dispatchModalIsOpen, integrationsQuery.query ]);\n\n    const closeDeleteModal = React.useCallback((deleted: boolean) => {\n        const query = integrationsQuery.query;\n        if (deleted) {\n            query();\n        }\n\n        dispatchDeleteModal(useDeleteModalReducer.makeNoneAction());\n    }, [ dispatchDeleteModal, integrationsQuery.query ]);\n\n    // This is an estimate of how many rows are in the next page (Won't be always correct because a new row could be added while we are browsing)\n    // Is used for the skeleton loading\n    const loadingCount = Math.min(pageData.page.size, integrations.count - (pageData.page.index - 1) * pageData.page.size)  || 10;\n\n    return (\n        <>\n            <PageHeader>\n                <PageHeaderTitle title={ Messages.pages.integrations.list.title } />\n            </PageHeader>\n            <Main>\n                <Section className='pf-c-page__main-section pf-m-light'>\n                    <IntegrationsToolbar\n                        onAddIntegration={ canWriteIntegrationsEndpoints ? onAddIntegrationClicked : undefined }\n                        onExport={ onExport }\n                        filters={ integrationFilter.filters }\n                        setFilters={ integrationFilter.setFilters }\n                        clearFilters={ integrationFilter.clearFilter }\n                        count={ integrations.count || 0 }\n                        pageCount={ integrations.data.length }\n                        page={ pageData.page.index }\n                        perPage={ pageData.page.size }\n                        pageChanged={ pageData.changePage }\n                        perPageChanged={ pageData.changeItemsPerPage }\n                    >\n                        <IntegrationsTable\n                            isLoading={ integrationsQuery.loading }\n                            loadingCount={ loadingCount }\n                            integrations={ integrationRows.rows }\n                            onCollapse={ integrationRows.onCollapse }\n                            onEnable={ canWriteIntegrationsEndpoints ? integrationRows.onEnable : undefined }\n                            actionResolver={ actionResolver }\n                        />\n                    </IntegrationsToolbar>\n                    { modalIsOpenState.isOpen && (\n                        <CreatePage\n                            isEdit={ modalIsOpenState.isEdit }\n                            initialIntegration={ modalIsOpenState.template || {} }\n                            onClose={ closeFormModal }\n                        />\n                    ) }\n                    { deleteModalState.integration && (\n                        <IntegrationDeleteModalPage\n                            onClose={ closeDeleteModal }\n                            integration={ deleteModalState.integration }\n                        />\n                    )}\n                </Section>\n            </Main>\n        </>\n    );\n};\n","import { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const getApplicationsAction = (bundleName: string) => Operations.NotificationServiceGetApplicationsFacets.actionCreator({\n    bundleName\n});\n\nexport const useGetApplications = () => useParameterizedQuery(getApplicationsAction);\n","export const emptyImmutableArray = Object.freeze([]);\nexport const emptyImmutableObject = Object.freeze({});\n","interface HasId<ID> {\n    id: ID\n}\n\nexport const findByKey = <T, KEY extends keyof T>(val: T[KEY], key: KEY) => (value: T) => value[key] === val;\nexport const findById = <T extends HasId<T['id']>>(id: T['id']) => findByKey<T, 'id'>(id, 'id');\n","import {\n    Chip, ChipGroup,\n    fillTemplate,\n    OptionsMenu,\n    OptionsMenuItem,\n    OptionsMenuToggle,\n    Split,\n    SplitItem\n} from '@patternfly/react-core';\nimport { BellSlashIcon } from '@patternfly/react-icons';\nimport { global_palette_black_400 } from '@patternfly/react-tokens';\nimport * as React from 'react';\n\nimport { BehaviorGroupContent } from '../../../pages/Notifications/List/useBehaviorGroupContent';\nimport { BehaviorGroup, NotificationBehaviorGroup } from '../../../types/Notification';\nimport { findById } from '../../../utils/Find';\nimport { emptyImmutableObject } from '../../../utils/Immutable';\n\ninterface BehaviorGroupCellProps {\n    id: string;\n    notification: NotificationBehaviorGroup;\n    behaviorGroupContent: BehaviorGroupContent;\n    selected: ReadonlyArray<BehaviorGroup>;\n    onSelect?: (notification: NotificationBehaviorGroup, behaviorGroup: BehaviorGroup, linkBehavior: boolean) => void;\n    isEditMode: boolean;\n}\n\ninterface BehaviorGroupChip {\n    behaviorGroup: BehaviorGroup;\n    notification: BehaviorGroupCellProps['notification'];\n    onSelect?: BehaviorGroupCellProps['onSelect'];\n}\n\nconst BehaviorGroupChip: React.FunctionComponent<BehaviorGroupChip> = props => {\n    const unlink = React.useCallback(() => {\n        const onSelect = props.onSelect;\n        if (onSelect) {\n            onSelect(props.notification, props.behaviorGroup, false);\n        }\n    }, [ props.onSelect, props.behaviorGroup, props.notification ]);\n\n    return <Chip onClick={ unlink }>\n        { props.behaviorGroup.displayName }\n    </Chip>;\n};\n\nconst numChips = 3;\nconst remainingTemplate  = '${remaining} more';\n\nexport const BehaviorGroupCell: React.FunctionComponent<BehaviorGroupCellProps> = props => {\n\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const onSelected = React.useCallback((event?: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent) => {\n        const dataset = (event?.currentTarget?.firstChild as HTMLElement)?.dataset ?? emptyImmutableObject;\n        const onSelect = props.onSelect;\n        if (!props.behaviorGroupContent.isLoading && !props.behaviorGroupContent.hasError && onSelect) {\n            if (dataset.behaviorGroupId) {\n                const found = props.behaviorGroupContent.content.find(findById(dataset.behaviorGroupId));\n                if (found) {\n                    const isSelected = !!props.selected.find(findById(found.id));\n                    onSelect(props.notification, found, !isSelected);\n                }\n            }\n        }\n    }, [ props.onSelect, props.behaviorGroupContent, props.notification, props.selected ]);\n\n    const items = React.useMemo(() => {\n        if (props.behaviorGroupContent.isLoading || props.behaviorGroupContent.hasError) {\n            return [\n                <OptionsMenuItem key=\"is-loading\" isDisabled>Loading</OptionsMenuItem>\n            ];\n        }\n\n        return props.behaviorGroupContent.content.map(bg => {\n            const selected = !!props.selected.find(findById(bg.id));\n\n            return (\n                <OptionsMenuItem\n                    key={ bg.id }\n                    onSelect={ onSelected }\n                    data-behavior-group-id={ bg.id }\n                    isSelected={ selected }\n                >\n                    { bg.displayName }\n                </OptionsMenuItem>\n            );\n        });\n    }, [ props.behaviorGroupContent, props.selected, onSelected ]);\n\n    const toggle = React.useMemo(() => {\n        return (\n            <OptionsMenuToggle onToggle={ setOpen } toggleTemplate={ (\n                <ChipGroup numChips={ numChips } collapsedText={ remainingTemplate }>\n                    { props.selected.map(value => (\n                        <BehaviorGroupChip key={ value.id } behaviorGroup={ value } notification={ props.notification } onSelect={ props.onSelect } />\n                    )) }\n                </ChipGroup>\n            ) } />\n        );\n    }, [ props.selected, props.notification, props.onSelect ]);\n\n    const readonlyText = React.useMemo(() => {\n        if (props.selected.length === 0) {\n            return <Split hasGutter>\n                <SplitItem><BellSlashIcon color={ global_palette_black_400.value } /></SplitItem>\n                <SplitItem>Mute</SplitItem>\n            </Split>;\n        }\n\n        const first = props.selected.slice(0, numChips).map(v => v.displayName).join(', ');\n        const remaining = props.selected.length > numChips ? fillTemplate(remainingTemplate, {\n            remaining: props.selected.length - numChips\n        }) : undefined;\n\n        return first + (remaining ? ` and ${remaining}` : '');\n    }, [ props.selected ]);\n\n    if (!props.isEditMode) {\n        return <span> { readonlyText } </span>;\n    }\n\n    return <OptionsMenu id={ props.id } direction=\"up\" menuItems={ items } toggle={ toggle } isOpen={ isOpen } menuAppendTo={ document.body } />;\n};\n","import { Button, ButtonProps, ButtonVariant, Split, SplitItem } from '@patternfly/react-core';\nimport { CheckIcon, CloseIcon, PencilAltIcon } from '@patternfly/react-icons';\nimport { global_active_color_100, global_palette_black_600 } from '@patternfly/react-tokens';\nimport * as React from 'react';\n\nimport { UUID } from '../../../types/Notification';\nimport { emptyImmutableObject } from '../../../utils/Immutable';\n\nexport type OnNotificationIdHandler = (notificationId: UUID) => void;\n\nexport interface BehaviorGroupCellControlProps {\n    notificationId: UUID;\n    isEditMode: boolean;\n    onStartEditing: OnNotificationIdHandler;\n    onFinishEditing: OnNotificationIdHandler;\n    onCancelEditMode: OnNotificationIdHandler;\n}\n\ninterface ButtonWithNotificationIdProps extends Omit<ButtonProps, 'onClick'> {\n    onClick: OnNotificationIdHandler;\n    notificationId: UUID;\n}\n\nconst toOnNotificationSetAdapter = (event: any, onClick: OnNotificationIdHandler) => {\n    const dataset = (event.currentTarget as HTMLElement)?.dataset ?? emptyImmutableObject;\n    if (dataset.notificationId) {\n        onClick(dataset.notificationId);\n    }\n};\n\nconst ButtonWithNotificationId: React.FunctionComponent<ButtonWithNotificationIdProps> = props => {\n    const onClick = React.useCallback((event: any) => {\n        toOnNotificationSetAdapter(event, props.onClick);\n    }, [ props.onClick ]);\n\n    return <Button { ...props } onClick={ onClick } data-notification-id={ props.notificationId }>\n        { props.children }\n    </Button>;\n};\n\nexport const BehaviorGroupCellControl: React.FunctionComponent<BehaviorGroupCellControlProps> = props => {\n\n    const commonButtonProps = {\n        variant: ButtonVariant.plain,\n        notificationId: props.notificationId\n    };\n\n    if (!props.isEditMode) {\n        return <ButtonWithNotificationId { ...commonButtonProps } onClick={ props.onStartEditing }>\n            <PencilAltIcon />\n        </ButtonWithNotificationId>;\n    } else {\n        return (\n            <Split>\n                <SplitItem>\n                    <ButtonWithNotificationId { ...commonButtonProps } onClick={ props.onFinishEditing }>\n                        <CheckIcon color={ global_active_color_100.value } />\n                    </ButtonWithNotificationId>\n                </SplitItem>\n                <SplitItem>\n                    <ButtonWithNotificationId { ...commonButtonProps } onClick={ props.onCancelEditMode }>\n                        <CloseIcon color={ global_palette_black_600.value } />\n                    </ButtonWithNotificationId>\n                </SplitItem>\n            </Split>\n        );\n    }\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { ICell, Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroupContent } from '../../pages/Notifications/List/useBehaviorGroupContent';\nimport { BehaviorGroupNotificationRow } from '../../pages/Notifications/List/useBehaviorGroupNotificationRows';\nimport { BehaviorGroup, NotificationBehaviorGroup } from '../../types/Notification';\nimport { emptyImmutableArray } from '../../utils/Immutable';\nimport { ouia } from '../Ouia';\nimport { BehaviorGroupCell } from './Table/BehaviorGroupCell';\nimport { BehaviorGroupCellControl, OnNotificationIdHandler } from './Table/BehaviorGroupCellControl';\n\nexport type OnBehaviorGroupLinkUpdated = (notification: NotificationBehaviorGroup, behaviorGroup: BehaviorGroup, isLinked: boolean) => void;\n\nexport interface NotificationsBehaviorGroupTableProps {\n    behaviorGroupContent: BehaviorGroupContent;\n    notifications: Array<BehaviorGroupNotificationRow>;\n    onBehaviorGroupLinkUpdated: OnBehaviorGroupLinkUpdated;\n    onStartEditing: OnNotificationIdHandler;\n    onFinishEditing: OnNotificationIdHandler;\n    onCancelEditing: OnNotificationIdHandler;\n}\n\nconst buttonCellClassName = style({\n    width: '10px !important'\n});\n\ntype Callbacks = {\n    onStartEditing: OnNotificationIdHandler;\n    onFinishEditing:  OnNotificationIdHandler;\n    onCancelEditing: OnNotificationIdHandler;\n    onBehaviorGroupLinkUpdated: OnBehaviorGroupLinkUpdated;\n};\n\nconst toTableRows = (\n    notifications: Array<BehaviorGroupNotificationRow>,\n    behaviorGroupContent: BehaviorGroupContent,\n    callback: Callbacks) => {\n    return notifications.map((notification => ({\n        id: notification.id,\n        key: notification.id,\n        cells: [\n            {\n                title: <span>{ notification.eventTypeDisplayName }</span>\n            },\n            {\n                title: <span>{ notification.applicationDisplayName }</span>\n            },\n            {\n                title: notification.loadingActionStatus === 'loading' ?\n                    <Skeleton width=\"180px\" /> :\n                    <span>\n                        <BehaviorGroupCell\n                            id={ `behavior-group-cell-${notification.id}` }\n                            notification={ notification }\n                            behaviorGroupContent={ behaviorGroupContent }\n                            selected={ notification.behaviors ?? emptyImmutableArray }\n                            onSelect={ callback.onBehaviorGroupLinkUpdated }\n                            isEditMode={ notification.isEditMode }\n                        />\n                    </span>\n            },\n            {\n                title: <BehaviorGroupCellControl\n                    notificationId={ notification.id }\n                    isEditMode={ notification.isEditMode }\n                    onStartEditing={ callback.onStartEditing }\n                    onCancelEditMode={ callback.onCancelEditing }\n                    onFinishEditing={ callback.onFinishEditing }\n                />,\n                props: {\n                    className: buttonCellClassName\n                }\n            }\n        ]\n    })));\n};\n\nconst cells: Array<ICell> = [\n    {\n        title: 'Event',\n        transforms: [],\n        cellFormatters: []\n    },\n    {\n        title: 'Application',\n        transforms: []\n    },\n    {\n        title: 'Behavior',\n        transforms: []\n    },\n    {\n        title: ''\n    }\n];\n\nexport const NotificationsBehaviorGroupTable = ouia<NotificationsBehaviorGroupTableProps>(props => {\n\n    const callbacks: Callbacks = React.useMemo(() => ({\n        onStartEditing: props.onStartEditing,\n        onFinishEditing: props.onFinishEditing,\n        onCancelEditing: props.onCancelEditing,\n        onBehaviorGroupLinkUpdated: props.onBehaviorGroupLinkUpdated\n    }), [ props.onStartEditing, props.onFinishEditing, props.onCancelEditing, props.onBehaviorGroupLinkUpdated ]);\n\n    const rows = React.useMemo(() => {\n        return toTableRows(props.notifications, props.behaviorGroupContent, callbacks);\n    }, [ props.notifications, props.behaviorGroupContent, callbacks ]);\n\n    return (\n        <Table\n            aria-label=\"Notifications\"\n            rows={ rows }\n            cells={ cells }\n            variant={ TableVariant.compact }\n        >\n            <TableHeader />\n            <TableBody />\n        </Table>\n    );\n}, 'Notifications/BehaviorGroupTable');\n","import { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../utils/getOuiaProps';\n\nexport const ouia = <P extends any>(Component: React.FunctionComponent<P>, type: string): React.FunctionComponent<OuiaComponentProps & P> => {\n\n    const Wrapped: React.FunctionComponent<OuiaComponentProps & P> = props => {\n        return (\n            <div { ...getOuiaProps(type, props) }>\n                <Component { ...props } />\n            </div>\n        );\n    };\n\n    Wrapped.displayName = `Ouia(${Component.displayName ?? Component.name})`;\n\n    return Wrapped;\n};\n","import { ClearFilters, Filters, SetFilters } from '@redhat-cloud-services/insights-common-typescript';\n\nexport enum NotificationFilterColumn {\n    NAME = 'name',\n    APPLICATION = 'application',\n    ACTION = 'action'\n}\n\nexport type NotificationFilters = Filters<typeof NotificationFilterColumn>;\nexport type SetNotificationFilters = SetFilters<typeof NotificationFilterColumn>;\nexport type ClearNotificationFilters = ClearFilters<typeof NotificationFilterColumn>;\n","export enum GroupByEnum {\n    Application = 'application',\n    None = 'none'\n}\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport camelcase from 'camelcase';\nimport * as React from 'react';\n\nimport { GroupByEnum } from '../Types';\n\nexport interface GroupByProps {\n    groupBy: (selected: GroupByEnum) => void;\n    selected: GroupByEnum;\n}\n\nexport const GroupBy: React.FunctionComponent<GroupByProps> = (props) => {\n    const items = [\n        <DropdownItem data-group-by={ GroupByEnum.Application } key=\"application\">Application</DropdownItem>,\n        <DropdownItem data-group-by={ GroupByEnum.None } key=\"none\">None</DropdownItem>\n    ];\n\n    const [ isOpen, setOpen ] = React.useState<boolean>(false);\n\n    const onSelect = React.useCallback((event) => {\n        const groupBy = props.groupBy;\n        const selected = props.selected;\n\n        if (event.target.dataset.groupBy !== selected) {\n            switch (event.target.dataset.groupBy) {\n                case GroupByEnum.Application:\n                    groupBy(GroupByEnum.Application);\n                    break;\n                case GroupByEnum.None:\n                    groupBy(GroupByEnum.None);\n                    break;\n            }\n        }\n\n        setOpen(false);\n    }, [ props.groupBy, props.selected ]);\n\n    const onToggle = React.useCallback((shouldBeOpen) => {\n        setOpen(shouldBeOpen);\n    }, [ setOpen ]);\n\n    const content = React.useMemo(() => {\n        return `Group by: ${camelcase(props.selected, {\n            pascalCase: true\n        })}`;\n    }, [ props.selected ]);\n\n    return (\n        <Dropdown\n            onSelect={ onSelect }\n            isOpen={ isOpen }\n            toggle={ <DropdownToggle\n                id=\"group-by-dropdown-toggle\"\n                toggleIndicator={ CaretDownIcon }\n                onToggle={ onToggle }\n            >\n                { content }\n            </DropdownToggle> }\n            dropdownItems={ items }\n        />\n    );\n};\n","import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport {\n    ColumnsMetada,\n    ExporterType,\n    getInsights,\n    OuiaComponentProps,\n    useInsightsEnvironmentFlag,\n    usePrimaryToolbarFilterConfig\n} from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\n\nimport { useTableExportConfig } from '../../hooks/useTableExportConfig';\nimport { stagingAndProd } from '../../types/Environments';\nimport { Facet } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport {\n    ClearNotificationFilters,\n    NotificationFilterColumn,\n    NotificationFilters,\n    SetNotificationFilters\n} from './Filter';\nimport { GroupBy } from './Table/GroupBy';\nimport { GroupByEnum } from './Types';\n\ninterface NotificationsToolbarProps extends OuiaComponentProps {\n    filters: NotificationFilters;\n    setFilters: SetNotificationFilters;\n    clearFilter: ClearNotificationFilters;\n\n    appFilterOptions: Array<Facet>;\n\n    groupBy?: GroupByEnum;\n    onGroupBySelected?: (selected: GroupByEnum) => void;\n\n    onExport: (type: ExporterType) => void;\n}\n\nexport const NotificationsToolbar: React.FunctionComponent<NotificationsToolbarProps> = (props) => {\n\n    const filterMetadata = useMemo<ColumnsMetada<typeof NotificationFilterColumn>>(() => {\n\n        const appFilterItems = props.appFilterOptions.map(a => ({\n            value: a.displayName,\n            label: <> {a.displayName}</>\n        }));\n\n        return {\n            [NotificationFilterColumn.NAME]: {\n                label: 'Event type',\n                placeholder: 'Filter by event type'\n            },\n            [NotificationFilterColumn.APPLICATION]: {\n                label: 'Application',\n                placeholder: 'Filter by application',\n                options: {\n                    exclusive: false,\n                    default: [] as any,\n                    items: appFilterItems\n                }\n            },\n            [NotificationFilterColumn.ACTION]: {\n                label: 'Action',\n                placeholder: 'Filter by action'\n            }\n        };\n    }, [ props.appFilterOptions ]);\n\n    const primaryToolbarFilterConfig = usePrimaryToolbarFilterConfig(\n        NotificationFilterColumn,\n        props.filters,\n        props.setFilters,\n        props.clearFilter,\n        filterMetadata\n    );\n\n    const exportConfigInternal = useTableExportConfig(props.onExport);\n\n    const filterConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingAndProd,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.filterConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const activeFiltersConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingAndProd,\n        undefined,\n        useCallback(() => primaryToolbarFilterConfig.activeFiltersConfig, [ primaryToolbarFilterConfig ])\n    );\n\n    const exportConfig = useInsightsEnvironmentFlag(\n        getInsights(),\n        stagingAndProd,\n        undefined,\n        useCallback(() => exportConfigInternal, [ exportConfigInternal ])\n    );\n\n    return (\n        <div { ...getOuiaProps('Notifications/DualToolbar', props) }>\n            <PrimaryToolbar\n                filterConfig={ filterConfig }\n                activeFiltersConfig={ activeFiltersConfig }\n                dedicatedAction={ (props.groupBy && props.onGroupBySelected) ?\n                    <GroupBy selected={ props.groupBy } groupBy={ props.onGroupBySelected } /> :\n                    undefined }\n                exportConfig={ exportConfig }\n            />\n            { props.children }\n            <PrimaryToolbar />\n        </div>\n    );\n};\n","import { Page, useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Schemas } from '../generated/OpenapiIntegrations';\nimport { Operations } from '../generated/OpenapiNotifications';\nimport { toNotifications } from '../types/adapters/NotificationAdapter';\n\nexport const listNotificationsActionCreator = (pager?: Page) => {\n    const query = (pager ?? Page.defaultPage()).toQuery();\n    return Operations.NotificationServiceGetEventTypes.actionCreator({\n        limit: +query.limit,\n        offset: +query.offset,\n        applicationIds: query.filterApplicationId as unknown as Array<Schemas.UUID>,\n        bundleId: query.filterBundleId as unknown as string\n    });\n};\n\nconst decoder = validationResponseTransformer((payload: Operations.NotificationServiceGetEventTypes.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'eventTypesArray',\n            200,\n            toNotifications(payload.value),\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useListNotifications = (pager?: Page) => useTransformQueryResponse(\n    useQuery(listNotificationsActionCreator(pager)),\n    decoder\n);\n","export default __webpack_public_path__ + \"fonts/WebhookIcon.svg\";","import { SVGIconProps } from '@patternfly/react-icons/dist/js/createIcon';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport icon from './WebhookIcon.svg';\nconst className = style({\n    verticalAlign: '-0.125em',\n    width: '1em',\n    height: '1em'\n});\n\nexport const WebhookIcon: React.FunctionComponent<SVGIconProps> = () => {\n    return (\n        <img alt=\"Webhook\" className={ className } src={ icon } />\n    );\n};\n","import { Spinner } from '@patternfly/react-core';\nimport { EnvelopeIcon } from '@patternfly/react-icons';\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { Messages } from '../../properties/Messages';\nimport { Action, NotificationType } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { WebhookIcon } from '../Icons/WebhookIcon';\n\nexport interface ActionComponentText extends OuiaComponentProps{\n    isDefault: boolean;\n    action: Action | undefined;\n    loading?: boolean;\n    hasError?: boolean;\n}\n\ninterface ActionTypeToIconProps {\n    actionType: NotificationType;\n}\n\nconst marginLeftClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nconst grayFontClassName = style({\n    color: '#888'\n});\n\nconst ActionTypeToIcon: React.FunctionComponent<ActionTypeToIconProps> = (props) => {\n    switch (props.actionType) {\n        case NotificationType.DRAWER:\n            return <BellIcon />;\n        case NotificationType.EMAIL_SUBSCRIPTION:\n            return <EnvelopeIcon />;\n        case NotificationType.INTEGRATION:\n            return <WebhookIcon />;\n        default:\n            assertNever(props.actionType);\n    }\n};\n\nconst ActionComponentWrapper: React.FunctionComponent<ActionComponentText> = (props) => (\n    <div { ...getOuiaProps('Notifications/ActionComponent', props) }>\n        { props.children }\n    </div>\n);\n\nexport const ActionComponent: React.FunctionComponent<ActionComponentText> = (props) => {\n\n    if (props.loading) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <Spinner size=\"md\" />\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (props.hasError) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span>Error loading actions</span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (props.isDefault) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span>Default behavior</span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    if (!props.action) {\n        return (\n            <ActionComponentWrapper { ...props }>\n                <span className={ grayFontClassName }>\n                    <div>No actions.</div>\n                    <div>Users will not be notified.</div>\n                </span>\n            </ActionComponentWrapper>\n        );\n    }\n\n    return (\n        <ActionComponentWrapper { ...props }>\n            <ActionTypeToIcon actionType={ props.action.type } />\n            <span className={ marginLeftClassName }>{ Messages.components.notifications.types[props.action.type] }</span>\n            { props.action.type === NotificationType.INTEGRATION && (\n                <span>: { Messages.components.integrations.integrationType[props.action.integration.type] }</span>\n            ) }\n        </ActionComponentWrapper>\n    );\n};\n","import { Label, Tooltip } from '@patternfly/react-core';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { Action, NotificationType } from '../../types/Notification';\n\ninterface RecipientProps {\n    action: Action;\n    hasOutline?: boolean;\n}\n\nconst disabledLabelClassName = style({\n    marginLeft: global_spacer_sm.var\n});\n\nexport const Recipient: React.FunctionComponent<RecipientProps> = (props) => {\n    if (props.action.type === NotificationType.INTEGRATION) {\n        return (\n            <>\n                <span>{ props.action.integration.name }</span>\n                { !props.action.integration.isEnabled && (\n                    <>\n                        <Tooltip content=\"This integration has been disabled. This action wil not fire until it is enabled.\" position=\"bottom\">\n                            <Label variant={ props.hasOutline ? 'outline' : 'filled' } className={ disabledLabelClassName }>Disabled</Label>\n                        </Tooltip>\n                    </>\n                )}\n            </>\n        );\n    }\n\n    return <span>All registered users</span>;\n};\n","import {\n    Card,\n    CardActions,\n    CardBody,\n    CardHeader,\n    CardHeaderMain,\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    Grid,\n    GridItem,\n    KebabToggle,\n    Skeleton,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { c_form__label_FontSize } from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { ActionComponent } from '../ActionComponent';\nimport { Recipient } from '../Recipient';\n\nconst cardClassName = style({\n    width: 450,\n    height: '100%'\n});\n\nconst contentTitleStyle = {\n    fontSize: c_form__label_FontSize.value\n};\n\nexport interface BehaviorGroupProps extends OuiaComponentProps {\n    behaviorGroup: BehaviorGroup;\n    onEdit: (behaviorGroup: BehaviorGroup) => void;\n}\n\nexport interface BehaviorGroupCardLayout {\n    title: React.ReactNode;\n    dropdownItems?: Array<React.ReactNode>;\n    contents: Array<{\n        key: string;\n        action: React.ReactNode;\n        recipient: React.ReactNode;\n    }>;\n}\n\nconst BehaviorGroupCardLayout: React.FunctionComponent<BehaviorGroupCardLayout> = props => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const switchOpen = React.useCallback(() => setOpen(prev => !prev), [ setOpen ]);\n\n    return (\n        <Card isFlat className={ cardClassName }>\n            <CardHeader>\n                <CardHeaderMain><TextContent><Text component={ TextVariants.h4 }> { props.title } </Text></TextContent></CardHeaderMain>\n                <CardActions>\n                    <Dropdown\n                        onSelect={ switchOpen }\n                        toggle={ <KebabToggle onToggle={ setOpen } isDisabled={ !props.dropdownItems } /> }\n                        isOpen={ isOpen }\n                        isPlain\n                        dropdownItems={ props.dropdownItems }\n                        position={ DropdownPosition.right }\n                    />\n                </CardActions>\n            </CardHeader>\n            <CardBody>\n                <Grid hasGutter>\n                    <GridItem span={ 6 }>\n                        <TextContent>\n                            <Text component={ TextVariants.h5 } style={ contentTitleStyle }>Action</Text>\n                        </TextContent>\n                    </GridItem>\n                    <GridItem span={ 6 }>\n                        <TextContent>\n                            <Text component={ TextVariants.h5 } style={ contentTitleStyle }>Recipient</Text>\n                        </TextContent>\n                    </GridItem>\n                    { props.contents.map(content => (\n                        <React.Fragment key={ content.key }>\n                            <GridItem span={ 6 }>\n                                { content.action }\n                            </GridItem>\n                            <GridItem span={ 6 }>\n                                { content.recipient }\n                            </GridItem>\n                        </React.Fragment>\n                    )) }\n                </Grid>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport const BehaviorGroupCard: React.FunctionComponent<BehaviorGroupProps> = props => {\n    const onClickEdit = React.useCallback(() => {\n        const onEdit = props.onEdit;\n        onEdit(props.behaviorGroup);\n    }, [ props.behaviorGroup, props.onEdit ]);\n\n    const dropdownItems = React.useMemo(() => [\n        <DropdownItem key=\"on-edit\" onClick={ onClickEdit }> Edit </DropdownItem>\n    ], [ onClickEdit ]);\n\n    return (\n        <BehaviorGroupCardLayout\n            title={ props.behaviorGroup.displayName }\n            dropdownItems={ dropdownItems }\n            contents={ props.behaviorGroup.actions.map((action, index) => ({\n                key: `${index}-${action.integrationId}`,\n                recipient: <Recipient action={ action } />,\n                action: <ActionComponent isDefault={ false } action={ action } />\n            })) }\n        />\n    );\n};\n\nexport const BehaviorGroupCardSkeleton: React.FunctionComponent = () => {\n    const contentWidth = '150px';\n\n    return (\n        <BehaviorGroupCardLayout\n            title={ <Skeleton width=\"300px\" /> }\n            contents={ [\n                {\n                    key: 'skeleton-1',\n                    action: <Skeleton width={ contentWidth } />,\n                    recipient: <Skeleton width={ contentWidth } />\n                },\n                {\n                    key: 'skeleton-2',\n                    action: <Skeleton width={ contentWidth } />,\n                    recipient: <Skeleton width={ contentWidth } />\n                },\n                {\n                    key: 'skeleton-3',\n                    action: <Skeleton width={ contentWidth } />,\n                    recipient: <Skeleton width={ contentWidth } />\n                }\n            ] }\n        />\n    );\n};\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { BehaviorGroup } from '../../../types/Notification';\nimport { BehaviorGroupCard, BehaviorGroupCardSkeleton } from './BehaviorGroupCard';\n\nconst cardsWrapperClassName = style({\n    overflow: 'auto'\n});\n\nconst cardWrapperClassName = style({\n    paddingBottom: global_spacer_md.var\n});\n\ninterface BehaviorGroupCardListProps {\n    onEdit: (behaviorGroup: BehaviorGroup) => void;\n    behaviorGroups: ReadonlyArray<BehaviorGroup>;\n}\n\ninterface BehaviorGroupCardListLayoutProps {\n    contents: Array<{\n        key: string;\n        element: React.ReactNode;\n    }>;\n}\n\nconst BehaviorGroupCardListLayout: React.FunctionComponent<BehaviorGroupCardListLayoutProps> = props => {\n    const ref = React.useCallback(container => {\n        if (container?.firstChild?.firstChild) {\n            const height = container.firstChild.firstChild.getBoundingClientRect().height;\n            container.firstChild.style['max-height'] = `${height}px`;\n        }\n    }, []);\n\n    return (\n        <div ref={ ref }>\n            <Flex\n                alignItems={ { default: 'alignItemsStretch' } }\n                alignContent={ { default: 'alignContentSpaceBetween' } }\n                className={ cardsWrapperClassName }\n            >\n                { props.contents.map(content => (\n                    <FlexItem key={ content.key } className={ cardWrapperClassName }>\n                        { content.element }\n                    </FlexItem>\n                ))}\n            </Flex>\n        </div>\n    );\n};\n\nexport const BehaviorGroupCardList: React.FunctionComponent<BehaviorGroupCardListProps> = props => {\n\n    return (\n        <BehaviorGroupCardListLayout\n            contents={ props.behaviorGroups.map(behaviorGroup => ({\n                key: behaviorGroup.id,\n                element: <BehaviorGroupCard\n                    behaviorGroup={ behaviorGroup }\n                    onEdit={ props.onEdit }\n                />\n            })) }\n        />\n    );\n};\n\nexport const BehaviorGroupCardListSkeleton: React.FunctionComponent = () => {\n    return (\n        <BehaviorGroupCardListLayout\n            contents={ [\n                {\n                    key: 'skeleton-1',\n                    element: <BehaviorGroupCardSkeleton />\n                },\n                {\n                    key: 'skeleton-2',\n                    element: <BehaviorGroupCardSkeleton />\n                },\n                {\n                    key: 'skeleton-3',\n                    element: <BehaviorGroupCardSkeleton />\n                }\n            ] }\n        />\n    );\n};\n","import * as Yup from 'yup';\n\nimport { NotificationType } from '../../types/Notification';\n\nconst ActionIntegration = Yup.object({\n    type: Yup.mixed().oneOf([ NotificationType.INTEGRATION ]).required(),\n    integration: Yup.object({\n        id: Yup.string().required()\n    }).required(),\n    integrationId: Yup.string().min(1)\n});\n\nconst ActionNotify = Yup.object({\n    type: Yup.mixed().oneOf([ NotificationType.EMAIL_SUBSCRIPTION /*, NotificationType.DRAWER */ ]).required(),\n    recipient: Yup.array(Yup.string()).min(0),\n    integrationId: Yup.string().min(0)\n});\n\nexport const ActionsArray = Yup.array(Yup.lazy(obj => {\n    if ((obj as any).hasOwnProperty('type')) {\n        if ((obj as any).type === NotificationType.INTEGRATION) {\n            return ActionIntegration;\n        }\n    }\n\n    return ActionNotify;\n}));\n\nexport const WithActions = Yup.object({\n    actions: ActionsArray\n});\n\nexport const BehaviorGroupSchema = Yup.object({\n    displayName: Yup.string().min(1),\n    actions: ActionsArray\n});\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { IntegrationRef } from '../../../types/Notification';\n\nexport class RecipientOption implements SelectOptionObject {\n    readonly recipientOrIntegration: string | IntegrationRef;\n\n    constructor(recipientOrIntegration: string | IntegrationRef) {\n        this.recipientOrIntegration = recipientOrIntegration;\n    }\n\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof RecipientOption && typeof selectOption.recipientOrIntegration === typeof this.recipientOrIntegration) {\n            if (typeof selectOption.recipientOrIntegration === 'string') {\n                return selectOption.recipientOrIntegration === this.recipientOrIntegration;\n            } else {\n                return selectOption.recipientOrIntegration.id === (this.recipientOrIntegration as IntegrationRef).id;\n            }\n        }\n\n        return false;\n    }\n\n    toString(): string {\n        if (typeof this.recipientOrIntegration === 'string') {\n            return this.recipientOrIntegration;\n        } else {\n            const postfix = this.recipientOrIntegration.isEnabled ? '' : ' - Disabled';\n            return `${this.recipientOrIntegration.name}${postfix}`;\n        }\n    }\n}\n","import { SelectOption } from '@patternfly/react-core';\nimport assertNever from 'assert-never';\nimport * as React from 'react';\n\nimport { IntegrationRef } from '../../../types/Notification';\nimport { RecipientOption } from './RecipientOption';\nimport { ReducerState } from './useTypeaheadReducer';\n\nconst mapper = <T extends IntegrationRef>(r: T | string) =>\n    <SelectOption key={ typeof r === 'string' ? r : r.id } value={ new RecipientOption(r) } />;\n\nexport const useRecipientOptionMemo = <T extends IntegrationRef>(state: ReducerState<T | string>) => {\n    return React.useMemo(() => {\n        if (state.show === 'default') {\n            if (state.loadingDefault) {\n                return [ <SelectOption\n                    key=\"loading-option\"\n                    isNoResultsOption={ true }\n                    value=\"Loading...\"\n                /> ];\n            } else {\n                return state.defaultValues.map(mapper);\n            }\n        } else if (state.show === 'filter') {\n            if (state.loadingFilter) {\n                return [ <SelectOption\n                    key=\"loading-option\"\n                    isNoResultsOption={ true }\n                    value=\"Loading...\"\n                /> ];\n            } else {\n                return state.filterValues.map(mapper);\n            }\n        }\n\n        assertNever(state.show);\n    }, [ state ]);\n};\n","import assertNever from 'assert-never';\nimport { Reducer, useCallback, useMemo, useReducer } from 'react';\n\nexport interface ReducerState<T> {\n    filterValues: Array<T>;\n    defaultValues: Array<T>;\n    show: 'default' | 'filter';\n    loadingFilter: boolean;\n    loadingDefault: boolean;\n    lastSearch: string;\n}\n\nenum ReducerActionType {\n    LOAD_FILTER_VALUE,\n    SET_FILTER_VALUE,\n    USE_DEFAULTS,\n    SET_DEFAULTS\n}\n\ntype ReducerAction<T> = {\n    type: ReducerActionType.USE_DEFAULTS;\n} | {\n    type: ReducerActionType.LOAD_FILTER_VALUE;\n    search: string;\n} | {\n    type: ReducerActionType.SET_FILTER_VALUE;\n    search: string;\n    values: Array<T>;\n} | {\n    type: ReducerActionType.SET_DEFAULTS;\n    values: Array<T>;\n}\n\nconst reducerFunction = <T>(state: ReducerState<T>, action: ReducerAction<T>): ReducerState<T> => {\n    switch (action.type) {\n        case ReducerActionType.SET_FILTER_VALUE:\n            if (action.search === state.lastSearch) {\n                if (action.values === state.filterValues) {\n                    return state;\n                }\n\n                return {\n                    ...state,\n                    loadingFilter: false,\n                    filterValues: action.values\n                };\n            }\n\n            return state;\n        case ReducerActionType.LOAD_FILTER_VALUE:\n            if (action.search !== state.lastSearch || state.show !== 'filter') {\n                return {\n                    ...state,\n                    loadingFilter: true,\n                    filterValues: [],\n                    lastSearch: action.search,\n                    show: 'filter'\n                };\n            }\n\n            return state;\n        case ReducerActionType.USE_DEFAULTS:\n            if (state.show !== 'default') {\n                return {\n                    ...state,\n                    show: 'default'\n                };\n            }\n\n            return state;\n        case ReducerActionType.SET_DEFAULTS:\n            return {\n                ...state,\n                defaultValues: action.values,\n                loadingDefault: false\n            };\n        default:\n            assertNever(action);\n    }\n};\n\nexport const useTypeaheadReducer = <T>() => {\n    const [ state, dispatch ] = useReducer<Reducer<ReducerState<T>, ReducerAction<T>>>(reducerFunction, {\n        filterValues: [],\n        defaultValues: [],\n        show: 'default',\n        loadingFilter: false,\n        loadingDefault: true,\n        lastSearch: ''\n    } as ReducerState<T>);\n\n    const setFilterValue = useCallback((search: string, values: Array<T>) => dispatch({\n        type: ReducerActionType.SET_FILTER_VALUE,\n        values,\n        search\n    }), [ dispatch ]);\n\n    const loadFilterValue = useCallback((search: string) => dispatch({\n        type: ReducerActionType.LOAD_FILTER_VALUE,\n        search\n    }), [ dispatch ]);\n\n    const setDefaults = useCallback((values: Array<T>) => dispatch({\n        type: ReducerActionType.SET_DEFAULTS,\n        values\n    }), [ dispatch ]);\n\n    const useDefaults = useCallback(() => dispatch({\n        type: ReducerActionType.USE_DEFAULTS\n    }), [ dispatch ]);\n\n    const dispatchers = useMemo(() => ({\n        setFilterValue,\n        loadFilterValue,\n        setDefaults,\n        useDefaults\n    }), [ setFilterValue, loadFilterValue, setDefaults, useDefaults ]);\n\n    return [ state, dispatchers ] as [ typeof state, typeof dispatchers ];\n};\n","import { Select, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { IntegrationRef } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface IntegrationRecipientTypeaheadProps extends OuiaComponentProps {\n    selected: Partial<IntegrationRef> | undefined;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    integrationType: UserIntegrationType;\n    isDisabled?: boolean;\n    onSelected: (recipientOption: RecipientOption) => void;\n}\n\nexport const IntegrationRecipientTypeahead: React.FunctionComponent<IntegrationRecipientTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const [ state, dispatchers ] = useTypeaheadReducer<IntegrationRef>();\n\n    const toggle = React.useCallback((isOpen: boolean) => {\n        setOpen(isOpen);\n    }, [ setOpen ]);\n\n    React.useEffect(() => {\n        const getIntegrations = props.getIntegrations;\n        getIntegrations(props.integrationType, '').then(integrations => dispatchers.setDefaults(integrations));\n    }, [ props.getIntegrations, props.integrationType, dispatchers ]);\n\n    React.useEffect(() => {\n        const getIntegrations = props.getIntegrations;\n        if (state.loadingFilter) {\n            getIntegrations(props.integrationType, state.lastSearch).then(integrations => dispatchers.setFilterValue(\n                state.lastSearch,\n                integrations\n            ));\n        }\n    }, [ props.getIntegrations, props.integrationType, state.loadingFilter, state.lastSearch, dispatchers ]);\n\n    const options = useRecipientOptionMemo(state);\n\n    const onFilter = React.useCallback((e: React.ChangeEvent<HTMLInputElement> | null) => {\n        // Ignore filter calls with null event\n        if (e === null) {\n            return options;\n        }\n\n        const search = e.target.value?.trim();\n        if (search === '') {\n            dispatchers.useDefaults();\n        } else {\n            dispatchers.loadFilterValue(search);\n        }\n\n        return options;\n    }, [ dispatchers, options ]);\n\n    const selection = React.useMemo(() => {\n        const sel = props.selected;\n        if (sel === undefined || sel.name === undefined || sel.id === undefined || sel.type === undefined) {\n            return undefined;\n        }\n\n        return new RecipientOption(sel as IntegrationRef);\n    }, [ props.selected ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const integrationSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n            integrationSelected(value);\n            setOpen(false);\n        }\n    }, [ props.onSelected ]);\n\n    return (\n        <div { ...getOuiaProps('IntegrationRecipientTypeahead', props) }>\n            <Select\n                variant={ SelectVariant.typeahead }\n                typeAheadAriaLabel=\"Choose webhook\"\n                placeholderText=\"Choose webhook\"\n                selections={ selection }\n                onSelect={ onSelect }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onFilter={ onFilter }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n            >\n                { options }\n            </Select>\n        </div>\n    );\n};\n","import { Select, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { RecipientOption } from './RecipientOption';\nimport { useRecipientOptionMemo } from './useRecipientOptionMemo';\nimport { useTypeaheadReducer } from './useTypeaheadReducer';\n\nexport interface RecipientTypeaheadProps extends OuiaComponentProps {\n    selected: Array<string> | undefined;\n    onSelected: (value: RecipientOption) => void;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    isDisabled?: boolean;\n    onClear: () => void;\n}\n\nexport const RecipientTypeahead: React.FunctionComponent<RecipientTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n    const [ state, dispatchers ] = useTypeaheadReducer<string>();\n\n    React.useEffect(() => {\n        const getRecipients = props.getRecipients;\n        getRecipients('').then(recipients => dispatchers.setDefaults(recipients));\n    }, [ props.getRecipients, dispatchers ]);\n\n    React.useEffect(() => {\n        const getRecipients = props.getRecipients;\n        if (state.loadingFilter) {\n            getRecipients(state.lastSearch).then(recipients => dispatchers.setFilterValue(\n                state.lastSearch,\n                recipients\n            ));\n        }\n    }, [ props.getRecipients, state.loadingFilter, state.lastSearch, dispatchers ]);\n\n    const toggle = React.useCallback((isOpen: boolean) => {\n        setOpen(isOpen);\n    }, [ setOpen ]);\n\n    const options = useRecipientOptionMemo(state);\n\n    const onFilter = React.useCallback((e: React.ChangeEvent<HTMLInputElement> | null) => {\n        // Ignore filter calls with null event\n        if (e === null) {\n            return options;\n        }\n\n        const search = e.target.value?.trim();\n        if (search === '') {\n            dispatchers.useDefaults();\n        } else {\n            dispatchers.loadFilterValue(search);\n        }\n\n        return options;\n    }, [ dispatchers, options ]);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const selection = React.useMemo(() => {\n        const sel = props.selected;\n        if (sel === undefined) {\n            return undefined;\n        }\n\n        return (sel as Array<string>).map(s => new RecipientOption(s));\n\n    }, [ props.selected ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const onSelected = props.onSelected;\n        if (value instanceof RecipientOption) {\n            onSelected(value);\n        }\n    }, [ props.onSelected ]);\n\n    return (\n        <div { ...getOuiaProps('RecipientTypeahead', props) }>\n            <Select\n                variant={ SelectVariant.single }\n                typeAheadAriaLabel=\"Select the recipients\"\n                selections={ 'All registered users' }\n                onSelect={ onSelect }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onFilter={ onFilter }\n                menuAppendTo={ document.body }\n                isDisabled={ true }\n            >\n                { options }\n            </Select>\n        </div>\n    );\n};\n","import * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { Action, IntegrationRef, NotificationType } from '../../../types/Notification';\nimport { IntegrationRecipientTypeahead } from '../Form/IntegrationRecipientTypeahead';\nimport { RecipientTypeahead } from '../Form/RecipientTypeahead';\nimport { useEditableActionRow } from './useEditableActionRow';\n\ninterface RecipientFormProps {\n    action: Action;\n    integrationSelected: ReturnType<typeof useEditableActionRow>['integrationSelected'];\n    recipientSelected: ReturnType<typeof useEditableActionRow>['recipientSelected'];\n    recipientOnClear: ReturnType<typeof useEditableActionRow>['recipientOnClear'];\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\nexport const RecipientForm: React.FunctionComponent<RecipientFormProps> = props => {\n    if (props.action.type === NotificationType.INTEGRATION) {\n        return (\n            <IntegrationRecipientTypeahead\n                onSelected={ props.integrationSelected }\n                integrationType={ props.action.integration?.type ?? UserIntegrationType.WEBHOOK }\n                selected={ props.action.integration }\n                getIntegrations={ props.getIntegrations }\n            />\n        );\n    }\n\n    return (\n        <RecipientTypeahead\n            onSelected={ props.recipientSelected }\n            selected={ props.action.recipient }\n            getRecipients={ props.getRecipients }\n            onClear={ props.recipientOnClear }\n        />\n    );\n};\n","import { useField, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { DefaultNotificationBehavior } from '../../../types/Notification';\nimport { ActionOption } from '../Form/ActionOption';\nimport { RecipientOption } from '../Form/RecipientOption';\n\nexport const useEditableActionRow = (path: string) => {\n\n    const { setFieldValue } = useFormikContext<Notification | DefaultNotificationBehavior>();\n    const [\n        recipientFieldProps,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        _,\n        recipientFieldHelpers\n    ] = useField<Array<string> | undefined>(`${path}.recipient`);\n\n    const actionSelected = React.useCallback((value: ActionOption) => {\n        setFieldValue(`${path}.type`, value.notificationType);\n        if (value.integrationType) {\n            setFieldValue(`${path}.integration`, {\n                type: value.integrationType\n            });\n            setFieldValue(`${path}.recipient`, []);\n            setFieldValue(`${path}.integrationId`, '');\n        } else {\n            setFieldValue(`${path}.recipient`, []);\n            setFieldValue(`${path}.integration`, undefined);\n            setFieldValue(`${path}.integrationId`, '');\n        }\n    }, [ setFieldValue, path ]);\n\n    const integrationSelected = React.useCallback((value: RecipientOption) => {\n        if (typeof value.recipientOrIntegration !== 'string') {\n            setFieldValue(`${path}.integration`, value.recipientOrIntegration);\n            setFieldValue(`${path}.integrationId`, value.recipientOrIntegration.id);\n        }\n    }, [ setFieldValue, path ]);\n\n    const recipientSelected = React.useCallback((value: RecipientOption) => {\n        if (recipientFieldProps.value) {\n            const selected = recipientFieldProps.value;\n            const index = selected.indexOf(value.toString());\n            if (index === -1) {\n                recipientFieldHelpers.setValue([ ...selected, value.toString() ]);\n            } else {\n                recipientFieldHelpers.setValue([ ...selected ].filter((_, i) => i !== index));\n            }\n        }\n    }, [ recipientFieldProps, recipientFieldHelpers ]);\n\n    const recipientOnClear = React.useCallback(() => {\n        recipientFieldHelpers.setValue([]);\n    }, [ recipientFieldHelpers ]);\n\n    return {\n        actionSelected,\n        integrationSelected,\n        recipientSelected,\n        recipientOnClear\n    };\n};\n","import { SelectOptionObject } from '@patternfly/react-core';\n\nimport { Messages } from '../../../properties/Messages';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { NotificationType } from '../../../types/Notification';\n\ntype ActionTypeOrIntegration = {\n    kind: 'integration';\n    type: UserIntegrationType;\n} | {\n    kind: 'notification';\n    type: NotificationType;\n}\n\nexport class ActionOption implements SelectOptionObject {\n    readonly integrationType: UserIntegrationType | undefined;\n    readonly notificationType: NotificationType;\n\n    constructor(type: ActionTypeOrIntegration) {\n        if (type.kind === 'integration') {\n            this.notificationType = NotificationType.INTEGRATION;\n            this.integrationType = type.type;\n        } else {\n            this.notificationType = type.type;\n            this.integrationType = undefined;\n        }\n    }\n\n    compareTo(selectOption: any): boolean {\n        if (selectOption instanceof ActionOption) {\n            return selectOption.notificationType === this.notificationType && selectOption.integrationType === this.integrationType;\n        }\n\n        return false;\n    }\n\n    toString(): string {\n        const actionName = Messages.components.notifications.types[this.notificationType];\n        if (this.integrationType) {\n            const integrationName = Messages.components.integrations.integrationType[this.integrationType];\n            return `${actionName}: ${integrationName}`;\n        }\n\n        return actionName;\n    }\n}\n","import { Select, SelectOption, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { getInsights, OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { isStagingOrProd } from '../../../types/Environments';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { Action, ActionNotify, NotificationType } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { ActionOption } from './ActionOption';\n\nconst getSelectOptions = () => [\n    ...([ NotificationType.DRAWER, NotificationType.EMAIL_SUBSCRIPTION ] as Array<ActionNotify['type']>)\n    .map(type => new ActionOption({\n        kind: 'notification',\n        type\n    })),\n    ...[ UserIntegrationType.WEBHOOK ].map(type => new ActionOption({\n        kind: 'integration',\n        type\n    }))\n];\n\nexport interface ActionTypeaheadProps extends OuiaComponentProps {\n    action: Action;\n    isDisabled?: boolean;\n    onSelected: (actionOption: ActionOption) => void;\n}\n\nexport const ActionTypeahead: React.FunctionComponent<ActionTypeaheadProps> = (props) => {\n    const [ isOpen, setOpen ] = React.useState(false);\n\n    const toggle = React.useCallback(() => {\n        setOpen(prev => !prev);\n    }, [ setOpen ]);\n\n    const onSelect = React.useCallback((_event, value: string | SelectOptionObject) => {\n        const actionSelected = props.onSelected;\n        if (value instanceof ActionOption) {\n            actionSelected(value);\n            setOpen(false);\n        }\n\n    }, [ props.onSelected, setOpen ]);\n\n    const selectedOption = React.useMemo(() => {\n        if (props.action.type === NotificationType.INTEGRATION) {\n            return new ActionOption({\n                kind: 'integration',\n                type: props.action.integration.type\n            });\n        }\n\n        return new ActionOption({\n            kind: 'notification',\n            type: props.action.type\n        });\n    }, [ props.action ]);\n\n    const hideNonWebhooks = isStagingOrProd(getInsights());\n\n    return (\n        <div { ...getOuiaProps('ActionTypeahead', props) } >\n            <Select\n                variant={ SelectVariant.typeahead }\n                typeAheadAriaLabel=\"Select an action type\"\n                selections={ selectedOption }\n                onToggle={ toggle }\n                isOpen={ isOpen }\n                onSelect={ onSelect }\n                menuAppendTo={ document.body }\n                isDisabled={ props.isDisabled }\n            >\n                { getSelectOptions()\n                .filter((o) => !hideNonWebhooks\n                    || o.notificationType === NotificationType.INTEGRATION)\n                .map(o => <SelectOption key={ o.toString() } value={ o } />) }\n            </Select>\n        </div>\n    );\n};\n","import { Button, ButtonVariant, Form, Grid, GridItem, Split, SplitItem } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nimport {\n    FormTextInput,\n    OuiaComponentProps,\n    ouiaIdConcat\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { FieldArray, FieldArrayRenderProps, FormikProps } from 'formik';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport {\n    Action,\n    BehaviorGroup,\n    IntegrationRef,\n    NewBehaviorGroup, NotificationType\n} from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { RecipientForm } from '../EditableActionRow/RecipientForm';\nimport { useEditableActionRow } from '../EditableActionRow/useEditableActionRow';\nimport { ActionTypeahead } from '../Form/ActionTypeahead';\n\ninterface EditBehaviorGroupProps extends OuiaComponentProps {\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    behaviorGroup?: Partial<BehaviorGroup>;\n}\n\ntype FormType = BehaviorGroup | NewBehaviorGroup;\n\ntype ActionsArraysProps = FieldArrayRenderProps & Pick<EditBehaviorGroupProps, 'getRecipients' | 'getIntegrations'>  & {\n    form: FormikProps<FormType>;\n}\n\ntype ActionRowProps = {\n    action: Action;\n    path: string;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    onRemove?: () => void;\n};\n\nconst alignLeftClassName = style({\n    textAlign: 'left',\n    paddingLeft: 0\n});\n\nconst subtitleClassName = style({\n    paddingBottom: global_spacer_md.var\n});\n\nconst ActionRow: React.FunctionComponent<ActionRowProps> = props => {\n    const {\n        recipientSelected,\n        recipientOnClear,\n        integrationSelected,\n        actionSelected\n    } = useEditableActionRow(props.path);\n\n    return (\n        <>\n            <GridItem span={ 6 }>\n                <ActionTypeahead\n                    action={ props.action }\n                    onSelected={ actionSelected }\n                />\n            </GridItem>\n            <GridItem span={ 6 }>\n                <Split>\n                    <SplitItem isFilled>\n                        <RecipientForm\n                            getRecipients={ props.getRecipients }\n                            getIntegrations={ props.getIntegrations }\n                            recipientSelected={ recipientSelected }\n                            recipientOnClear={ recipientOnClear }\n                            integrationSelected={ integrationSelected }\n                            action={ props.action }\n                        />\n                    </SplitItem>\n                    { props.onRemove && (\n                        <SplitItem>\n                            <Button variant={ ButtonVariant.plain } onClick={ props.onRemove }>\n                                <MinusCircleIcon />\n                            </Button>\n                        </SplitItem>\n                    ) }\n                </Split>\n            </GridItem>\n        </>\n    );\n};\n\nconst ActionsArray: React.FunctionComponent<ActionsArraysProps> = props => {\n    const { values, isSubmitting } = props.form;\n    const actions = React.useMemo(() => values.actions ?? [] as Array<Action>, [ values ]);\n\n    const addAction = React.useCallback(() => {\n        const push = props.push;\n        const newAction: Action = {\n            type: NotificationType.EMAIL_SUBSCRIPTION,\n            integrationId: '',\n            recipient: []\n        };\n\n        push(newAction);\n    }, [ props.push ]);\n\n    React.useEffect(() => {\n        if (actions.length === 0) {\n            addAction();\n        }\n    }, [ actions, addAction ]);\n\n    return (\n        <>\n            <GridItem span={ 6 }>\n                <b>Actions</b>\n            </GridItem>\n            <GridItem span={ 6 }>\n                <b>Recipient</b>\n            </GridItem>\n            { actions.map((action, index) => (\n                <ActionRow key={ `${index}-${action.integrationId}` }\n                    action={ action }\n                    getIntegrations={ props.getIntegrations }\n                    getRecipients={ props.getRecipients }\n                    path={ `actions.${index}` }\n                    onRemove={ actions.length > 1 ? props.handleRemove(index) : undefined }\n                />\n            )) }\n            <GridItem span={ 6 }>\n                <Button\n                    className={ alignLeftClassName }\n                    variant={ ButtonVariant.link }\n                    icon={ <PlusCircleIcon /> }\n                    onClick={ addAction }\n                    isDisabled={ isSubmitting }\n                >\n                    Add action\n                </Button>\n            </GridItem>\n        </>\n    );\n};\n\nexport const EditBehaviorGroupForm: React.FunctionComponent<EditBehaviorGroupProps> = props => {\n    return (\n        <div { ... getOuiaProps('Notifications/BehaviorGroupForm', props) }>\n            <div className={ subtitleClassName }>Enter a name and add actions for your new group.</div>\n            <Form>\n                <Grid hasGutter>\n                    <GridItem span={ 12 }>\n                        <FormTextInput\n                            ouiaId={ ouiaIdConcat(props.ouiaId, 'group-name') }\n                            label=\"Group name\"\n                            name=\"displayName\"\n                            id=\"group-name\"\n                        />\n                    </GridItem>\n                    <FieldArray name=\"actions\">\n                        { helpers => <ActionsArray\n                            { ...helpers }\n                            getRecipients={ props.getRecipients }\n                            getIntegrations={ props.getIntegrations }\n                        /> }\n                    </FieldArray>\n                </Grid>\n            </Form>\n        </div>\n    );\n};\n","import { ModalVariant } from '@patternfly/react-core';\nimport { SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { BehaviorGroupSchema } from '../../../schemas/Integrations/Notifications';\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { BehaviorGroup, DefaultNotificationBehavior, IntegrationRef, Notification } from '../../../types/Notification';\nimport { EditBehaviorGroupForm } from './BehaviorGroupForm';\n\ntype DataFetcher = {\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\nexport type BehaviorGroupSaveModalProps = Omit<SaveModalProps, UsedProps> & {\n    data?: Partial<BehaviorGroup>;\n    onSave: (behaviorGroup: BehaviorGroup) => boolean | Promise<boolean>;\n} & DataFetcher;\n\ninterface InternalProps extends DataFetcher {\n    onClose: (saved: boolean) => void;\n    data: BehaviorGroupSaveModalProps['data'];\n}\n\nconst InternalBehaviorGroupSaveModal: React.FunctionComponent<InternalProps> = props => {\n    const title =  `${props.data ? 'Create new' : 'Edit'} behavior group`;\n\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<Notification | DefaultNotificationBehavior>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            content={ <EditBehaviorGroupForm\n                behaviorGroup={ props.data }\n                getRecipients={ props.getRecipients }\n                getIntegrations={ props.getIntegrations }\n            /> }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            isOpen={ true }\n            title={ title }\n            onClose={ props.onClose }\n            variant={ ModalVariant.large }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const BehaviorGroupSaveModal: React.FunctionComponent<BehaviorGroupSaveModalProps> = props => {\n    const onSubmit = React.useCallback(async (data: Partial<BehaviorGroup>) => {\n        const onClose = props.onClose;\n        const onSave = props.onSave;\n\n        const saved = await onSave(data as BehaviorGroup);\n\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onClose, props.onSave ]);\n\n    return (\n        <Formik<Partial<BehaviorGroup>>\n            initialValues={ props.data ?? { } }\n            validationSchema={ BehaviorGroupSchema }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalBehaviorGroupSaveModal\n                onClose={ props.onClose }\n                data={ props.data }\n                getRecipients={ props.getRecipients }\n                getIntegrations={ props.getIntegrations }\n            />\n        </Formik>\n    );\n};\n","import { Filter, Operator, Page } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport { listIntegrationIntegrationDecoder, listIntegrationsActionCreator } from '../../services/useListIntegrations';\nimport { UserIntegrationType } from '../../types/Integration';\nimport { IntegrationRef } from '../../types/Notification';\n\nexport const useGetIntegrations = () => {\n    const { query } = useContext(ClientContext);\n\n    return React.useCallback(async (type: UserIntegrationType, _search: string) => {\n        return query(listIntegrationsActionCreator(\n            Page.of(\n                1,\n                20,\n                new Filter()\n                .and('type', Operator.EQUAL, type)\n            )\n        )).then(response => {\n            let integrations: Array<IntegrationRef> = [];\n            const payload = response.payload ? listIntegrationIntegrationDecoder(response.payload) : undefined;\n\n            if (payload?.type === 'IntegrationPage') {\n                integrations = payload.value.data;\n            }\n\n            return integrations;\n        });\n    }, [ query ]);\n};\n","const recipients = [\n    'Admin',\n    'Another one',\n    'Default user access',\n    'Security admin',\n    'Stakeholders'\n];\n\nconst getRecipients = async (search: string) => {\n    if (search !== '') {\n        search = search.toLowerCase();\n        return recipients.filter(r => r.toLowerCase().includes(search));\n    }\n\n    return recipients;\n};\n\nexport const useGetRecipients = () => {\n    return getRecipients;\n};\n","/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const EmailSubscriptionProperties = zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = unknown;\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType = 'webhook' | 'email_subscription' | 'default';\n\n  export const EntityTag = zodSchemaEntityTag();\n  export type EntityTag = {\n    value?: string | undefined | null;\n    weak?: boolean | undefined | null;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const Family = zodSchemaFamily();\n  export type Family =\n    | 'CLIENT_ERROR'\n    | 'INFORMATIONAL'\n    | 'OTHER'\n    | 'REDIRECTION'\n    | 'SERVER_ERROR'\n    | 'SUCCESSFUL';\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Link = zodSchemaLink();\n  export type Link = {\n    params?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    rel?: string | undefined | null;\n    rels?: Array<string> | undefined | null;\n    title?: string | undefined | null;\n    type?: string | undefined | null;\n    uri?: string | undefined | null;\n    uriBuilder?: UriBuilder | undefined | null;\n  };\n\n  export const Locale = zodSchemaLocale();\n  export type Locale = {\n    country?: string | undefined | null;\n    displayCountry?: string | undefined | null;\n    displayLanguage?: string | undefined | null;\n    displayName?: string | undefined | null;\n    displayScript?: string | undefined | null;\n    displayVariant?: string | undefined | null;\n    extensionKeys?: Array<string> | undefined | null;\n    iSO3Country?: string | undefined | null;\n    iSO3Language?: string | undefined | null;\n    language?: string | undefined | null;\n    script?: string | undefined | null;\n    unicodeLocaleAttributes?: Array<string> | undefined | null;\n    unicodeLocaleKeys?: Array<string> | undefined | null;\n    variant?: string | undefined | null;\n  };\n\n  export const MediaType = zodSchemaMediaType();\n  export type MediaType = {\n    parameters?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    subtype?: string | undefined | null;\n    type?: string | undefined | null;\n    wildcardSubtype?: boolean | undefined | null;\n    wildcardType?: boolean | undefined | null;\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();\n  export type MultivaluedMapStringObject = {\n    [x: string]: Array<unknown>;\n  };\n\n  export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();\n  export type MultivaluedMapStringString = {\n    [x: string]: Array<string>;\n  };\n\n  export const NewCookie = zodSchemaNewCookie();\n  export type NewCookie = {\n    comment?: string | undefined | null;\n    domain?: string | undefined | null;\n    expiry?: string | undefined | null;\n    httpOnly?: boolean | undefined | null;\n    maxAge?: number | undefined | null;\n    name?: string | undefined | null;\n    path?: string | undefined | null;\n    secure?: boolean | undefined | null;\n    value?: string | undefined | null;\n    version?: number | undefined | null;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    eventId?: string | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const RbacRaw = zodSchemaRbacRaw();\n  export type RbacRaw = {\n    data?:\n      | Array<{\n          [x: string]: unknown;\n        }>\n      | undefined\n      | null;\n    links?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    meta?:\n      | {\n          [x: string]: number;\n        }\n      | undefined\n      | null;\n  };\n\n  export const Response = zodSchemaResponse();\n  export type Response = {\n    allowedMethods?: Array<string> | undefined | null;\n    cookies?:\n      | {\n          [x: string]: NewCookie;\n        }\n      | undefined\n      | null;\n    date?: string | undefined | null;\n    entity?: unknown | undefined | null;\n    entityTag?: EntityTag | undefined | null;\n    headers?: MultivaluedMapStringObject | undefined | null;\n    language?: Locale | undefined | null;\n    lastModified?: string | undefined | null;\n    length?: number | undefined | null;\n    links?: Array<Link> | undefined | null;\n    location?: string | undefined | null;\n    mediaType?: MediaType | undefined | null;\n    metadata?: MultivaluedMapStringObject | undefined | null;\n    status?: number | undefined | null;\n    statusInfo?: StatusType | undefined | null;\n    stringHeaders?: MultivaluedMapStringString | undefined | null;\n  };\n\n  export const StatusType = zodSchemaStatusType();\n  export type StatusType = {\n    family?: Family | undefined | null;\n    reasonPhrase?: string | undefined | null;\n    statusCode?: number | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const UriBuilder = zodSchemaUriBuilder();\n  export type UriBuilder = unknown;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default' ]);\n  }\n\n  function zodSchemaEntityTag() {\n      return z\n      .object({\n          value: z.string().optional().nullable(),\n          weak: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFamily() {\n      return z.enum([\n          'CLIENT_ERROR',\n          'INFORMATIONAL',\n          'OTHER',\n          'REDIRECTION',\n          'SERVER_ERROR',\n          'SUCCESSFUL'\n      ]);\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaLink() {\n      return z\n      .object({\n          params: z.record(z.string()).optional().nullable(),\n          rel: z.string().optional().nullable(),\n          rels: z.array(z.string()).optional().nullable(),\n          title: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          uri: z.string().optional().nullable(),\n          uriBuilder: zodSchemaUriBuilder().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaLocale() {\n      return z\n      .object({\n          country: z.string().optional().nullable(),\n          displayCountry: z.string().optional().nullable(),\n          displayLanguage: z.string().optional().nullable(),\n          displayName: z.string().optional().nullable(),\n          displayScript: z.string().optional().nullable(),\n          displayVariant: z.string().optional().nullable(),\n          extensionKeys: z.array(z.string()).optional().nullable(),\n          iSO3Country: z.string().optional().nullable(),\n          iSO3Language: z.string().optional().nullable(),\n          language: z.string().optional().nullable(),\n          script: z.string().optional().nullable(),\n          unicodeLocaleAttributes: z.array(z.string()).optional().nullable(),\n          unicodeLocaleKeys: z.array(z.string()).optional().nullable(),\n          variant: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMediaType() {\n      return z\n      .object({\n          parameters: z.record(z.string()).optional().nullable(),\n          subtype: z.string().optional().nullable(),\n          type: z.string().optional().nullable(),\n          wildcardSubtype: z.boolean().optional().nullable(),\n          wildcardType: z.boolean().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMultivaluedMapStringObject() {\n      return z.record(z.array(z.unknown()));\n  }\n\n  function zodSchemaMultivaluedMapStringString() {\n      return z.record(z.array(z.string()));\n  }\n\n  function zodSchemaNewCookie() {\n      return z\n      .object({\n          comment: z.string().optional().nullable(),\n          domain: z.string().optional().nullable(),\n          expiry: z.string().optional().nullable(),\n          httpOnly: z.boolean().optional().nullable(),\n          maxAge: z.number().int().optional().nullable(),\n          name: z.string().optional().nullable(),\n          path: z.string().optional().nullable(),\n          secure: z.boolean().optional().nullable(),\n          value: z.string().optional().nullable(),\n          version: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          eventId: z.string().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRbacRaw() {\n      return z\n      .object({\n          data: z.array(z.record(z.unknown())).optional().nullable(),\n          links: z.record(z.string()).optional().nullable(),\n          meta: z.record(z.number().int()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaResponse() {\n      return z\n      .object({\n          allowedMethods: z.array(z.string()).optional().nullable(),\n          cookies: z.record(zodSchemaNewCookie()).optional().nullable(),\n          date: z.string().optional().nullable(),\n          entity: z.unknown().optional().nullable(),\n          entityTag: zodSchemaEntityTag().optional().nullable(),\n          headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          language: zodSchemaLocale().optional().nullable(),\n          lastModified: z.string().optional().nullable(),\n          length: z.number().int().optional().nullable(),\n          links: z.array(zodSchemaLink()).optional().nullable(),\n          location: z.string().optional().nullable(),\n          mediaType: zodSchemaMediaType().optional().nullable(),\n          metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),\n          status: z.number().int().optional().nullable(),\n          statusInfo: zodSchemaStatusType().optional().nullable(),\n          stringHeaders: zodSchemaMultivaluedMapStringString()\n          .optional()\n          .nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatusType() {\n      return z\n      .object({\n          family: zodSchemaFamily().optional().nullable(),\n          reasonPhrase: z.string().optional().nullable(),\n          statusCode: z.number().int().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaUriBuilder() {\n      return z.unknown();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n}\n\nexport namespace Operations {\n  // POST /api/notifications/v1.0/notifications/behaviorGroups\n  // Create a behavior group.\n  export namespace NotificationServiceCreateBehaviorGroup {\n    export interface Params {\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'BehaviorGroup', 200, Schemas.BehaviorGroup>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/behaviorGroups';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.BehaviorGroup, 'BehaviorGroup', 200)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /api/notifications/v1.0/notifications/behaviorGroups/{behaviorGroupId}/actions\n  // Update the list of actions of a behavior group.\n  export namespace NotificationServiceUpdateBehaviorGroupActions {\n    const Body = z.array(z.string());\n    type Body = Array<string>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/behaviorGroups/{behaviorGroupId}/actions'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /api/notifications/v1.0/notifications/behaviorGroups/{id}\n  // Update a behavior group.\n  export namespace NotificationServiceUpdateBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/behaviorGroups/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /api/notifications/v1.0/notifications/behaviorGroups/{id}\n  // Delete a behavior group.\n  export namespace NotificationServiceDeleteBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/behaviorGroups/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /api/notifications/v1.0/notifications/bg/eventTypes/affectedByRemovalOfEndpoint/{endpointId}\n  // Retrieve the event types affected by the removal of an integration.\n  export namespace NotificationServiceGetEventTypesAffectedByRemovalOfEndpoint {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      endpointId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/bg/eventTypes/affectedByRemovalOfEndpoint/{endpointId}'.replace(\n            '{endpointId}',\n            params.endpointId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /api/notifications/v1.0/notifications/bundles/{bundleId}/behaviorGroups\n  // Retrieve the behavior groups of a bundle.\n  export namespace NotificationServiceFindBehaviorGroupsByBundleId {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/bundles/{bundleId}/behaviorGroups'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /api/notifications/v1.0/notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}\n  // Retrieve the event types affected by the removal of a behavior group.\n  export namespace NotificationServiceGetEventTypesAffectedByRemovalOfBehaviorGroup {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups\n  // Retrieve the behavior groups linked to an event type.\n  export namespace NotificationServiceGetLinkedBehaviorGroups {\n    const Limit = z.number().int();\n    type Limit = number;\n    const Offset = z.number().int();\n    type Offset = number;\n    const PageNumber = z.number().int();\n    type PageNumber = number;\n    const SortBy = z.string();\n    type SortBy = string;\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      limit?: Limit;\n      offset?: Offset;\n      pageNumber?: PageNumber;\n      sortBy?: SortBy;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        if (params.limit !== undefined) {\n            query.limit = params.limit;\n        }\n\n        if (params.offset !== undefined) {\n            query.offset = params.offset;\n        }\n\n        if (params.pageNumber !== undefined) {\n            query.pageNumber = params.pageNumber;\n        }\n\n        if (params.sortBy !== undefined) {\n            query.sort_by = params.sortBy;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups\n  // Update the list of behavior groups of an event type.\n  export namespace NotificationServiceUpdateEventTypeBehaviors {\n    const Body = z.array(z.string());\n    type Body = Array<string>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/behaviorGroups'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n}\n","import { Schemas } from '../../generated/OpenapiPrivate';\nimport { BehaviorGroup, NewBehaviorGroup } from '../Notification';\nimport { toAction } from './NotificationAdapter';\n\ntype ServerBehaviorGroup = Schemas.BehaviorGroup;\n\nconst reportBehaviorGroup = (element: ServerBehaviorGroup): never => {\n    throw new Error('Invalid behavior group:' + JSON.stringify(element));\n};\n\nexport const toBehaviorGroup = (serverBehaviorGroup: ServerBehaviorGroup): BehaviorGroup => {\n    const actions = serverBehaviorGroup.actions?.map((behaviorAction) => {\n        if (behaviorAction.endpoint) {\n            return toAction(behaviorAction.endpoint);\n        }\n\n        return reportBehaviorGroup(serverBehaviorGroup);\n    }) || [];\n\n    return {\n        actions,\n        bundleId: serverBehaviorGroup.bundle_id,\n        displayName: serverBehaviorGroup.display_name,\n        id: serverBehaviorGroup.id ?? reportBehaviorGroup(serverBehaviorGroup)\n    };\n};\n\nexport const toShallowBehaviorGroupRequest = (behaviorGroup: BehaviorGroup | NewBehaviorGroup): ServerBehaviorGroup => {\n    return {\n        bundle_id: behaviorGroup.bundleId,\n        display_name: behaviorGroup.displayName\n    };\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiPrivate';\nimport { toBehaviorGroup, toShallowBehaviorGroupRequest } from '../../types/adapters/BehaviorGroupAdapter';\nimport { BehaviorGroup, NewBehaviorGroup } from '../../types/Notification';\n\ntype Payload = Operations.NotificationServiceCreateBehaviorGroup.Payload\n    | Operations.NotificationServiceUpdateBehaviorGroup.Payload;\n\nconst decoder = validationResponseTransformer(\n    (payload: Payload) => {\n        if (payload.type === 'BehaviorGroup') {\n            return validatedResponse(\n                'BehaviorGroup',\n                payload.status,\n                toBehaviorGroup(payload.value),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nconst saveBehaviorGroupActionCreator =  (behaviorGroup: BehaviorGroup | NewBehaviorGroup) => {\n    if (behaviorGroup.id === undefined) {\n        return Operations.NotificationServiceCreateBehaviorGroup.actionCreator({\n            body: toShallowBehaviorGroupRequest(behaviorGroup)\n        });\n    }\n\n    return Operations.NotificationServiceUpdateBehaviorGroup.actionCreator({\n        id: behaviorGroup.id,\n        body: toShallowBehaviorGroupRequest(behaviorGroup)\n    });\n};\n\nexport const useSaveBehaviorGroupMutation = () => useTransformQueryResponse(\n    useMutation(saveBehaviorGroupActionCreator),\n    decoder\n);\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiPrivate';\nimport { UUID } from '../../types/Notification';\n\ntype UpdateBehaviorGroupActionsParams = {\n    behaviorGroupId: UUID;\n    endpointIds: Array<UUID>;\n}\n\nconst updateBehaviorGroupActionsActionCreator =  (params: UpdateBehaviorGroupActionsParams) => {\n    return Operations.NotificationServiceUpdateBehaviorGroupActions.actionCreator({\n        behaviorGroupId: params.behaviorGroupId,\n        body: params.endpointIds\n    });\n};\n\nexport const useUpdateBehaviorGroupActionsMutation = () => useMutation(updateBehaviorGroupActionsActionCreator);\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport { BehaviorGroupSaveModal } from '../../../components/Notifications/BehaviorGroup/BehaviorGroupSaveModal';\nimport { useGetIntegrations } from '../../../components/Notifications/useGetIntegrations';\nimport { useGetRecipients } from '../../../components/Notifications/useGetRecipients';\nimport { useSaveBehaviorGroupMutation } from '../../../services/Notifications/SaveBehaviorGroup';\nimport { useUpdateBehaviorGroupActionsMutation } from '../../../services/Notifications/UpdateBehaviorGroupActions';\nimport { deleteIntegrationActionCreator } from '../../../services/useDeleteIntegration';\nimport { createIntegrationActionCreator } from '../../../services/useSaveIntegration';\nimport { IntegrationType } from '../../../types/Integration';\nimport { Action, BehaviorGroup, NewBehaviorGroup, NotificationType, UUID } from '../../../types/Notification';\n\ninterface EditBehaviorGroupPageProps {\n    behaviorGroup?: Partial<BehaviorGroup>;\n    onClose: (saved: boolean) => void;\n}\n\nconst needsSaving = (original: Partial<BehaviorGroup> | undefined, updated: BehaviorGroup | NewBehaviorGroup) => {\n    return original?.id === undefined || original.displayName !== updated.displayName;\n};\n\nexport const EditBehaviorGroupPage: React.FunctionComponent<EditBehaviorGroupPageProps> = props => {\n    const getRecipients = useGetRecipients();\n    const getIntegrations = useGetIntegrations();\n\n    const saveBehaviorGroupMutation = useSaveBehaviorGroupMutation();\n    const updateBehaviorGroupActionsMutation = useUpdateBehaviorGroupActionsMutation();\n    const { query } = useContext(ClientContext);\n    const [ creatingIntegrations, setCreatingNotifications ] = React.useState<boolean>(false);\n\n    const onSave = React.useCallback(async (data: BehaviorGroup | NewBehaviorGroup) => {\n        const updateBehaviorGroupActions = updateBehaviorGroupActionsMutation.mutate;\n        const saveBehaviorGroup = saveBehaviorGroupMutation.mutate;\n\n        return (needsSaving(props.behaviorGroup, data) ?\n            saveBehaviorGroup(data).then(value => {\n                if (value.payload?.type === 'BehaviorGroup') {\n                    return value.payload.value.id;\n                } else if (value.payload?.status === 200) {\n                    return data.id;\n                }\n\n                throw new Error('Behavior group wasn\\'t saved');\n            }) : Promise.resolve(data.id)).then(behaviorGroupId => {\n\n            // Determine what Integrations we need to create (other than webhook)\n            const toCreate: Array<Action> = data.actions.filter(action => !action.integrationId);\n            if (toCreate.find(newAction => newAction.type !== NotificationType.EMAIL_SUBSCRIPTION)) {\n                throw new Error('Only email subscriptions are created when assigning behavior groups');\n            }\n\n            if (toCreate.length > 0) {\n                setCreatingNotifications(true);\n            }\n\n            return Promise.all(\n                toCreate.map(_ => query(createIntegrationActionCreator({\n                    type: IntegrationType.EMAIL_SUBSCRIPTION,\n                    name: 'Email subscription',\n                    isEnabled: true\n                }))\n                .then(result => result.payload?.type === 'Endpoint' ? result.payload.value.id : undefined)\n                )\n            ).then(newIds => {\n                return updateBehaviorGroupActions({\n                    behaviorGroupId: behaviorGroupId as UUID,\n                    endpointIds: data.actions.map(action => action.integrationId)\n                    .filter(id => id)\n                    .concat(newIds as Array<string>)\n                });\n            });\n        }).then(value => {\n            if (value.payload?.status === 200) {\n                // Delete non-user actions in the background; user doesn't need to wait.\n                (props.behaviorGroup?.actions ?? [])\n                .filter(action => action.type !== NotificationType.INTEGRATION)\n                .filter(action => !data.actions.find(newAction => newAction.integrationId === action.integrationId))\n                .map(oldNonUserAction =>  query(deleteIntegrationActionCreator(oldNonUserAction.integrationId)));\n                return true;\n            }\n\n            throw new Error('Behavior group actions weren\\'t saved');\n        }).catch(err => {\n            console.error('Error saving behavior groups', err);\n            return false;\n        });\n    }, [ saveBehaviorGroupMutation.mutate, updateBehaviorGroupActionsMutation.mutate, props.behaviorGroup, query ]);\n\n    const isSaving = React.useMemo(() => {\n        return creatingIntegrations || saveBehaviorGroupMutation.loading || updateBehaviorGroupActionsMutation.loading;\n    }, [ creatingIntegrations, saveBehaviorGroupMutation.loading, updateBehaviorGroupActionsMutation.loading ]);\n\n    return (\n        <BehaviorGroupSaveModal\n            data={ props.behaviorGroup }\n            isSaving={ isSaving }\n            onClose={ props.onClose }\n            onSave={ onSave }\n            getRecipients={ getRecipients }\n            getIntegrations={ getIntegrations }\n        />\n    );\n};\n","import {\n    Badge,\n    Button,\n    ButtonVariant,\n    ExpandableSection,\n    ExpandableSectionToggle,\n    SearchInput, Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { global_BackgroundColor_100, global_palette_black_1000, global_spacer_lg } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport {\n    BehaviorGroupCardList,\n    BehaviorGroupCardListSkeleton\n} from '../../../components/Notifications/BehaviorGroup/BehaviorGroupCardList';\nimport {\n    makeCreateAction,\n    makeEditAction,\n    makeNoneAction,\n    useFormModalReducer } from '../../../hooks/useFormModalReducer';\nimport { BehaviorGroup, UUID } from '../../../types/Notification';\nimport { emptyImmutableArray } from '../../../utils/Immutable';\nimport { EditBehaviorGroupPage } from '../Form/EditBehaviorGroupPage';\nimport { BehaviorGroupContent } from './useBehaviorGroupContent';\n\nconst expandableSectionClassName = {\n    backgroundColor: global_BackgroundColor_100.var,\n    paddingLeft: global_spacer_lg.var,\n    paddingRight: global_spacer_lg.var\n};\n\nconst sectionClassName = style(\n    expandableSectionClassName,\n    {\n        paddingBottom: global_spacer_lg.var\n    }\n);\n\nconst sectionTitleClassName = style(\n    expandableSectionClassName,\n    {\n        paddingTop: global_spacer_lg.var\n    }\n);\n\nconst titleClassName = style({\n    marginTop: '-0.15em',\n    color: global_palette_black_1000.var\n});\n\nconst emptyAddButtonClassName = style({\n    marginTop: '-0.2em'\n});\n\ninterface BehaviorGroupSectionProps {\n    bundleId: UUID;\n    behaviorGroupContent: BehaviorGroupContent;\n}\n\nexport const BehaviorGroupsSection: React.FunctionComponent<BehaviorGroupSectionProps> = props => {\n\n    const [ isExpanded, setExpanded ] = React.useState(true);\n    const [ filter, setFilter ] = React.useState<string>('');\n\n    const filteredBehaviors = React.useMemo(() => {\n        if (!props.behaviorGroupContent.isLoading && !props.behaviorGroupContent.hasError) {\n            const lowerCaseFilter = filter.toLowerCase();\n            return props.behaviorGroupContent.content.filter(bg => bg.displayName.toLowerCase().includes(lowerCaseFilter));\n        }\n\n        return emptyImmutableArray;\n    }, [ filter, props.behaviorGroupContent ]);\n\n    const [ modalState, dispatch ] = useFormModalReducer<BehaviorGroup>();\n\n    const createGroup = React.useCallback(() => {\n        dispatch(makeCreateAction<BehaviorGroup>({\n            bundleId: props.bundleId\n        }));\n    }, [ dispatch, props.bundleId ]);\n\n    const onCloseModal = React.useCallback((saved: boolean) => {\n        const reload = props.behaviorGroupContent.reload;\n        if (saved) {\n            reload();\n        }\n\n        dispatch(makeNoneAction());\n    }, [ dispatch, props.behaviorGroupContent.reload ]);\n\n    const onEdit = React.useCallback((behaviorGroup: BehaviorGroup) => {\n        dispatch(makeEditAction(behaviorGroup));\n    }, [ dispatch ]);\n\n    const onClearFilter = React.useCallback(() => {\n        setFilter('');\n    }, [ setFilter ]);\n\n    const contentId = 'behavior-group-section-content';\n\n    return (\n        <div>\n            <div className={ sectionTitleClassName }>\n                <ExpandableSectionToggle\n                    isExpanded={ isExpanded }\n                    onToggle={ setExpanded }\n                    contentId={ contentId }\n                    direction=\"down\"\n                >\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Title className={ titleClassName } headingLevel=\"h2\">Behavior groups</Title>\n                        </SplitItem>\n                        <SplitItem>\n                            { (!props.behaviorGroupContent.isLoading && !props.behaviorGroupContent.hasError) && (\n                                props.behaviorGroupContent.content.length > 0 ?\n                                    <Badge isRead>{ props.behaviorGroupContent.content.length }</Badge> :\n                                    <Button\n                                        className={ emptyAddButtonClassName }\n                                        variant={ ButtonVariant.primary }\n                                        onClick={ createGroup }\n                                    >\n                                        Create new group\n                                    </Button>\n                            ) }\n                        </SplitItem>\n                    </Split>\n                </ExpandableSectionToggle>\n            </div>\n            <ExpandableSection\n                className={ sectionClassName }\n                contentId={ contentId }\n                isExpanded={ isExpanded }\n                onToggle={ setExpanded }\n                isDetached\n            >\n                <Stack hasGutter>\n                    <StackItem>\n                        Configure default actions for notifications recipients. Keep in mind that users will be able\n                        to change settings for all entitled events in User Preferences. You can prevent users from\n                        changing assigned actions by locking action / recipient pairings when creating or editing\n                        behavior groups.\n                    </StackItem>\n                    { (props.behaviorGroupContent.isLoading ||\n                        props.behaviorGroupContent.hasError ||\n                        props.behaviorGroupContent.content.length > 0) && (\n                        <>\n                            <StackItem>\n                                <Split hasGutter>\n                                    <SplitItem>\n                                        <SearchInput\n                                            value={ filter }\n                                            onChange={ setFilter }\n                                            onClear={ onClearFilter }\n                                            type=\"text\"\n                                            aria-label=\"Search by name\"\n                                            placeholder=\"Search by name\"\n                                            isDisabled={ props.behaviorGroupContent.isLoading }\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Button\n                                            isDisabled={ props.behaviorGroupContent.isLoading }\n                                            variant={ ButtonVariant.primary }\n                                            onClick={ createGroup }\n                                        >\n                                            Create new group\n                                        </Button>\n                                    </SplitItem>\n                                </Split>\n                            </StackItem>\n                            <StackItem>\n                                { props.behaviorGroupContent.isLoading ? (\n                                    <BehaviorGroupCardListSkeleton />\n                                ) : props.behaviorGroupContent.hasError ? (\n                                    <div>Error loading behavior groups</div>\n                                ) : (\n                                    <BehaviorGroupCardList onEdit={ onEdit } behaviorGroups={ filteredBehaviors } />\n                                ) }\n                            </StackItem>\n                        </>\n                    ) }\n                </Stack>\n                { modalState.isOpen && (\n                    <EditBehaviorGroupPage\n                        behaviorGroup={ modalState.template }\n                        onClose={ onCloseModal }\n                    />\n                )}\n            </ExpandableSection>\n        </div>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiPrivate';\nimport { toBehaviorGroup } from '../../types/adapters/BehaviorGroupAdapter';\nimport { UUID } from '../../types/Notification';\n\nconst behaviorGroupDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceFindBehaviorGroupsByBundleId.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'BehaviorGroups',\n                200,\n                payload.value.map(toBehaviorGroup),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetBehaviorGroups = (bundleId: UUID) => {\n    return useTransformQueryResponse(\n        useQuery(Operations.NotificationServiceFindBehaviorGroupsByBundleId.actionCreator({\n            bundleId\n        })),\n        behaviorGroupDecoder\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiPrivate';\nimport { UUID } from '../../types/Notification';\n\nexport const getBehaviorGroupByNotificationDecoder = validationResponseTransformer(\n    (payload: Operations.NotificationServiceGetLinkedBehaviorGroups.Payload) => {\n        if (payload.status === 200) {\n            return validatedResponse(\n                'BehaviorGroupId',\n                200,\n                payload.value.map(value => value.id),\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const getBehaviorGroupByNotificationAction = (notificationId: UUID) =>\n    Operations.NotificationServiceGetLinkedBehaviorGroups.actionCreator({\n        eventTypeId: notificationId\n    });\n\nexport const useGetBehaviorGroupByNotification = (notificationId: UUID) => {\n    return useTransformQueryResponse(\n        useQuery(getBehaviorGroupByNotificationAction(notificationId)),\n        getBehaviorGroupByNotificationDecoder\n    );\n};\n","import { Operations } from '../../generated/OpenapiPrivate';\nimport { UUID } from '../../types/Notification';\nimport NotificationServiceUpdateEventTypeBehaviors = Operations.NotificationServiceUpdateEventTypeBehaviors;\n\nexport const linkBehaviorGroupAction = (notificationId: UUID, behaviorGroupIds: Array<UUID>) => {\n    return NotificationServiceUpdateEventTypeBehaviors.actionCreator({\n        body: behaviorGroupIds,\n        eventTypeId: notificationId\n    });\n};\n","import produce, { castDraft } from 'immer';\nimport pLimit from 'p-limit';\nimport * as React from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { usePrevious } from 'react-use';\n\nimport { getBehaviorGroupByNotificationAction } from '../../../services/Notifications/GetBehaviorGroupByNotificationId';\nimport { linkBehaviorGroupAction } from '../../../services/Notifications/LinkBehaviorGroup';\nimport { toBehaviorGroup } from '../../../types/adapters/BehaviorGroupAdapter';\nimport { BehaviorGroup, Notification, NotificationBehaviorGroup, UUID } from '../../../types/Notification';\nimport { findById } from '../../../utils/Find';\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport type BehaviorGroupNotificationRow = NotificationBehaviorGroup & {\n    readonly loadingActionStatus: 'loading' | 'done' | 'error';\n    readonly behaviors: ReadonlyArray<BehaviorGroup>;\n} & (\n    {\n        readonly isEditMode: false;\n    } |\n    {\n        readonly isEditMode: true;\n        readonly oldBehaviors: ReadonlyArray<BehaviorGroup>;\n    }\n);\n\nconst getNotification = <T extends ReadonlyArray<BehaviorGroupNotificationRow>>(\n    rows: T,\n    notificationId: UUID): T[number] => {\n    const notification = rows.find(findById(notificationId));\n    if (!notification) {\n        throw new Error('Notification not found in rows');\n    }\n\n    return notification;\n};\n\nexport const useBehaviorGroupNotificationRows = (notifications: Array<Notification>) => {\n    const [ notificationRows, setNotificationRows ] = React.useState<Array<BehaviorGroupNotificationRow>>([]);\n    const prevNotificationInput = usePrevious(notifications);\n    const { query } = React.useContext(ClientContext);\n    const [ limit ] = React.useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const removeBehaviorGroup = React.useCallback((notificationId: UUID, behaviorGroupId: UUID) => {\n        setNotificationRows(produce(draft => {\n            const notification = getNotification(draft, notificationId);\n            const index = notification.behaviors.findIndex(findById(behaviorGroupId));\n            if (index === -1) {\n                throw new Error('Behavior group not found in rows');\n            }\n\n            notification.behaviors.splice(index, 1);\n        }));\n    }, [ setNotificationRows ]);\n\n    const updateBehaviorGroupLink = React.useCallback((notificationId: UUID, behaviorGroup: BehaviorGroup, linkBehavior: boolean) => {\n        if (linkBehavior) {\n            setNotificationRows(produce(draft => {\n                const notification = getNotification(draft, notificationId);\n                notification.behaviors.push({\n                    ...castDraft(behaviorGroup)\n                });\n            }));\n        } else {\n            removeBehaviorGroup(notificationId, behaviorGroup.id);\n        }\n    }, [ removeBehaviorGroup, setNotificationRows ]);\n\n    const setEditMode = React.useCallback(async (notificationId: UUID, command: 'edit' | 'finish' | 'cancel') => {\n\n        if (command === 'finish') {\n            const notification = getNotification(notificationRows, notificationId);\n            if (notification.isEditMode) {\n                setNotificationRows(produce(draft => {\n                    const draftNotification = getNotification(draft, notificationId);\n                    draftNotification.loadingActionStatus = 'loading';\n                }));\n\n                const response = await query(linkBehaviorGroupAction(notificationId, notification.behaviors.map(b => b.id)));\n                if (response.payload?.status === 200) {\n                    // Todo: show success\n                } else {\n                    // Todo: Show failure\n                }\n\n                setNotificationRows(produce(draft => {\n                    const draftNotification = getNotification(draft, notificationId);\n                    draftNotification.loadingActionStatus = 'done';\n                }));\n            }\n        }\n\n        setNotificationRows(produce(draft => {\n            const notification = getNotification(draft, notificationId);\n\n            if (notification.isEditMode && command === 'cancel') {\n                notification.behaviors = notification.oldBehaviors;\n            }\n\n            notification.isEditMode = command === 'edit';\n            if (notification.isEditMode) {\n                notification.oldBehaviors = notification.behaviors;\n            }\n        }));\n    }, [ setNotificationRows, notificationRows, query ]);\n\n    const startEditMode = React.useCallback((notificationId: UUID) => {\n        setEditMode(notificationId, 'edit');\n    }, [ setEditMode ]);\n\n    const finishEditMode = React.useCallback((notificationId: UUID) => {\n        setEditMode(notificationId, 'finish');\n    }, [ setEditMode ]);\n\n    const cancelEditMode = React.useCallback((notificationId: UUID) => {\n        setEditMode(notificationId, 'cancel');\n    }, [ setEditMode ]);\n\n    React.useEffect(() => {\n        if (notifications !== prevNotificationInput) {\n            setNotificationRows(_prev => notifications.map(notification => ({\n                ...notification,\n                loadingActionStatus: 'loading',\n                behaviors: [],\n                isEditMode: false\n            })));\n        }\n\n        if (notifications) {\n            limit.clearQueue();\n\n            notifications.map(notification => notification.id).forEach(notificationId => {\n                limit(() => query(getBehaviorGroupByNotificationAction(notificationId))).then(response => {\n                    setNotificationRows(produce(draft => {\n                        const draftNotification = getNotification(draft, notificationId);\n                        if (response.payload?.status === 200) {\n                            draftNotification.loadingActionStatus = 'done';\n                            draftNotification.behaviors = response.payload.value.map(toBehaviorGroup).map(bg => ({\n                                ...bg,\n                                isLoading: false,\n                                actions: castDraft(bg.actions)\n                            }));\n                        } else {\n                            draftNotification.loadingActionStatus = 'error';\n                            draftNotification.behaviors = [];\n                        }\n                    }));\n                });\n            });\n        }\n\n    }, [ notifications, limit, query, prevNotificationInput, setNotificationRows ]);\n\n    return {\n        rows: notificationRows,\n        updateBehaviorGroupLink,\n        startEditMode,\n        finishEditMode,\n        cancelEditMode\n    };\n};\n","import { useFilters, useUrlStateMultipleOptions, useUrlStateString } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport { useMemo } from 'react';\n\nimport { NotificationFilterColumn } from '../../../components/Notifications/Filter';\n\nconst DEBOUNCE_MS = 250;\n\nexport const useNotificationFilter = (initialAppOptions: Array<string>, debounce = DEBOUNCE_MS) => {\n    const useStateFactory = useMemo(() => {\n        const useUrlStateName = (defaultValue?: string) => useUrlStateString('name', defaultValue);\n        const useUrlStateApplication = (defaultValue?: Array<string>) => useUrlStateMultipleOptions(\n            'app',\n            initialAppOptions,\n            defaultValue\n        );\n        const useUrlStateAction = (defaultValue?: string) => useUrlStateString('action', defaultValue);\n\n        const useStateFactoryInternal = (column: NotificationFilterColumn) => {\n            switch (column) {\n                case NotificationFilterColumn.NAME:\n                    return useUrlStateName;\n                case NotificationFilterColumn.ACTION:\n                    return useUrlStateAction;\n                case NotificationFilterColumn.APPLICATION:\n                    return useUrlStateApplication;\n                default:\n                    assertNever(column);\n            }\n        };\n\n        return useStateFactoryInternal;\n        // This is an init param, so it doesn't need to recompute on change.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return useFilters(NotificationFilterColumn, debounce, useStateFactory);\n};\n","import { arrayValue, Filter, Operator, Page, Sort } from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { NotificationFilterColumn, NotificationFilters } from '../../../components/Notifications/Filter';\nimport { Facet } from '../../../types/Notification';\n\nexport interface UseNotificationPageReturn {\n    page: Page;\n    changePage: (page: number) => void;\n    changeItemsPerPage: (perPage: number) =>  void;\n}\n\nexport const useNotificationPage = (\n    filters: NotificationFilters,\n    bundle: Facet,\n    appFilterOptions: Array<Facet>,\n    defaultPerPage: number,\n    sort?: Sort): UseNotificationPageReturn => {\n    const [ currentPage, setCurrentPage ] = useState<number>(1);\n    const [ itemsPerPage, setItemsPerPage ] = useState<number>(defaultPerPage);\n\n    useEffect(() => setCurrentPage(1), [ setCurrentPage, filters ]);\n\n    const page = useMemo(() => {\n        const filter = new Filter();\n\n        const appFilter = filters[NotificationFilterColumn.APPLICATION];\n\n        if (appFilter) {\n            const appIds: Array<string> = [];\n            for (const appName of arrayValue(appFilter)) {\n                const filterOption = appFilterOptions.find(a => a.displayName === appName);\n                if (filterOption) {\n                    appIds.push(filterOption.id);\n                }\n            }\n\n            filter.and('applicationId', Operator.EQUAL, appIds);\n        }\n\n        filter.and('bundleId', Operator.EQUAL, bundle.id);\n\n        return Page.of(currentPage, itemsPerPage, filter, sort);\n    }, [ currentPage, itemsPerPage, sort, filters, appFilterOptions, bundle ]);\n\n    const changePage = useCallback((page: number) => setCurrentPage(page), [ setCurrentPage ]);\n    const changeItemsPerPage = useCallback((perPage: number) => {\n        setCurrentPage(1);\n        setItemsPerPage(perPage);\n    }, [ setCurrentPage ]);\n\n    return {\n        page,\n        changePage,\n        changeItemsPerPage\n    };\n};\n","import { global_spacer_xl } from '@patternfly/react-tokens';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { ExporterType } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { NotificationsBehaviorGroupTable } from '../../../components/Notifications/NotificationsBehaviorGroupTable';\nimport { NotificationsToolbar } from '../../../components/Notifications/Toolbar';\nimport { useListNotifications } from '../../../services/useListNotifications';\nimport { BehaviorGroup, Facet, NotificationBehaviorGroup, UUID } from '../../../types/Notification';\nimport { BehaviorGroupsSection } from './BehaviorGroupsSection';\nimport { useBehaviorGroupContent } from './useBehaviorGroupContent';\nimport { useBehaviorGroupNotificationRows } from './useBehaviorGroupNotificationRows';\nimport { useNotificationFilter } from './useNotificationFilter';\nimport { useNotificationPage } from './useNotificationPage';\n\ninterface BundlePageBehaviorGroupContentProps {\n    applications: Array<Facet>;\n    bundle: Facet;\n}\n\nconst behaviorGroupSectionClassName = style({\n    marginBottom: global_spacer_xl.var\n});\n\nconst emptyArray = [];\n\nexport const BundlePageBehaviorGroupContent: React.FunctionComponent<BundlePageBehaviorGroupContentProps> = props => {\n\n    const notificationsFilter = useNotificationFilter(props.applications.map(a => a.displayName.toString()));\n    const behaviorGroupContent = useBehaviorGroupContent(props.bundle.id);\n\n    const onExport = React.useCallback((type: ExporterType) => {\n        console.log('Export to', type);\n    }, []);\n\n    const notificationPage = useNotificationPage(notificationsFilter.debouncedFilters, props.bundle, props.applications, 10);\n    const useNotifications = useListNotifications(notificationPage.page);\n    const {\n        rows: notificationRows,\n        updateBehaviorGroupLink,\n        startEditMode,\n        finishEditMode,\n        cancelEditMode\n    } = useBehaviorGroupNotificationRows(\n        useNotifications.payload?.type === 'eventTypesArray' ? useNotifications.payload.value : emptyArray\n    );\n\n    const onBehaviorGroupLinkUpdated = React.useCallback((\n        notification: NotificationBehaviorGroup,\n        behaviorGroup: BehaviorGroup,\n        isLinked: boolean) => {\n        if (behaviorGroup) {\n            updateBehaviorGroupLink(notification.id, behaviorGroup, isLinked);\n        }\n    }, [ updateBehaviorGroupLink ]);\n\n    const onStartEditing = React.useCallback((notificationId: UUID) => {\n        startEditMode(notificationId);\n    }, [ startEditMode ]);\n\n    const onFinishEditing = React.useCallback((notificationId: UUID) => {\n        finishEditMode(notificationId);\n    }, [ finishEditMode ]);\n\n    const onCancelEditing = React.useCallback((notificationId: UUID) => {\n        cancelEditMode(notificationId);\n    }, [ cancelEditMode ]);\n\n    return (\n        <Section>\n            <div className={ behaviorGroupSectionClassName }>\n                <BehaviorGroupsSection\n                    bundleId={ props.bundle.id }\n                    behaviorGroupContent={ behaviorGroupContent }\n                />\n            </div>\n            <NotificationsToolbar\n                filters={ notificationsFilter.filters }\n                setFilters={ notificationsFilter.setFilters }\n                clearFilter={ notificationsFilter.clearFilter }\n                appFilterOptions={ props.applications }\n                onExport={ onExport }\n            >\n                <NotificationsBehaviorGroupTable\n                    notifications={ notificationRows }\n                    behaviorGroupContent={ behaviorGroupContent }\n                    onBehaviorGroupLinkUpdated={ onBehaviorGroupLinkUpdated }\n                    onStartEditing={ onStartEditing }\n                    onFinishEditing={ onFinishEditing }\n                    onCancelEditing={ onCancelEditing }\n                />\n            </NotificationsToolbar>\n        </Section>\n    );\n};\n","import * as React from 'react';\n\nimport { useGetBehaviorGroups } from '../../../services/Notifications/GetBehaviorGroups';\nimport { BehaviorGroup, UUID } from '../../../types/Notification';\n\nexport type BehaviorGroupContent = {\n    isLoading: true;\n    reload: () => void;\n} | {\n    isLoading: false;\n    hasError: true;\n    error: string;\n    reload: () => void;\n} | {\n    isLoading: false;\n    hasError: false;\n    content: Array<BehaviorGroup>;\n    reload: () => void;\n}\n\nexport const useBehaviorGroupContent = (bundleId: UUID) => {\n    const behaviorGroups = useGetBehaviorGroups(bundleId);\n\n    return React.useMemo<BehaviorGroupContent>(() => {\n        const payload = behaviorGroups.payload;\n        const error = behaviorGroups.errorObject;\n        const loading = behaviorGroups.loading;\n        const reload = behaviorGroups.query;\n\n        if (loading) {\n            return {\n                isLoading: true,\n                reload\n            };\n        }\n\n        if (payload?.status === 200) {\n            return {\n                isLoading: false,\n                hasError: false,\n                content: payload.value,\n                reload\n            };\n        }\n\n        return {\n            isLoading: false,\n            hasError: true,\n            error: error.toString(),\n            reload\n        };\n\n    }, [ behaviorGroups.payload, behaviorGroups.loading, behaviorGroups.errorObject, behaviorGroups.query ]);\n};\n","import { Button, ButtonVariant, Skeleton } from '@patternfly/react-core';\nimport {\n    c_skeleton_BackgroundColor, global_FontSize_sm, global_palette_black_300, global_spacer_md, global_spacer_xs\n} from '@patternfly/react-tokens';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { cssRaw, style } from 'typestyle';\n\nimport { DefaultNotificationBehavior } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ActionComponent } from './ActionComponent';\nimport { Recipient } from './Recipient';\n\nexport interface DefaultBehaviorProps extends OuiaComponentProps {\n    defaultBehavior?: DefaultNotificationBehavior;\n    onEdit?: () => void;\n    loading: boolean;\n}\n\ncssRaw(`\n    table.withDark300Skeleton .pf-c-skeleton {\n        ${c_skeleton_BackgroundColor.name}: ${global_palette_black_300.var} \n    }\n`);\n\nconst contentClassName = style({\n    backgroundColor: '#f0f0f0',\n    paddingTop: global_spacer_md.var,\n    paddingBottom: global_spacer_md.var,\n    paddingLeft: global_spacer_md.var,\n    paddingRight: global_spacer_md.var\n});\n\nconst tableClassName = style({\n    paddingTop: global_spacer_md.var,\n    display: 'block',\n    $nest: {\n        '& td, & th': {\n            paddingTop: global_spacer_xs.var,\n            paddingBottom: global_spacer_xs.var,\n            paddingLeft: global_spacer_md.var,\n            paddingRight: global_spacer_md.var,\n            fontSize: global_FontSize_sm.var\n        },\n        '& td:first-child, & th:first-child': {\n            paddingLeft: 0\n        },\n        '& thead:first-child th': {\n            paddingTop: 0\n        }\n    }\n});\n\nconst titleClassName = style({\n    fontWeight: 600\n});\n\nexport const DefaultBehavior: React.FunctionComponent<DefaultBehaviorProps> = (props) => {\n    return (\n        <div { ...getOuiaProps('Notifications/DefaultBehavior', props) } className={ contentClassName } >\n            <div className={ titleClassName }>\n                Default behavior <Button onClick={ props.onEdit } isDisabled={ !props.onEdit } variant={ ButtonVariant.link }>Edit defaults</Button>\n            </div>\n            <div>Default behavior applies to all notifications in a bundle. You can override this default for any specific event type.</div>\n            <table className={ `${tableClassName} withDark300Skeleton` }>\n                <thead>\n                    <tr>\n                        <th>Action</th>\n                        <th>Recipient</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { props.loading ? (\n                        <>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                            <tr>\n                                <td><Skeleton width=\"200px\" /></td>\n                                <td><Skeleton width=\"200px\" /></td>\n                            </tr>\n                        </>\n                    ) : props.defaultBehavior === undefined ? (\n                        <tr><td>Error while loading the default behavior. </td></tr>\n                    ) : (\n                        props.defaultBehavior?.actions.map((a, index) => {\n                            return (\n                                <tr key={ index }>\n                                    <td><ActionComponent isDefault={ false } action={ a } /></td>\n                                    <td> <Recipient action={ a } hasOutline /></td>\n                                </tr>\n                            );\n                        })\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","import './Table.scss';\n\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport {\n    expandable,\n    ICell,\n    IRow,\n    IRowData,\n    RowWrapperProps,\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table';\nimport { global_spacer_md, global_spacer_sm } from '@patternfly/react-tokens';\nimport { joinClasses, OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\nimport * as React from 'react';\nimport { cssRaw, style } from 'typestyle';\n\nimport { Messages } from '../../properties/Messages';\nimport { Notification } from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { ActionComponent } from './ActionComponent';\nimport { Recipient } from './Recipient';\nimport { GroupByEnum } from './Types';\n\nconst pfBorderBottomClassName = style({\n    borderBottom: 'var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)'\n});\n\nconst noBorderBottom = style({\n    borderBottom: 'none !important'\n});\n\nconst cellPaddingBottom = style({\n    paddingBottom: '0 !important'\n});\n\nconst actionCellStyle = style({\n    paddingLeft: `${global_spacer_md.var} !important`\n});\n\nconst cellPaddingBottomStyle = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    '--pf-c-table__expandable-row-content--PaddingBottom': '0'\n} as any;\n\nconst cellPaddingTop = style({\n    paddingTop: `${global_spacer_sm.var} !important`\n} as any);\n\nconst cellPaddingTopStyle = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    '--pf-c-table__expandable-row-content--PaddingTop': '0'\n} as any;\n\nconst grayFontClassName = style({\n    color: '#888'\n});\n\nconst noExpandableBorderClassName = style({\n    $nest: {\n        '&:after': {\n            borderLeft: 'none !important',\n            paddingBottom: '0 !important'\n        }\n    }\n});\n\nconst componentClassName = 'notification-table';\n\ncssRaw(`\n.${componentClassName} table {\n    --pf-c-table--m-compact__expandable-row-content--PaddingTop: ${global_spacer_sm.var};\n    --pf-c-table--m-compact__expandable-row-content--PaddingBottom: ${global_spacer_sm.var};\n}\n`);\n\nconst applicationGroupClassName = style({\n    fontWeight: 600\n});\n\nconst columns: Array<ICell> = [\n    {\n        title: Messages.components.notifications.table.columns.event,\n        transforms: [ ],\n        cellFormatters: [ expandable ]\n    },\n    {\n        title: Messages.components.notifications.table.columns.action,\n        transforms: []\n    },\n    {\n        title: Messages.components.notifications.table.columns.recipient,\n        transforms: []\n    },\n    {\n        title: ''\n    }\n];\n\nexport interface NotificationsTableProps extends OuiaComponentProps {\n    notifications: NotificationRows;\n    onCollapse: (index: number, isOpen: boolean) => void;\n    onEdit?: OnEditNotification;\n}\n\ntype NotificationRowBase = {\n    loadingActionStatus: 'loading' | 'done' | 'error';\n}\n\nexport type NotificationRowGroupedByNone = Notification & NotificationRowBase;\n\nexport interface NotificationRowGroupedByApplication {\n    applicationDisplayName: string;\n    notifications: Array<NotificationRowGroupedByNone>;\n    isOpen: boolean;\n}\n\nexport type NotificationRows = {\n    grouped: GroupByEnum.Application;\n    data: Array<NotificationRowGroupedByApplication>;\n} | {\n    grouped: GroupByEnum.None;\n    data: Array<NotificationRowGroupedByNone>;\n}\n\nexport type OnEditNotification = (notification: Notification) => void;\n\ninterface EventCellProps {\n    eventTypeDisplayName: string;\n    applicationDisplayName: string;\n}\n\nconst EventCell: React.FunctionComponent<EventCellProps> = (props) => (\n    <>\n        <div> { props.eventTypeDisplayName } </div>\n        <div className={ grayFontClassName }> { props.applicationDisplayName } </div>\n    </>\n);\n\nconst RowWrapper: React.FunctionComponent<RowWrapperProps> = (props) => {\n    const { trRef, className, rowProps, row, ...rest } = props;\n    if (!row) {\n        return <></>;\n    }\n\n    const rowClassName = (row as any).props?.className ? (row as any).props.className : '';\n\n    return (\n        <tr\n            { ...rest }\n            ref={ trRef as any }\n            className={ css(\n                className,\n                row.isExpanded !== undefined && styles.tableExpandableRow,\n                row.isExpanded && styles.modifiers.expanded,\n                rowClassName\n            ) }\n            hidden={ row?.isExpanded !== undefined && !row.isExpanded }\n        >\n            { props.children }\n        </tr>\n    );\n};\n\nconst toTableRowsGroupedByNone = (notifications: Array<NotificationRowGroupedByNone>, onEdit?: OnEditNotification, parent?: number) => {\n    return notifications.reduce((rows, notification) => {\n        const rowSpan = Math.max(1, notification.useDefault ? 1 : notification.actions?.length ?? 0);\n        const firstAction = notification.actions?.length ? notification.actions[0] : undefined;\n\n        rows.push({\n            id: `${parent !== undefined ? (parent.toString() + '-') : ''}${notification.id}`,\n            key: `${parent !== undefined ? (parent.toString() + '-') : ''}${notification.id}`,\n            cells: [\n                {\n                    title: <EventCell\n                        applicationDisplayName={ notification.applicationDisplayName }\n                        eventTypeDisplayName={ notification.eventTypeDisplayName }\n                    />,\n                    props: {\n                        rowSpan,\n                        className: joinClasses(\n                            noExpandableBorderClassName,\n                            pfBorderBottomClassName\n                        ),\n                        colSpan: parent === undefined ? 1 : 2\n                    }\n                },\n                {\n                    title: <><span><ActionComponent\n                        isDefault={ !!notification.useDefault }\n                        action={ firstAction }\n                        loading={ notification.loadingActionStatus === 'loading' }\n                        hasError={ notification.loadingActionStatus === 'error' }\n                    /></span></>,\n                    props: {\n                        className: joinClasses(actionCellStyle, cellPaddingBottom),\n                        style: cellPaddingBottomStyle\n                    }\n                },\n                {\n                    title: <><span>{ firstAction && <Recipient action={ firstAction } /> }</span></>,\n                    props: {\n                        className: cellPaddingBottom,\n                        style: cellPaddingBottomStyle\n                    }\n                },\n                {\n                    title: <><Button\n                        onClick={ () => onEdit && onEdit(notification) } isDisabled={ !onEdit }\n                        variant={ ButtonVariant.link }>Edit</Button></>,\n                    props: {\n                        className: cellPaddingBottom,\n                        style: cellPaddingBottomStyle\n                    }\n                }\n            ],\n            props: {\n                className: notification.actions?.length && notification.actions.length > 1 ? noBorderBottom : ''\n            }\n        });\n\n        if (parent !== undefined) {\n            rows[rows.length - 1].parent = parent;\n            rows[rows.length - 1].fullWidth = true;\n        }\n\n        for (let i = 1; i < rowSpan; ++i) {\n            if (notification.actions === undefined || notification.actions[i] === undefined) {\n                throw new Error(`Undefined notification.actions at index ${i}. ${notification.actions}`);\n            }\n\n            const classNames = joinClasses(\n                (i + 1 === rowSpan ? '' : cellPaddingBottom),\n                cellPaddingTop\n            );\n            const id = `${notification.id}-action-${i}`;\n            const cssStyle = {\n                ...cellPaddingTopStyle,\n                ...(i + 1 === rowSpan ? {} : cellPaddingBottomStyle)\n            };\n            rows.push({\n                id: `${parent !== undefined ? (parent.toString() + '-') : ''}${id}`,\n                key: `${parent !== undefined ? (parent.toString() + '-') : ''}${id}`,\n                cells: [\n                    {\n                        title: <ActionComponent\n                            isDefault={ !!notification.useDefault }\n                            action={ notification.actions[i] }\n                            loading={ notification.loadingActionStatus === 'loading' }\n                            hasError={ notification.loadingActionStatus === 'error' }\n                        />,\n                        props: {\n                            className: joinClasses(\n                                noExpandableBorderClassName,\n                                classNames,\n                                actionCellStyle\n                            ),\n                            style: cssStyle\n                        }\n                    },\n                    {\n                        title: <Recipient action={ notification.actions[i] } />,\n                        props: {\n                            className: classNames,\n                            style: cssStyle\n                        }\n                    },\n                    {\n                        props: {\n                            className: classNames,\n                            style: cssStyle\n                        }\n                    }\n                ],\n                props: {\n                    className: (i + 1 === rowSpan ? '' : noBorderBottom)\n                }\n            });\n\n            if (parent !== undefined) {\n                rows[rows.length - 1].parent = parent;\n                rows[rows.length - 1].fullWidth = true;\n            }\n        }\n\n        return rows;\n    }, [] as Array<IRow>);\n};\n\nconst toTableRowsGroupedByApplication = (applicationGroups: Array<NotificationRowGroupedByApplication>, onEdit?: OnEditNotification): Array<IRow> =>\n    applicationGroups.reduce((rows, applicationGroup) => {\n        rows.push({\n            id: applicationGroup.applicationDisplayName,\n            key: applicationGroup.applicationDisplayName,\n            cells: [\n                {\n                    title: <span className={ applicationGroupClassName }> Application: { applicationGroup.applicationDisplayName }</span>,\n                    props: {\n                        className: noExpandableBorderClassName\n                    }\n                },\n                {\n                    title: '',\n                    props: {\n                        colSpan: columns.length - 1\n                    }\n                }\n            ],\n            isOpen: applicationGroup.isOpen\n        });\n\n        rows.push(...toTableRowsGroupedByNone(applicationGroup.notifications, onEdit, rows.length - 1));\n\n        return rows;\n    }, [] as Array<IRow>);\n\nexport const NotificationsTable: React.FunctionComponent<NotificationsTableProps> = (props) => {\n\n    const rows = React.useMemo(() => {\n        const notifications = props.notifications;\n        switch (notifications.grouped) {\n            case GroupByEnum.Application:\n                return toTableRowsGroupedByApplication(notifications.data, props.onEdit);\n            case GroupByEnum.None:\n                return toTableRowsGroupedByNone(notifications.data, props.onEdit);\n            default:\n                assertNever(notifications);\n        }\n\n    }, [ props.notifications, props.onEdit ]);\n\n    const onCollapseHandler = React.useCallback((_event, _index: number, isOpen: boolean, data: IRowData) => {\n        const notifications = props.notifications;\n        const onCollapse = props.onCollapse;\n\n        if (notifications.grouped === GroupByEnum.None) {\n            throw new Error('Invalid group None for CollapseHandler');\n        }\n\n        const index = notifications.data.findIndex(n => n.applicationDisplayName === data.id);\n        if (onCollapse && index !== undefined && index !== -1) {\n            onCollapse(index, isOpen);\n        }\n\n    }, [ props.onCollapse, props.notifications ]);\n\n    return (\n        <div { ...getOuiaProps('Notifications/Table', props) } className={ componentClassName }>\n            <Table\n                aria-label={ Messages.components.notifications.table.title }\n                rows={ rows }\n                cells={ columns }\n                onCollapse={ onCollapseHandler }\n                rowWrapper={ RowWrapper as (props: RowWrapperProps) => React.ReactElement }\n                variant=\"compact\"\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>\n        </div>\n    );\n};\n","import { useTransformQueryResponse } from '@redhat-cloud-services/insights-common-typescript';\nimport { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useQuery } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../generated/OpenapiNotifications';\nimport { toActions } from '../types/adapters/NotificationAdapter';\n\nexport const defaultNotificationBehaviorCreator = () => Operations.NotificationServiceGetEndpointsForDefaults.actionCreator();\n\nexport const defaultNotificationsDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetEndpointsForDefaults.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'DefaultNotificationBehavior',\n            200,\n            {\n                actions: toActions(payload.value)\n            },\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const useDefaultNotificationBehavior = () => useTransformQueryResponse(\n    useQuery(defaultNotificationBehaviorCreator()),\n    defaultNotificationsDecoder\n);\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport { OuiaComponentProps } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\n\nimport { UserIntegrationType } from '../../../types/Integration';\nimport { Action, IntegrationRef } from '../../../types/Notification';\nimport { getOuiaProps } from '../../../utils/getOuiaProps';\nimport { RecipientForm } from '../EditableActionRow/RecipientForm';\nimport { useEditableActionRow } from '../EditableActionRow/useEditableActionRow';\nimport { ActionTypeahead } from './ActionTypeahead';\n\nexport interface EditableActionTableProps {\n    actions: Array<Action>;\n    path: string;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    handleRemove?: (index: number) => () => void;\n    isDisabled?: boolean;\n}\n\ninterface EditableActionElementProps extends OuiaComponentProps {\n    path: string;\n    action: Action;\n    isDisabled?: boolean;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n    onRemove?: () => void;\n}\n\nconst EditableActionRow: React.FunctionComponent<EditableActionElementProps> = (props) => {\n\n    const {\n        recipientSelected,\n        recipientOnClear,\n        integrationSelected,\n        actionSelected\n    } = useEditableActionRow(props.path);\n\n    return (\n        <tr>\n            <td>\n                <ActionTypeahead\n                    action={ props.action }\n                    onSelected={ actionSelected }\n                    isDisabled={ props.isDisabled }\n                    ouiaId={ `${props.ouiaId ? 'action-' + props.ouiaId : undefined}` }\n                />\n            </td>\n            <td>\n                <RecipientForm\n                    action={ props.action }\n                    integrationSelected={ integrationSelected }\n                    recipientSelected={ recipientSelected }\n                    recipientOnClear={ recipientOnClear }\n                    getIntegrations={ props.getIntegrations }\n                    getRecipients={ props.getRecipients }\n                />\n            </td>\n            <td>\n                <Button\n                    onClick={ props.onRemove }\n                    variant={ ButtonVariant.plain }\n                >\n                    <TimesIcon />\n                </Button>\n            </td>\n        </tr>\n    );\n};\n\nexport const EditableActionTable: React.FunctionComponent<EditableActionTableProps> = (props) => {\n\n    return (\n        <>\n            <thead { ...getOuiaProps('Notifications/Form/EditableActionHeader', {}) }>\n                <tr>\n                    <th>Action</th>\n                    <th>Recipient</th>\n                    <th />\n                </tr>\n            </thead>\n            <tbody { ...getOuiaProps('Notifications/Form/EditableActionBody', {}) }>\n                {\n                    props.actions.map((a, index) => {\n                        return (\n                            <EditableActionRow\n                                key={ index }\n                                ouiaId={ `${index}` }\n                                action={ a }\n                                isDisabled={ props.isDisabled }\n                                path={ `${props.path}.${index}` }\n                                getRecipients={ props.getRecipients }\n                                getIntegrations={ props.getIntegrations }\n                                onRemove={ props.handleRemove ? props.handleRemove(index) : undefined }\n                            />\n                        );\n                    })\n                }\n            </tbody>\n        </>\n    );\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { global_spacer_md, global_spacer_sm } from '@patternfly/react-tokens';\nimport {\n    Checkbox,\n    Form,\n    FormText,\n    OuiaComponentProps,\n    ouiaIdConcat\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { FieldArray, FieldArrayRenderProps, FormikProps, useFormikContext } from 'formik';\nimport * as React from 'react';\nimport { style } from 'typestyle';\n\nimport { UserIntegrationType } from '../../types/Integration';\nimport {\n    Action,\n    DefaultNotificationBehavior,\n    IntegrationRef,\n    Notification,\n    NotificationType\n} from '../../types/Notification';\nimport { getOuiaProps } from '../../utils/getOuiaProps';\nimport { EditableActionTable } from './Form/EditableActionTable';\n\ntype Type = 'default' | 'notification';\n\nexport interface NotificationFormProps extends OuiaComponentProps {\n    type: Type;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\ninterface ActionsArrayProps extends FieldArrayRenderProps {\n    form: FormikProps<Notification | DefaultNotificationBehavior>;\n    type: Type;\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\nconst alignLeftClassName = style({\n    textAlign: 'left',\n    paddingLeft: 0\n});\n\nconst tableClassName = style({\n    display: 'block',\n    $nest: {\n        '& td, & th': {\n            paddingTop: global_spacer_sm.var,\n            paddingBottom: global_spacer_sm.var,\n            paddingLeft: global_spacer_md.var,\n            paddingRight: global_spacer_md.var\n        },\n        '& th': {\n            width: '500px'\n        },\n        '& th:last-child': {\n            width: '80px'\n        },\n        '& td:first-child, & th:first-child': {\n            paddingLeft: 0\n        }\n    }\n});\n\nconst ActionArray: React.FunctionComponent<ActionsArrayProps> = (props) => {\n\n    const { values, isSubmitting } = props.form;\n    const actions = values.actions;\n\n    const addAction = React.useCallback(() => {\n        const push = props.push;\n        const newAction: Action = {\n            type: NotificationType.EMAIL_SUBSCRIPTION,\n            integrationId: '',\n            recipient: []\n        };\n\n        push(newAction);\n    }, [ props.push ]);\n\n    return (\n        <>\n            { (actions === undefined || actions.length === 0) && (\n                <tbody { ...getOuiaProps('Notifications/Form/NoActions', {}) }>\n                    <tr>\n                        <td colSpan={ 3 }><span>No actions. Users will not be notified.</span></td>\n                    </tr>\n                </tbody>\n            )}\n\n            { actions && actions.length > 0 && (\n                <EditableActionTable\n                    path={ props.name }\n                    actions={ actions }\n                    getRecipients={ props.getRecipients }\n                    getIntegrations={ props.getIntegrations }\n                    handleRemove={ props.handleRemove }\n                    isDisabled={ isSubmitting }\n                />\n            ) }\n            <tbody { ...getOuiaProps('Notifications/Form/Button', {}) }>\n                <tr>\n                    <td>\n                        <Button\n                            className={ alignLeftClassName }\n                            variant={ ButtonVariant.link }\n                            icon={ <PlusCircleIcon /> }\n                            onClick={ addAction }\n                            isDisabled={ isSubmitting }\n                        >\n                            Add action\n                        </Button>\n                    </td>\n                </tr>\n            </tbody>\n        </>\n    );\n};\n\nexport const NotificationForm: React.FunctionComponent<NotificationFormProps> = (props) => {\n\n    const { values, isSubmitting } = useFormikContext<Notification | DefaultNotificationBehavior>();\n    const { type } = props;\n\n    const showActions: boolean = type === 'default' ? true : !(values as Notification).useDefault;\n\n    return (\n        <div { ... getOuiaProps('Notifications/Form', props) }>\n            <Form>\n                <table className={ tableClassName }>\n                    { props.type === 'notification' && (\n                        <>\n                            <thead />\n                            <tbody { ...getOuiaProps('Notifications/Form/ApplicationHeader', {}) }>\n                                <tr>\n                                    <td>\n                                        <FormText\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'event-name') }\n                                            label=\"Event name\"\n                                            name=\"eventTypeDisplayName\"\n                                            id=\"event\"\n                                        />\n                                    </td>\n                                    <td>\n                                        <FormText\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'application') }\n                                            label=\"Application\"\n                                            name=\"applicationDisplayName\"\n                                            id=\"application\"\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td colSpan={ 2 }>\n                                        <Checkbox\n                                            ouiaId={ ouiaIdConcat(props.ouiaId, 'use-default') }\n                                            name=\"useDefault\"\n                                            id=\"useDefault\"\n                                            label=\"Use default notification actions\"\n                                            isDisabled={ isSubmitting }\n                                        />\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </>\n                    ) }\n                    { props.type === 'default' && (\n                        <tbody { ...getOuiaProps('Notifications/Form/DefaultHeader', {}) }>\n                            <tr>\n                                <td colSpan={ 3 }>\n                                    <div>Change the default notification actions for <b>Red Hat Insights</b>.</div>\n                                    <div>These actions apply to all events that use the default actions.</div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    )}\n\n                    { showActions && (\n                        <>\n                            <FieldArray name=\"actions\">\n                                { helpers =>  <ActionArray\n                                    type={ props.type }\n                                    { ...helpers }\n                                    getRecipients={ props.getRecipients }\n                                    getIntegrations={ props.getIntegrations }\n                                /> }\n                            </FieldArray>\n                        </>\n                    ) }\n                </table>\n            </Form>\n        </div>\n    );\n};\n","import { ModalVariant } from '@patternfly/react-core';\nimport { SaveModal, SaveModalProps } from '@redhat-cloud-services/insights-common-typescript';\nimport { Formik, useFormikContext } from 'formik';\nimport * as React from 'react';\n\nimport { WithActions } from '../../schemas/Integrations/Notifications';\nimport { UserIntegrationType } from '../../types/Integration';\nimport { DefaultNotificationBehavior, IntegrationRef, Notification } from '../../types/Notification';\nimport { NotificationForm } from './Form';\n\ntype DataFetcher = {\n    getRecipients: (search: string) => Promise<Array<string>>;\n    getIntegrations: (type: UserIntegrationType, search: string) => Promise<Array<IntegrationRef>>;\n}\n\ntype UsedProps = 'isOpen' | 'title' | 'content' | 'onSave';\nexport type NotificationSaveModalProps = Omit<SaveModalProps, UsedProps> & ({\n    type: 'default';\n    data: DefaultNotificationBehavior;\n    onSave: (dnb: DefaultNotificationBehavior) => boolean | Promise<boolean>;\n} | {\n    type: 'notification';\n    data: Notification;\n    onSave: (notification: Notification) => boolean | Promise<boolean>;\n}) & DataFetcher;\n\ninterface InternalProps extends DataFetcher {\n    onClose: (saved: boolean) => void;\n    type: NotificationSaveModalProps['type'];\n}\n\nconst InternalNotificationSaveModal: React.FunctionComponent<InternalProps> = (props) => {\n    const title =  `Edit${props.type === 'default' && ' default' || ''} notification actions`;\n\n    const { handleSubmit, isValid, isSubmitting } = useFormikContext<Notification | DefaultNotificationBehavior>();\n\n    const onSaveClicked = React.useCallback(() => {\n        handleSubmit();\n        return false;\n    }, [ handleSubmit ]);\n\n    return (\n        <SaveModal\n            content={ <NotificationForm\n                type={ props.type }\n                getRecipients={ props.getRecipients }\n                getIntegrations={ props.getIntegrations }\n            /> }\n            isSaving={ isSubmitting }\n            onSave={ onSaveClicked }\n            isOpen={ true }\n            title={ title }\n            onClose={ props.onClose }\n            variant={ ModalVariant.large }\n            actionButtonDisabled={ !isValid }\n        />\n    );\n};\n\nexport const NotificationSaveModal: React.FunctionComponent<NotificationSaveModalProps> = (props) => {\n\n    const onSubmit = React.useCallback(async (data: Notification | DefaultNotificationBehavior) => {\n        const onClose = props.onClose;\n        let saved = false;\n        if (props.type === 'notification') {\n            const onSave = props.onSave;\n            saved = await onSave(data as Notification);\n        } else if (props.type === 'default') {\n            const onSave = props.onSave;\n            saved = await onSave(data as DefaultNotificationBehavior);\n        }\n\n        if (saved) {\n            onClose(true);\n        }\n    }, [ props.onSave, props.onClose, props.type ]);\n\n    return (\n        <Formik<Notification | DefaultNotificationBehavior>\n            initialValues={ props.data }\n            validationSchema={ WithActions }\n            onSubmit={ onSubmit }\n            validateOnMount={ true }\n        >\n            <InternalNotificationSaveModal\n                type={ props.type }\n                onClose={ props.onClose }\n                getRecipients={ props.getRecipients }\n                getIntegrations={ props.getIntegrations }\n            />\n        </Formik>\n    );\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\n\nimport {\n    Operations, Schemas\n} from '../../generated/OpenapiIntegrations';\n\nexport const getDefaultActionIdAction = () => Operations.EndpointServiceCreateEndpoint.actionCreator({\n    body: {\n        type: Schemas.EndpointType.enum.default,\n        name: 'Default endpoint type',\n        description: '',\n        enabled: true,\n        properties: null\n    }\n});\n\nexport const getDefaultActionIdDecoder = validationResponseTransformer((payload: Operations.EndpointServiceCreateEndpoint.Payload) => {\n    if (payload.type === 'Endpoint') {\n        return validatedResponse(\n            'DefaultNotificationId',\n            payload.status,\n            payload.value.id as string,\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\n\nimport {\n    Operations, Schemas\n} from '../generated/OpenapiNotifications';\nimport { toActions } from '../types/adapters/NotificationAdapter';\nimport { UUID } from '../types/Notification';\n\nexport const getNotificationActionsByIdAction = (eventTypeId: UUID) => {\n    return Operations.NotificationServiceGetLinkedEndpoints.actionCreator({\n        eventTypeId\n    });\n};\n\nexport const hasDefaultNotificationDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetLinkedEndpoints.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'defaultNotification',\n            200,\n            payload.value.findIndex(a => a.type === Schemas.EndpointType.enum.default) !== -1,\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n\nexport const getNotificationByIdActionDecoder = validationResponseTransformer((payload: Operations.NotificationServiceGetLinkedEndpoints.Payload) => {\n    if (payload.status === 200) {\n        return validatedResponse(\n            'actionsArray',\n            200,\n            toActions(payload.value),\n            payload.errors\n        );\n    }\n\n    return payload;\n});\n","import {\n    addDangerNotification,\n    addSuccessNotification\n} from '@redhat-cloud-services/insights-common-typescript';\nimport assertNever from 'assert-never';\nimport pLimit from 'p-limit';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ClientContext } from 'react-fetching-library';\n\nimport { NotificationSaveModal } from '../../../components/Notifications/SaveModal';\nimport { useGetIntegrations } from '../../../components/Notifications/useGetIntegrations';\nimport { useGetRecipients } from '../../../components/Notifications/useGetRecipients';\nimport {\n    getDefaultActionIdAction,\n    getDefaultActionIdDecoder\n} from '../../../services/Notifications/GetDefaultActionId';\nimport { actionAddActionToDefault } from '../../../services/useAddActionToDN';\nimport { actionAddActionToNotification } from '../../../services/useAddActionToNotification';\nimport {\n    defaultNotificationBehaviorCreator,\n    defaultNotificationsDecoder\n} from '../../../services/useDefaultNotificationBehavior';\nimport {\n    getNotificationActionsByIdAction,\n    getNotificationByIdActionDecoder,\n    hasDefaultNotificationDecoder\n} from '../../../services/useGetNotificationActions';\nimport { actionRemoveActionFromDefault } from '../../../services/useRemoveActionFromDN';\nimport { actionRemoveActionFromNotification } from '../../../services/useRemoveActionFromNotification';\nimport { createIntegrationActionCreator } from '../../../services/useSaveIntegration';\nimport { IntegrationType } from '../../../types/Integration';\nimport {\n    Action,\n    DefaultNotificationBehavior,\n    Notification,\n    NotificationType\n} from '../../../types/Notification';\n\ninterface EditNotificationPagePropsNotification {\n    type: 'notification';\n    data: Notification;\n}\n\ninterface EditNotificationPagePropsDefault {\n    type: 'default';\n    data: DefaultNotificationBehavior;\n}\n\nexport type EditNotificationPageProps = {\n    onClose: (saved: boolean) => void;\n} & (EditNotificationPagePropsNotification | EditNotificationPagePropsDefault);\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nexport const EditNotificationPage: React.FunctionComponent<EditNotificationPageProps> = (props) => {\n\n    const { query } = useContext(ClientContext);\n\n    const getRecipients = useGetRecipients();\n    const getIntegrations = useGetIntegrations();\n\n    const onSave = React.useCallback(async (data: Notification | DefaultNotificationBehavior) => {\n        const idMapper = (a: Action) => {\n            if (a.type !== NotificationType.INTEGRATION && a.type !== NotificationType.EMAIL_SUBSCRIPTION) {\n                throw new Error('Only integrations and EmailSubscription are supported');\n            }\n\n            return a.integrationId;\n        };\n\n        const type = props.type;\n        if (type !== 'notification' && type !== 'default') {\n            assertNever(type);\n        }\n\n        let oldActions: Array<Action> | undefined;\n        let oldUseDefault: boolean | undefined;\n        if (props.type === 'default') {\n            oldActions = await query(defaultNotificationBehaviorCreator())\n            .then(r => r.payload ? defaultNotificationsDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'DefaultNotificationBehavior' ? p.value.actions : undefined);\n\n            oldUseDefault = false;\n        } else if (props.type === 'notification') {\n            const id = props.data.id;\n            const actionsPromise = query(getNotificationActionsByIdAction(id));\n\n            oldActions = await actionsPromise\n            .then(r => r.payload ? getNotificationByIdActionDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'actionsArray' ? p.value : undefined);\n\n            oldUseDefault = await actionsPromise\n            .then(r => r.payload ? hasDefaultNotificationDecoder(r.payload) : r.payload)\n            .then(p => p?.type === 'defaultNotification' ? p.value : undefined);\n        }\n\n        const newUseDefault = props.type === 'notification' ? (data as Notification).useDefault : false;\n        let defaultActionId: string | undefined;\n\n        if (newUseDefault !== oldUseDefault) {\n            defaultActionId = await query(getDefaultActionIdAction())\n            .then(r => r.payload ? getDefaultActionIdDecoder(r.payload) : undefined)\n            .then(p => p?.type === 'DefaultNotificationId' ? p.value : undefined);\n        } else {\n            defaultActionId = 'nothing';\n        }\n\n        if (!oldActions || oldUseDefault === undefined || defaultActionId === undefined) {\n            addDangerNotification('Error updating actions', 'Failed to update actions. Please try again.');\n            return false;\n        }\n\n        const limit = pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS);\n\n        const originalIds = oldActions.map(idMapper);\n        const newActions = data.actions ?? [];\n        const newIds = newActions.map((a, i) => a.integrationId === '' ? { ...a, integrationId: `new${i}` } : a).map(idMapper);\n\n        const nonUserIntegrationsPromises: Array<Promise<boolean>> = [];\n\n        newActions.map((a, index) => {\n            if (a.integrationId === '' && a.type === NotificationType.EMAIL_SUBSCRIPTION) {\n                nonUserIntegrationsPromises.push(limit(() => {\n                    return query(createIntegrationActionCreator({\n                        type: IntegrationType.EMAIL_SUBSCRIPTION,\n                        name: 'Email subscription',\n                        isEnabled: true\n                    }))\n                    .then(r => r.payload?.type === 'Endpoint' ? r.payload.value.id : undefined)\n                    .then(id => {\n                        if (id) {\n                            // Sanity check\n                            if (newIds[index] !== `new${index}`) {\n                                throw new Error(`Sync error, expected new${index} but found ${newIds[index]}`);\n                            }\n\n                            newIds[index] = id;\n                            return true;\n                        }\n\n                        return false;\n                    });\n                }));\n                // New, we need add this integration\n            }\n        });\n\n        if (nonUserIntegrationsPromises.length) {\n            const created = await Promise.all(nonUserIntegrationsPromises.map(p => p.catch(() => false))).then(all => all.every(e => e));\n            if (!created) {\n                addDangerNotification('Actions not added/removed', 'Some actions were not correctly added or removed. Please try again.');\n                return false;\n            }\n        }\n\n        let toDelete: Array<string>;\n        let toAdd: Array<string>;\n\n        if (newUseDefault) {\n            toDelete = originalIds.reduce<Array<string>>((arr, val) => {\n                if (!arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n\n            if (!oldUseDefault) {\n                toAdd = [ defaultActionId ];\n            } else {\n                toAdd = [];\n            }\n\n        } else {\n            toDelete = originalIds.reduce<Array<string>>((arr, val) => {\n                if (!newIds.includes(val) && !arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n\n            if (oldUseDefault) {\n                toDelete.push(defaultActionId);\n            }\n\n            toAdd = newIds.reduce<Array<string>>((arr, val) => {\n                if (!originalIds.includes(val) && !arr.includes(val)) {\n                    arr.push(val);\n                }\n\n                return arr;\n            }, []);\n        }\n\n        if (toAdd.length === 0 && toDelete.length === 0) {\n            // Nothing to update, display to the user that all was updated?\n            addSuccessNotification('Actions updated', 'All the actions were updated.');\n            return true;\n        }\n\n        const promises: Array<Promise<boolean>> = [];\n\n        if (props.type === 'notification') {\n            const notificationId = props.data.id;\n            promises.push(...toDelete.map(id => limit(() =>\n                query(actionRemoveActionFromNotification(notificationId, id)).then(r => !r.error))));\n            promises.push(...toAdd.map(id => limit(() => query(actionAddActionToNotification(notificationId, id)).then(r => !r.error))));\n        } else if (props.type === 'default') {\n            promises.push(...toDelete.map(id => limit(() => query(actionRemoveActionFromDefault(id)).then(r => !r.error))));\n            promises.push(...toAdd.map(id => limit(() => query(actionAddActionToDefault(id)).then(r => !r.error))));\n        }\n\n        const saved = await Promise.all(promises.map(p => p.catch(() => false))).then(all => all.every(e => e));\n\n        if (saved) {\n            addSuccessNotification('Actions updated', 'All the actions were updated.');\n        } else {\n            addDangerNotification('Actions not added/removed', 'Some actions were not correctly added or removed. Please try again.');\n        }\n\n        return saved;\n    }, [ props.type, query, props.data ]);\n\n    return (\n        <NotificationSaveModal\n            onSave={ onSave }\n            isSaving={ false }\n            { ...props }\n            getRecipients={ getRecipients }\n            getIntegrations={ getIntegrations }\n        />\n    );\n};\n","import { Operations  } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionRemoveActionFromNotification = (notificationId: UUID, actionId: UUID) => {\n    return Operations.NotificationServiceUnlinkEndpointFromEventType.actionCreator({\n        endpointId: actionId,\n        eventTypeId: notificationId\n    });\n};\n","import { Operations } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionAddActionToNotification = (notificationId: UUID, actionId: UUID) => {\n    return Operations.NotificationServiceLinkEndpointToEventType.actionCreator({\n        endpointId: actionId,\n        eventTypeId: notificationId\n    });\n};\n","import { Operations } from '../generated/OpenapiNotifications';\nimport { UUID } from '../types/Notification';\n\nexport const actionRemoveActionFromDefault = (actionId: UUID) =>\n    Operations.NotificationServiceDeleteEndpointFromDefaults.actionCreator({\n        endpointId: actionId\n    });\n","import { Operations } from '../generated/OpenapiNotifications';\n\nexport const actionAddActionToDefault = (actionId: string) =>\n    Operations.NotificationServiceAddEndpointToDefaults.actionCreator({\n        endpointId: actionId\n    });\n","import { assertNever } from 'assert-never';\nimport { useReducer } from 'react';\n\nimport { DefaultNotificationBehavior, Notification } from '../../../types/Notification';\n\nenum UseFormModalReducerActionType {\n    EDIT_NOTIFICATION = 'edit-notification',\n    EDIT_DEFAULTS = 'edit-defaults',\n    NONE = 'none'\n}\n\ninterface UseFormModalReducerActionEditNotification {\n    type: UseFormModalReducerActionType.EDIT_NOTIFICATION;\n    template: Notification;\n}\n\ninterface UseFormModalReducerActionEditDefault {\n    type: UseFormModalReducerActionType.EDIT_DEFAULTS;\n    template: DefaultNotificationBehavior;\n}\n\ninterface UseFormModalReducerActionNone {\n    type: UseFormModalReducerActionType.NONE;\n}\n\ntype UseFormModalReducerAction = UseFormModalReducerActionEditNotification | UseFormModalReducerActionEditDefault | UseFormModalReducerActionNone;\n\ntype UseFormModalReducerState = {\n    isOpen: false;\n} | ({\n    isOpen: true;\n} & ({\n    type: 'default';\n    data: DefaultNotificationBehavior;\n} | {\n    type: 'notification';\n    data: Notification;\n}))\n\nconst noneState = {\n    isOpen: false as const\n};\n\nconst reducer = (state: UseFormModalReducerState, action: UseFormModalReducerAction): UseFormModalReducerState => {\n    switch (action.type) {\n        case UseFormModalReducerActionType.EDIT_DEFAULTS:\n            return {\n                isOpen: true,\n                type: 'default',\n                data: action.template\n            };\n        case UseFormModalReducerActionType.EDIT_NOTIFICATION:\n            return {\n                isOpen: true,\n                type: 'notification',\n                data: action.template\n            };\n        case UseFormModalReducerActionType.NONE:\n            return noneState;\n        default:\n            assertNever(action);\n    }\n};\n\nexport const makeEditNotificationAction = (template: Notification): UseFormModalReducerActionEditNotification => ({\n    type: UseFormModalReducerActionType.EDIT_NOTIFICATION,\n    template\n});\n\nexport const makeEditDefaultAction = (template: DefaultNotificationBehavior): UseFormModalReducerActionEditDefault => ({\n    type: UseFormModalReducerActionType.EDIT_DEFAULTS,\n    template\n});\n\nexport const makeNoneAction = (): UseFormModalReducerActionNone => ({\n    type: UseFormModalReducerActionType.NONE\n});\n\nexport const useFormModalReducer = () => {\n    return useReducer(reducer, noneState);\n};\n","import { assertNever } from 'assert-never';\nimport pLimit from 'p-limit';\nimport { default as React, useCallback, useContext, useEffect, useState } from 'react';\nimport { ClientContext } from 'react-fetching-library';\nimport { usePrevious } from 'react-use';\n\nimport {\n    NotificationRowGroupedByApplication,\n    NotificationRowGroupedByNone,\n    NotificationRows\n} from '../../../components/Notifications/Table';\nimport { GroupByEnum } from '../../../components/Notifications/Types';\nimport { getNotificationActionsByIdAction } from '../../../services/useGetNotificationActions';\nimport { toActions, usesDefault } from '../../../types/adapters/NotificationAdapter';\nimport { Notification, UUID } from '../../../types/Notification';\n\nconst MAX_NUMBER_OF_CONCURRENT_REQUESTS = 5;\n\nconst toRowsGroupByNone = (notification: Notification): NotificationRowGroupedByNone => ({\n    loadingActionStatus: 'loading',\n    ...notification\n});\n\nconst findNotificationPath = (rows: Array<NotificationRowGroupedByApplication>, id: UUID): [number, number] => {\n    for (let i = 0; i < rows.length; ++i) {\n        for (let j = 0; j < rows[i].notifications.length; ++j) {\n            if (rows[i].notifications[j].id === id) {\n                return [ i, j ];\n            }\n        }\n    }\n\n    return [ -1, -1 ];\n};\n\nconst toRowGroupByApplication = (notifications: Array<Notification>): Array<NotificationRowGroupedByApplication> => {\n    const grouped = notifications.reduce((groups, notification) => {\n        if (!groups[notification.applicationDisplayName]) {\n            groups[notification.applicationDisplayName] = {\n                applicationDisplayName: notification.applicationDisplayName,\n                isOpen: true,\n                notifications: []\n            };\n        }\n\n        groups[notification.applicationDisplayName].notifications.push(toRowsGroupByNone(notification));\n        return groups;\n    }, {} as Record<string, NotificationRowGroupedByApplication>);\n\n    return Object.values(grouped);\n};\n\nexport const useNotificationRows = (notifications: Array<Notification>, groupBy: GroupByEnum) => {\n\n    const [ notificationRows, setNotificationRows ] = useState<NotificationRows>({\n        data: [],\n        grouped: GroupByEnum.Application\n    });\n    const prevNotificationInput = usePrevious(notifications);\n    const prevGroupBy = usePrevious(groupBy);\n    const { query } = useContext(ClientContext);\n    const [ limit ] = useState<pLimit.Limit>(() => pLimit(MAX_NUMBER_OF_CONCURRENT_REQUESTS));\n\n    const setNotificationRowById = useCallback((id: UUID, partialNotificationRow: Partial<NotificationRowGroupedByNone>) => {\n        setNotificationRows(prev => {\n            if (prev.grouped === GroupByEnum.Application) {\n                const [ appIndex, notificationIndex ] = findNotificationPath(prev.data, id);\n\n                if (appIndex === -1) {\n                    return prev;\n                }\n\n                const newApps: Array<NotificationRowGroupedByApplication> = [ ...prev.data ];\n                newApps[appIndex] = { ...newApps[appIndex], notifications: [ ...newApps[appIndex].notifications ]};\n                newApps[appIndex].notifications[notificationIndex] = {\n                    ...newApps[appIndex].notifications[notificationIndex],\n                    ...partialNotificationRow\n                };\n\n                return {\n                    ...prev,\n                    data: newApps\n                };\n            } else if (prev.grouped === GroupByEnum.None) {\n                const index = prev.data.findIndex(n => n.id === id);\n                if (index === -1) {\n                    return prev;\n                }\n\n                const newNotifications = [ ...prev.data ];\n                newNotifications[index] = { ...newNotifications[index], ...partialNotificationRow };\n                return {\n                    ...prev,\n                    data: newNotifications\n                };\n            } else {\n                assertNever(prev);\n            }\n        });\n    }, [ setNotificationRows ]);\n\n    useEffect(() => {\n        if (notifications !== prevNotificationInput || groupBy !== prevGroupBy) {\n            setNotificationRows(_prev => {\n                switch (groupBy) {\n                    case GroupByEnum.None:\n                        return {\n                            grouped: GroupByEnum.None,\n                            data: notifications.map(toRowsGroupByNone)\n                        };\n                    case GroupByEnum.Application:\n                        return {\n                            grouped: GroupByEnum.Application,\n                            data: toRowGroupByApplication(notifications)\n                        };\n                    default:\n                        assertNever(groupBy);\n                }\n            });\n\n            if (notifications) {\n                limit.clearQueue();\n\n                notifications.map(notification => notification.id).forEach(notificationId => {\n                    limit(() => query(getNotificationActionsByIdAction(notificationId))).then(response => {\n                        if (response.payload && response.payload.status === 200) {\n                            setNotificationRowById(notificationId, {\n                                loadingActionStatus: 'done',\n                                actions: toActions(response.payload.value),\n                                useDefault: usesDefault(response.payload.value)\n                            });\n                        } else {\n                            setNotificationRowById(notificationId, {\n                                loadingActionStatus: 'error',\n                                actions: []\n                            });\n                        }\n                    });\n                });\n            }\n        }\n    }, [ groupBy, prevGroupBy, notifications, prevNotificationInput, limit, query, setNotificationRowById ]);\n\n    const onCollapse = React.useCallback((index: number, isOpen: boolean) => {\n        setNotificationRows(prevRows => {\n            switch (prevRows.grouped) {\n                case GroupByEnum.None:\n                    throw new Error('On collapse is not valid for group: None');\n                case GroupByEnum.Application:\n                    const data = [\n                        ...prevRows.data\n                    ];\n\n                    data[index] = {\n                        ...data[index],\n                        isOpen\n                    };\n\n                    return {\n                        ...prevRows,\n                        data\n                    };\n                default:\n                    assertNever(prevRows);\n            }\n        });\n    }, [ setNotificationRows ]);\n\n    return {\n        rows: notificationRows,\n        onCollapse\n    };\n};\n","import { global_spacer_md } from '@patternfly/react-tokens';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { ExporterType } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { style } from 'typestyle';\n\nimport { AppContext } from '../../../app/AppContext';\nimport { DefaultBehavior } from '../../../components/Notifications/DefaultBehavior';\nimport { NotificationsTable } from '../../../components/Notifications/Table';\nimport { NotificationsToolbar } from '../../../components/Notifications/Toolbar';\nimport { GroupByEnum } from '../../../components/Notifications/Types';\nimport { useDefaultNotificationBehavior } from '../../../services/useDefaultNotificationBehavior';\nimport { useListNotifications } from '../../../services/useListNotifications';\nimport { Facet, Notification } from '../../../types/Notification';\nimport { EditNotificationPage } from '../Form/EditNotificationPage';\nimport {\n    makeEditDefaultAction,\n    makeEditNotificationAction,\n    makeNoneAction,\n    useFormModalReducer\n} from './useFormModalReducer';\nimport { useNotificationFilter } from './useNotificationFilter';\nimport { useNotificationPage } from './useNotificationPage';\nimport { useNotificationRows } from './useNotificationRows';\n\nconst tableTitleClassName = style({\n    fontWeight: 600,\n    paddingTop: global_spacer_md.var,\n    paddingBottom: global_spacer_md.var,\n    fontSize: '17px'\n});\n\nconst emptyArray = [];\n\ninterface BundlePageContentProps {\n    applications: Array<Facet>;\n    bundle: Facet;\n}\n\nexport const BundlePageContent: React.FunctionComponent<BundlePageContentProps> = props => {\n\n    const { rbac: { canWriteNotifications }} = useContext(AppContext);\n    const defaultNotificationBehavior = useDefaultNotificationBehavior();\n\n    const notificationsFilter = useNotificationFilter(props.applications.map(a => a.displayName.toString()));\n    const [ groupBy, setGroupBy ] = React.useState<GroupByEnum>(GroupByEnum.Application);\n    const groupBySelected = React.useCallback((selected: GroupByEnum) => {\n        setGroupBy(selected);\n    }, [ setGroupBy ]);\n\n    const notificationPage = useNotificationPage(notificationsFilter.debouncedFilters, props.bundle, props.applications, 10);\n\n    const useNotifications = useListNotifications(notificationPage.page);\n    const {\n        rows: notificationRows,\n        onCollapse\n    } = useNotificationRows(\n        useNotifications.payload?.type === 'eventTypesArray' ? useNotifications.payload.value : emptyArray,\n        groupBy\n    );\n\n    const [ modalIsOpenState, dispatchModalIsOpen ] = useFormModalReducer();\n\n    const closeFormModal = React.useCallback((saved: boolean) => {\n        const updateDefaultNotifications = defaultNotificationBehavior.query;\n        const updateNotifications = useNotifications.query;\n        if (saved && modalIsOpenState.isOpen) {\n            if (modalIsOpenState.type === 'default') {\n                updateDefaultNotifications();\n            } else if (modalIsOpenState.type === 'notification') {\n                updateNotifications();\n            }\n        }\n\n        dispatchModalIsOpen(makeNoneAction());\n    }, [ dispatchModalIsOpen, defaultNotificationBehavior.query, modalIsOpenState, useNotifications.query ]);\n\n    const onExport = React.useCallback((type: ExporterType) => {\n        console.log('Export to', type);\n    }, []);\n\n    const onEditDefaultAction = React.useCallback(() => {\n        const payload = defaultNotificationBehavior.payload;\n        if (payload?.type === 'DefaultNotificationBehavior') {\n            dispatchModalIsOpen(makeEditDefaultAction(payload.value));\n        }\n    }, [ dispatchModalIsOpen, defaultNotificationBehavior.payload ]);\n\n    const onEditNotification = React.useCallback((notification: Notification) => {\n        dispatchModalIsOpen(makeEditNotificationAction(notification));\n    }, [ dispatchModalIsOpen ]);\n\n    return (\n        <Section>\n            <DefaultBehavior\n                loading={ defaultNotificationBehavior.loading }\n                defaultBehavior={ defaultNotificationBehavior.payload?.type === 'DefaultNotificationBehavior' ?\n                    defaultNotificationBehavior.payload.value :\n                    undefined }\n                onEdit={ canWriteNotifications ? onEditDefaultAction : undefined }\n            />\n            <div className={ tableTitleClassName }>Insights notifications event types and behavior</div>\n            <NotificationsToolbar\n                filters={ notificationsFilter.filters }\n                setFilters={ notificationsFilter.setFilters }\n                clearFilter={ notificationsFilter.clearFilter }\n                appFilterOptions={ props.applications }\n                groupBy={ groupBy }\n                onGroupBySelected={ groupBySelected }\n                onExport={ onExport }\n            >\n                <NotificationsTable\n                    notifications={ notificationRows }\n                    onCollapse={ onCollapse }\n                    onEdit={ canWriteNotifications ? onEditNotification : undefined }\n                />\n            </NotificationsToolbar>\n            { modalIsOpenState.isOpen && (\n                <EditNotificationPage\n                    onClose={ closeFormModal }\n                    { ...modalIsOpenState }\n                />\n            ) }\n        </Section>\n    );\n};\n","import { Button, ButtonVariant, FormGroup, Switch } from '@patternfly/react-core';\nimport { FlaskIcon } from '@patternfly/react-icons';\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport {\n    getInsights,\n    InsightsEnvDetector, RenderIf,\n    RenderIfFalse, RenderIfTrue\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { default as React } from 'react';\nimport { style } from 'typestyle';\n\nimport { Messages } from '../../../properties/Messages';\nimport { stagingAndProd } from '../../../types/Environments';\nimport { Facet } from '../../../types/Notification';\nimport { BundlePageBehaviorGroupContent } from './BundlePageBehaviorGroupContent';\nimport { BundlePageContent } from './BundlePageContent';\n\ninterface NotificationListBundlePageProps {\n    bundle: Facet;\n    applications: Array<Facet>;\n}\n\nconst displayInlineClassName = style({\n    display: 'inline'\n});\n\nexport const NotificationListBundlePage: React.FunctionComponent<NotificationListBundlePageProps> = (props) => {\n\n    const pageHeaderTitleProps = {\n        className: displayInlineClassName,\n        title: Messages.pages.notifications.list.title\n    };\n\n    const [ isUsingBehaviorGroup, setUsingBehaviorGroup ] = React.useState<boolean>(false);\n    const renderIfUsingBehaviorGroupResolver = React.useCallback(() => isUsingBehaviorGroup, [ isUsingBehaviorGroup ]);\n\n    return (\n        <>\n            <PageHeader>\n                <PageHeaderTitle { ...pageHeaderTitleProps } />\n                <InsightsEnvDetector insights={ getInsights() } onEnvironment={ stagingAndProd }>\n                    <RenderIfFalse>\n                        <Button variant={ ButtonVariant.link }>{ Messages.pages.notifications.list.viewHistory }</Button>\n                    </RenderIfFalse>\n                </InsightsEnvDetector>\n                <InsightsEnvDetector insights={ getInsights() } onEnvironment={ stagingAndProd }>\n                    <RenderIfFalse>\n                        <FormGroup fieldId=\"use-behavior-group-check\">\n                            <Switch\n                                id=\"use-behavior-group-check\"\n                                isChecked={ isUsingBehaviorGroup }\n                                label={ <>\n                                    <FlaskIcon />\n                                    <span>Use behavior groups</span>\n                                </> }\n                                onChange={ setUsingBehaviorGroup }\n                            />\n                        </FormGroup>\n                    </RenderIfFalse>\n                </InsightsEnvDetector>\n            </PageHeader>\n            <Main>\n                <RenderIf renderIf={ renderIfUsingBehaviorGroupResolver }>\n                    <RenderIfTrue>\n                        <BundlePageBehaviorGroupContent applications={ props.applications } bundle={ props.bundle } />\n                    </RenderIfTrue>\n                    <RenderIfFalse>\n                        <BundlePageContent applications={ props.applications } bundle={ props.bundle } />\n                    </RenderIfFalse>\n                </RenderIf>\n            </Main>\n        </>\n    );\n};\n","import { AppSkeleton, getInsights } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { defaultBundleName, RedirectToDefaultBundle } from '../../../components/RedirectToDefaultBundle';\nimport { linkTo } from '../../../Routes';\nimport { useGetApplications } from '../../../services/Notifications/GetApplications';\nimport { useGetBundles } from '../../../services/Notifications/GetBundles';\nimport { Facet } from '../../../types/Notification';\nimport { NotificationListBundlePage } from './BundlePage';\n\ninterface NotificationListPageParams {\n    bundleName: string;\n}\n\nenum BundleStatus {\n    LOADING,\n    NOT_FOUND,\n    FAILED_TO_LOAD\n}\n\nconst isBundleStatus = (bundle: Facet | BundleStatus): bundle is BundleStatus => typeof bundle === 'number';\n\nexport const NotificationsListPage: React.FunctionComponent = () => {\n\n    const params = useParams<NotificationListPageParams>();\n    const history = useHistory();\n    const insights = getInsights();\n    const onFunction = insights?.chrome?.on;\n\n    const getBundles = useGetBundles();\n    const getApplications = useGetApplications();\n\n    React.useEffect(() => {\n        if (onFunction) {\n            onFunction('APP_NAVIGATION', (event: any) => {\n                history.push(linkTo.notifications(event.navId));\n            });\n        }\n    }, [ history, onFunction ]);\n\n    const bundle: Facet | BundleStatus = useMemo(() => {\n        if (getBundles.payload?.status === 200) {\n            return getBundles.payload.value.find(b => b.name === params.bundleName) ?? BundleStatus.NOT_FOUND;\n        } else if (getBundles.payload) {\n            return BundleStatus.FAILED_TO_LOAD;\n        }\n\n        return BundleStatus.LOADING;\n    }, [ getBundles.payload, params.bundleName ]);\n\n    React.useEffect(() => {\n        const query = getApplications.query;\n        if (!isBundleStatus(bundle)) {\n            query(bundle.name);\n        }\n    }, [ bundle, getApplications.query ]);\n\n    const applications: Array<Facet> | null | undefined = useMemo(\n        () => {\n            if (getApplications.payload) {\n                return getApplications.payload.status === 200 ? getApplications.payload.value : null;\n            }\n\n            return undefined;\n        },\n        [ getApplications.payload ]\n    );\n\n    if (bundle === BundleStatus.NOT_FOUND) {\n        if (params.bundleName === defaultBundleName) {\n            throw new Error('Default bundle information not found');\n        }\n\n        return <RedirectToDefaultBundle />;\n    }\n\n    if (bundle === BundleStatus.FAILED_TO_LOAD) {\n        throw new Error('Unable to load bundle information');\n    }\n\n    if (applications === null) {\n        throw new Error('Unable to load application facets');\n    }\n\n    if (bundle === BundleStatus.LOADING || !applications) {\n        return (\n            <AppSkeleton />\n        );\n    }\n\n    return (\n        <NotificationListBundlePage\n            bundle={ bundle }\n            applications={ applications }\n        />\n    );\n};\n","import * as React from 'react';\nimport { Route, RouteProps, Switch } from 'react-router';\n\nimport { RedirectToDefaultBundle } from './components/RedirectToDefaultBundle';\nimport { ErrorPage } from './pages/Error/Page';\nimport { IntegrationsListPage } from './pages/Integrations/List/Page';\nimport { NotificationsListPage } from './pages/Notifications/List/Page';\n\ninterface Path {\n    path: string;\n    component: React.ComponentType;\n}\n\nexport const linkTo = {\n    integrations: () => '/integrations',\n    notifications: (bundle: string) => `/notifications/${bundle}`\n};\n\nconst EmptyPage: React.FunctionComponent = () => null;\n\nconst pathRoutes: Path[] = [\n    {\n        path: '/',\n        component: EmptyPage\n    },\n    {\n        path: linkTo.integrations(),\n        component: IntegrationsListPage\n    },\n    {\n        path: linkTo.notifications(':bundleName'),\n        component: NotificationsListPage\n    }\n];\n\ntype InsightsRouteProps = RouteProps;\n\nconst InsightsRoute: React.FunctionComponent<InsightsRouteProps> = (props: InsightsRouteProps) => {\n    return (\n        <ErrorPage>\n            <Route { ...props } />\n        </ErrorPage>\n    );\n};\n\nexport const Routes: React.FunctionComponent = () => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <InsightsRoute\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                    exact={ true }\n                />\n            ))}\n            <RedirectToDefaultBundle />\n        </Switch>\n    );\n};\n","import { Filter, Page, Sort } from '@redhat-cloud-services/insights-common-typescript';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nexport interface UsePageReturn {\n    page: Page;\n    changePage: (page: number) => void;\n    changeItemsPerPage: (perPage: number) => void;\n}\n\nexport type FilterBuilder<T> = (filters: T | undefined) => Filter | undefined;\n\nexport const usePage = <T>(defaultPerPage: number, filterBuilder: FilterBuilder<T>, filters?: T, sort?: Sort): UsePageReturn => {\n    const [ currentPage, setCurrentPage ] = useState(1);\n    const [ itemsPerPage, setItemsPerPage ] = useState(defaultPerPage);\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [ filters, setCurrentPage, itemsPerPage ]);\n\n    const page = useMemo(() => {\n        const filter = filterBuilder ? filterBuilder(filters) : undefined;\n        return Page.of(currentPage, itemsPerPage, filter, sort);\n    }, [ currentPage, itemsPerPage, filters, sort, filterBuilder ]);\n\n    const changePage = useCallback((page: number) => {\n        setCurrentPage(page);\n    },  [ setCurrentPage ]);\n\n    const changeItemsPerPage = useCallback((perPage: number) => {\n        setItemsPerPage(perPage);\n    }, [ setItemsPerPage ]);\n\n    return {\n        page,\n        changePage,\n        changeItemsPerPage\n    };\n};\n","import { Exporter, ExporterType } from '@redhat-cloud-services/insights-common-typescript';\nimport { assertNever } from 'assert-never';\n\nimport { UserIntegration } from '../../../types/Integration';\nimport { IntegrationExporterCsv } from './Csv';\nimport { IntegrationExporterJson } from './Json';\n\nexport const integrationExporterFactory = (type: ExporterType): Exporter<UserIntegration> => {\n    switch (type) {\n        case ExporterType.CSV:\n            return new IntegrationExporterCsv();\n        case ExporterType.JSON:\n            return new IntegrationExporterJson();\n    }\n\n    assertNever(type);\n};\n","import { useCallback } from 'react';\n\nimport { IntegrationRow, OnEnable } from '../../../components/Integrations/Table';\nimport { UserIntegration } from '../../../types/Integration';\n\ninterface ActionResolverParams {\n    onEdit: (integration: UserIntegration) => void;\n    onDelete: (integration: UserIntegration) => void;\n    canWrite: boolean;\n    onEnable: OnEnable;\n}\n\nexport const useActionResolver = (params: ActionResolverParams) => {\n\n    return useCallback((integration: IntegrationRow, index: number) => {\n        const onEdit = params.onEdit;\n        const onDelete = params.onDelete;\n        const onEnable = params.onEnable;\n\n        const isDisabled = !params.canWrite;\n\n        return [\n            {\n                title: 'Edit',\n                isDisabled,\n                onClick: () => onEdit(integration)\n            }, {\n                title: 'Remove',\n                isDisabled,\n                onClick: () => onDelete(integration)\n            }, {\n                title: integration.isEnabled ? 'Disable' : 'Enable',\n                isDisabled,\n                onClick: () => onEnable(integration, index, !integration.isEnabled)\n            }\n        ];\n\n    }, [ params.onEdit, params.onDelete, params.canWrite, params.onEnable ]);\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const getBundlesAction = () => Operations.NotificationServiceGetBundleFacets.actionCreator();\n\nexport const useGetBundles = () => useQuery(getBundlesAction());\n","import { fetchRBAC, Rbac, waitForInsights } from '@redhat-cloud-services/insights-common-typescript';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Config from '../config/Config';\nimport { AppContext } from './AppContext';\n\nexport const useApp = (): Omit<AppContext, 'rbac'> & Partial<Pick<AppContext, 'rbac'>> => {\n\n    const history = useHistory();\n    const [ rbac, setRbac ] = useState<Rbac | undefined>(undefined);\n\n    useEffect(() => {\n        waitForInsights().then((insights) => {\n            insights.chrome.init();\n            const appId = insights.chrome.getApp();\n            switch (appId) {\n                case Config.notifications.subAppId:\n                    document.title = Config.notifications.title;\n                    break;\n                case Config.integrations.subAppId:\n                    document.title = Config.integrations.title;\n                    break;\n            }\n\n            insights.chrome.identifyApp(appId);\n        });\n    }, [ history ]);\n\n    useEffect(() => {\n        waitForInsights().then(insights => {\n            insights.chrome.auth.getUser().then(() => {\n                fetchRBAC(`${Config.notifications.subAppId},${Config.integrations.subAppId}`).then(setRbac);\n            });\n        });\n    }, []);\n\n    return {\n        rbac: rbac ? {\n            canWriteNotifications: rbac.hasPermission('notifications', 'notifications', 'write'),\n            canReadNotifications: rbac.hasPermission('notifications', 'notifications', 'read'),\n            canWriteIntegrationsEndpoints: rbac.hasPermission('integrations', 'endpoints', 'write'),\n            canReadIntegrationsEndpoints: rbac.hasPermission('integrations', 'endpoints', 'read')\n        } : undefined\n    };\n};\n","import './App.scss';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications';\nimport { AppSkeleton } from '@redhat-cloud-services/insights-common-typescript';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\n\nimport Config from '../config/Config';\nimport messages from '../properties/DefinedMessages';\nimport { Routes } from '../Routes';\nimport { getSubApp } from '../utils/Basename';\nimport { AppContext } from './AppContext';\nimport { useApp } from './useApp';\n\nconst App: React.ComponentType = () => {\n    const intl = useIntl();\n    const { rbac } = useApp();\n    const location = useLocation();\n\n    const serviceName = React.useMemo(() => {\n        switch (getSubApp(location.pathname)) {\n            case Config.integrations.subAppId:\n                return intl.formatMessage(messages.integrations);\n            case Config.notifications.subAppId:\n                return intl.formatMessage(messages.notifications);\n            default:\n                return '';\n        }\n    }, [ intl, location.pathname ]);\n\n    const hasReadPermissions = React.useMemo(() => {\n        const appId = getSubApp(location.pathname);\n        switch (appId) {\n            case Config.integrations.subAppId:\n                return rbac?.canReadIntegrationsEndpoints;\n            case Config.notifications.subAppId:\n                return rbac?.canReadNotifications;\n        }\n\n        return false;\n    }, [ rbac, location.pathname ]);\n\n    if (!rbac) {\n        return (\n            <AppSkeleton />\n        );\n    }\n\n    return (\n        <AppContext.Provider value={ {\n            rbac\n        } }>\n            { hasReadPermissions ? (\n                <>\n                    <NotificationsPortal />\n                    <Routes />\n                </>\n            ) : (\n                <NotAuthorized serviceName={ serviceName } />\n            ) }\n        </AppContext.Provider>\n    );\n};\n\nexport default App;\n","import { getType } from 'typesafe-actions';\n\nimport { NotificationAppAction } from '../actions/NotificationAppAction';\nimport { SavedNotificationScopeActions } from '../actions/SavedNotificationScopeAction';\nimport { SavedNotificationScopeState, Status } from '../types/SavedNotificationScopeTypes';\n\nexport const INITIAL_STATE: SavedNotificationScopeState = null;\n\nexport const SavedNotificationScopeReducer = (\n    state: SavedNotificationScopeState = INITIAL_STATE,\n    action: NotificationAppAction): SavedNotificationScopeState => {\n    switch (action.type) {\n        case getType(SavedNotificationScopeActions.setIntegration):\n            return {\n                integration: action.payload,\n                status: Status.DONE\n            };\n        case getType(SavedNotificationScopeActions.start):\n            if (!state) {\n                return state;\n            }\n\n            return {\n                ...state,\n                status: Status.LOADING\n            };\n        case getType(SavedNotificationScopeActions.finish):\n            if (!state) {\n                return state;\n            }\n\n            return {\n                integration: { ...state.integration, isEnabled: action.payload },\n                status: Status.DONE\n            };\n        case getType(SavedNotificationScopeActions.unset):\n            return null;\n        default:\n            return state;\n    }\n};\n","import { initStore, restoreStore } from '@redhat-cloud-services/insights-common-typescript';\nimport { Middleware } from 'redux';\n\nimport { INITIAL_STATE as SNS_INITIAL_STATE, SavedNotificationScopeReducer } from './reducers/SavedNotificationScopeReducer';\nimport { NotificationAppState } from './types/NotificationAppState';\n\nexport const createStore = (...middleware: Middleware[]) => {\n    return initStore(\n        {\n            savedNotificationScope: SNS_INITIAL_STATE\n        } as NotificationAppState,\n        {\n            savedNotificationScope: SavedNotificationScopeReducer\n        },\n        ...middleware);\n};\n\nexport const resetStore = () => restoreStore();\n","import { ActionType, createAction } from 'typesafe-actions';\n\nimport { IntegrationRef } from '../../types/Notification';\n\nexport enum SavedNotificationScopeKeys {\n    SET_INTEGRATION = 'SET_INTEGRATION',\n    START = 'START',\n    FINISH = 'FINISH',\n    UNSET = 'UNSET'\n}\n\nexport const SavedNotificationScopeActions = {\n    setIntegration: createAction(SavedNotificationScopeKeys.SET_INTEGRATION)<IntegrationRef>(),\n    start: createAction(SavedNotificationScopeKeys.START)(),\n    finish: createAction(SavedNotificationScopeKeys.FINISH)<boolean>(),\n    unset: createAction(SavedNotificationScopeKeys.UNSET)()\n};\n\nexport type SavedNotificationScopeAction = ActionType<typeof SavedNotificationScopeActions>;\n","import { IntegrationRef } from '../../types/Notification';\n\nexport enum Status {\n    LOADING,\n    DONE\n}\n\nexport type SavedNotificationScopeState = {\n    integration: IntegrationRef;\n    status: Status;\n} | null;\n","// This is a custom getBaseName that doesn't add the appId\n// The reason is that this 'app' is in 2 menus (integrations and notifications), so is easier to just add that into our\n// paths for easier navigation.\nexport const getBaseName = (pathname: string) => {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n};\n\nexport const getSubApp = (pathname: string) => {\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        return pathName[1];\n    }\n\n    return pathName[0];\n};\n"],"sourceRoot":""}
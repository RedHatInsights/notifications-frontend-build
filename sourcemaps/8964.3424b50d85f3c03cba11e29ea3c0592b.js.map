{"version":3,"file":"js/8964.99544e70a5cd788eb7f4.js","mappings":"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","sources":["webpack:///./src/AppEntry.tsx","webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts"],"sourcesContent":["import { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport {\n    createFetchingClient,\n    getInsights\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\nimport * as Redux from 'redux';\n\nimport messages from '../locales/data.json';\nimport App from './app/App';\nimport { getNotificationsRegistry } from './store/Store';\n\nexport interface AppEntryProps {\n    logger?: Redux.Middleware;\n}\n\nenableMapSet();\n\nconst AppEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n\n    const client = React.useMemo(() => createFetchingClient(getInsights, {\n        responseInterceptors: [ validateSchemaResponseInterceptor ]\n    }), []);\n\n    const store = React.useMemo(() => {\n        const registry = props.logger ? getNotificationsRegistry(props.logger) : getNotificationsRegistry();\n        return registry.getStore();\n    }, [ props.logger ]);\n\n    return (\n        <IntlProvider locale={ navigator.language.slice(0, 2) } messages={ messages } onError={ console.log }>\n            <Provider store={ store }>\n                <ClientContextProvider client={ client }>\n                    <App />\n                </ClientContextProvider>\n            </Provider>\n        </IntlProvider>\n    );\n};\n\nexport default AppEntry;\n","import {\n    Button,\n    Dropdown,\n    DropdownItem,\n    DropdownToggle,\n    HelperText,\n    HelperTextItem,\n    Modal,\n    ModalVariant,\n    Radio,\n    Skeleton,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Text,\n    TextVariants,\n    TimePicker,\n    Title\n} from '@patternfly/react-core';\nimport { OutlinedClockIcon } from '@patternfly/react-icons';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useGetTimePreference } from '../../services/Notifications/GetTimePreference';\nimport { useUpdateTimePreference } from '../../services/Notifications/SaveTimePreference';\nimport { useNotification } from '../../utils/AlertUtils';\n\nconst dropDownClassName = style({\n    width: '280px'\n});\n\nconst dropDownPaddingClassName = style({\n    paddingLeft: global_spacer_lg.value\n});\n\nconst modalClass = style({\n    paddingLeft: '36px'\n});\n\ninterface TimeConfigState {\n    utcTime: string;\n    baseCustomTime: string;\n    timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n\n    const [ showCustomSelect, setShowCustomSelect ] = React.useState(false);\n    const [ timeSelect, setTimeSelect ] = React.useState<TimeConfigState>();\n    const [ isModalOpen, setIsModalOpen ] = useState(false);\n\n    const getTimePreference = useGetTimePreference();\n    const saveTimePreference = useUpdateTimePreference();\n    const { addSuccessNotification, addDangerNotification } = useNotification();\n\n    const timePref = useMemo(() => {\n        if (getTimePreference.status === 200) {\n            return getTimePreference.payload?.value as string;\n        }\n\n        return undefined;\n\n    }, [ getTimePreference.payload?.value, getTimePreference.status ]);\n\n    // Set the time preference value once we load it from the server\n    useEffect(() => {\n        if (timePref) {\n            setTimeSelect({\n                baseCustomTime: timePref,\n                utcTime: timePref,\n                timezoneText: undefined\n            });\n            setShowCustomSelect(timePref !== '00:00:00');\n        }\n    }, [ timePref ]);\n\n    const handleRadioSelect = React.useCallback(() => {\n        setShowCustomSelect(false);\n        setTimeSelect({\n            utcTime: '00:00',\n            baseCustomTime: '00:00',\n            timezoneText: undefined\n        });\n    }, []);\n\n    const [ isOpen, setIsOpen ] = React.useState(false);\n\n    const dropdownItems = timezones.map((tz) =>\n        // Abbr, value, offset, etc are not unique by themselves\n        <DropdownItem key={ tz.text }>{ tz.text }</DropdownItem>);\n\n    const handleCustomRadioSelect = React.useCallback(() => {\n        setShowCustomSelect(true);\n    }, []);\n\n    const handleTimePrefSelect = React.useCallback((time) => {\n        setTimeSelect({\n            baseCustomTime: time,\n            utcTime: time,\n            timezoneText: undefined\n        });\n    }, []);\n\n    const handleTimezoneChange = React.useCallback((event?: React.SyntheticEvent<HTMLDivElement>) => {\n        if (event?.target) {\n            const target = event.target;\n            const textContent = (target as HTMLElement).textContent;\n            const targetTimezone = timezones.find(t => t.text === textContent);\n            if (targetTimezone) {\n                setTimeSelect(prev => {\n                    if (prev?.baseCustomTime) {\n                        const pieces = prev.baseCustomTime.split(':').map(t => parseInt(t));\n                        const date = new Date();\n                        date.setUTCHours(pieces[0], pieces[1]);\n                        // Going from UTC to the timezone\n                        const zonedDate = addHours(date, -targetTimezone.offset);\n                        const utcHours = zonedDate.getUTCHours().toString().padStart(2, '0');\n                        const utcMinutes = zonedDate.getUTCMinutes().toString().padStart(2, '0');\n\n                        return {\n                            ...prev,\n                            utcTime: `${utcHours}:${utcMinutes}`,\n                            timezoneText: targetTimezone.text\n                        };\n                    }\n\n                    return prev;\n                });\n            }\n        }\n\n        setIsOpen(false);\n    }, [ ]);\n\n    const handleButtonSave = React.useCallback(() => {\n        if (timeSelect) {\n            const mutate = saveTimePreference.mutate;\n            mutate({\n                body: timeSelect.utcTime\n            }).then((response) => {\n                if (response.status === 204) {\n                    addSuccessNotification('Action settings saved', '');\n                } else {\n                    addDangerNotification('Failed to save action settings', '');\n                }\n            });\n        }\n\n        setIsModalOpen(false);\n\n    }, [ addDangerNotification, addSuccessNotification, saveTimePreference.mutate, timeSelect ]);\n\n    const isLoading = saveTimePreference.loading || getTimePreference.loading;\n\n    const handleModalToggle = () => {\n        setIsModalOpen(!isModalOpen);\n    };\n\n    return (\n        <>\n            <p>\n                <OutlinedClockIcon color='var(--pf-v5-global--palette--cyan-200)' />\n                &nbsp;{`Any daily digest emails you've opted into will be sent at ${timePref ? timePref : '00:00'} UTC`}\n            </p>\n            <Button variant=\"link\" onClick={ handleModalToggle } ouiaId=\"TimeConfigModal\">\n                Edit time settings\n            </Button>\n            <Modal\n                className={ modalClass }\n                variant={ ModalVariant.small }\n                isOpen={ isModalOpen }\n                onClose={ handleModalToggle }\n                actions={ [\n                    <Button key=\"save\" variant='primary' type='submit' isLoading={ isLoading }\n                        isDisabled={ isLoading } onClick={ handleButtonSave }>\n                        { isLoading ? 'Loading' : 'Save' }\n                    </Button>,\n                    <Button\n                        key=\"cancel\" variant=\"link\" onClick={ handleModalToggle }>\n                Cancel\n                    </Button>\n                ] }\n                ouiaId=\"TimeConfigModal\"\n            >\n                <Stack hasGutter>\n                    <StackItem>\n                        <Title headingLevel='h2'>Action settings</Title>\n                    </StackItem>\n                    <StackItem>\n                        <Text component={ TextVariants.p }>Daily digest email receipt</Text>\n                        <HelperText>\n                            <HelperTextItem variant=\"indeterminate\">\n                            Schedule the time at which to send your account&apos;s daily digest email.\n                            All times will be converted to UTC after saving.\n                            </HelperTextItem>\n                        </HelperText>\n                    </StackItem>\n                </Stack>\n                <br></br>\n                <Split>\n                    <SplitItem isFilled>\n                        <Stack hasGutter>\n                            <StackItem>\n                                { getTimePreference.loading ? <Skeleton /> :\n                                    <Radio\n                                        isChecked={ !showCustomSelect }\n                                        onChange={ handleRadioSelect }\n                                        id='settings-time-config'\n                                        label='Default time'\n                                        value=\"Default\"\n                                        description='00:00 UTC'\n                                        name='radio-select'>\n                                    </Radio>\n                                }\n                            </StackItem>\n                            <StackItem>\n                                { getTimePreference.loading ? <Skeleton /> :\n                                    <Radio\n                                        isChecked={ showCustomSelect }\n                                        onChange={ handleCustomRadioSelect }\n                                        id='settings-time-config-custom'\n                                        label='Custom time'\n                                        name='radio-select'>\n                                    </Radio>\n                                }\n                            </StackItem>\n                            {showCustomSelect && (\n                                <><StackItem className={ dropDownPaddingClassName }>\n                                    <Text component={ TextVariants.h6 }>Time</Text>\n                                    <TimePicker onChange={ handleTimePrefSelect } time={ timeSelect?.baseCustomTime }\n                                        width='263px' stepMinutes={ 15 } placeholder='00:00' is24Hour />\n                                </StackItem>\n                                <StackItem className={ dropDownPaddingClassName }>\n                                    <Text component={ TextVariants.h6 }>Time zone</Text>\n                                    <Dropdown\n                                        className={ dropDownClassName }\n                                        toggle={ <DropdownToggle isOpen={ isOpen } id=\"timezone\" onToggle={ () => setIsOpen(!isOpen) }>\n                                            { timeSelect?.timezoneText ?? '(UTC-00:00) Universal Time' }\n                                        </DropdownToggle> }\n                                        isOpen={ isOpen }\n                                        onSelect={ handleTimezoneChange }\n                                        menuAppendTo={ () => document.body }\n                                        dropdownItems={ dropdownItems }>\n                                    </Dropdown>\n                                </StackItem></>)}\n                        </Stack>\n                    </SplitItem>\n                </Split>\n            </Modal>\n        </>\n    );\n\n};\n\nexport default TimeConfigComponent;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n    id: UUID;\n    applicationDisplayName: string;\n    eventTypeDisplayName: string;\n}\n\nexport interface Notification extends EventType {\n    actions?: Array<Action>;\n    useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n    readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<UserIntegration, 'id' | 'name' | 'type' | 'isEnabled'>\n\nexport interface DefaultNotificationBehavior {\n    actions: Array<Action>;\n}\n\nexport interface ActionBase {\n    type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n    type: NotificationType.INTEGRATION;\n    integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n    type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n    recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n    action.type === NotificationType.EMAIL_SUBSCRIPTION || action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (action: Action): action is ActionIntegration =>\n    action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n    EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n    DRAWER = 'DRAWER',\n    INTEGRATION = 'INTEGRATION'\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n    readonly id: UUID;\n    readonly actions: ReadonlyArray<Action>;\n    readonly events: ReadonlyArray<EventType>;\n    readonly bundleId: UUID,\n    readonly displayName: string;\n    readonly bundleName?: string;\n    readonly isDefault: boolean;\n}\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> & Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<BehaviorGroup | NewBehaviorGroup, 'isDefault'>;\n\nexport type EmailSystemProperties = {\n    type: NotificationType.EMAIL_SUBSCRIPTION;\n    props: {\n        onlyAdmins: boolean;\n        ignorePreferences: false;\n        groupId: undefined | UUID;\n    }\n}\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n    props: {\n        onlyAdmins: boolean;\n        groupId: undefined | UUID;\n        ignorePreferences: false;\n    }\n}\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(properties: SystemProperties): properties is EmailSystemProperties {\n    return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(properties: SystemProperties): properties is DrawerSystemProperties {\n    return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (actions: ReadonlyArray<Action | undefined>): Array<UUID | undefined> => {\n    return actions.map(action => {\n        if (action === undefined) {\n            return [ undefined ];\n        }\n\n        if (action.type === NotificationType.INTEGRATION) {\n            return [ action.integration.id ];\n        } else {\n            return action.recipient.map(r => r.integrationId);\n        }\n    }).flat();\n};\n\nexport const areActionsEqual = (actions1: ReadonlyArray<Action | undefined>, actions2: ReadonlyArray<Action | undefined>): boolean => {\n    if (actions1.length !== actions2.length) {\n        return false;\n    }\n\n    const integrations1 = getIntegrationIds(actions1);\n    const integrations2 = getIntegrationIds(actions2);\n\n    if (integrations1.length !== integrations2.length) {\n        return false;\n    }\n\n    // Order matters here, no sorting.\n    return integrations1.every((val, index) => val === integrations2[index]);\n};\n\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n    CamelIntegrationType,\n    Integration,\n    IntegrationAnsible,\n    IntegrationBase,\n    IntegrationCamel,\n    IntegrationDrawer,\n    IntegrationEmailSubscription,\n    IntegrationHttp,\n    IntegrationType, isCamelType,\n    NewIntegration,\n    ServerIntegrationRequest,\n    ServerIntegrationResponse\n} from '../Integration';\n\ninterface ExternalCompositeTyped {\n    type: string;\n    sub_type?: string | null;\n}\n\nexport const getIntegrationType = (serverIntegration: ExternalCompositeTyped): IntegrationType => {\n    for (const integration of Object.values(IntegrationType)) {\n        if (serverIntegration.sub_type) {\n            if (integration === `${serverIntegration.type}:${serverIntegration.sub_type}`) {\n                return integration as IntegrationType;\n            }\n        } else if (integration === serverIntegration.type) {\n            return integration as IntegrationType;\n        }\n    }\n\n    throw new Error(`Unexpected type: ${serverIntegration.type} with subtype: ${serverIntegration.sub_type}`);\n};\n\nconst getEndpointType = (type: IntegrationType): { type: Schemas.EndpointType, subType?: string } => {\n    const splitType = type.split(':', 2);\n    return {\n        type: splitType[0] as Schemas.EndpointType,\n        subType: splitType.length === 2 ? splitType[1] : undefined\n    };\n};\n\ntype NotNullType = {\n    <T>(value: T | undefined | null): T | undefined;\n    <T>(value: T | undefined | null, defaultValue: T): T;\n}\n\nconst notNull: NotNullType = <T>(value: T | undefined | null, defaultValue?: T): T | undefined => value === null ? defaultValue : value;\nconst toSecretToken = (secretToken: string | undefined | null): string | undefined => secretToken === '' ? undefined : notNull(secretToken);\n\nconst toIntegrationWebhook = (\n    integrationBase: IntegrationBase<IntegrationType.WEBHOOK>,\n    properties?: Schemas.WebhookProperties): IntegrationHttp => ({\n    ...integrationBase,\n    url: properties?.url ?? '',\n    sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n    secretToken: toSecretToken(properties?.secret_token),\n    method: properties?.method ?? Schemas.HttpType.Enum.GET\n});\n\nconst toIntegrationAnsible = (\n    integrationBase: IntegrationBase<IntegrationType.ANSIBLE>,\n    properties?: Schemas.WebhookProperties): IntegrationAnsible => ({\n    ...integrationBase,\n    url: properties?.url ?? '',\n    sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n    secretToken: toSecretToken(properties?.secret_token),\n    method: properties?.method ?? Schemas.HttpType.Enum.POST\n});\n\nconst toIntegrationCamel = (\n    integrationBase: IntegrationBase<CamelIntegrationType>,\n    properties?: Schemas.CamelProperties): IntegrationCamel => ({\n    ...integrationBase,\n    url: properties?.url ?? '',\n    sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n    secretToken: toSecretToken(properties?.secret_token),\n    basicAuth: properties?.basic_authentication === null ?\n        undefined\n        :\n        {\n            user: notNull(properties?.basic_authentication?.username, ''),\n            pass: notNull(properties?.basic_authentication?.password, '')\n        },\n    extras: notNull(properties?.extras)\n});\n\nconst toIntegrationEmail = (\n    integrationBase: IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n    properties: Schemas.EmailSubscriptionProperties): IntegrationEmailSubscription => ({\n    ...integrationBase,\n    ignorePreferences: properties.ignore_preferences,\n    groupId: properties.group_id === null ? undefined : properties.group_id,\n    onlyAdmin: properties.only_admins\n});\n\nconst toIntegrationDrawer = (\n    integrationBase: IntegrationBase<IntegrationType.DRAWER>, properties: Schemas.DrawerProperties): IntegrationDrawer => ({\n    ...integrationBase,\n    ignorePreferences: properties.ignore_preferences,\n    groupId: properties.group_id === null ? undefined : properties.group_id,\n    onlyAdmin: properties.only_admins\n});\n\nexport const toIntegration = (serverIntegration: ServerIntegrationResponse): Integration => {\n\n    const integrationBase: IntegrationBase<IntegrationType> = {\n        id: serverIntegration.id || '',\n        name: serverIntegration.name || '',\n        isEnabled: !!serverIntegration.enabled,\n        type: getIntegrationType(serverIntegration),\n        status: serverIntegration.status ?? 'UNKNOWN',\n        serverErrors: serverIntegration.server_errors ?? 0\n    };\n\n    if (isCamelType(integrationBase.type)) {\n        return toIntegrationCamel(\n            integrationBase as IntegrationBase<CamelIntegrationType>,\n            serverIntegration.properties as Schemas.CamelProperties\n        );\n    }\n\n    switch (integrationBase.type) {\n        case IntegrationType.WEBHOOK:\n            return toIntegrationWebhook(\n                integrationBase as IntegrationBase<IntegrationType.WEBHOOK>,\n                serverIntegration.properties as Schemas.WebhookProperties\n            );\n        case IntegrationType.ANSIBLE:\n            return toIntegrationAnsible(\n                integrationBase as IntegrationBase<IntegrationType.ANSIBLE>,\n                serverIntegration.properties as Schemas.WebhookProperties\n            );\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            return toIntegrationEmail(\n                integrationBase as IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n                serverIntegration.properties as Schemas.EmailSubscriptionProperties\n            );\n        case IntegrationType.DRAWER:\n            return toIntegrationDrawer(\n                  integrationBase as IntegrationBase<IntegrationType.DRAWER>,\n                  serverIntegration.properties as Schemas.DrawerProperties\n            );\n        default:\n            assertNever(integrationBase.type);\n    }\n};\n\nexport const toIntegrations = (serverIntegrations: Array<ServerIntegrationResponse>): Array<Integration> => {\n    return serverIntegrations\n    .map(toIntegration);\n};\n\ntype ServerIntegrationProperties =\n  Schemas.EmailSubscriptionProperties |\n  Schemas.WebhookProperties |\n  Schemas.CamelProperties |\n  Schemas.DrawerProperties;\n\nexport const toIntegrationProperties = (integration: Integration | NewIntegration): ServerIntegrationProperties => {\n\n    const type = integration.type;\n\n    if (isCamelType(type)) {\n        const integrationCamel: IntegrationCamel = integration as IntegrationCamel;\n        return {\n            url: integrationCamel.url,\n            disable_ssl_verification: !integrationCamel.sslVerificationEnabled,\n            secret_token: toSecretToken(integrationCamel.secretToken),\n            basic_authentication: integrationCamel.basicAuth ? {\n                username: integrationCamel.basicAuth.user,\n                password: integrationCamel.basicAuth.pass\n            } : undefined,\n            extras: integrationCamel.extras\n        };\n    }\n\n    switch (type) {\n        case IntegrationType.WEBHOOK:\n            const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n            return {\n                url: integrationHttp.url,\n                method: integrationHttp.method,\n                disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n                secret_token: toSecretToken(integrationHttp.secretToken)\n            };\n        case IntegrationType.ANSIBLE:\n            const integrationAnsible = integration as IntegrationAnsible;\n            return {\n                url: integrationAnsible.url,\n                disable_ssl_verification: !integrationAnsible.sslVerificationEnabled,\n                secret_token: toSecretToken(integrationAnsible.secretToken),\n                method: integrationAnsible.method\n            };\n        case IntegrationType.EMAIL_SUBSCRIPTION:\n            const integrationEmail: IntegrationEmailSubscription = integration as IntegrationEmailSubscription;\n            return {\n                only_admins: integrationEmail.onlyAdmin,\n                group_id: integrationEmail.groupId,\n                ignore_preferences: integrationEmail.ignorePreferences\n            };\n        case IntegrationType.DRAWER:\n            const integrationDrawer: IntegrationDrawer = integration as IntegrationDrawer;\n            return {\n                only_admins: integrationDrawer.onlyAdmin,\n                group_id: integrationDrawer.groupId,\n                ignore_preferences: integrationDrawer.ignorePreferences\n            };\n        default:\n            assertNever(type);\n    }\n};\n\nexport const toServerIntegrationRequest =\n    (integration: Integration | NewIntegration): ServerIntegrationRequest => {\n        const { type, subType } = getEndpointType(integration.type);\n        return {\n            id: integration.id,\n            name: integration.name,\n            enabled: integration.isEnabled,\n            type,\n            sub_type: subType,\n            description: '',\n            properties: toIntegrationProperties(integration)\n        };\n    };\n"],"names":["props","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","Provider","ClientContextProvider","dropDownClassName","style","width","dropDownPaddingClassName","paddingLeft","modalClass","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","getTimePreference","saveTimePreference","addSuccessNotification","addDangerNotification","timePref","useMemo","status","payload","value","useEffect","baseCustomTime","utcTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","dropdownItems","tz","DropdownItem","key","text","handleCustomRadioSelect","handleTimePrefSelect","time","handleTimezoneChange","event","target","textContent","targetTimezone","t","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","mutate","body","then","response","isLoading","loading","handleModalToggle","OutlinedClockIcon","color","Button","variant","onClick","ouiaId","Modal","className","ModalVariant","onClose","actions","type","isDisabled","Stack","hasGutter","StackItem","Title","headingLevel","Text","component","TextVariants","HelperText","HelperTextItem","Split","SplitItem","isFilled","Skeleton","Radio","isChecked","onChange","id","label","description","name","TimePicker","stepMinutes","placeholder","is24Hour","Dropdown","toggle","DropdownToggle","onToggle","onSelect","menuAppendTo","document","isActionNotify","action","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","properties","isDrawerSystemProperties","getIntegrationIds","integration","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","getIntegrationType","serverIntegration","Object","values","sub_type","Error","notNull","defaultValue","toSecretToken","secretToken","toIntegration","integrationBase","isEnabled","enabled","serverErrors","server_errors","url","sslVerificationEnabled","disable_ssl_verification","secret_token","basicAuth","basic_authentication","user","username","pass","password","extras","toIntegrationCamel","method","toIntegrationWebhook","toIntegrationAnsible","ignorePreferences","ignore_preferences","groupId","group_id","onlyAdmin","only_admins","toIntegrationDrawer","toIntegrations","serverIntegrations","toIntegrationProperties","integrationCamel","integrationHttp","integrationAnsible","integrationEmail","integrationDrawer","toServerIntegrationRequest","subType","splitType","getEndpointType"],"sourceRoot":""}
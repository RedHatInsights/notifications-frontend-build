{"version":3,"file":"js/1654.378a5a849ccbbaacd117.js","mappings":"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","sources":["webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/services/Notifications/GetTimePreference.ts","webpack:///./src/services/Notifications/SaveTimePreference.ts","webpack:///./src/utils/AlertUtils.ts"],"sourcesContent":["import {\n    Button,\n    Dropdown,\n    DropdownItem,\n    DropdownToggle,\n    HelperText,\n    HelperTextItem,\n    Modal,\n    ModalVariant,\n    Radio,\n    Skeleton,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Text,\n    TextVariants,\n    TimePicker,\n    Title\n} from '@patternfly/react-core';\nimport { OutlinedClockIcon } from '@patternfly/react-icons';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useGetTimePreference } from '../../services/Notifications/GetTimePreference';\nimport { useUpdateTimePreference } from '../../services/Notifications/SaveTimePreference';\nimport { useNotification } from '../../utils/AlertUtils';\n\nconst dropDownClassName = style({\n    width: '280px'\n});\n\nconst dropDownPaddingClassName = style({\n    paddingLeft: global_spacer_lg.value\n});\n\nconst modalClass = style({\n    paddingLeft: '36px'\n});\n\ninterface TimeConfigState {\n    utcTime: string;\n    baseCustomTime: string;\n    timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n\n    const [ showCustomSelect, setShowCustomSelect ] = React.useState(false);\n    const [ timeSelect, setTimeSelect ] = React.useState<TimeConfigState>();\n    const [ isModalOpen, setIsModalOpen ] = useState(false);\n\n    const getTimePreference = useGetTimePreference();\n    const saveTimePreference = useUpdateTimePreference();\n    const { addSuccessNotification, addDangerNotification } = useNotification();\n\n    const timePref = useMemo(() => {\n        if (getTimePreference.status === 200) {\n            return getTimePreference.payload?.value as string;\n        }\n\n        return undefined;\n\n    }, [ getTimePreference.payload?.value, getTimePreference.status ]);\n\n    // Set the time preference value once we load it from the server\n    useEffect(() => {\n        if (timePref) {\n            setTimeSelect({\n                baseCustomTime: timePref,\n                utcTime: timePref,\n                timezoneText: undefined\n            });\n            setShowCustomSelect(timePref !== '00:00:00');\n        }\n    }, [ timePref ]);\n\n    const handleRadioSelect = React.useCallback(() => {\n        setShowCustomSelect(false);\n        setTimeSelect({\n            utcTime: '00:00',\n            baseCustomTime: '00:00',\n            timezoneText: undefined\n        });\n    }, []);\n\n    const [ isOpen, setIsOpen ] = React.useState(false);\n\n    const dropdownItems = timezones.map((tz) =>\n        // Abbr, value, offset, etc are not unique by themselves\n        <DropdownItem key={ tz.text }>{ tz.text }</DropdownItem>);\n\n    const handleCustomRadioSelect = React.useCallback(() => {\n        setShowCustomSelect(true);\n    }, []);\n\n    const handleTimePrefSelect = React.useCallback((time) => {\n        setTimeSelect({\n            baseCustomTime: time,\n            utcTime: time,\n            timezoneText: undefined\n        });\n    }, []);\n\n    const handleTimezoneChange = React.useCallback((event?: React.SyntheticEvent<HTMLDivElement>) => {\n        if (event?.target) {\n            const target = event.target;\n            const textContent = (target as HTMLElement).textContent;\n            const targetTimezone = timezones.find(t => t.text === textContent);\n            if (targetTimezone) {\n                setTimeSelect(prev => {\n                    if (prev?.baseCustomTime) {\n                        const pieces = prev.baseCustomTime.split(':').map(t => parseInt(t));\n                        const date = new Date();\n                        date.setUTCHours(pieces[0], pieces[1]);\n                        // Going from UTC to the timezone\n                        const zonedDate = addHours(date, -targetTimezone.offset);\n                        const utcHours = zonedDate.getUTCHours().toString().padStart(2, '0');\n                        const utcMinutes = zonedDate.getUTCMinutes().toString().padStart(2, '0');\n\n                        return {\n                            ...prev,\n                            utcTime: `${utcHours}:${utcMinutes}`,\n                            timezoneText: targetTimezone.text\n                        };\n                    }\n\n                    return prev;\n                });\n            }\n        }\n\n        setIsOpen(false);\n    }, [ ]);\n\n    const handleButtonSave = React.useCallback(() => {\n        if (timeSelect) {\n            const mutate = saveTimePreference.mutate;\n            mutate({\n                body: timeSelect.utcTime\n            }).then((response) => {\n                if (response.status === 204) {\n                    addSuccessNotification('Action settings saved', '');\n                } else {\n                    addDangerNotification('Failed to save action settings', '');\n                }\n            });\n        }\n\n        setIsModalOpen(false);\n\n    }, [ addDangerNotification, addSuccessNotification, saveTimePreference.mutate, timeSelect ]);\n\n    const isLoading = saveTimePreference.loading || getTimePreference.loading;\n\n    const handleModalToggle = () => {\n        setIsModalOpen(!isModalOpen);\n    };\n\n    return (\n        <>\n            <p>\n                <OutlinedClockIcon color='var(--pf-v5-global--palette--cyan-200)' />\n                &nbsp;{`Any daily digest emails you've opted into will be sent at ${timePref ? timePref : '00:00'} UTC`}\n            </p>\n            <Button variant=\"link\" onClick={ handleModalToggle } ouiaId=\"TimeConfigModal\">\n                Edit time settings\n            </Button>\n            <Modal\n                className={ modalClass }\n                variant={ ModalVariant.small }\n                isOpen={ isModalOpen }\n                onClose={ handleModalToggle }\n                actions={ [\n                    <Button key=\"save\" variant='primary' type='submit' isLoading={ isLoading }\n                        isDisabled={ isLoading } onClick={ handleButtonSave }>\n                        { isLoading ? 'Loading' : 'Save' }\n                    </Button>,\n                    <Button\n                        key=\"cancel\" variant=\"link\" onClick={ handleModalToggle }>\n                Cancel\n                    </Button>\n                ] }\n                ouiaId=\"TimeConfigModal\"\n            >\n                <Stack hasGutter>\n                    <StackItem>\n                        <Title headingLevel='h2'>Action settings</Title>\n                    </StackItem>\n                    <StackItem>\n                        <Text component={ TextVariants.p }>Daily digest email receipt</Text>\n                        <HelperText>\n                            <HelperTextItem variant=\"indeterminate\">\n                            Schedule the time at which to send your account&apos;s daily digest email.\n                            All times will be converted to UTC after saving.\n                            </HelperTextItem>\n                        </HelperText>\n                    </StackItem>\n                </Stack>\n                <br></br>\n                <Split>\n                    <SplitItem isFilled>\n                        <Stack hasGutter>\n                            <StackItem>\n                                { getTimePreference.loading ? <Skeleton /> :\n                                    <Radio\n                                        isChecked={ !showCustomSelect }\n                                        onChange={ handleRadioSelect }\n                                        id='settings-time-config'\n                                        label='Default time'\n                                        value=\"Default\"\n                                        description='00:00 UTC'\n                                        name='radio-select'>\n                                    </Radio>\n                                }\n                            </StackItem>\n                            <StackItem>\n                                { getTimePreference.loading ? <Skeleton /> :\n                                    <Radio\n                                        isChecked={ showCustomSelect }\n                                        onChange={ handleCustomRadioSelect }\n                                        id='settings-time-config-custom'\n                                        label='Custom time'\n                                        name='radio-select'>\n                                    </Radio>\n                                }\n                            </StackItem>\n                            {showCustomSelect && (\n                                <><StackItem className={ dropDownPaddingClassName }>\n                                    <Text component={ TextVariants.h6 }>Time</Text>\n                                    <TimePicker onChange={ handleTimePrefSelect } time={ timeSelect?.baseCustomTime }\n                                        width='263px' stepMinutes={ 15 } placeholder='00:00' is24Hour />\n                                </StackItem>\n                                <StackItem className={ dropDownPaddingClassName }>\n                                    <Text component={ TextVariants.h6 }>Time zone</Text>\n                                    <Dropdown\n                                        className={ dropDownClassName }\n                                        toggle={ <DropdownToggle isOpen={ isOpen } id=\"timezone\" onToggle={ () => setIsOpen(!isOpen) }>\n                                            { timeSelect?.timezoneText ?? '(UTC-00:00) Universal Time' }\n                                        </DropdownToggle> }\n                                        isOpen={ isOpen }\n                                        onSelect={ handleTimezoneChange }\n                                        menuAppendTo={ () => document.body }\n                                        dropdownItems={ dropdownItems }>\n                                    </Dropdown>\n                                </StackItem></>)}\n                        </Stack>\n                    </SplitItem>\n                </Split>\n            </Modal>\n        </>\n    );\n\n};\n\nexport default TimeConfigComponent;\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const useGetTimePreference = () => {\n    return useQuery(Operations.OrgConfigResourceGetDailyDigestTimePreference.actionCreator());\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport type SaveTimePrefActionsParams = {\n    body: string;\n}\n\nconst actionCreator = (params: SaveTimePrefActionsParams) => {\n    return Operations.OrgConfigResourceSaveDailyDigestTimePreference.actionCreator({\n        body: params.body\n    });\n};\n\nexport const useUpdateTimePreference = () => {\n    return useMutation(actionCreator);\n};\n","import { AlertProps } from '@patternfly/react-core';\nimport {\n    addNotification as createNotificationAction,\n    clearNotifications as createClearNotificationsAction\n} from '@redhat-cloud-services/frontend-components-notifications';\nimport { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport type NotificationType = AlertProps['variant'];\ntype ExplicitNotificationFunction = (title: string, description: React.ReactNode, dismissable?: boolean) => void;\n\n// Todo: Create a PR over frontend-components with a similar hook\nexport const useNotification = () => {\n    const dispatch = useDispatch();\n    return useMemo(() => {\n\n        const addNotification = (\n            variant: NotificationType,\n            title: string,\n            description: React.ReactNode,\n            dismissable?: boolean\n        ) => dispatch(createNotificationAction({\n            variant,\n            title,\n            description,\n            dismissable\n        }));\n\n        const addSuccessNotification: ExplicitNotificationFunction = (...args) => addNotification('success', ...args);\n        const addDangerNotification: ExplicitNotificationFunction = (...args) => addNotification('danger', ...args);\n        const addInfoNotification: ExplicitNotificationFunction = (...args) => addNotification('info', ...args);\n        const addWarningNotification: ExplicitNotificationFunction = (...args) => addNotification('warning', ...args);\n        const addDefaultNotification: ExplicitNotificationFunction = (...args) => addNotification('default', ...args);\n        const clearNotifications = () => dispatch(createClearNotificationsAction());\n\n        return {\n            addNotification,\n            addSuccessNotification,\n            addDangerNotification,\n            addInfoNotification,\n            addWarningNotification,\n            addDefaultNotification,\n            clearNotifications\n        };\n    }, [ dispatch ]);\n};\n"],"names":["dropDownClassName","style","width","dropDownPaddingClassName","paddingLeft","modalClass","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","getTimePreference","saveTimePreference","addSuccessNotification","addDangerNotification","timePref","useMemo","status","payload","value","useEffect","baseCustomTime","utcTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","dropdownItems","tz","DropdownItem","key","text","handleCustomRadioSelect","handleTimePrefSelect","time","handleTimezoneChange","event","target","textContent","targetTimezone","t","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","mutate","body","then","response","isLoading","loading","handleModalToggle","OutlinedClockIcon","color","Button","variant","onClick","ouiaId","Modal","className","ModalVariant","onClose","actions","type","isDisabled","Stack","hasGutter","StackItem","Title","headingLevel","Text","component","TextVariants","HelperText","HelperTextItem","Split","SplitItem","isFilled","Skeleton","Radio","isChecked","onChange","id","label","description","name","TimePicker","stepMinutes","placeholder","is24Hour","Dropdown","toggle","DropdownToggle","onToggle","onSelect","menuAppendTo","document","useGetTimePreference","useQuery","actionCreator","params","useUpdateTimePreference","useMutation","useNotification","dispatch","useDispatch","addNotification","title","dismissable","args","addInfoNotification","addWarningNotification","addDefaultNotification","clearNotifications"],"sourceRoot":""}
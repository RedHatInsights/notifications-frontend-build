{"version":3,"file":"js/485.1668100742501.1d3dbfa2872c9220e981.js","mappings":"4SAsBA,UAEA,MAwBA,EAxB0DA,IAEtD,MAAMC,EAAS,aAAc,KAAM,IAAAC,sBAAqB,EAAAC,YAAa,CACjEC,qBAAsB,CAAE,EAAAC,sCACxB,IAEEC,EAAQ,aAAc,KACPN,EAAMO,QAAS,OAAyBP,EAAMO,SAAU,UACzDC,YACjB,CAAER,EAAMO,SAEX,OACI,kBAAC,KAAY,CAACE,OAASC,UAAUC,SAASC,MAAM,EAAG,GAAKC,SAAW,EAAWC,QAAUC,QAAQC,KAC5F,kBAAC,EAAAC,SAAQ,CAACX,MAAQA,GACd,kBAAC,gBAAM,CAACY,UAAW,OAAYC,OAAOC,SAASC,WAC3C,kBAAC,EAAAC,sBAAqB,CAACrB,OAASA,GAC5B,kBAAC,IAAG,SAKvB,C","sources":["webpack:///./src/AppEntry.tsx"],"sourcesContent":["import { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport {\n    createFetchingClient,\n    getInsights\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as Redux from 'redux';\n\nimport messages from '../locales/data.json';\nimport App from './app/App';\nimport { getNotificationsRegistry } from './store/Store';\nimport { getBaseName } from './utils/Basename';\n\ninterface AppEntryProps {\n    logger?: Redux.Middleware;\n}\n\nenableMapSet();\n\nconst AppEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n\n    const client = React.useMemo(() => createFetchingClient(getInsights, {\n        responseInterceptors: [ validateSchemaResponseInterceptor ]\n    }), []);\n\n    const store = React.useMemo(() => {\n        const registry = props.logger ? getNotificationsRegistry(props.logger) : getNotificationsRegistry();\n        return registry.getStore();\n    }, [ props.logger ]);\n\n    return (\n        <IntlProvider locale={ navigator.language.slice(0, 2) } messages={ messages } onError={ console.log }>\n            <Provider store={ store }>\n                <Router basename={ getBaseName(window.location.pathname) }>\n                    <ClientContextProvider client={ client }>\n                        <App />\n                    </ClientContextProvider>\n                </Router>\n            </Provider>\n        </IntlProvider>\n    );\n};\n\nexport default AppEntry;\n"],"names":["props","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","Provider","basename","window","location","pathname","ClientContextProvider"],"sourceRoot":""}
{"version":3,"file":"js/1654.eb750cee2ba9987dea1c.js","mappings":"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","sources":["webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/services/Notifications/GetTimePreference.ts","webpack:///./src/services/Notifications/SaveTimePreference.ts"],"sourcesContent":["import {\n  AlertActionLink,\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  Radio,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  TimePicker,\n  Title,\n} from '@patternfly/react-core';\nimport { Alert } from '@patternfly/react-core';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useGetTimePreference } from '../../services/Notifications/GetTimePreference';\nimport { useUpdateTimePreference } from '../../services/Notifications/SaveTimePreference';\nimport { useNotification } from '../../utils/AlertUtils';\n\nconst dropDownClassName = style({\n  width: '280px',\n});\n\nconst alertClassName = style({\n  marginTop: '12px',\n});\n\ninterface TimeConfigState {\n  utcTime: string;\n  baseCustomTime: string;\n  timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n  const [showCustomSelect, setShowCustomSelect] = React.useState(false);\n  const [timeSelect, setTimeSelect] = React.useState<TimeConfigState>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const getTimePreference = useGetTimePreference();\n  const saveTimePreference = useUpdateTimePreference();\n  const { addSuccessNotification, addDangerNotification } = useNotification();\n\n  const timePref = useMemo(() => {\n    if (getTimePreference.status === 200) {\n      return getTimePreference.payload?.value as string;\n    }\n\n    return undefined;\n  }, [getTimePreference.payload?.value, getTimePreference.status]);\n\n  // Set the time preference value once we load it from the server\n  useEffect(() => {\n    if (timePref) {\n      setTimeSelect({\n        baseCustomTime: timePref,\n        utcTime: timePref,\n        timezoneText: undefined,\n      });\n      setShowCustomSelect(timePref !== '00:00:00');\n    }\n  }, [timePref]);\n\n  const handleRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(false);\n    setTimeSelect({\n      utcTime: '00:00',\n      baseCustomTime: '00:00',\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const dropdownItems = timezones.map((tz) => (\n    // Abbr, value, offset, etc are not unique by themselves\n    <DropdownItem key={tz.text}>{tz.text}</DropdownItem>\n  ));\n\n  const handleCustomRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(true);\n  }, []);\n\n  const handleTimePrefSelect = React.useCallback((time) => {\n    setTimeSelect({\n      baseCustomTime: time,\n      utcTime: time,\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const handleTimezoneChange = React.useCallback(\n    (event?: React.SyntheticEvent<HTMLDivElement>) => {\n      if (event?.target) {\n        const target = event.target;\n        const textContent = (target as HTMLElement).textContent;\n        const targetTimezone = timezones.find((t) => t.text === textContent);\n        if (targetTimezone) {\n          setTimeSelect((prev) => {\n            if (prev?.baseCustomTime) {\n              const pieces = prev.baseCustomTime\n                .split(':')\n                .map((t) => parseInt(t));\n              const date = new Date();\n              date.setUTCHours(pieces[0], pieces[1]);\n              // Going from UTC to the timezone\n              const zonedDate = addHours(date, -targetTimezone.offset);\n              const utcHours = zonedDate\n                .getUTCHours()\n                .toString()\n                .padStart(2, '0');\n              const utcMinutes = zonedDate\n                .getUTCMinutes()\n                .toString()\n                .padStart(2, '0');\n\n              return {\n                ...prev,\n                utcTime: `${utcHours}:${utcMinutes}`,\n                timezoneText: targetTimezone.text,\n              };\n            }\n\n            return prev;\n          });\n        }\n      }\n\n      setIsOpen(false);\n    },\n    []\n  );\n\n  const handleButtonSave = React.useCallback(() => {\n    if (timeSelect) {\n      const mutate = saveTimePreference.mutate;\n      mutate({\n        body: timeSelect.utcTime,\n      }).then((response) => {\n        if (response.status === 204) {\n          addSuccessNotification('Action settings saved', '');\n        } else {\n          addDangerNotification('Failed to save action settings', '');\n        }\n      });\n    }\n\n    setIsModalOpen(false);\n  }, [\n    addDangerNotification,\n    addSuccessNotification,\n    saveTimePreference.mutate,\n    timeSelect,\n  ]);\n\n  const isLoading = saveTimePreference.loading || getTimePreference.loading;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const timeconfigTitle = () => {\n    return `Any daily digest emails you've opted into will be sent at ${\n      timePref ? timePref : '00:00'\n    } UTC`;\n  };\n\n  return (\n    <>\n      <Alert\n        className={alertClassName}\n        isInline\n        title={timeconfigTitle()}\n        actionLinks={\n          <AlertActionLink onClick={handleModalToggle} ouiaId=\"TimeConfigModal\">\n            Edit time settings\n          </AlertActionLink>\n        }\n      />\n      <Modal\n        className=\"pf-v5-u-pl-xl\"\n        variant={ModalVariant.small}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isLoading={isLoading}\n            isDisabled={isLoading}\n            onClick={handleButtonSave}\n          >\n            {isLoading ? 'Loading' : 'Save'}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n        ouiaId=\"TimeConfigModal\"\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h2\">Action settings</Title>\n          </StackItem>\n          <StackItem>\n            <Text component={TextVariants.p}>Daily digest email receipt</Text>\n            <HelperText>\n              <HelperTextItem variant=\"indeterminate\">\n                Schedule the time at which to send your account&apos;s daily\n                digest email. All times will be converted to UTC after saving.\n              </HelperTextItem>\n            </HelperText>\n          </StackItem>\n        </Stack>\n        <br></br>\n        <Split>\n          <SplitItem isFilled>\n            <Stack hasGutter>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={!showCustomSelect}\n                    onChange={handleRadioSelect}\n                    id=\"settings-time-config\"\n                    label=\"Default time\"\n                    value=\"Default\"\n                    description=\"00:00 UTC\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={showCustomSelect}\n                    onChange={handleCustomRadioSelect}\n                    id=\"settings-time-config-custom\"\n                    label=\"Custom time\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              {showCustomSelect && (\n                <>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time</Text>\n                    <TimePicker\n                      onChange={handleTimePrefSelect}\n                      time={timeSelect?.baseCustomTime}\n                      width=\"263px\"\n                      stepMinutes={15}\n                      placeholder=\"00:00\"\n                      is24Hour\n                    />\n                  </StackItem>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time zone</Text>\n                    <Dropdown\n                      className={dropDownClassName}\n                      toggle={\n                        <DropdownToggle\n                          isOpen={isOpen}\n                          id=\"timezone\"\n                          onToggle={() => setIsOpen(!isOpen)}\n                        >\n                          {timeSelect?.timezoneText ??\n                            '(UTC-00:00) Universal Time'}\n                        </DropdownToggle>\n                      }\n                      isOpen={isOpen}\n                      onSelect={handleTimezoneChange}\n                      menuAppendTo={() => document.body}\n                      dropdownItems={dropdownItems}\n                    ></Dropdown>\n                  </StackItem>\n                </>\n              )}\n            </Stack>\n          </SplitItem>\n        </Split>\n      </Modal>\n    </>\n  );\n};\n\nexport default TimeConfigComponent;\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport const useGetTimePreference = () => {\n  return useQuery(\n    Operations.OrgConfigResourceGetDailyDigestTimePreference.actionCreator()\n  );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiNotifications';\n\nexport type SaveTimePrefActionsParams = {\n  body: string;\n};\n\nconst actionCreator = (params: SaveTimePrefActionsParams) => {\n  return Operations.OrgConfigResourceSaveDailyDigestTimePreference.actionCreator(\n    {\n      body: params.body,\n    }\n  );\n};\n\nexport const useUpdateTimePreference = () => {\n  return useMutation(actionCreator);\n};\n"],"names":["dropDownClassName","style","width","alertClassName","marginTop","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","getTimePreference","saveTimePreference","addSuccessNotification","addDangerNotification","timePref","useMemo","status","payload","value","useEffect","baseCustomTime","utcTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","dropdownItems","map","tz","DropdownItem","key","text","handleCustomRadioSelect","handleTimePrefSelect","time","handleTimezoneChange","event","target","textContent","targetTimezone","find","t","prev","pieces","split","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","mutate","body","then","response","isLoading","loading","handleModalToggle","Alert","className","isInline","title","actionLinks","AlertActionLink","onClick","ouiaId","Modal","variant","ModalVariant","small","onClose","actions","Button","type","isDisabled","Stack","hasGutter","StackItem","Title","headingLevel","Text","component","TextVariants","p","HelperText","HelperTextItem","Split","SplitItem","isFilled","Skeleton","Radio","isChecked","onChange","id","label","description","name","h6","TimePicker","stepMinutes","placeholder","is24Hour","Dropdown","toggle","DropdownToggle","onToggle","onSelect","menuAppendTo","document","useGetTimePreference","useQuery","OrgConfigResourceGetDailyDigestTimePreference","actionCreator","params","OrgConfigResourceSaveDailyDigestTimePreference","useUpdateTimePreference","useMutation"],"sourceRoot":""}
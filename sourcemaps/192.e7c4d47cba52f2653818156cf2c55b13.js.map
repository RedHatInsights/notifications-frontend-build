{"version":3,"file":"js/192.cf4f7558635a7a26d02e.js","mappings":"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","sources":["webpack:///./src/AppEntry.tsx","webpack:///./src/components/Notifications/TimeConfig.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts"],"sourcesContent":["import IntlProvider from '@redhat-cloud-services/frontend-components-translations/Provider';\nimport {\n  createFetchingClient,\n  getInsights,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\nimport * as Redux from 'redux';\n\nimport messages from '../locales/data.json';\nimport App from './app/App';\nimport { getNotificationsRegistry } from './store/Store';\n\nexport interface AppEntryProps {\n  logger?: Redux.Middleware;\n}\n\nenableMapSet();\n\nconst AppEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n  const client = React.useMemo(\n    () =>\n      createFetchingClient(getInsights, {\n        responseInterceptors: [validateSchemaResponseInterceptor],\n      }),\n    []\n  );\n\n  const store = React.useMemo(() => {\n    const registry = props.logger\n      ? getNotificationsRegistry(props.logger)\n      : getNotificationsRegistry();\n    return registry.getStore();\n  }, [props.logger]);\n\n  return (\n    <IntlProvider\n      locale={navigator.language.slice(0, 2)}\n      messages={messages}\n      onError={console.log}\n    >\n      <Provider store={store}>\n        <ClientContextProvider client={client}>\n          <App />\n        </ClientContextProvider>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nexport default AppEntry;\n","import {\n  AlertActionLink,\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  Radio,\n  Skeleton,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  TimePicker,\n  Title,\n} from '@patternfly/react-core';\nimport { Alert } from '@patternfly/react-core';\nimport { addHours } from 'date-fns';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport timezones from 'timezones.json';\nimport { style } from 'typestyle';\n\nimport { useGetTimePreference } from '../../services/Notifications/GetTimePreference';\nimport { useUpdateTimePreference } from '../../services/Notifications/SaveTimePreference';\nimport { useNotification } from '../../utils/AlertUtils';\n\nconst dropDownClassName = style({\n  width: '280px',\n});\n\nconst alertClassName = style({\n  marginTop: '12px',\n});\n\ninterface TimeConfigState {\n  utcTime: string;\n  baseCustomTime: string;\n  timezoneText: string | undefined;\n}\n\nexport const TimeConfigComponent: React.FunctionComponent = () => {\n  const [showCustomSelect, setShowCustomSelect] = React.useState(false);\n  const [timeSelect, setTimeSelect] = React.useState<TimeConfigState>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const getTimePreference = useGetTimePreference();\n  const saveTimePreference = useUpdateTimePreference();\n  const { addSuccessNotification, addDangerNotification } = useNotification();\n\n  const timePref = useMemo(() => {\n    if (getTimePreference.status === 200) {\n      return getTimePreference.payload?.value as string;\n    }\n\n    return undefined;\n  }, [getTimePreference.payload?.value, getTimePreference.status]);\n\n  // Set the time preference value once we load it from the server\n  useEffect(() => {\n    if (timePref) {\n      setTimeSelect({\n        baseCustomTime: timePref,\n        utcTime: timePref,\n        timezoneText: undefined,\n      });\n      setShowCustomSelect(timePref !== '00:00:00');\n    }\n  }, [timePref]);\n\n  const handleRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(false);\n    setTimeSelect({\n      utcTime: '00:00',\n      baseCustomTime: '00:00',\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const dropdownItems = timezones.map((tz) => (\n    // Abbr, value, offset, etc are not unique by themselves\n    <DropdownItem key={tz.text}>{tz.text}</DropdownItem>\n  ));\n\n  const handleCustomRadioSelect = React.useCallback(() => {\n    setShowCustomSelect(true);\n  }, []);\n\n  const handleTimePrefSelect = React.useCallback((time) => {\n    setTimeSelect({\n      baseCustomTime: time,\n      utcTime: time,\n      timezoneText: undefined,\n    });\n  }, []);\n\n  const handleTimezoneChange = React.useCallback(\n    (event?: React.SyntheticEvent<HTMLDivElement>) => {\n      if (event?.target) {\n        const target = event.target;\n        const textContent = (target as HTMLElement).textContent;\n        const targetTimezone = timezones.find((t) => t.text === textContent);\n        if (targetTimezone) {\n          setTimeSelect((prev) => {\n            if (prev?.baseCustomTime) {\n              const pieces = prev.baseCustomTime\n                .split(':')\n                .map((t) => parseInt(t));\n              const date = new Date();\n              date.setUTCHours(pieces[0], pieces[1]);\n              // Going from UTC to the timezone\n              const zonedDate = addHours(date, -targetTimezone.offset);\n              const utcHours = zonedDate\n                .getUTCHours()\n                .toString()\n                .padStart(2, '0');\n              const utcMinutes = zonedDate\n                .getUTCMinutes()\n                .toString()\n                .padStart(2, '0');\n\n              return {\n                ...prev,\n                utcTime: `${utcHours}:${utcMinutes}`,\n                timezoneText: targetTimezone.text,\n              };\n            }\n\n            return prev;\n          });\n        }\n      }\n\n      setIsOpen(false);\n    },\n    []\n  );\n\n  const handleButtonSave = React.useCallback(() => {\n    if (timeSelect) {\n      const mutate = saveTimePreference.mutate;\n      mutate({\n        body: timeSelect.utcTime,\n      }).then((response) => {\n        if (response.status === 204) {\n          addSuccessNotification('Action settings saved', '');\n        } else {\n          addDangerNotification('Failed to save action settings', '');\n        }\n      });\n    }\n\n    setIsModalOpen(false);\n  }, [\n    addDangerNotification,\n    addSuccessNotification,\n    saveTimePreference.mutate,\n    timeSelect,\n  ]);\n\n  const isLoading = saveTimePreference.loading || getTimePreference.loading;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const timeconfigTitle = () => {\n    return `Any daily digest emails you've opted into will be sent at ${\n      timePref ? timePref : '00:00'\n    } UTC`;\n  };\n\n  return (\n    <>\n      <Alert\n        className={alertClassName}\n        isInline\n        title={timeconfigTitle()}\n        actionLinks={\n          <AlertActionLink onClick={handleModalToggle} ouiaId=\"TimeConfigModal\">\n            Edit time settings\n          </AlertActionLink>\n        }\n      />\n      <Modal\n        className=\"pf-v5-u-pl-xl\"\n        variant={ModalVariant.small}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isLoading={isLoading}\n            isDisabled={isLoading}\n            onClick={handleButtonSave}\n          >\n            {isLoading ? 'Loading' : 'Save'}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n        ouiaId=\"TimeConfigModal\"\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h2\">Action settings</Title>\n          </StackItem>\n          <StackItem>\n            <Text component={TextVariants.p}>Daily digest email receipt</Text>\n            <HelperText>\n              <HelperTextItem variant=\"indeterminate\">\n                Schedule the time at which to send your account&apos;s daily\n                digest email. All times will be converted to UTC after saving.\n              </HelperTextItem>\n            </HelperText>\n          </StackItem>\n        </Stack>\n        <br></br>\n        <Split>\n          <SplitItem isFilled>\n            <Stack hasGutter>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={!showCustomSelect}\n                    onChange={handleRadioSelect}\n                    id=\"settings-time-config\"\n                    label=\"Default time\"\n                    value=\"Default\"\n                    description=\"00:00 UTC\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              <StackItem>\n                {getTimePreference.loading ? (\n                  <Skeleton />\n                ) : (\n                  <Radio\n                    isChecked={showCustomSelect}\n                    onChange={handleCustomRadioSelect}\n                    id=\"settings-time-config-custom\"\n                    label=\"Custom time\"\n                    name=\"radio-select\"\n                  ></Radio>\n                )}\n              </StackItem>\n              {showCustomSelect && (\n                <>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time</Text>\n                    <TimePicker\n                      onChange={handleTimePrefSelect}\n                      time={timeSelect?.baseCustomTime}\n                      width=\"263px\"\n                      stepMinutes={15}\n                      placeholder=\"00:00\"\n                      is24Hour\n                    />\n                  </StackItem>\n                  <StackItem className=\"pf-v5-u-pl-lg\">\n                    <Text component={TextVariants.h6}>Time zone</Text>\n                    <Dropdown\n                      className={dropDownClassName}\n                      toggle={\n                        <DropdownToggle\n                          isOpen={isOpen}\n                          id=\"timezone\"\n                          onToggle={() => setIsOpen(!isOpen)}\n                        >\n                          {timeSelect?.timezoneText ??\n                            '(UTC-00:00) Universal Time'}\n                        </DropdownToggle>\n                      }\n                      isOpen={isOpen}\n                      onSelect={handleTimezoneChange}\n                      menuAppendTo={() => document.body}\n                      dropdownItems={dropdownItems}\n                    ></Dropdown>\n                  </StackItem>\n                </>\n              )}\n            </Stack>\n          </SplitItem>\n        </Split>\n      </Modal>\n    </>\n  );\n};\n\nexport default TimeConfigComponent;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n  id: UUID;\n  applicationDisplayName: string;\n  eventTypeDisplayName: string;\n}\n\nexport interface Notification extends EventType {\n  actions?: Array<Action>;\n  useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<\n  UserIntegration,\n  'id' | 'name' | 'type' | 'isEnabled'\n>;\n\nexport interface DefaultNotificationBehavior {\n  actions: Array<Action>;\n}\n\nexport interface ActionBase {\n  type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n  type: NotificationType.INTEGRATION;\n  integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n  type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n  recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n  action.type === NotificationType.EMAIL_SUBSCRIPTION ||\n  action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (\n  action: Action\n): action is ActionIntegration => action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n  EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n  DRAWER = 'DRAWER',\n  INTEGRATION = 'INTEGRATION',\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n  readonly id: UUID;\n  readonly actions: ReadonlyArray<Action>;\n  readonly events: ReadonlyArray<EventType>;\n  readonly bundleId: UUID;\n  readonly displayName: string;\n  readonly bundleName?: string;\n  readonly isDefault: boolean;\n};\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> &\n  Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<\n  BehaviorGroup | NewBehaviorGroup,\n  'isDefault'\n>;\n\nexport type EmailSystemProperties = {\n  type: NotificationType.EMAIL_SUBSCRIPTION;\n  props: {\n    onlyAdmins: boolean;\n    ignorePreferences: false;\n    groupId: undefined | UUID;\n  };\n};\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n  props: {\n    onlyAdmins: boolean;\n    groupId: undefined | UUID;\n    ignorePreferences: false;\n  };\n};\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(\n  properties: SystemProperties\n): properties is EmailSystemProperties {\n  return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(\n  properties: SystemProperties\n): properties is DrawerSystemProperties {\n  return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (\n  actions: ReadonlyArray<Action | undefined>\n): Array<UUID | undefined> => {\n  return actions\n    .map((action) => {\n      if (action === undefined) {\n        return [undefined];\n      }\n\n      if (action.type === NotificationType.INTEGRATION) {\n        return [action.integration.id];\n      } else {\n        return action.recipient.map((r) => r.integrationId);\n      }\n    })\n    .flat();\n};\n\nexport const areActionsEqual = (\n  actions1: ReadonlyArray<Action | undefined>,\n  actions2: ReadonlyArray<Action | undefined>\n): boolean => {\n  if (actions1.length !== actions2.length) {\n    return false;\n  }\n\n  const integrations1 = getIntegrationIds(actions1);\n  const integrations2 = getIntegrationIds(actions2);\n\n  if (integrations1.length !== integrations2.length) {\n    return false;\n  }\n\n  // Order matters here, no sorting.\n  return integrations1.every((val, index) => val === integrations2[index]);\n};\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n  CamelIntegrationType,\n  Integration,\n  IntegrationAnsible,\n  IntegrationBase,\n  IntegrationCamel,\n  IntegrationDrawer,\n  IntegrationEmailSubscription,\n  IntegrationHttp,\n  IntegrationType,\n  NewIntegration,\n  ServerIntegrationRequest,\n  ServerIntegrationResponse,\n  isCamelType,\n} from '../Integration';\n\ninterface ExternalCompositeTyped {\n  type: string;\n  sub_type?: string | null;\n}\n\nexport const getIntegrationType = (\n  serverIntegration: ExternalCompositeTyped\n): IntegrationType => {\n  for (const integration of Object.values(IntegrationType)) {\n    if (serverIntegration.sub_type) {\n      if (\n        integration ===\n        `${serverIntegration.type}:${serverIntegration.sub_type}`\n      ) {\n        return integration as IntegrationType;\n      }\n    } else if (integration === serverIntegration.type) {\n      return integration as IntegrationType;\n    }\n  }\n\n  throw new Error(\n    `Unexpected type: ${serverIntegration.type} with subtype: ${serverIntegration.sub_type}`\n  );\n};\n\nconst getEndpointType = (\n  type: IntegrationType\n): { type: Schemas.EndpointType; subType?: string } => {\n  const splitType = type.split(':', 2);\n  return {\n    type: splitType[0] as Schemas.EndpointType,\n    subType: splitType.length === 2 ? splitType[1] : undefined,\n  };\n};\n\ntype NotNullType = {\n  <T>(value: T | undefined | null): T | undefined;\n  <T>(value: T | undefined | null, defaultValue: T): T;\n};\n\nconst notNull: NotNullType = <T>(\n  value: T | undefined | null,\n  defaultValue?: T\n): T | undefined => (value === null ? defaultValue : value);\nconst toSecretToken = (\n  secretToken: string | undefined | null\n): string | undefined =>\n  secretToken === '' ? undefined : notNull(secretToken);\n\nconst toIntegrationWebhook = (\n  integrationBase: IntegrationBase<IntegrationType.WEBHOOK>,\n  properties?: Schemas.WebhookProperties\n): IntegrationHttp => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.GET,\n});\n\nconst toIntegrationAnsible = (\n  integrationBase: IntegrationBase<IntegrationType.ANSIBLE>,\n  properties?: Schemas.WebhookProperties\n): IntegrationAnsible => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.POST,\n});\n\nconst toIntegrationCamel = (\n  integrationBase: IntegrationBase<CamelIntegrationType>,\n  properties?: Schemas.CamelProperties\n): IntegrationCamel => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  basicAuth:\n    properties?.basic_authentication === null\n      ? undefined\n      : {\n          user: notNull(properties?.basic_authentication?.username, ''),\n          pass: notNull(properties?.basic_authentication?.password, ''),\n        },\n  extras: notNull(properties?.extras),\n});\n\nconst toIntegrationEmail = (\n  integrationBase: IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n  properties: Schemas.EmailSubscriptionProperties\n): IntegrationEmailSubscription => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nconst toIntegrationDrawer = (\n  integrationBase: IntegrationBase<IntegrationType.DRAWER>,\n  properties: Schemas.DrawerProperties\n): IntegrationDrawer => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nexport const toIntegration = (\n  serverIntegration: ServerIntegrationResponse\n): Integration => {\n  const integrationBase: IntegrationBase<IntegrationType> = {\n    id: serverIntegration.id || '',\n    name: serverIntegration.name || '',\n    isEnabled: !!serverIntegration.enabled,\n    type: getIntegrationType(serverIntegration),\n    status: serverIntegration.status ?? 'UNKNOWN',\n    serverErrors: serverIntegration.server_errors ?? 0,\n  };\n\n  if (isCamelType(integrationBase.type)) {\n    return toIntegrationCamel(\n      integrationBase as IntegrationBase<CamelIntegrationType>,\n      serverIntegration.properties as Schemas.CamelProperties\n    );\n  }\n\n  switch (integrationBase.type) {\n    case IntegrationType.WEBHOOK:\n      return toIntegrationWebhook(\n        integrationBase as IntegrationBase<IntegrationType.WEBHOOK>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.ANSIBLE:\n      return toIntegrationAnsible(\n        integrationBase as IntegrationBase<IntegrationType.ANSIBLE>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.EMAIL_SUBSCRIPTION:\n      return toIntegrationEmail(\n        integrationBase as IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n        serverIntegration.properties as Schemas.EmailSubscriptionProperties\n      );\n    case IntegrationType.DRAWER:\n      return toIntegrationDrawer(\n        integrationBase as IntegrationBase<IntegrationType.DRAWER>,\n        serverIntegration.properties as Schemas.DrawerProperties\n      );\n    default:\n      assertNever(integrationBase.type);\n  }\n};\n\nexport const toIntegrations = (\n  serverIntegrations: Array<ServerIntegrationResponse>\n): Array<Integration> => {\n  return serverIntegrations.map(toIntegration);\n};\n\ntype ServerIntegrationProperties =\n  | Schemas.EmailSubscriptionProperties\n  | Schemas.WebhookProperties\n  | Schemas.CamelProperties\n  | Schemas.DrawerProperties;\n\nexport const toIntegrationProperties = (\n  integration: Integration | NewIntegration\n): ServerIntegrationProperties => {\n  const type = integration.type;\n\n  if (isCamelType(type)) {\n    const integrationCamel: IntegrationCamel = integration as IntegrationCamel;\n    return {\n      url: integrationCamel.url,\n      disable_ssl_verification: !integrationCamel.sslVerificationEnabled,\n      secret_token: toSecretToken(integrationCamel.secretToken),\n      basic_authentication: integrationCamel.basicAuth\n        ? {\n            username: integrationCamel.basicAuth.user,\n            password: integrationCamel.basicAuth.pass,\n          }\n        : undefined,\n      extras: integrationCamel.extras,\n    };\n  }\n\n  switch (type) {\n    case IntegrationType.WEBHOOK: {\n      const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n      return {\n        url: integrationHttp.url,\n        method: integrationHttp.method,\n        disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationHttp.secretToken),\n      };\n    }\n    case IntegrationType.ANSIBLE: {\n      const integrationAnsible = integration as IntegrationAnsible;\n      return {\n        url: integrationAnsible.url,\n        disable_ssl_verification: !integrationAnsible.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationAnsible.secretToken),\n        method: integrationAnsible.method,\n      };\n    }\n    case IntegrationType.EMAIL_SUBSCRIPTION: {\n      const integrationEmail: IntegrationEmailSubscription =\n        integration as IntegrationEmailSubscription;\n      return {\n        only_admins: integrationEmail.onlyAdmin,\n        group_id: integrationEmail.groupId,\n        ignore_preferences: integrationEmail.ignorePreferences,\n      };\n    }\n    case IntegrationType.DRAWER: {\n      const integrationDrawer: IntegrationDrawer =\n        integration as IntegrationDrawer;\n      return {\n        only_admins: integrationDrawer.onlyAdmin,\n        group_id: integrationDrawer.groupId,\n        ignore_preferences: integrationDrawer.ignorePreferences,\n      };\n    }\n    default:\n      assertNever(type);\n  }\n};\n\nexport const toServerIntegrationRequest = (\n  integration: Integration | NewIntegration\n): ServerIntegrationRequest => {\n  const { type, subType } = getEndpointType(integration.type);\n  return {\n    id: integration.id,\n    name: integration.name,\n    enabled: integration.isEnabled,\n    type,\n    sub_type: subType,\n    description: '',\n    properties: toIntegrationProperties(integration),\n  };\n};\n"],"names":["props","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","Provider","ClientContextProvider","dropDownClassName","style","width","alertClassName","marginTop","TimeConfigComponent","showCustomSelect","setShowCustomSelect","timeSelect","setTimeSelect","isModalOpen","setIsModalOpen","useState","getTimePreference","saveTimePreference","addSuccessNotification","addDangerNotification","timePref","useMemo","status","payload","value","useEffect","baseCustomTime","utcTime","timezoneText","undefined","handleRadioSelect","isOpen","setIsOpen","dropdownItems","tz","DropdownItem","key","text","handleCustomRadioSelect","handleTimePrefSelect","time","handleTimezoneChange","event","target","textContent","targetTimezone","t","prev","pieces","split","map","parseInt","date","Date","setUTCHours","zonedDate","offset","utcHours","getUTCHours","toString","padStart","utcMinutes","getUTCMinutes","handleButtonSave","mutate","body","then","response","isLoading","loading","handleModalToggle","Alert","className","isInline","title","actionLinks","AlertActionLink","onClick","ouiaId","Modal","variant","ModalVariant","onClose","actions","Button","type","isDisabled","Stack","hasGutter","StackItem","Title","headingLevel","Text","component","TextVariants","HelperText","HelperTextItem","Split","SplitItem","isFilled","Skeleton","Radio","isChecked","onChange","id","label","description","name","TimePicker","stepMinutes","placeholder","is24Hour","Dropdown","toggle","DropdownToggle","onToggle","onSelect","menuAppendTo","document","isActionNotify","action","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","properties","isDrawerSystemProperties","getIntegrationIds","integration","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","getIntegrationType","serverIntegration","Object","values","sub_type","Error","notNull","defaultValue","toSecretToken","secretToken","toIntegration","integrationBase","isEnabled","enabled","serverErrors","server_errors","url","sslVerificationEnabled","disable_ssl_verification","secret_token","basicAuth","basic_authentication","user","username","pass","password","extras","toIntegrationCamel","method","toIntegrationWebhook","toIntegrationAnsible","ignorePreferences","ignore_preferences","groupId","group_id","onlyAdmin","only_admins","toIntegrationDrawer","toIntegrations","serverIntegrations","toIntegrationProperties","integrationCamel","integrationHttp","integrationAnsible","integrationEmail","integrationDrawer","toServerIntegrationRequest","subType","splitType","getEndpointType"],"sourceRoot":""}
{"version":3,"file":"js/9358.0fd30b921de374c94d7f.js","mappings":"gVAgBA,MAkCA,EAlCmE,EACjEA,oBACGC,MAEH,MAAM,KAAEC,EAAI,OAAEC,EAAM,WAAEC,IAAe,EAAAC,EAAA,KAE/BC,EACJN,GACAO,OAAOC,OAAOC,EAAA,IAAqBC,SACjCV,GAEGA,OACDW,EAEN,OAAOT,GAAQC,EACb,gBAACS,EAAA,WAAmB,CAClBC,MAAO,CACLX,OACAC,SACAC,aAAcA,IAGhB,gBAACU,EAAA,EAAwB,KACvB,gBAACC,EAAA,EAAmB,MACpB,gBAAC,IAAgB,CAACT,SAAUA,KAAcL,MAI9C,gBAAC,EAAAe,SAAQ,KACP,gBAAC,EAAAC,QAAO,CAACC,KAAK,OAEjB,E,eC/BH,UAEA,MA+BA,EA/BmEjB,IACjE,MAAMkB,EAAS,aACb,KACE,IAAAC,sBAAqB,EAAAC,YAAa,CAChCC,qBAAsB,CAAC,EAAAC,sCAE3B,IAGIC,EAAQ,aAAc,KACTvB,EAAMwB,QACnB,OAAyBxB,EAAMwB,SAC/B,UACYC,YACf,CAACzB,EAAMwB,SAEV,OACE,kBAAC,IAAY,CACXE,OAAQC,UAAUC,SAASC,MAAM,EAAG,GACpCC,SAAU,EACVC,QAASC,QAAQC,KAEjB,kBAAC,EAAAC,SAAQ,CAACX,MAAOA,GACf,kBAAC,EAAAY,sBAAqB,CAACjB,OAAQA,GAC7B,kBAAC,EAAe,IAAKlB,MAI5B,C,iFCAI,MAAMoC,EAAkBC,GAC7BA,EAAOC,OAASC,EAAiBC,oBACjCH,EAAOC,OAASC,EAAiBE,OAEtBC,EACXL,GACgCA,EAAOC,OAASC,EAAiBI,YAEnE,IAAYJ,EAkDL,SAASK,EACdC,GAEA,OAAOA,EAAWP,OAASC,EAAiBC,kBAC9C,CAEO,SAASM,EACdD,GAEA,OAAOA,EAAWP,OAASC,EAAiBE,MAC9C,EA5DA,SAAYF,GACV,0CACA,kBACA,2BACD,CAJD,CAAYA,IAAAA,EAAgB,KA8D5B,MAAMQ,EACJC,GAEOA,EACJC,KAAKZ,QACW3B,IAAX2B,EACK,MAAC3B,GAGN2B,EAAOC,OAASC,EAAiBI,YAC5B,CAACN,EAAOa,YAAYC,IAEpBd,EAAOe,UAAUH,KAAKI,GAAMA,EAAEC,kBAGxCC,OAGQC,EAAkB,CAC7BC,EACAC,KAEA,GAAID,EAASE,SAAWD,EAASC,OAC/B,OAAO,EAGT,MAAMC,EAAgBb,EAAkBU,GAClCI,EAAgBd,EAAkBW,GAExC,OAAIE,EAAcD,SAAWE,EAAcF,QAKpCC,EAAcE,OAAM,CAACC,EAAKC,IAAUD,IAAQF,EAAcG,IAAO,C,oGC9HnE,MAAMC,EACXC,IAEA,IAAK,MAAMhB,KAAe5C,OAAOC,OAAO,MACtC,GAAI2D,EAAkBC,UACpB,GACEjB,IACA,GAAGgB,EAAkB5B,QAAQ4B,EAAkBC,WAE/C,OAAOjB,OAEJ,GAAIA,IAAgBgB,EAAkB5B,KAC3C,OAAOY,EAIX,MAAM,IAAIkB,MACR,oBAAoBF,EAAkB5B,sBAAsB4B,EAAkBC,WAC/E,EAkBGE,EAAuB,CAC3BzD,EACA0D,IAC6B,OAAV1D,EAAiB0D,EAAe1D,EAC/C2D,EACJC,GAEgB,KAAhBA,OAAqB9D,EAAY2D,EAAQG,GA8D9BC,EACXP,I,QAEA,MAAMQ,EAAoD,CACxDvB,GAAIe,EAAkBf,IAAM,GAC5BwB,KAAMT,EAAkBS,MAAQ,GAChCC,YAAaV,EAAkBW,QAC/BvC,KAAM2B,EAAmBC,GACzBY,OAAgC,QAAxB,EAAAZ,EAAkBY,cAAM,QAAI,UACpCC,aAA6C,QAA/B,EAAAb,EAAkBc,qBAAa,QAAI,GAGnD,IAAI,QAAYN,EAAgBpC,MAC9B,MAnDuB,EACzBoC,EACA7B,K,YACqB,UAClB6B,EACHO,IAAoB,QAAf,EAAApC,aAAU,EAAVA,EAAYoC,WAAG,QAAI,GACxBC,uBAA6D,QAArC,IAACrC,aAAU,EAAVA,EAAYsC,iCAAwB,SAC7DX,YAAaD,EAAc1B,aAAU,EAAVA,EAAYuC,cACvCC,UACuC,QAArCxC,aAAU,EAAVA,EAAYyC,2BACR5E,EACA,CACE6E,KAAMlB,EAAwC,QAAhC,EAAAxB,aAAU,EAAVA,EAAYyC,4BAAoB,eAAEE,SAAU,IAC1DC,KAAMpB,EAAwC,QAAhC,EAAAxB,aAAU,EAAVA,EAAYyC,4BAAoB,eAAEI,SAAU,KAElEC,OAAQtB,EAAQxB,aAAU,EAAVA,EAAY8C,QAC5B,EAmCSC,CACLlB,EACAR,EAAkBrB,YAItB,OAAQ6B,EAAgBpC,MACtB,KAAK,aACH,MAjFuB,EAC3BoC,EACA7B,K,UACoB,UACjB6B,EACHO,IAAoB,QAAf,EAAApC,aAAU,EAAVA,EAAYoC,WAAG,QAAI,GACxBC,uBAA6D,QAArC,IAACrC,aAAU,EAAVA,EAAYsC,iCAAwB,SAC7DX,YAAaD,EAAc1B,aAAU,EAAVA,EAAYuC,cACvCS,OAA0B,QAAlB,EAAAhD,aAAU,EAAVA,EAAYgD,cAAM,QAAI,sBAC9B,EAwEWC,CACLpB,EACAR,EAAkBrB,YAEtB,KAAK,aACH,MA3EuB,EAC3B6B,EACA7B,K,UACuB,UACpB6B,EACHO,IAAoB,QAAf,EAAApC,aAAU,EAAVA,EAAYoC,WAAG,QAAI,GACxBC,uBAA6D,QAArC,IAACrC,aAAU,EAAVA,EAAYsC,iCAAwB,SAC7DX,YAAaD,EAAc1B,aAAU,EAAVA,EAAYuC,cACvCS,OAA0B,QAAlB,EAAAhD,aAAU,EAAVA,EAAYgD,cAAM,QAAI,uBAC9B,EAkEWE,CACLrB,EACAR,EAAkBrB,YAEtB,KAAK,wBAKL,KAAK,YACH,MA9CsB,EAC1B6B,EACA7B,KACsB,IACnB6B,EACHsB,kBAAmBnD,EAAWoD,mBAC9BC,QAAiC,OAAxBrD,EAAWsD,cAAoBzF,EAAYmC,EAAWsD,SAC/DC,UAAWvD,EAAWwD,cAuCXC,CACL5B,EACAR,EAAkBrB,YAEtB,SACE,QAAY6B,EAAgBpC,M,EAIrBiE,EACXC,GAEOA,EAAmBvD,IAAIwB,GASnBgC,EACXvD,IAEA,MAAMZ,EAAOY,EAAYZ,KAEzB,IAAI,QAAYA,GAAO,CACrB,MAAMoE,EAAqCxD,EAC3C,MAAO,CACL+B,IAAKyB,EAAiBzB,IACtBE,0BAA2BuB,EAAiBxB,uBAC5CE,aAAcb,EAAcmC,EAAiBlC,aAC7Cc,qBAAsBoB,EAAiBrB,UACnC,CACEG,SAAUkB,EAAiBrB,UAAUE,KACrCG,SAAUgB,EAAiBrB,UAAUI,WAEvC/E,EACJiF,OAAQe,EAAiBf,O,CAI7B,OAAQrD,GACN,KAAK,aAAyB,CAC5B,MAAMqE,EAAmCzD,EACzC,MAAO,CACL+B,IAAK0B,EAAgB1B,IACrBY,OAAQc,EAAgBd,OACxBV,0BAA2BwB,EAAgBzB,uBAC3CE,aAAcb,EAAcoC,EAAgBnC,a,CAGhD,KAAK,aAAyB,CAC5B,MAAMoC,EAAqB1D,EAC3B,MAAO,CACL+B,IAAK2B,EAAmB3B,IACxBE,0BAA2ByB,EAAmB1B,uBAC9CE,aAAcb,EAAcqC,EAAmBpC,aAC/CqB,OAAQe,EAAmBf,O,CAG/B,KAAK,wBAAoC,CACvC,MAAMgB,EACJ3D,EACF,MAAO,CACLmD,YAAaQ,EAAiBT,UAC9BD,SAAUU,EAAiBX,QAC3BD,mBAAoBY,EAAiBb,kB,CAGzC,KAAK,YAAwB,CAC3B,MAAMc,EACJ5D,EACF,MAAO,CACLmD,YAAaS,EAAkBV,UAC/BD,SAAUW,EAAkBZ,QAC5BD,mBAAoBa,EAAkBd,kB,CAG1C,SACE,QAAY1D,G,EAILyE,EACX7D,IAEA,MAAM,KAAEZ,EAAI,QAAE0E,GA/MQ,CACtB1E,IAEA,MAAM2E,EAAY3E,EAAK4E,MAAM,IAAK,GAClC,MAAO,CACL5E,KAAM2E,EAAU,GAChBD,QAA8B,IAArBC,EAAUtD,OAAesD,EAAU,QAAKvG,EAClD,EAwMyByG,CAAgBjE,EAAYZ,MACtD,MAAO,CACLa,GAAID,EAAYC,GAChBwB,KAAMzB,EAAYyB,KAClBE,QAAS3B,EAAY0B,UACrBtC,OACA6B,SAAU6C,EACVI,YAAa,GACbvE,WAAY4D,EAAwBvD,GACrC,C","sources":["webpack:///./src/app/IntegrationsApp.tsx","webpack:///./src/IntegrationsEntry.tsx","webpack:///./src/types/Notification.ts","webpack:///./src/types/adapters/IntegrationAdapter.ts"],"sourcesContent":["import './App.scss';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { NotificationsPortal } from '../components/Store/NotificationsPortal';\nimport IntegrationsList from '../pages/Integrations/List/List';\nimport { IntegrationCategory } from '../types/Integration';\nimport { AppContext } from './AppContext';\nimport { RbacGroupContextProvider } from './rbac/RbacGroupContextProvider';\nimport { useApp } from './useApp';\n\ninterface IntegrationsAppProps {\n  activeCategory?: string;\n}\n\nconst IntegrationsApp: React.ComponentType<IntegrationsAppProps> = ({\n  activeCategory,\n  ...props\n}: IntegrationsAppProps) => {\n  const { rbac, server, isOrgAdmin } = useApp();\n\n  const category =\n    activeCategory &&\n    Object.values(IntegrationCategory).includes(\n      activeCategory as unknown as IntegrationCategory\n    )\n      ? (activeCategory as IntegrationCategory)\n      : undefined;\n\n  return rbac && server ? (\n    <AppContext.Provider\n      value={{\n        rbac,\n        server,\n        isOrgAdmin: !!isOrgAdmin,\n      }}\n    >\n      <RbacGroupContextProvider>\n        <NotificationsPortal />\n        <IntegrationsList category={category} {...props} />\n      </RbacGroupContextProvider>\n    </AppContext.Provider>\n  ) : (\n    <Bullseye>\n      <Spinner size=\"xl\" />\n    </Bullseye>\n  );\n};\n\nexport default IntegrationsApp;\n","import IntlProvider from '@redhat-cloud-services/frontend-components-translations/Provider';\nimport {\n  createFetchingClient,\n  getInsights,\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { enableMapSet } from 'immer';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\n\nimport messages from '../locales/data.json';\nimport IntegrationsApp from './app/IntegrationsApp';\nimport { AppEntryProps } from './AppEntry';\nimport { getNotificationsRegistry } from './store/Store';\n\nenableMapSet();\n\nconst IntegrationsEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n  const client = React.useMemo(\n    () =>\n      createFetchingClient(getInsights, {\n        responseInterceptors: [validateSchemaResponseInterceptor],\n      }),\n    []\n  );\n\n  const store = React.useMemo(() => {\n    const registry = props.logger\n      ? getNotificationsRegistry(props.logger)\n      : getNotificationsRegistry();\n    return registry.getStore();\n  }, [props.logger]);\n\n  return (\n    <IntlProvider\n      locale={navigator.language.slice(0, 2)}\n      messages={messages}\n      onError={console.log}\n    >\n      <Provider store={store}>\n        <ClientContextProvider client={client}>\n          <IntegrationsApp {...props} />\n        </ClientContextProvider>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nexport default IntegrationsEntry;\n","import { Schemas } from '../generated/OpenapiNotifications';\nimport { UserIntegration } from './Integration';\nimport { BaseNotificationRecipient } from './Recipient';\n\nexport type UUID = Schemas.UUID;\n\nexport interface EventType {\n  id: UUID;\n  applicationDisplayName: string;\n  eventTypeDisplayName: string;\n}\n\nexport interface Notification extends EventType {\n  actions?: Array<Action>;\n  useDefault?: boolean;\n}\n\nexport interface NotificationBehaviorGroup extends EventType {\n  readonly behaviors: ReadonlyArray<BehaviorGroup>;\n}\n\nexport type IntegrationRef = Pick<\n  UserIntegration,\n  'id' | 'name' | 'type' | 'isEnabled'\n>;\n\nexport interface DefaultNotificationBehavior {\n  actions: Array<Action>;\n}\n\nexport interface ActionBase {\n  type: NotificationType;\n}\n\nexport interface ActionIntegration extends ActionBase {\n  type: NotificationType.INTEGRATION;\n  integration: IntegrationRef;\n}\n\nexport interface ActionNotify extends ActionBase {\n  type: NotificationType.EMAIL_SUBSCRIPTION | NotificationType.DRAWER;\n  recipient: ReadonlyArray<BaseNotificationRecipient>;\n}\n\nexport type Action = ActionIntegration | ActionNotify;\n\nexport const isActionNotify = (action: Action): action is ActionNotify =>\n  action.type === NotificationType.EMAIL_SUBSCRIPTION ||\n  action.type === NotificationType.DRAWER;\n\nexport const isActionIntegration = (\n  action: Action\n): action is ActionIntegration => action.type === NotificationType.INTEGRATION;\n\nexport enum NotificationType {\n  EMAIL_SUBSCRIPTION = 'EMAIL_SUBSCRIPTION',\n  DRAWER = 'DRAWER',\n  INTEGRATION = 'INTEGRATION',\n}\n\nexport type Facet = Schemas.Facet;\n\nexport type LocalTime = Schemas.LocalTime;\n\nexport type ServerNotificationRequest = Schemas.EventType;\nexport type ServerNotificationResponse = Schemas.EventType;\n\nexport type BehaviorGroup = {\n  readonly id: UUID;\n  readonly actions: ReadonlyArray<Action>;\n  readonly events: ReadonlyArray<EventType>;\n  readonly bundleId: UUID;\n  readonly displayName: string;\n  readonly bundleName?: string;\n  readonly isDefault: boolean;\n};\n\nexport type NewBehaviorGroup = Partial<Pick<BehaviorGroup, 'id'>> &\n  Omit<BehaviorGroup, 'id'>;\n\nexport type BehaviorGroupRequest = Omit<\n  BehaviorGroup | NewBehaviorGroup,\n  'isDefault'\n>;\n\nexport type EmailSystemProperties = {\n  type: NotificationType.EMAIL_SUBSCRIPTION;\n  props: {\n    onlyAdmins: boolean;\n    ignorePreferences: false;\n    groupId: undefined | UUID;\n  };\n};\nexport type DrawerSystemProperties = {\n  type: NotificationType.DRAWER;\n  props: {\n    onlyAdmins: boolean;\n    groupId: undefined | UUID;\n    ignorePreferences: false;\n  };\n};\n\nexport type SystemProperties = EmailSystemProperties | DrawerSystemProperties;\n\nexport function isEmailSystemProperties(\n  properties: SystemProperties\n): properties is EmailSystemProperties {\n  return properties.type === NotificationType.EMAIL_SUBSCRIPTION;\n}\n\nexport function isDrawerSystemProperties(\n  properties: SystemProperties\n): properties is DrawerSystemProperties {\n  return properties.type === NotificationType.DRAWER;\n}\n\nconst getIntegrationIds = (\n  actions: ReadonlyArray<Action | undefined>\n): Array<UUID | undefined> => {\n  return actions\n    .map((action) => {\n      if (action === undefined) {\n        return [undefined];\n      }\n\n      if (action.type === NotificationType.INTEGRATION) {\n        return [action.integration.id];\n      } else {\n        return action.recipient.map((r) => r.integrationId);\n      }\n    })\n    .flat();\n};\n\nexport const areActionsEqual = (\n  actions1: ReadonlyArray<Action | undefined>,\n  actions2: ReadonlyArray<Action | undefined>\n): boolean => {\n  if (actions1.length !== actions2.length) {\n    return false;\n  }\n\n  const integrations1 = getIntegrationIds(actions1);\n  const integrations2 = getIntegrationIds(actions2);\n\n  if (integrations1.length !== integrations2.length) {\n    return false;\n  }\n\n  // Order matters here, no sorting.\n  return integrations1.every((val, index) => val === integrations2[index]);\n};\n","import { assertNever } from 'assert-never';\n\nimport { Schemas } from '../../generated/OpenapiIntegrations';\nimport {\n  CamelIntegrationType,\n  Integration,\n  IntegrationAnsible,\n  IntegrationBase,\n  IntegrationCamel,\n  IntegrationDrawer,\n  IntegrationEmailSubscription,\n  IntegrationHttp,\n  IntegrationType,\n  NewIntegration,\n  ServerIntegrationRequest,\n  ServerIntegrationResponse,\n  isCamelType,\n} from '../Integration';\n\ninterface ExternalCompositeTyped {\n  type: string;\n  sub_type?: string | null;\n}\n\nexport const getIntegrationType = (\n  serverIntegration: ExternalCompositeTyped\n): IntegrationType => {\n  for (const integration of Object.values(IntegrationType)) {\n    if (serverIntegration.sub_type) {\n      if (\n        integration ===\n        `${serverIntegration.type}:${serverIntegration.sub_type}`\n      ) {\n        return integration as IntegrationType;\n      }\n    } else if (integration === serverIntegration.type) {\n      return integration as IntegrationType;\n    }\n  }\n\n  throw new Error(\n    `Unexpected type: ${serverIntegration.type} with subtype: ${serverIntegration.sub_type}`\n  );\n};\n\nconst getEndpointType = (\n  type: IntegrationType\n): { type: Schemas.EndpointType; subType?: string } => {\n  const splitType = type.split(':', 2);\n  return {\n    type: splitType[0] as Schemas.EndpointType,\n    subType: splitType.length === 2 ? splitType[1] : undefined,\n  };\n};\n\ntype NotNullType = {\n  <T>(value: T | undefined | null): T | undefined;\n  <T>(value: T | undefined | null, defaultValue: T): T;\n};\n\nconst notNull: NotNullType = <T>(\n  value: T | undefined | null,\n  defaultValue?: T\n): T | undefined => (value === null ? defaultValue : value);\nconst toSecretToken = (\n  secretToken: string | undefined | null\n): string | undefined =>\n  secretToken === '' ? undefined : notNull(secretToken);\n\nconst toIntegrationWebhook = (\n  integrationBase: IntegrationBase<IntegrationType.WEBHOOK>,\n  properties?: Schemas.WebhookProperties\n): IntegrationHttp => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.GET,\n});\n\nconst toIntegrationAnsible = (\n  integrationBase: IntegrationBase<IntegrationType.ANSIBLE>,\n  properties?: Schemas.WebhookProperties\n): IntegrationAnsible => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  method: properties?.method ?? Schemas.HttpType.Enum.POST,\n});\n\nconst toIntegrationCamel = (\n  integrationBase: IntegrationBase<CamelIntegrationType>,\n  properties?: Schemas.CamelProperties\n): IntegrationCamel => ({\n  ...integrationBase,\n  url: properties?.url ?? '',\n  sslVerificationEnabled: !properties?.disable_ssl_verification ?? false,\n  secretToken: toSecretToken(properties?.secret_token),\n  basicAuth:\n    properties?.basic_authentication === null\n      ? undefined\n      : {\n          user: notNull(properties?.basic_authentication?.username, ''),\n          pass: notNull(properties?.basic_authentication?.password, ''),\n        },\n  extras: notNull(properties?.extras),\n});\n\nconst toIntegrationEmail = (\n  integrationBase: IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n  properties: Schemas.EmailSubscriptionProperties\n): IntegrationEmailSubscription => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nconst toIntegrationDrawer = (\n  integrationBase: IntegrationBase<IntegrationType.DRAWER>,\n  properties: Schemas.DrawerProperties\n): IntegrationDrawer => ({\n  ...integrationBase,\n  ignorePreferences: properties.ignore_preferences,\n  groupId: properties.group_id === null ? undefined : properties.group_id,\n  onlyAdmin: properties.only_admins,\n});\n\nexport const toIntegration = (\n  serverIntegration: ServerIntegrationResponse\n): Integration => {\n  const integrationBase: IntegrationBase<IntegrationType> = {\n    id: serverIntegration.id || '',\n    name: serverIntegration.name || '',\n    isEnabled: !!serverIntegration.enabled,\n    type: getIntegrationType(serverIntegration),\n    status: serverIntegration.status ?? 'UNKNOWN',\n    serverErrors: serverIntegration.server_errors ?? 0,\n  };\n\n  if (isCamelType(integrationBase.type)) {\n    return toIntegrationCamel(\n      integrationBase as IntegrationBase<CamelIntegrationType>,\n      serverIntegration.properties as Schemas.CamelProperties\n    );\n  }\n\n  switch (integrationBase.type) {\n    case IntegrationType.WEBHOOK:\n      return toIntegrationWebhook(\n        integrationBase as IntegrationBase<IntegrationType.WEBHOOK>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.ANSIBLE:\n      return toIntegrationAnsible(\n        integrationBase as IntegrationBase<IntegrationType.ANSIBLE>,\n        serverIntegration.properties as Schemas.WebhookProperties\n      );\n    case IntegrationType.EMAIL_SUBSCRIPTION:\n      return toIntegrationEmail(\n        integrationBase as IntegrationBase<IntegrationType.EMAIL_SUBSCRIPTION>,\n        serverIntegration.properties as Schemas.EmailSubscriptionProperties\n      );\n    case IntegrationType.DRAWER:\n      return toIntegrationDrawer(\n        integrationBase as IntegrationBase<IntegrationType.DRAWER>,\n        serverIntegration.properties as Schemas.DrawerProperties\n      );\n    default:\n      assertNever(integrationBase.type);\n  }\n};\n\nexport const toIntegrations = (\n  serverIntegrations: Array<ServerIntegrationResponse>\n): Array<Integration> => {\n  return serverIntegrations.map(toIntegration);\n};\n\ntype ServerIntegrationProperties =\n  | Schemas.EmailSubscriptionProperties\n  | Schemas.WebhookProperties\n  | Schemas.CamelProperties\n  | Schemas.DrawerProperties;\n\nexport const toIntegrationProperties = (\n  integration: Integration | NewIntegration\n): ServerIntegrationProperties => {\n  const type = integration.type;\n\n  if (isCamelType(type)) {\n    const integrationCamel: IntegrationCamel = integration as IntegrationCamel;\n    return {\n      url: integrationCamel.url,\n      disable_ssl_verification: !integrationCamel.sslVerificationEnabled,\n      secret_token: toSecretToken(integrationCamel.secretToken),\n      basic_authentication: integrationCamel.basicAuth\n        ? {\n            username: integrationCamel.basicAuth.user,\n            password: integrationCamel.basicAuth.pass,\n          }\n        : undefined,\n      extras: integrationCamel.extras,\n    };\n  }\n\n  switch (type) {\n    case IntegrationType.WEBHOOK: {\n      const integrationHttp: IntegrationHttp = integration as IntegrationHttp;\n      return {\n        url: integrationHttp.url,\n        method: integrationHttp.method,\n        disable_ssl_verification: !integrationHttp.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationHttp.secretToken),\n      };\n    }\n    case IntegrationType.ANSIBLE: {\n      const integrationAnsible = integration as IntegrationAnsible;\n      return {\n        url: integrationAnsible.url,\n        disable_ssl_verification: !integrationAnsible.sslVerificationEnabled,\n        secret_token: toSecretToken(integrationAnsible.secretToken),\n        method: integrationAnsible.method,\n      };\n    }\n    case IntegrationType.EMAIL_SUBSCRIPTION: {\n      const integrationEmail: IntegrationEmailSubscription =\n        integration as IntegrationEmailSubscription;\n      return {\n        only_admins: integrationEmail.onlyAdmin,\n        group_id: integrationEmail.groupId,\n        ignore_preferences: integrationEmail.ignorePreferences,\n      };\n    }\n    case IntegrationType.DRAWER: {\n      const integrationDrawer: IntegrationDrawer =\n        integration as IntegrationDrawer;\n      return {\n        only_admins: integrationDrawer.onlyAdmin,\n        group_id: integrationDrawer.groupId,\n        ignore_preferences: integrationDrawer.ignorePreferences,\n      };\n    }\n    default:\n      assertNever(type);\n  }\n};\n\nexport const toServerIntegrationRequest = (\n  integration: Integration | NewIntegration\n): ServerIntegrationRequest => {\n  const { type, subType } = getEndpointType(integration.type);\n  return {\n    id: integration.id,\n    name: integration.name,\n    enabled: integration.isEnabled,\n    type,\n    sub_type: subType,\n    description: '',\n    properties: toIntegrationProperties(integration),\n  };\n};\n"],"names":["activeCategory","props","rbac","server","isOrgAdmin","useApp","category","Object","values","Integration","includes","undefined","AppContext","value","RbacGroupContextProvider","NotificationsPortal","Bullseye","Spinner","size","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","getStore","locale","navigator","language","slice","messages","onError","console","log","Provider","ClientContextProvider","isActionNotify","action","type","NotificationType","EMAIL_SUBSCRIPTION","DRAWER","isActionIntegration","INTEGRATION","isEmailSystemProperties","properties","isDrawerSystemProperties","getIntegrationIds","actions","map","integration","id","recipient","r","integrationId","flat","areActionsEqual","actions1","actions2","length","integrations1","integrations2","every","val","index","getIntegrationType","serverIntegration","sub_type","Error","notNull","defaultValue","toSecretToken","secretToken","toIntegration","integrationBase","name","isEnabled","enabled","status","serverErrors","server_errors","url","sslVerificationEnabled","disable_ssl_verification","secret_token","basicAuth","basic_authentication","user","username","pass","password","extras","toIntegrationCamel","method","toIntegrationWebhook","toIntegrationAnsible","ignorePreferences","ignore_preferences","groupId","group_id","onlyAdmin","only_admins","toIntegrationDrawer","toIntegrations","serverIntegrations","toIntegrationProperties","integrationCamel","integrationHttp","integrationAnsible","integrationEmail","integrationDrawer","toServerIntegrationRequest","subType","splitType","split","getEndpointType","description"],"sourceRoot":""}